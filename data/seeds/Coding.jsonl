{"instruction": "Build a chatbot in Python.", "input": "", "output": "import random\n\n#GREETINGS\ngreetings  = [\"Hi\", \"Hey\", \"Hello\", \"Hi there\", \"What's up?\"]\n\n#PROMPTS\nprompts = [\"how may I help you?\", \"want to talk about something?\", \"What do you want to talk about?\"]\n\n#Program\ndef respond(message):\n    if any(greeting in message for greeting in greetings):\n        index = random.randint(0, len(prompts)-1)\n        return prompts[index]\n    return \"\"\n\n#Example test\nuser_message = \"Hey\"\nbot_response = respond(user_message)\nprint(bot_response) # What do you want to talk about?", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a chatbot in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n#GREETINGS\ngreetings  = [\"Hi\", \"Hey\", \"Hello\", \"Hi there\", \"What's up?\"]\n\n#PROMPTS\nprompts = [\"how may I help you?\", \"want to talk about something?\", \"What do you want to talk about?\"]\n\n#Program\ndef respond(message):\n    if any(greeting in message for greeting in greetings):\n        index = random.randint(0, len(prompts)-1)\n        return prompts[index]\n    return \"\"\n\n#Example test\nuser_message = \"Hey\"\nbot_response = respond(user_message)\nprint(bot_response) # What do you want to talk about?"}
{"instruction": "Design a hash table in Python", "input": "", "output": "# initialize size\nSIZE = 256\n\n# defining Node class\nclass Node:\n    def __init__(self, key, data):\n        self.key = key\n        self.data = data\n        self.next = None\n\n# defining HashTable\nclass HashTable:\n    def __init__(self):\n        self.table = [None]*SIZE\n\n    # hash function\n    def hash_function(self, key):\n        return key % SIZE\n\n    # insert data\n    def insert(self, key, data):\n        index = self.hash_function(key)\n\n        if self.table[index] is None:\n            self.table[index] = Node(key, data)\n        else:\n            temp_node = self.table[index]\n\n            while temp_node.next:\n                temp_node = temp_node.next\n\n            temp_node.next = Node(key, data)\n\n    # search data\n    def search(self, key):\n        index = self.hash_function(key)\n        if self.table[index] is None:\n            return \"No data found!\"\n        else:\n            temp_node = self.table[index]\n            while temp_node and temp_node.key != key:\n                temp_node = temp_node.next\n            if not temp_node:\n                return \"No data found!\"\n            else:\n                return temp_node.data\n\n    # get size\n    def get_size(self):\n        count = 0\n        for item in self.table:\n            if item:\n               count += 1\n            while item.next:\n                count += 1\n                item = item.next\n        return count", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a hash table in Python\n\n### Input:\n\n\n### Output:\n# initialize size\nSIZE = 256\n\n# defining Node class\nclass Node:\n    def __init__(self, key, data):\n        self.key = key\n        self.data = data\n        self.next = None\n\n# defining HashTable\nclass HashTable:\n    def __init__(self):\n        self.table = [None]*SIZE\n\n    # hash function\n    def hash_function(self, key):\n        return key % SIZE\n\n    # insert data\n    def insert(self, key, data):\n        index = self.hash_function(key)\n\n        if self.table[index] is None:\n            self.table[index] = Node(key, data)\n        else:\n            temp_node = self.table[index]\n\n            while temp_node.next:\n                temp_node = temp_node.next\n\n            temp_node.next = Node(key, data)\n\n    # search data\n    def search(self, key):\n        index = self.hash_function(key)\n        if self.table[index] is None:\n            return \"No data found!\"\n        else:\n            temp_node = self.table[index]\n            while temp_node and temp_node.key != key:\n                temp_node = temp_node.next\n            if not temp_node:\n                return \"No data found!\"\n            else:\n                return temp_node.data\n\n    # get size\n    def get_size(self):\n        count = 0\n        for item in self.table:\n            if item:\n               count += 1\n            while item.next:\n                count += 1\n                item = item.next\n        return count"}
{"instruction": "Create a minimum heap in python", "input": "", "output": "class MinHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n    def insert(self, item):\n        self.heap_list.append(item)\n        self.current_size += 1\n        self.fix_new_item()\n\n    def fix_new_item(self):\n        idx = self.current_size\n        while idx // 2 > 0:\n            if self.heap_list[idx] < self.heap_list[idx // 2]:\n                temp = self.heap_list[idx // 2]\n                self.heap_list[idx // 2] = self.heap_list[idx]\n                self.heap_list[idx] = temp\n            idx = idx // 2", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a minimum heap in python\n\n### Input:\n\n\n### Output:\nclass MinHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n    def insert(self, item):\n        self.heap_list.append(item)\n        self.current_size += 1\n        self.fix_new_item()\n\n    def fix_new_item(self):\n        idx = self.current_size\n        while idx // 2 > 0:\n            if self.heap_list[idx] < self.heap_list[idx // 2]:\n                temp = self.heap_list[idx // 2]\n                self.heap_list[idx // 2] = self.heap_list[idx]\n                self.heap_list[idx] = temp\n            idx = idx // 2"}
{"instruction": "Create a binary tree in Python.", "input": "", "output": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n    \n    def add_child(self, val):\n        if self.val:\n            if val < self.val:\n                if self.left is None:\n                    self.left = TreeNode(val)\n                else:\n                    self.left.add_child(val)\n            elif val > self.val:\n                if self.right is None:\n                    self.right = TreeNode(val)\n                else:\n                    self.right.add_child(val)\n        else:\n            self.val = val", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a binary tree in Python.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n    \n    def add_child(self, val):\n        if self.val:\n            if val < self.val:\n                if self.left is None:\n                    self.left = TreeNode(val)\n                else:\n                    self.left.add_child(val)\n            elif val > self.val:\n                if self.right is None:\n                    self.right = TreeNode(val)\n                else:\n                    self.right.add_child(val)\n        else:\n            self.val = val"}
{"instruction": "Create a memory game in Python.", "input": "", "output": "import random\n\n# Create the list of possible values\ncards = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"] * 4\n\n# Shuffle the cards\nrandom.shuffle(cards)\n\n# Create a variable to store the user's score\nuser_score = 0\n\n# Initialize the game\n# The user is shown a card, and asked if they remember what it is\nwhile cards:\n    current_card = cards.pop()\n    print(f\"What is the card? {current_card}\")\n    answer = input()\n\n    # Check the user's answer\n    if answer == current_card:\n        user_score += 1\n        print(\"Correct!\")\n    else:\n        print(\"Incorrect.\")\n        break\n\nprint(f\"Game over! Your score is {user_score}\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a memory game in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Create the list of possible values\ncards = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"] * 4\n\n# Shuffle the cards\nrandom.shuffle(cards)\n\n# Create a variable to store the user's score\nuser_score = 0\n\n# Initialize the game\n# The user is shown a card, and asked if they remember what it is\nwhile cards:\n    current_card = cards.pop()\n    print(f\"What is the card? {current_card}\")\n    answer = input()\n\n    # Check the user's answer\n    if answer == current_card:\n        user_score += 1\n        print(\"Correct!\")\n    else:\n        print(\"Incorrect.\")\n        break\n\nprint(f\"Game over! Your score is {user_score}\")"}
{"instruction": "Create a web scraper in Python.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n\n# function to scrape a page for information\ndef scrape_page(url): \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    info = soup.find_all('div', class_='info') \n    for item in info:\n        headline = item.find('span', class_='headline') \n        print(headline.text) \n\n# main function to scrape multiple pages\ndef main(): \n    urls = [\n        'http://example.com/page1',\n        'http://example.com/page2',\n        'http://example.com/page3'\n        ] \n    for url in urls:\n        scrape_page(url)\n\n# call the main function \nif __name__ == '__main__': \n    main()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n\n# function to scrape a page for information\ndef scrape_page(url): \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    info = soup.find_all('div', class_='info') \n    for item in info:\n        headline = item.find('span', class_='headline') \n        print(headline.text) \n\n# main function to scrape multiple pages\ndef main(): \n    urls = [\n        'http://example.com/page1',\n        'http://example.com/page2',\n        'http://example.com/page3'\n        ] \n    for url in urls:\n        scrape_page(url)\n\n# call the main function \nif __name__ == '__main__': \n    main()"}
{"instruction": "Create a web crawler in Python.", "input": "", "output": "# import necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef crawler(max_pages):\n    page = 1\n    while page <= max_pages:\n        # fetch the page\n        url = \"https://www.example.com/?page=\" + str(page)\n        code = requests.get(url)\n        plain = code.text\n        # convert plain text to beautiful soup object\n        soup = BeautifulSoup(plain, \"html.parser\")\n\n        for link in soup.findAll('a', {'class': 'post_title'}):\n            # extract \"href\" attribute of \"<a>\" tag \n            href = link.get('href')\n            # print the extracted link\n            print(href)\n\n        # increase page number\n        page += 1\n\n# start the crawler\ncrawler(5)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python.\n\n### Input:\n\n\n### Output:\n# import necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef crawler(max_pages):\n    page = 1\n    while page <= max_pages:\n        # fetch the page\n        url = \"https://www.example.com/?page=\" + str(page)\n        code = requests.get(url)\n        plain = code.text\n        # convert plain text to beautiful soup object\n        soup = BeautifulSoup(plain, \"html.parser\")\n\n        for link in soup.findAll('a', {'class': 'post_title'}):\n            # extract \"href\" attribute of \"<a>\" tag \n            href = link.get('href')\n            # print the extracted link\n            print(href)\n\n        # increase page number\n        page += 1\n\n# start the crawler\ncrawler(5)"}
{"instruction": "Create a text editor in Python.", "input": "", "output": "import tkinter as tk\n\nroot = tk.Tk()\n\ntext_editor = tk.Text(root)\n\n# create and add scrollbar\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=tk.RIGHT, fill=tk.Y)\ntext_editor.config(yscrollcommand=scrollbar.set)\nscrollbar.config(command=text_editor.yview)\n\n# add functions to widgets\ntext_editor.pack(fill=tk.BOTH, expand=True)\n\n# create a menu and add commands\nmenu_bar = tk.Menu(root)\n\n# add menu bars\nroot.config(menu=menu_bar)\n\ndef quit():\n    root.destroy()\n\n# set menu bar items\nfile_menu= tk.Menu(menu_bar, tearoff=0)\nfile_menu.add_command(label=\"Open\", command=lambda: open_file())\nfile_menu.add_command(label=\"Save\", command=lambda: save_file())\nfile_menu.add_command(label=\"Quit\", command=lambda: quit())\n\n# add menu drop downs\nmenu_bar.add_cascade(label=\"File\", menu=file_menu)\n\n# create a file open dialog\ndef open_file():\n    file = tk.filedialog.askopenfile(mode=\"r\")\n    if file != None:\n        contents = file.read()\n        text_editor.insert('1.0', contents)\n\n# create a file save dialog\ndef save_file():\n    file = tk.filedialog.asksaveasfile(mode=\"w\")\n    if file != None:\n        data = text_editor.get('1.0', tk.END)\n        file.write(data)\n\nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text editor in Python.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\nroot = tk.Tk()\n\ntext_editor = tk.Text(root)\n\n# create and add scrollbar\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=tk.RIGHT, fill=tk.Y)\ntext_editor.config(yscrollcommand=scrollbar.set)\nscrollbar.config(command=text_editor.yview)\n\n# add functions to widgets\ntext_editor.pack(fill=tk.BOTH, expand=True)\n\n# create a menu and add commands\nmenu_bar = tk.Menu(root)\n\n# add menu bars\nroot.config(menu=menu_bar)\n\ndef quit():\n    root.destroy()\n\n# set menu bar items\nfile_menu= tk.Menu(menu_bar, tearoff=0)\nfile_menu.add_command(label=\"Open\", command=lambda: open_file())\nfile_menu.add_command(label=\"Save\", command=lambda: save_file())\nfile_menu.add_command(label=\"Quit\", command=lambda: quit())\n\n# add menu drop downs\nmenu_bar.add_cascade(label=\"File\", menu=file_menu)\n\n# create a file open dialog\ndef open_file():\n    file = tk.filedialog.askopenfile(mode=\"r\")\n    if file != None:\n        contents = file.read()\n        text_editor.insert('1.0', contents)\n\n# create a file save dialog\ndef save_file():\n    file = tk.filedialog.asksaveasfile(mode=\"w\")\n    if file != None:\n        data = text_editor.get('1.0', tk.END)\n        file.write(data)\n\nroot.mainloop()"}
{"instruction": "Design a chatbot agent in Python.", "input": "", "output": "class Chatbot:\n    def __init__(self, name):\n        self.name = name\n \n    def greet(self):\n        print(\"Hey there! I'm {}. What's your name?\".format(self.name))\n \n    def handle_input(self, user_input):\n        if user_input == \"Hi\":\n            print(\"Hi there! What can I do for you?\")\n        elif user_input == \"Bye\":\n            print(\"Bye! Have a great day!\")\n        else:\n            print(\"I'm sorry, I don't understand.\")\n \nbot = Chatbot(\"Python Bot\")\nbot.greet()\nbot.handle_input(\"Hi\")\nbot.handle_input(\"Bye\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chatbot agent in Python.\n\n### Input:\n\n\n### Output:\nclass Chatbot:\n    def __init__(self, name):\n        self.name = name\n \n    def greet(self):\n        print(\"Hey there! I'm {}. What's your name?\".format(self.name))\n \n    def handle_input(self, user_input):\n        if user_input == \"Hi\":\n            print(\"Hi there! What can I do for you?\")\n        elif user_input == \"Bye\":\n            print(\"Bye! Have a great day!\")\n        else:\n            print(\"I'm sorry, I don't understand.\")\n \nbot = Chatbot(\"Python Bot\")\nbot.greet()\nbot.handle_input(\"Hi\")\nbot.handle_input(\"Bye\")"}
{"instruction": "Implement a linked list in Python.", "input": "", "output": "class Node:\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass LinkedList:\n  def __init__(self):\n    self.head = None\n    \n  def prepend(self, data):\n    new_node = Node(data)\n    new_node.next = self.head\n    self.head = new_node\n    \n  def append(self, data):\n    new_node = Node(data)\n    if self.head is None:\n      self.head = new_node\n      return\n    last_node = self.head\n    while last_node.next:\n      last_node = last_node.next\n    last_node.next = new_node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a linked list in Python.\n\n### Input:\n\n\n### Output:\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass LinkedList:\n  def __init__(self):\n    self.head = None\n    \n  def prepend(self, data):\n    new_node = Node(data)\n    new_node.next = self.head\n    self.head = new_node\n    \n  def append(self, data):\n    new_node = Node(data)\n    if self.head is None:\n      self.head = new_node\n      return\n    last_node = self.head\n    while last_node.next:\n      last_node = last_node.next\n    last_node.next = new_node"}
{"instruction": "Implement a linked list in Python.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data \n        self.next = None \n  \n# Linked List class \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    # Inserts a new node at the beginning \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    # Prints the linked list. \n    def print_list(self): \n        temp = self.head \n        while temp: \n            print(temp.data) \n            temp = temp.next\n\nllist = LinkedList() \nllist.push(1) \nllist.push(2) \nllist.push(3) \nllist.push(4) \n\nllist.print_list()  # 4 3 2 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a linked list in Python.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data \n        self.next = None \n  \n# Linked List class \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    # Inserts a new node at the beginning \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    # Prints the linked list. \n    def print_list(self): \n        temp = self.head \n        while temp: \n            print(temp.data) \n            temp = temp.next\n\nllist = LinkedList() \nllist.push(1) \nllist.push(2) \nllist.push(3) \nllist.push(4) \n\nllist.print_list()  # 4 3 2 1"}
{"instruction": "Create a code selector for Python.", "input": "", "output": "import tkinter as tk\n\n#Create root window\nwindow = tk.Tk()\nwindow.title('Python Code Selector')\n\n#Create a selection frame\nselection_frame = tk.Frame(window, bd=2, relief=tk.SUNKEN)\nselection_frame.pack(fill = tk.X)\n\nlanguages = ['Python 2.7', 'Python 3.4', 'Python 3.6', 'Python 3.7']\n\n#Create a variable to store current language\nlanguage_var = tk.StringVar(selection_frame)\nlanguage_var.set(languages[0])\n\n#Create a pull down menu\nlanguage_dropdown = tk.OptionMenu(selection_frame, language_var, *languages)\nlanguage_dropdown.pack(side=tk.LEFT)\n\n#Create a button to accept the selection\naccept_button = tk.Button(selection_frame, text='Accept', command=accept_selection)\naccept_button.pack(side=tk.RIGHT)\n\n#Create a function to accept the selection\ndef accept_selection():\n\tprint(language_var.get())\n\nwindow.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code selector for Python.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\n#Create root window\nwindow = tk.Tk()\nwindow.title('Python Code Selector')\n\n#Create a selection frame\nselection_frame = tk.Frame(window, bd=2, relief=tk.SUNKEN)\nselection_frame.pack(fill = tk.X)\n\nlanguages = ['Python 2.7', 'Python 3.4', 'Python 3.6', 'Python 3.7']\n\n#Create a variable to store current language\nlanguage_var = tk.StringVar(selection_frame)\nlanguage_var.set(languages[0])\n\n#Create a pull down menu\nlanguage_dropdown = tk.OptionMenu(selection_frame, language_var, *languages)\nlanguage_dropdown.pack(side=tk.LEFT)\n\n#Create a button to accept the selection\naccept_button = tk.Button(selection_frame, text='Accept', command=accept_selection)\naccept_button.pack(side=tk.RIGHT)\n\n#Create a function to accept the selection\ndef accept_selection():\n\tprint(language_var.get())\n\nwindow.mainloop()"}
{"instruction": "Create a TicTacToe game in Python.", "input": "", "output": "class TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a TicTacToe game in Python.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False"}
{"instruction": "Generate a Hangman game in Python.", "input": "", "output": "import random\n\n# Set the number of turns\nMAX_GUESSES = 5\n\n# Create an empty list that will contain the guessed letters\nguessed_letters = []\n\n# Welcome the user\nprint(\"Welcome to Hangman!\")\n\n# Generate a random word\nwith open(\"words.txt\", \"r\") as f:\n    words = f.read().splitlines()\nword = random.choice(words)\n\n# Create a list for the hidden word\nhidden_word = [\"_\" for i in range(len(word))]\n\n# Main game loop\nfor i in range(MAX_GUESSES):\n    # Print the current state of the game\n    print(\"\\nTurn {}\".format(i+1))\n    print(\" \".join(hidden_word))\n    print(\"Letters guessed: {}\".format(\"\".join(guessed_letters)))\n    \n    # Get a guess from the user\n    guess = input(\"Enter a letter: \")\n    guessed_letters.append(guess)\n    \n    # Update the hidden_word with the guessed letter\n    if guess in word:\n        indices = [i for i, x in enumerate(word) if x == guess]\n        for index in indices:\n            hidden_word[index] = guess\n    \n    # Check if the user won\n    if \"_\" not in hidden_word:\n        print(\"You Win!\")\n        break\n\n# Check for a loss\nif \"_\" in hidden_word:\n    print(\"You Lose! The word was {}.\".format(word))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Hangman game in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Set the number of turns\nMAX_GUESSES = 5\n\n# Create an empty list that will contain the guessed letters\nguessed_letters = []\n\n# Welcome the user\nprint(\"Welcome to Hangman!\")\n\n# Generate a random word\nwith open(\"words.txt\", \"r\") as f:\n    words = f.read().splitlines()\nword = random.choice(words)\n\n# Create a list for the hidden word\nhidden_word = [\"_\" for i in range(len(word))]\n\n# Main game loop\nfor i in range(MAX_GUESSES):\n    # Print the current state of the game\n    print(\"\\nTurn {}\".format(i+1))\n    print(\" \".join(hidden_word))\n    print(\"Letters guessed: {}\".format(\"\".join(guessed_letters)))\n    \n    # Get a guess from the user\n    guess = input(\"Enter a letter: \")\n    guessed_letters.append(guess)\n    \n    # Update the hidden_word with the guessed letter\n    if guess in word:\n        indices = [i for i, x in enumerate(word) if x == guess]\n        for index in indices:\n            hidden_word[index] = guess\n    \n    # Check if the user won\n    if \"_\" not in hidden_word:\n        print(\"You Win!\")\n        break\n\n# Check for a loss\nif \"_\" in hidden_word:\n    print(\"You Lose! The word was {}.\".format(word))"}
{"instruction": "Explain what is a closure in Python", "input": "", "output": "A closure in Python is a record storing a function and a surrounding environment. A closure allows a function to access and modify the local variables that were defined in the environment where the function was defined, even after the original environment no longer exists. In other words, a closure allows you to retain the state of a function even after it has returned from execution. Closures can be used to create objects with private variables, as any variables declared within a closure are private and inaccessible from outside the closure. This is a powerful tool for encapsulation, allowing for easier management and testing of code.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain what is a closure in Python\n\n### Input:\n\n\n### Output:\nA closure in Python is a record storing a function and a surrounding environment. A closure allows a function to access and modify the local variables that were defined in the environment where the function was defined, even after the original environment no longer exists. In other words, a closure allows you to retain the state of a function even after it has returned from execution. Closures can be used to create objects with private variables, as any variables declared within a closure are private and inaccessible from outside the closure. This is a powerful tool for encapsulation, allowing for easier management and testing of code."}
{"instruction": "Explain Python's Decorator pattern.", "input": "", "output": "Python's Decorator pattern is a design pattern which is used to add extra functionality in an existing object without having to alter its structure. It provides a flexible alternative to subclassing for extending functionality. A decorator is a callable object that takes another function as argument (the decorated function). The decorator may perform some processing with the decorated function, and then return it or replace it with another function or callable object. Decorators are usually used as a way to modify functions that you want to keep their original functionality, but add in some extra behavior at the same time. Decorators can also be used to add functionality to classes or to add data to an instance of a class.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain Python's Decorator pattern.\n\n### Input:\n\n\n### Output:\nPython's Decorator pattern is a design pattern which is used to add extra functionality in an existing object without having to alter its structure. It provides a flexible alternative to subclassing for extending functionality. A decorator is a callable object that takes another function as argument (the decorated function). The decorator may perform some processing with the decorated function, and then return it or replace it with another function or callable object. Decorators are usually used as a way to modify functions that you want to keep their original functionality, but add in some extra behavior at the same time. Decorators can also be used to add functionality to classes or to add data to an instance of a class."}
{"instruction": "Create a search engine using Python", "input": "", "output": "#import the necessary packages\nfrom bs4 import BeautifulSoup\nfrom requests import get\n\n#function to scrape data\ndef scrape_data(url): \n    response = get(url)\n    soup = BeautifulSoup(response.text, \"html.parser\") \n    return soup\n\n#function to search data\ndef search_data(search_query): \n    #specify the base URL\n    base_url = \"https://www.example.com/search?q=\"\n    search_query = search_query.replace(\" \", \"+\") \n\n    #generate the complete URL\n    complete_url = base_url + search_query\n    #extract the data\n    soup = scrape_data(complete_url) \n    results = soup.find_all('div', class_='result') \n\n    #display the results\n    print(\"Showing Results For: \" + search_query) \n    print(\"=================================\")\n\n    #search through the results \n    for result in results:\n        print(result.text)\n\n#sample search query\nsearch_query = \"machine learning\"\n\nsearch_data(search_query)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search engine using Python\n\n### Input:\n\n\n### Output:\n#import the necessary packages\nfrom bs4 import BeautifulSoup\nfrom requests import get\n\n#function to scrape data\ndef scrape_data(url): \n    response = get(url)\n    soup = BeautifulSoup(response.text, \"html.parser\") \n    return soup\n\n#function to search data\ndef search_data(search_query): \n    #specify the base URL\n    base_url = \"https://www.example.com/search?q=\"\n    search_query = search_query.replace(\" \", \"+\") \n\n    #generate the complete URL\n    complete_url = base_url + search_query\n    #extract the data\n    soup = scrape_data(complete_url) \n    results = soup.find_all('div', class_='result') \n\n    #display the results\n    print(\"Showing Results For: \" + search_query) \n    print(\"=================================\")\n\n    #search through the results \n    for result in results:\n        print(result.text)\n\n#sample search query\nsearch_query = \"machine learning\"\n\nsearch_data(search_query)"}
{"instruction": "Create a Tic-tac-toe game in Python.", "input": "", "output": "import random \n  \n# Function to draw tic-tac-toe board \ndef drawBoard(board): \n    print(\"--- --- ---\")\n    print(\"| \" + board[0][0] + \" | \" + board[0][1] + \" | \" + board[0][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[1][0] + \" | \" + board[1][1] + \" | \" + board[1][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[2][0] + \" | \" + board[2][1] + \" | \" + board[2][2] + \" |\")\n    print(\"--- --- ---\") \n  \n# Function to check if any player has won horizontally or vertically    \ndef checkWin(board): \n    # Win Horizontally \n    for x in range(0, 3): \n        if (board[x][0] == board[x][1] and board[x][1] == board[x][2] and board[x][0] != ' '): \n            return board[x][0];", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Tic-tac-toe game in Python.\n\n### Input:\n\n\n### Output:\nimport random \n  \n# Function to draw tic-tac-toe board \ndef drawBoard(board): \n    print(\"--- --- ---\")\n    print(\"| \" + board[0][0] + \" | \" + board[0][1] + \" | \" + board[0][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[1][0] + \" | \" + board[1][1] + \" | \" + board[1][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[2][0] + \" | \" + board[2][1] + \" | \" + board[2][2] + \" |\")\n    print(\"--- --- ---\") \n  \n# Function to check if any player has won horizontally or vertically    \ndef checkWin(board): \n    # Win Horizontally \n    for x in range(0, 3): \n        if (board[x][0] == board[x][1] and board[x][1] == board[x][2] and board[x][0] != ' '): \n            return board[x][0];"}
{"instruction": "Implement a spell checker in Python.", "input": "", "output": "import re\nimport collections\n\ndef words(text): \n    return re.findall('[a-z]+', text.lower()) \n\ndef train(features):\n    model = collections.defaultdict(lambda: 1)\n    for f in features:\n        model[f] += 1\n    return model\n\nNWORDS = train(words(open('big.txt').read()))\n\ndef edits1(word):\n    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    deletes    = [a + b[1:] for a, b in s if b]\n    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]\n    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]\n    inserts    = [a + c + b     for a, b in s for c in alphabet]\n    return set(deletes + transposes + replaces + inserts)\n\ndef known_edits2(word):\n    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)\n\ndef known(words): \n    return set(w for w in words if w in NWORDS)\n\ndef correct(word):\n    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]\n    return max(candidates, key=NWORDS.get)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a spell checker in Python.\n\n### Input:\n\n\n### Output:\nimport re\nimport collections\n\ndef words(text): \n    return re.findall('[a-z]+', text.lower()) \n\ndef train(features):\n    model = collections.defaultdict(lambda: 1)\n    for f in features:\n        model[f] += 1\n    return model\n\nNWORDS = train(words(open('big.txt').read()))\n\ndef edits1(word):\n    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    deletes    = [a + b[1:] for a, b in s if b]\n    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]\n    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]\n    inserts    = [a + c + b     for a, b in s for c in alphabet]\n    return set(deletes + transposes + replaces + inserts)\n\ndef known_edits2(word):\n    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)\n\ndef known(words): \n    return set(w for w in words if w in NWORDS)\n\ndef correct(word):\n    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]\n    return max(candidates, key=NWORDS.get)"}
{"instruction": "Create a singly linked list in python", "input": "", "output": "class Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\nclass LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def append(self, data):\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n            return\n        node = self.head\n        while node.next is not None:\n            node = node.next\n        node.next = new_node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a singly linked list in python\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\nclass LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def append(self, data):\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n            return\n        node = self.head\n        while node.next is not None:\n            node = node.next\n        node.next = new_node"}
{"instruction": "Create a Python class to send emails.", "input": "", "output": "import smtplib\n\nclass Emailer:\n    def __init__(self, server, email, password):\n        self.server = smtplib.SMTP(server)\n        self.email = email\n        self.password = password\n        self.server.starttls()\n        self.server.login(self.email, self.password)\n\n    def send_email(self, recipient, message):\n        self.server.sendmail(\n            self.email,\n            recipient,\n            message\n        )\n        self.server.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to send emails.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\nclass Emailer:\n    def __init__(self, server, email, password):\n        self.server = smtplib.SMTP(server)\n        self.email = email\n        self.password = password\n        self.server.starttls()\n        self.server.login(self.email, self.password)\n\n    def send_email(self, recipient, message):\n        self.server.sendmail(\n            self.email,\n            recipient,\n            message\n        )\n        self.server.quit()"}
{"instruction": "Compare and contrast Java and Python.", "input": "", "output": "Java and Python are two of the most popular programming languages in the world. Java is a statically-typed, object-oriented language, while Python is a dynamically-typed, interpreted language. Java programs tend to be faster than Python programs as it runs directly on the hardware platform and sacrifices flexibility for speed. Python is easier to learn and has a larger number of libraries, making it more versatile and simpler to write programs. However, due to the lack of performance optimization, Python is less efficient than Java.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare and contrast Java and Python.\n\n### Input:\n\n\n### Output:\nJava and Python are two of the most popular programming languages in the world. Java is a statically-typed, object-oriented language, while Python is a dynamically-typed, interpreted language. Java programs tend to be faster than Python programs as it runs directly on the hardware platform and sacrifices flexibility for speed. Python is easier to learn and has a larger number of libraries, making it more versatile and simpler to write programs. However, due to the lack of performance optimization, Python is less efficient than Java."}
{"instruction": "Implement a priority queue in Python.", "input": "", "output": "from queue import PriorityQueue\n \nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n \n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n \n    # for checking if the queue is empty\n    def isEmpty(self):\n        return len(self.queue) == []\n \n    # for inserting an element in the queue\n    def insert(self, data):\n        self.queue.append(data)\n \n    # for popping an element based on Priority\n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n \nif __name__ == '__main__':\n    myQueue = PriorityQueue()\n    myQueue.insert(12)\n    myQueue.insert(1)\n    myQueue.insert(14)\n    myQueue.insert(7)\n    print(myQueue)\n    while not myQueue.isEmpty():\n        print(myQueue.delete())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a priority queue in Python.\n\n### Input:\n\n\n### Output:\nfrom queue import PriorityQueue\n \nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n \n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n \n    # for checking if the queue is empty\n    def isEmpty(self):\n        return len(self.queue) == []\n \n    # for inserting an element in the queue\n    def insert(self, data):\n        self.queue.append(data)\n \n    # for popping an element based on Priority\n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n \nif __name__ == '__main__':\n    myQueue = PriorityQueue()\n    myQueue.insert(12)\n    myQueue.insert(1)\n    myQueue.insert(14)\n    myQueue.insert(7)\n    print(myQueue)\n    while not myQueue.isEmpty():\n        print(myQueue.delete())"}
{"instruction": "Develop a library for text annotation.", "input": "", "output": "\"\"\"\nThis is a Python library for text annotation.\n \nIt provides users with a set of tools to extract, parse and analyze text.\n \nThe library can be used to annotate texts by adding tags, keywords, categories and other labels to them.\n \nIt also provides tools to segment and classify texts into different categories.\n \nText annotation is useful for a variety of tasks such as sentiment analysis, text summarization, named entity recognition and text classification.\n\"\"\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a library for text annotation.\n\n### Input:\n\n\n### Output:\n\"\"\"\nThis is a Python library for text annotation.\n \nIt provides users with a set of tools to extract, parse and analyze text.\n \nThe library can be used to annotate texts by adding tags, keywords, categories and other labels to them.\n \nIt also provides tools to segment and classify texts into different categories.\n \nText annotation is useful for a variety of tasks such as sentiment analysis, text summarization, named entity recognition and text classification.\n\"\"\""}
{"instruction": "Create a GUI in Python with 4 buttons.", "input": "", "output": "import tkinter\n\nroot = tkinter.Tk()\nframe = tkinter.Frame(root)\nframe.pack()\n\nbutton1 = tkinter.Button(frame, text = \"Button 1\", fg = \"red\")\nbutton2 = tkinter.Button(frame, text = \"Button 2\", fg = \"blue\")\nbutton3 = tkinter.Button(frame, text = \"Button 3\", fg = \"green\")\nbutton4 = tkinter.Button(frame, text = \"Button 4\", fg = \"yellow\")\n\nbutton1.pack(side = tkinter.LEFT)\nbutton2.pack(side = tkinter.LEFT)\nbutton3.pack(side = tkinter.LEFT)\nbutton4.pack(side = tkinter.LEFT)\n\nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI in Python with 4 buttons.\n\n### Input:\n\n\n### Output:\nimport tkinter\n\nroot = tkinter.Tk()\nframe = tkinter.Frame(root)\nframe.pack()\n\nbutton1 = tkinter.Button(frame, text = \"Button 1\", fg = \"red\")\nbutton2 = tkinter.Button(frame, text = \"Button 2\", fg = \"blue\")\nbutton3 = tkinter.Button(frame, text = \"Button 3\", fg = \"green\")\nbutton4 = tkinter.Button(frame, text = \"Button 4\", fg = \"yellow\")\n\nbutton1.pack(side = tkinter.LEFT)\nbutton2.pack(side = tkinter.LEFT)\nbutton3.pack(side = tkinter.LEFT)\nbutton4.pack(side = tkinter.LEFT)\n\nroot.mainloop()"}
{"instruction": "Create a text-based game using Python.", "input": "", "output": "# Game setup\nname = input(\"What is your name? \")\nprint(\"Welcome, \" + name + \"!\")\n\n# Main loop\nwhile True:\n\n    # Get player input\n    command = input(\"What would you like to do? \")\n\n    # Execute command\n    if command == \"go north\":\n        print(\"You head north.\")\n    elif command == \"go east\":\n        print(\"You head east.\")\n    elif command == \"go south\":\n        print(\"You head south.\")\n    elif command == \"go west\":\n        print(\"You head west.\")\n    elif command == \"quit\":\n        print(\"Goodbye, \" + name + \"!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based game using Python.\n\n### Input:\n\n\n### Output:\n# Game setup\nname = input(\"What is your name? \")\nprint(\"Welcome, \" + name + \"!\")\n\n# Main loop\nwhile True:\n\n    # Get player input\n    command = input(\"What would you like to do? \")\n\n    # Execute command\n    if command == \"go north\":\n        print(\"You head north.\")\n    elif command == \"go east\":\n        print(\"You head east.\")\n    elif command == \"go south\":\n        print(\"You head south.\")\n    elif command == \"go west\":\n        print(\"You head west.\")\n    elif command == \"quit\":\n        print(\"Goodbye, \" + name + \"!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")"}
{"instruction": "Explain how hash tables work in Python.", "input": "", "output": "Hash tables (also called hash maps) are Python data structures used to store key-value pairs. A hash table uses a hash function to compute the index of an item stored in the table, and then uses this index to store and quickly retrieve the item. The hash function takes the key and generates a value called a hash(or index). This hash is used to store the item in the corresponding position in the hash table. The item can then be quickly accessed by providing the key to the hash table.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain how hash tables work in Python.\n\n### Input:\n\n\n### Output:\nHash tables (also called hash maps) are Python data structures used to store key-value pairs. A hash table uses a hash function to compute the index of an item stored in the table, and then uses this index to store and quickly retrieve the item. The hash function takes the key and generates a value called a hash(or index). This hash is used to store the item in the corresponding position in the hash table. The item can then be quickly accessed by providing the key to the hash table."}
{"instruction": "Explain the purpose of a list in Python", "input": "", "output": "A list in Python is a data structure used to store a collection of elements, each of which may be a different data type. They are like arrays in other languages, but offer different and more powerful features, such as the ability to have uneven lengths and different data types in the same list. Lists are mutable, meaning that elements can be added, removed or changed after creation. They also support various operations such as indexing, slicing, in-place list modification, as well as various methods for searching and sorting.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the purpose of a list in Python\n\n### Input:\n\n\n### Output:\nA list in Python is a data structure used to store a collection of elements, each of which may be a different data type. They are like arrays in other languages, but offer different and more powerful features, such as the ability to have uneven lengths and different data types in the same list. Lists are mutable, meaning that elements can be added, removed or changed after creation. They also support various operations such as indexing, slicing, in-place list modification, as well as various methods for searching and sorting."}
{"instruction": "Design a Python module to act as a set.", "input": "", "output": "class UniqueSet:\n    def __init__(self):\n        self.__elements = {}\n    \n    def add(self, element):\n        if element not in self.__elements:\n            self.__elements[element] = 1\n        else:\n            return\n    \n    def remove(self, element):\n        if element in self.__elements:\n            del self.__elements[element]\n        else:\n            return\n    \n    def contains(self, element):\n        if element in self.__elements:\n            return True\n        else:\n            return False\n    \n    def size(self):\n        return len(self.__elements)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python module to act as a set.\n\n### Input:\n\n\n### Output:\nclass UniqueSet:\n    def __init__(self):\n        self.__elements = {}\n    \n    def add(self, element):\n        if element not in self.__elements:\n            self.__elements[element] = 1\n        else:\n            return\n    \n    def remove(self, element):\n        if element in self.__elements:\n            del self.__elements[element]\n        else:\n            return\n    \n    def contains(self, element):\n        if element in self.__elements:\n            return True\n        else:\n            return False\n    \n    def size(self):\n        return len(self.__elements)"}
{"instruction": "Create a game such as hangman in Python", "input": "", "output": "# This is necessary to display the game\nimport turtle\n\n# Set some necessary variables\nword = “hangman”\nhangman_board = [ “——————-“,\n                “|      |”,\n                “|       ”,\n                “|      ”,\n                “|      ”,\n                “|      ”,\n                “——————-“]\n\n# Create a turtle canvas\ncanvas = turtle.Screen()\n\n# Define functions for printing the Hangman board\ndef draw_hangman(hangman_board):\nflower = turtle.Turtle()\nflower.speed(0)\nfor piece in hangman_board:\n    flower.hideturtle()\n    flower.penup()\n    x = -100\n    y = 180\n    flower.setpos(x,y)\n    flower.write(piece, font=('Arial', 27, 'normal'))\n    y = y - 50\n    flower.setpos(x,y)\n\n# Print the initial board\ndraw_hangman(hangman_board)\n\n# Get user input and update the board\nwhile word != “”:\n    guess = input(“Guess a letter: ”)\n    if guess in word:\n\t    print(“That letter is in the word!”)\n\telse:\n\t   print(“That letter is not in the word!”)\n\n\tword = word.replace(guess,””)\n\nprint(“You have guessed the word. You have won!”)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game such as hangman in Python\n\n### Input:\n\n\n### Output:\n# This is necessary to display the game\nimport turtle\n\n# Set some necessary variables\nword = “hangman”\nhangman_board = [ “——————-“,\n                “|      |”,\n                “|       ”,\n                “|      ”,\n                “|      ”,\n                “|      ”,\n                “——————-“]\n\n# Create a turtle canvas\ncanvas = turtle.Screen()\n\n# Define functions for printing the Hangman board\ndef draw_hangman(hangman_board):\nflower = turtle.Turtle()\nflower.speed(0)\nfor piece in hangman_board:\n    flower.hideturtle()\n    flower.penup()\n    x = -100\n    y = 180\n    flower.setpos(x,y)\n    flower.write(piece, font=('Arial', 27, 'normal'))\n    y = y - 50\n    flower.setpos(x,y)\n\n# Print the initial board\ndraw_hangman(hangman_board)\n\n# Get user input and update the board\nwhile word != “”:\n    guess = input(“Guess a letter: ”)\n    if guess in word:\n\t    print(“That letter is in the word!”)\n\telse:\n\t   print(“That letter is not in the word!”)\n\n\tword = word.replace(guess,””)\n\nprint(“You have guessed the word. You have won!”)"}
{"instruction": "Create a Python script to send an email.", "input": "", "output": "import smtplib\n\ndef send_email(sender, recipient, subject, message):\n    # set up the audience and message\n    message = \"\"\"\\\n\nFrom: %s\nTo: %s\nSubject: %s\n\n%s\n\"\"\" % (sender, recipient, subject, message)\n\n    # set up the SMTP connection and send the message\n    session = smtplib.SMTP('smtp.example.com', 25)\n    session.login(\"sender_username\", \"sender_password\")\n    session.sendmail(sender, recipient, message)\n    session.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to send an email.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\ndef send_email(sender, recipient, subject, message):\n    # set up the audience and message\n    message = \"\"\"\\\n\nFrom: %s\nTo: %s\nSubject: %s\n\n%s\n\"\"\" % (sender, recipient, subject, message)\n\n    # set up the SMTP connection and send the message\n    session = smtplib.SMTP('smtp.example.com', 25)\n    session.login(\"sender_username\", \"sender_password\")\n    session.sendmail(sender, recipient, message)\n    session.quit()"}
{"instruction": "Create a stack data structure in Python.", "input": "", "output": "class Stack:\n \n    def __init__(self):\n        self.stack = []\n \n    # Add to the top of stack\n    def push(self, data):\n        self.stack.append(data)\n \n    # Remove from the top of stack\n    def pop(self):\n        if self.stack:\n            return self.stack.pop()\n \n    # Peek top element\n    def peek(self):\n        return self.stack[-1]\n \n    # Check if stack is empty\n    def is_empty(self):\n        return not bool(self.stack)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a stack data structure in Python.\n\n### Input:\n\n\n### Output:\nclass Stack:\n \n    def __init__(self):\n        self.stack = []\n \n    # Add to the top of stack\n    def push(self, data):\n        self.stack.append(data)\n \n    # Remove from the top of stack\n    def pop(self):\n        if self.stack:\n            return self.stack.pop()\n \n    # Peek top element\n    def peek(self):\n        return self.stack[-1]\n \n    # Check if stack is empty\n    def is_empty(self):\n        return not bool(self.stack)"}
{"instruction": "Create a basic text editor using Python.", "input": "", "output": "import tkinter\nfrom tkinter import *\n\n# create the root window\nroot = Tk()\n\n# title for the root window\nroot.title('Text Editor') \n\n# create text box\ntext = Text(root)\ntext.pack()\n\n# create scroll bar\nscroll_bar = Scrollbar(root)\n# attach the scroll bar to the text box\nscroll_bar.pack(side='right', fill='y')\n# configure text box with the scrollbar\ntext.config(yscrollcommand=scroll_bar.set)\nscroll_bar.config(command=text.yview)\n\n# main loop\nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic text editor using Python.\n\n### Input:\n\n\n### Output:\nimport tkinter\nfrom tkinter import *\n\n# create the root window\nroot = Tk()\n\n# title for the root window\nroot.title('Text Editor') \n\n# create text box\ntext = Text(root)\ntext.pack()\n\n# create scroll bar\nscroll_bar = Scrollbar(root)\n# attach the scroll bar to the text box\nscroll_bar.pack(side='right', fill='y')\n# configure text box with the scrollbar\ntext.config(yscrollcommand=scroll_bar.set)\nscroll_bar.config(command=text.yview)\n\n# main loop\nroot.mainloop()"}
{"instruction": "Code a Monte-Carlo simulation in Python.", "input": "", "output": "import random\n\n# Monte Carlo simulation to estimate an integral\n# The integral can be of any function f(x)\n\n# N is the number of samples to take\n# a, b is the interval\nN = 10000\na, b = 0.0, 1.0\n\n# initialize a variable to store the running sum\nsum = 0\n\n# take N samples\nfor i in range(N):\n    x = random.uniform(a, b)\n    sum += f(x) \n\n# compute the estimated integral\nestimated_integral = (b - a) / N * sum \n\nprint(\"The estimated integral is: \", estimated_integral)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a Monte-Carlo simulation in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Monte Carlo simulation to estimate an integral\n# The integral can be of any function f(x)\n\n# N is the number of samples to take\n# a, b is the interval\nN = 10000\na, b = 0.0, 1.0\n\n# initialize a variable to store the running sum\nsum = 0\n\n# take N samples\nfor i in range(N):\n    x = random.uniform(a, b)\n    sum += f(x) \n\n# compute the estimated integral\nestimated_integral = (b - a) / N * sum \n\nprint(\"The estimated integral is: \", estimated_integral)"}
{"instruction": "Develop an AI chatbot program in Python.", "input": "", "output": "import re \nimport random \n\n# Define AI responses \nresponses = {\n  \"Hi\": [\"Hello there!\", \"Howdy!\", \"Hi 👋\"], \n  \"How are you\": [\"I'm doing great!\", \"Doing well!\", \"Never better 🤩\"],\n  \"Bye\": [\"Goodbye!\", \"See you later!\", \"Bye bye\"] \n}\n\n# AI function \ndef chatbot(user_query):\n  response = \"Sorry, I don't understand 🤔\"\n\n  # Removing punctuation signs \n  user_query = re.sub('[^a-zA-Z]', ' ', user_query)\n\n  # tokenize user_query & convert to lowercase \n  user_query = user_query.lower().split()\n\n  for word in user_query: \n    if word in responses:\n      response = random.choice(responses[word])\n\n  return response", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI chatbot program in Python.\n\n### Input:\n\n\n### Output:\nimport re \nimport random \n\n# Define AI responses \nresponses = {\n  \"Hi\": [\"Hello there!\", \"Howdy!\", \"Hi 👋\"], \n  \"How are you\": [\"I'm doing great!\", \"Doing well!\", \"Never better 🤩\"],\n  \"Bye\": [\"Goodbye!\", \"See you later!\", \"Bye bye\"] \n}\n\n# AI function \ndef chatbot(user_query):\n  response = \"Sorry, I don't understand 🤔\"\n\n  # Removing punctuation signs \n  user_query = re.sub('[^a-zA-Z]', ' ', user_query)\n\n  # tokenize user_query & convert to lowercase \n  user_query = user_query.lower().split()\n\n  for word in user_query: \n    if word in responses:\n      response = random.choice(responses[word])\n\n  return response"}
{"instruction": "Create a linked list structure in Python.", "input": "", "output": "class Node:\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linked list structure in Python.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next"}
{"instruction": "Create a class called Employee in Python.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary): \n        self.name = name \n        self.age = age \n        self.salary = salary \n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_salary(self):\n        return self.salary  \n    \n    def set_name(self, name):\n        self.name = name\n        \n    def set_age(self, age):\n        self.age = age\n        \n    def set_salary(self, salary):\n        self.salary = salary", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class called Employee in Python.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age, salary): \n        self.name = name \n        self.age = age \n        self.salary = salary \n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_salary(self):\n        return self.salary  \n    \n    def set_name(self, name):\n        self.name = name\n        \n    def set_age(self, age):\n        self.age = age\n        \n    def set_salary(self, salary):\n        self.salary = salary"}
{"instruction": "Design a stack in Python to hold strings.", "input": "", "output": "class Stack: \n   \n    def __init__(self): \n        self.stack = [] \n   \n    def isEmpty(self): \n        return len(self.stack) == 0\n       \n    def push(self, item): \n        self.stack.append(item) \n       \n    def pop(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n       \n        return self.stack.pop() \n       \n    def peek(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n\n        return self.stack[-1] \n       \n    def size(self): \n        return len(self.stack)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a stack in Python to hold strings.\n\n### Input:\n\n\n### Output:\nclass Stack: \n   \n    def __init__(self): \n        self.stack = [] \n   \n    def isEmpty(self): \n        return len(self.stack) == 0\n       \n    def push(self, item): \n        self.stack.append(item) \n       \n    def pop(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n       \n        return self.stack.pop() \n       \n    def peek(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n\n        return self.stack[-1] \n       \n    def size(self): \n        return len(self.stack)"}
{"instruction": "What is the purpose of Python decorators?", "input": "", "output": "The purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the purpose of Python decorators?\n\n### Input:\n\n\n### Output:\nThe purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called."}
{"instruction": "Write a user profile generator in Python.", "input": "", "output": "import random\n\n# User profile class\nclass UserProfile:\n    def __init__(self):\n        self.name = None\n        self.age = None\n        self.location = None\n        self.interests = None\n\n# Generate random user profile\ndef generate_profile():\n    profile = UserProfile()\n    profile.name = generate_name()\n    profile.age = generate_age()\n    profile.location = generate_location()\n    profile.interests = generate_interests()\n    return profile\n\n# Generate random name\ndef generate_name():\n    ...\n\n# Generate random age\ndef generate_age():\n    ...\n\n# Generate random location\ndef generate_location():\n    ...\n\n# Generate random interests\ndef generate_interests():\n    ...", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a user profile generator in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# User profile class\nclass UserProfile:\n    def __init__(self):\n        self.name = None\n        self.age = None\n        self.location = None\n        self.interests = None\n\n# Generate random user profile\ndef generate_profile():\n    profile = UserProfile()\n    profile.name = generate_name()\n    profile.age = generate_age()\n    profile.location = generate_location()\n    profile.interests = generate_interests()\n    return profile\n\n# Generate random name\ndef generate_name():\n    ...\n\n# Generate random age\ndef generate_age():\n    ...\n\n# Generate random location\ndef generate_location():\n    ...\n\n# Generate random interests\ndef generate_interests():\n    ..."}
{"instruction": "Create a class for binary trees in Python", "input": "", "output": "\"\"\"\nClass for binary trees in Python.\n\"\"\"\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.key = root\n        self.left = None\n        self.right = None\n\n    def insert_left(self, new_node):\n        if self.left is None:\n            self.left = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.left = self.left\n            self.left = t\n\n    def insert_right(self, new_node):\n        if self.right is None:\n            self.right = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.right = self.right\n            self.right = t\n\n    def get_right_child(self):\n        return self.right\n\n    def get_left_child(self):\n        return self.left\n\n    def set_root_val(self, obj):\n        self.key = obj\n\n    def get_root_val(self):\n        return self.key", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for binary trees in Python\n\n### Input:\n\n\n### Output:\n\"\"\"\nClass for binary trees in Python.\n\"\"\"\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.key = root\n        self.left = None\n        self.right = None\n\n    def insert_left(self, new_node):\n        if self.left is None:\n            self.left = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.left = self.left\n            self.left = t\n\n    def insert_right(self, new_node):\n        if self.right is None:\n            self.right = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.right = self.right\n            self.right = t\n\n    def get_right_child(self):\n        return self.right\n\n    def get_left_child(self):\n        return self.left\n\n    def set_root_val(self, obj):\n        self.key = obj\n\n    def get_root_val(self):\n        return self.key"}
{"instruction": "Build a Naive Bayes classifier in Python.", "input": "", "output": "import numpy as np\n\nclass NaiveBayesClassifer():\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.classes = np.unique(y)\n\n    def fit(self):\n        n_samples, n_features = self.x.shape\n        self.class_priors = np.zeros(len(self.classes))\n\n        self.means, self.stds = [], []\n\n        # calculate class prior probability\n        for i, c in enumerate(self.classes):\n            x_class = self.x[self.y == c]\n            self.class_priors[i] = x_class.shape[0]/float(n_samples)\n            # sample mean and std for each feature\n            self.means.append(x_class.mean(axis=0))\n            self.stds.append(x_class.std(axis=0))\n\n    def predict(self, X):\n        prediction = []\n        for x in X:\n            posteriors = []\n            for i, c in enumerate(self.classes):\n                # calculate prior probability\n                prior = np.log(self.class_priors[i])\n                # calculate conditional probability\n                posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i])))\n                posteriors.append(prior + posterior)\n\n            # print posteriors\n            prediction.append(self.classes[np.argmax(posteriors)])\n        return prediction\n\n    # calculate probability density function\n    def pdf(self, x, mean, std):\n        # probabilities\n        probabilities = (1/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)/(2*std**2)))\n        return probabilities", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Naive Bayes classifier in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\nclass NaiveBayesClassifer():\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.classes = np.unique(y)\n\n    def fit(self):\n        n_samples, n_features = self.x.shape\n        self.class_priors = np.zeros(len(self.classes))\n\n        self.means, self.stds = [], []\n\n        # calculate class prior probability\n        for i, c in enumerate(self.classes):\n            x_class = self.x[self.y == c]\n            self.class_priors[i] = x_class.shape[0]/float(n_samples)\n            # sample mean and std for each feature\n            self.means.append(x_class.mean(axis=0))\n            self.stds.append(x_class.std(axis=0))\n\n    def predict(self, X):\n        prediction = []\n        for x in X:\n            posteriors = []\n            for i, c in enumerate(self.classes):\n                # calculate prior probability\n                prior = np.log(self.class_priors[i])\n                # calculate conditional probability\n                posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i])))\n                posteriors.append(prior + posterior)\n\n            # print posteriors\n            prediction.append(self.classes[np.argmax(posteriors)])\n        return prediction\n\n    # calculate probability density function\n    def pdf(self, x, mean, std):\n        # probabilities\n        probabilities = (1/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)/(2*std**2)))\n        return probabilities"}
{"instruction": "Implement a doubly linked list in Python.", "input": "", "output": "class Node(object):\n    def __init__(self, value, prev, next):\n        self.value = value\n        self.prev = prev\n        self.next = next\n\n\nclass LinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def append(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n        self.length += 1\n\n    def prepend(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            node.next = self.head\n            self.head.prev = node\n            self.head = node\n        self.length += 1\n\n    def get_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            return current_node.value\n\n    def remove_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            current_node.prev.next = current_node.next\n            current_node.next.prev = current_node.prev\n            self.length -= 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a doubly linked list in Python.\n\n### Input:\n\n\n### Output:\nclass Node(object):\n    def __init__(self, value, prev, next):\n        self.value = value\n        self.prev = prev\n        self.next = next\n\n\nclass LinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def append(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n        self.length += 1\n\n    def prepend(self, value):\n        node = Node(value, None, None)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            node.next = self.head\n            self.head.prev = node\n            self.head = node\n        self.length += 1\n\n    def get_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            return current_node.value\n\n    def remove_at_index(self, index):\n        if index < 0 or index > self.length - 1:\n            return None\n        else:\n            current_node = self.head\n            for _ in range(index):\n                current_node = current_node.next\n            current_node.prev.next = current_node.next\n            current_node.next.prev = current_node.prev\n            self.length -= 1"}
{"instruction": "Generate a number guessing game in Python.", "input": "", "output": "import random\n\n# Generate a random number between 1 and 10\nanswer = random.randint(1, 10)\n\n# Ask the user to guess the number\nguess = int(input(\"Guess a number between 1 and 10: \"))\n\n# Loop until the user guesses correctly\nwhile guess != answer:\n    if guess < answer:\n        print(\"Too low!\")\n    else:\n        print(\"Too high!\")\n    \n    guess = int(input(\"Guess again: \"))\n    \n# Congratulate the user\nprint(\"You got it! The answer is \" + str(answer))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a number guessing game in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Generate a random number between 1 and 10\nanswer = random.randint(1, 10)\n\n# Ask the user to guess the number\nguess = int(input(\"Guess a number between 1 and 10: \"))\n\n# Loop until the user guesses correctly\nwhile guess != answer:\n    if guess < answer:\n        print(\"Too low!\")\n    else:\n        print(\"Too high!\")\n    \n    guess = int(input(\"Guess again: \"))\n    \n# Congratulate the user\nprint(\"You got it! The answer is \" + str(answer))"}
{"instruction": "Create and edit a SQLite3 table in Python.", "input": "", "output": "import sqlite3\n\n# create connection\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\n\n# create table\nc.execute(\"\"\" CREATE TABLE IF NOT EXISTS example (\n              id INTEGER PRIMARY KEY,\n              title TEXT,\n              content TEXT\n            ) \"\"\")\n\n# insert row\nc.execute(\"INSERT INTO example(title, content) VALUES (?,?)\", (title, content))\n\n# edit row\nc.execute(\"UPDATE example SET content=? WHERE id=?\", (new_content, id))\n\n# commit changes\nconn.commit()\n\n# close connection\nconn.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate and edit a SQLite3 table in Python.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\n# create connection\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\n\n# create table\nc.execute(\"\"\" CREATE TABLE IF NOT EXISTS example (\n              id INTEGER PRIMARY KEY,\n              title TEXT,\n              content TEXT\n            ) \"\"\")\n\n# insert row\nc.execute(\"INSERT INTO example(title, content) VALUES (?,?)\", (title, content))\n\n# edit row\nc.execute(\"UPDATE example SET content=? WHERE id=?\", (new_content, id))\n\n# commit changes\nconn.commit()\n\n# close connection\nconn.close()"}
{"instruction": "Design a class for data storage in Python.", "input": "", "output": "class DataStorage:\n\n    def __init__(self):\n        self.data = {}\n\n    def store(self, key, value):\n        \"\"\"Stores a value in the data structure with the given key\"\"\"\n        self.data[key] = value\n\n    def get(self, key):\n        \"\"\"Retrieves the value associated with a given key in the data structure\"\"\"\n        return self.data[key]\n\n    def remove(self, key):\n        \"\"\"Removes the value associated with a given key from the data structure\"\"\"\n        if key in self.data:\n            del self.data[key]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for data storage in Python.\n\n### Input:\n\n\n### Output:\nclass DataStorage:\n\n    def __init__(self):\n        self.data = {}\n\n    def store(self, key, value):\n        \"\"\"Stores a value in the data structure with the given key\"\"\"\n        self.data[key] = value\n\n    def get(self, key):\n        \"\"\"Retrieves the value associated with a given key in the data structure\"\"\"\n        return self.data[key]\n\n    def remove(self, key):\n        \"\"\"Removes the value associated with a given key from the data structure\"\"\"\n        if key in self.data:\n            del self.data[key]"}
{"instruction": "Implement a basic web server using Python.", "input": "", "output": "import socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\nprint 'Serving HTTP on port %s ...' % PORT\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print request\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic web server using Python.\n\n### Input:\n\n\n### Output:\nimport socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\nprint 'Serving HTTP on port %s ...' % PORT\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print request\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close()"}
{"instruction": "Make a text-based adventure game in Python", "input": "", "output": "# Game resources \n# Rooms, items, NPCs \n\n# Global Variables \nplayer_location = 'room1'\nplayer_items = []\n\n# Functions \ndef process_input():\n    input_string = input(\"What do you want to do? \")\n\n    if input_string == 'go north':\n        if player_location == 'room1':\n            player_location = 'room2'\n        elif player_location == 'room2':\n            player_location = 'room3'\n        else:\n            print('You can\\'t go that way')\n\n    elif input_string == 'go south':\n        if player_location == 'room2':\n            player_location = 'room1'\n        elif player_location == 'room3':\n            player_location = 'room2'\n        else:\n            print('You can\\'t go that way')\n    print('You are in ' + player_location)\n\n# Game Loop \nwhile True:\n    process_input()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a text-based adventure game in Python\n\n### Input:\n\n\n### Output:\n# Game resources \n# Rooms, items, NPCs \n\n# Global Variables \nplayer_location = 'room1'\nplayer_items = []\n\n# Functions \ndef process_input():\n    input_string = input(\"What do you want to do? \")\n\n    if input_string == 'go north':\n        if player_location == 'room1':\n            player_location = 'room2'\n        elif player_location == 'room2':\n            player_location = 'room3'\n        else:\n            print('You can\\'t go that way')\n\n    elif input_string == 'go south':\n        if player_location == 'room2':\n            player_location = 'room1'\n        elif player_location == 'room3':\n            player_location = 'room2'\n        else:\n            print('You can\\'t go that way')\n    print('You are in ' + player_location)\n\n# Game Loop \nwhile True:\n    process_input()"}
{"instruction": "Create a web crawling program using Python", "input": "", "output": "import requests \nfrom bs4 import BeautifulSoup \n  \n# Function to crawl a given website \ndef web_crawl(url): \n  \n    # Get the content from the given URL \n    page = requests.get(url) \n  \n    # Create a bs4 object with the content \n    soup = BeautifulSoup(page.content, 'html.parser') \n  \n    # Find all links on the page \n    links = soup.find_all(\"a\") \n  \n    # Iterate over all links \n    for link in links: \n  \n        # Get the URL from the link \n        link_url = link.get(\"href\") \n  \n        # Check if the URL is valid \n        if link_url is not None and link_url != \"#\": \n  \n            #parse the URL to crawl further \n            web_crawl(link_url) \n  \n# Driver code \nif __name__ == \"__main__\": \n  \n    # Crawl the given website \n    web_crawl(\"https://www.example.com\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawling program using Python\n\n### Input:\n\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n  \n# Function to crawl a given website \ndef web_crawl(url): \n  \n    # Get the content from the given URL \n    page = requests.get(url) \n  \n    # Create a bs4 object with the content \n    soup = BeautifulSoup(page.content, 'html.parser') \n  \n    # Find all links on the page \n    links = soup.find_all(\"a\") \n  \n    # Iterate over all links \n    for link in links: \n  \n        # Get the URL from the link \n        link_url = link.get(\"href\") \n  \n        # Check if the URL is valid \n        if link_url is not None and link_url != \"#\": \n  \n            #parse the URL to crawl further \n            web_crawl(link_url) \n  \n# Driver code \nif __name__ == \"__main__\": \n  \n    # Crawl the given website \n    web_crawl(\"https://www.example.com\")"}
{"instruction": "Implement a Heap Sort algorithm in Python.", "input": "", "output": "def heapify(arr, n, i): \n    largest = i   # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]   # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0)\n  \n# Driver code to test above \narr = [ 12, 11, 13, 5, 6, 7] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Heap Sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef heapify(arr, n, i): \n    largest = i   # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]   # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0)\n  \n# Driver code to test above \narr = [ 12, 11, 13, 5, 6, 7] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),"}
{"instruction": "Create a Python class to represent a movie.", "input": "", "output": "class Movie():\n   \n   # Constructor\n   def __init__(self, title, director, runtime, rating):\n      self.title = title\n      self.director = director\n      self.runtime = runtime\n      self.rating = rating\n   \n   # Getters\n   def getTitle(self):\n      return self.title\n   \n   def getDirector(self):\n      return self.director\n   \n   def getRuntime(self):\n      return self.runtime\n   \n   def getRating(self):\n      return self.rating", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a movie.\n\n### Input:\n\n\n### Output:\nclass Movie():\n   \n   # Constructor\n   def __init__(self, title, director, runtime, rating):\n      self.title = title\n      self.director = director\n      self.runtime = runtime\n      self.rating = rating\n   \n   # Getters\n   def getTitle(self):\n      return self.title\n   \n   def getDirector(self):\n      return self.director\n   \n   def getRuntime(self):\n      return self.runtime\n   \n   def getRating(self):\n      return self.rating"}
{"instruction": "Implement a stack data structure in Python.", "input": "", "output": "\"\"\"\nImplement a stack data structure in Python.\n\"\"\"\n\nclass Stack(object):\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n \n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n \n    def is_empty(self):\n        return len(self.items) == 0\n \n    def size(self):\n        return len(self.items)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a stack data structure in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplement a stack data structure in Python.\n\"\"\"\n\nclass Stack(object):\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n \n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n \n    def is_empty(self):\n        return len(self.items) == 0\n \n    def size(self):\n        return len(self.items)"}
{"instruction": "Implement a Stack data structure in Python.", "input": "", "output": "\"\"\"\nImplement a Stack data structure in Python\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, data):\n        self.stack.append(data)\n\n    def pop(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack.pop(-1)\n  \n    def peek(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack[-1]\n\nif __name__ == \"__main__\":\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    stack.push(4)\n    print(\"Peek:\", stack.peek())\n    print(\"Pop:\", stack.pop())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Stack data structure in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplement a Stack data structure in Python\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, data):\n        self.stack.append(data)\n\n    def pop(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack.pop(-1)\n  \n    def peek(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack[-1]\n\nif __name__ == \"__main__\":\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    stack.push(4)\n    print(\"Peek:\", stack.peek())\n    print(\"Pop:\", stack.pop())"}
{"instruction": "Implement a given design pattern in Python.", "input": "", "output": "# factory pattern example \n  \nclass Shape:\n    sides = 0\n    \n    def type(self):\n        print(\"This is an abstract class\")\n\nclass Triangle(Shape):\n    sides = 3\n    def type(self):\n        print(\"This is a triangle\")\n\nclass Rectangle(Shape):\n    sides = 4\n    def type(self):\n        print(\"This is a rectangle\")\n\nclass Factory:\n    def get_obj(self, shape):\n        if shape == \"triangle\":\n            return Triangle()\n        if shape == \"rectangle\":\n            return Rectangle()\n  \nf = Factory()\n  \nshape1 = f.get_obj(\"triangle\")\nshape1.type() \n  \nshape2 = f.get_obj(\"rectangle\")\nshape2.type()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a given design pattern in Python.\n\n### Input:\n\n\n### Output:\n# factory pattern example \n  \nclass Shape:\n    sides = 0\n    \n    def type(self):\n        print(\"This is an abstract class\")\n\nclass Triangle(Shape):\n    sides = 3\n    def type(self):\n        print(\"This is a triangle\")\n\nclass Rectangle(Shape):\n    sides = 4\n    def type(self):\n        print(\"This is a rectangle\")\n\nclass Factory:\n    def get_obj(self, shape):\n        if shape == \"triangle\":\n            return Triangle()\n        if shape == \"rectangle\":\n            return Rectangle()\n  \nf = Factory()\n  \nshape1 = f.get_obj(\"triangle\")\nshape1.type() \n  \nshape2 = f.get_obj(\"rectangle\")\nshape2.type()"}
{"instruction": "Create a Python class to process text data.", "input": "", "output": "class TextProcessor:\n    def __init__(self):\n        pass\n    \n    def remove_punctuation(self, text):\n        # remove punctuation\n        no_punct = \"\".join([c for c in text if c not in string.punctuation])\n        return no_punct\n \n    def remove_stopwords(self, text):\n        # remove stopwords\n        no_stopwords = [w for w in text if w not in stopwords.words('english')]\n        return no_stopwords\n    \n    def lemmatize_words(self, text):\n        # lemmatize words\n        lemmatizer = WordNetLemmatizer()\n        lemmatized = [lemmatizer.lemmatize(word) for word in text]\n        return lemmatized", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to process text data.\n\n### Input:\n\n\n### Output:\nclass TextProcessor:\n    def __init__(self):\n        pass\n    \n    def remove_punctuation(self, text):\n        # remove punctuation\n        no_punct = \"\".join([c for c in text if c not in string.punctuation])\n        return no_punct\n \n    def remove_stopwords(self, text):\n        # remove stopwords\n        no_stopwords = [w for w in text if w not in stopwords.words('english')]\n        return no_stopwords\n    \n    def lemmatize_words(self, text):\n        # lemmatize words\n        lemmatizer = WordNetLemmatizer()\n        lemmatized = [lemmatizer.lemmatize(word) for word in text]\n        return lemmatized"}
{"instruction": "Create a multi-level linked list in Python.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n        self.down = None\n  \n# Function to create multi-level linked list \ndef multiLevelLL(root): \n    \n    q = Queue() \n    q.put(root) \n    lnk_lnst = [] \n  \n    while q.empty() == False: \n        p = q.get() \n        lnk_lnst.append(p) \n        left = p.next \n        right = p.down \n        if left is not None: \n            q.put(left) \n        if right is not None: \n            q.put(right) \n    return lnk_lnst \n  \n#Example Usage\nroot = Node(10) \nroot.next = Node(2) \nroot.next.next = Node(6) \nroot.next.next.next = Node(8) \nroot.next.next.next.next = Node(4) \n  \nroot.down = Node(3) \nroot.down.down = Node(19) \n  \nroot.next.down = Node(5) \nroot.next.down.down = Node(11) \n  \nroot.next.next.down = Node(7) \n\nllist = multiLevelLL(root) \n# Printing the Multi-level Linked List \nfor i in llist: \n    print(i.data, end = \" \")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a multi-level linked list in Python.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n        self.down = None\n  \n# Function to create multi-level linked list \ndef multiLevelLL(root): \n    \n    q = Queue() \n    q.put(root) \n    lnk_lnst = [] \n  \n    while q.empty() == False: \n        p = q.get() \n        lnk_lnst.append(p) \n        left = p.next \n        right = p.down \n        if left is not None: \n            q.put(left) \n        if right is not None: \n            q.put(right) \n    return lnk_lnst \n  \n#Example Usage\nroot = Node(10) \nroot.next = Node(2) \nroot.next.next = Node(6) \nroot.next.next.next = Node(8) \nroot.next.next.next.next = Node(4) \n  \nroot.down = Node(3) \nroot.down.down = Node(19) \n  \nroot.next.down = Node(5) \nroot.next.down.down = Node(11) \n  \nroot.next.next.down = Node(7) \n\nllist = multiLevelLL(root) \n# Printing the Multi-level Linked List \nfor i in llist: \n    print(i.data, end = \" \")"}
{"instruction": "Implement a quick sort algorithm in Python.", "input": "", "output": "def partition(arr,low,high): \n    i = ( low-1 )         # index of smaller element \n    pivot = arr[high]     # pivot \n  \n    for j in range(low , high): \n  \n        # If current element is smaller than the pivot \n        if   arr[j] < pivot: \n          \n            # increment index of smaller element \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n  \n# The main function that implements QuickSort \n# arr[] --> Array to be sorted, \n# low  --> Starting index, \n# high  --> Ending index \n  \n# Function to do Quick sort \ndef quickSort(arr,low,high): \n    if low < high: \n  \n        # pi is partitioning index, arr[p] is now \n        # at right place \n        pi = partition(arr,low,high) \n  \n        # Separately sort elements before \n        # partition and after partition \n        quickSort(arr, low, pi-1) \n        quickSort(arr, pi+1, high)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a quick sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef partition(arr,low,high): \n    i = ( low-1 )         # index of smaller element \n    pivot = arr[high]     # pivot \n  \n    for j in range(low , high): \n  \n        # If current element is smaller than the pivot \n        if   arr[j] < pivot: \n          \n            # increment index of smaller element \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n  \n# The main function that implements QuickSort \n# arr[] --> Array to be sorted, \n# low  --> Starting index, \n# high  --> Ending index \n  \n# Function to do Quick sort \ndef quickSort(arr,low,high): \n    if low < high: \n  \n        # pi is partitioning index, arr[p] is now \n        # at right place \n        pi = partition(arr,low,high) \n  \n        # Separately sort elements before \n        # partition and after partition \n        quickSort(arr, low, pi-1) \n        quickSort(arr, pi+1, high)"}
{"instruction": "Create a hashtable using python dictionary.", "input": "", "output": "class HashTable:\n    def __init__(self):\n        self.table = {}\n\n    def put(self, key, value):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash value is not in the table, create an empty list\n        if hash_value not in self.table:\n            self.table[hash_value] = []\n        # Append the value to the list\n        self.table[hash_value].append((key, value))\n\n    def get(self, key):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash is not in the table, return None\n        if hash_value not in self.table:\n            return None\n        # Search the list of (key, value) pairs for a matching key\n        for k, v in self.table[hash_value]:\n            if key == k:\n                return v\n        # If no matching key is found, return None\n        return None\n\n    def _hash(self, key):\n        # Generate a simple hash of the given key\n        return hash(key) % 1000", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a hashtable using python dictionary.\n\n### Input:\n\n\n### Output:\nclass HashTable:\n    def __init__(self):\n        self.table = {}\n\n    def put(self, key, value):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash value is not in the table, create an empty list\n        if hash_value not in self.table:\n            self.table[hash_value] = []\n        # Append the value to the list\n        self.table[hash_value].append((key, value))\n\n    def get(self, key):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash is not in the table, return None\n        if hash_value not in self.table:\n            return None\n        # Search the list of (key, value) pairs for a matching key\n        for k, v in self.table[hash_value]:\n            if key == k:\n                return v\n        # If no matching key is found, return None\n        return None\n\n    def _hash(self, key):\n        # Generate a simple hash of the given key\n        return hash(key) % 1000"}
{"instruction": "Generate a prime number generator in Python.", "input": "", "output": "def is_prime_number(n):\n    # An integer is prime if it is greater than 1\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n\ndef generate_prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if is_prime_number(num):\n            prime_nums.append(num)\n    return prime_nums\n\nn = 10\nprint(\"Prime numbers between 2 and\", n, \":\", generate_prime_numbers(n))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a prime number generator in Python.\n\n### Input:\n\n\n### Output:\ndef is_prime_number(n):\n    # An integer is prime if it is greater than 1\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n\ndef generate_prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if is_prime_number(num):\n            prime_nums.append(num)\n    return prime_nums\n\nn = 10\nprint(\"Prime numbers between 2 and\", n, \":\", generate_prime_numbers(n))"}
{"instruction": "Implement the quicksort algorithm in Python.", "input": "", "output": "def quicksort(numbers):\n    '''\n    This function implements the quicksort algorithm to sort a given array of numbers.\n    \n    Args:\n        numbers (list): the array of numbers to be sorted\n    \n    Returns:\n        list: the sorted array\n    '''\n    if len(numbers) == 0:\n        return []\n\n    # pivot will be the middle element of the list\n    pivot = numbers[0]\n    left = [x for x in numbers[1:] if x < pivot]\n    right = [x for x in numbers[1:] if x >= pivot]\n\n    return quicksort(left) + [pivot] + quicksort(right)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the quicksort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quicksort(numbers):\n    '''\n    This function implements the quicksort algorithm to sort a given array of numbers.\n    \n    Args:\n        numbers (list): the array of numbers to be sorted\n    \n    Returns:\n        list: the sorted array\n    '''\n    if len(numbers) == 0:\n        return []\n\n    # pivot will be the middle element of the list\n    pivot = numbers[0]\n    left = [x for x in numbers[1:] if x < pivot]\n    right = [x for x in numbers[1:] if x >= pivot]\n\n    return quicksort(left) + [pivot] + quicksort(right)"}
{"instruction": "Design and create a Python class named trie.", "input": "", "output": "class Trie:\n    def __init__(self):\n        self.root = {}\n    \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie\n        \"\"\"\n        curr_node = self.root\n        for letter in word:\n            # if letter is not in the current branch\n            if letter not in curr_node:\n                # add letter to the branch\n                curr_node[letter] = {}\n            # move to the next branch\n            curr_node = curr_node[letter]\n        # when word is fully parsed, set node name to True\n        curr_node['name'] = True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and create a Python class named trie.\n\n### Input:\n\n\n### Output:\nclass Trie:\n    def __init__(self):\n        self.root = {}\n    \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie\n        \"\"\"\n        curr_node = self.root\n        for letter in word:\n            # if letter is not in the current branch\n            if letter not in curr_node:\n                # add letter to the branch\n                curr_node[letter] = {}\n            # move to the next branch\n            curr_node = curr_node[letter]\n        # when word is fully parsed, set node name to True\n        curr_node['name'] = True"}
{"instruction": "Design a Python class that represents a car.", "input": "", "output": "class Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that represents a car.\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage"}
{"instruction": "Create a tree structure like below in Python", "input": "", "output": "class Node():\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n    def insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = Node(data)\n                else:\n                    self.left.insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = Node(data)\n                else:\n                    self.right.insert(data)\n        else:\n            self.data = data", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a tree structure like below in Python\n\n### Input:\n\n\n### Output:\nclass Node():\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n    def insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = Node(data)\n                else:\n                    self.left.insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = Node(data)\n                else:\n                    self.right.insert(data)\n        else:\n            self.data = data"}
{"instruction": "Create a python class to encapsulate stacks.", "input": "", "output": "class Stack:\n    def __init__(self):\n        # Create an empty stack\n        self.stack = []\n    \n    def push(self, item):\n        # Push an item onto the top of the stack\n        self.stack.append(item)\n    \n    def pop(self):\n        # Pop an item off the top of the stack\n        return self.stack.pop()\n    \n    def peek(self):\n        # Get the top item off the stack\n        return self.stack[-1]\n    \n    def is_empty(self):\n        # Return true if the stack is empty\n        return not self.stack\n    \n    def get_size(self):\n        # Return the size of the stack\n        return len(self.stack)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class to encapsulate stacks.\n\n### Input:\n\n\n### Output:\nclass Stack:\n    def __init__(self):\n        # Create an empty stack\n        self.stack = []\n    \n    def push(self, item):\n        # Push an item onto the top of the stack\n        self.stack.append(item)\n    \n    def pop(self):\n        # Pop an item off the top of the stack\n        return self.stack.pop()\n    \n    def peek(self):\n        # Get the top item off the stack\n        return self.stack[-1]\n    \n    def is_empty(self):\n        # Return true if the stack is empty\n        return not self.stack\n    \n    def get_size(self):\n        # Return the size of the stack\n        return len(self.stack)"}
{"instruction": "Implement a simple HTTP server using Python.", "input": "", "output": "from http.server import BaseHTTPRequestHandler, HTTPServer\n \n# HTTPRequestHandler class\nclass HTTPServer_RequestHandler(BaseHTTPRequestHandler):\n \n  # GET\n  def do_GET(self):\n    # Send response status code\n    self.send_response(200)\n \n    # Send headers\n    self.send_header('Content-type','text/html')\n    self.end_headers()\n \n    # Send message back to client\n    message = \"Hello world!\"\n    # Write content as utf-8 data\n    self.wfile.write(bytes(message, \"utf8\"))\n    return\n \ndef run():\n  print('starting server...')\n \n  # Server settings\n  # Choose port 8080, for port 80\n  server_address = ('127.0.0.1', 8080)\n  httpd = HTTPServer(server_address, HTTPServer_RequestHandler)\n  print('running server...')\n  httpd.serve_forever()\n \n \nrun()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a simple HTTP server using Python.\n\n### Input:\n\n\n### Output:\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n \n# HTTPRequestHandler class\nclass HTTPServer_RequestHandler(BaseHTTPRequestHandler):\n \n  # GET\n  def do_GET(self):\n    # Send response status code\n    self.send_response(200)\n \n    # Send headers\n    self.send_header('Content-type','text/html')\n    self.end_headers()\n \n    # Send message back to client\n    message = \"Hello world!\"\n    # Write content as utf-8 data\n    self.wfile.write(bytes(message, \"utf8\"))\n    return\n \ndef run():\n  print('starting server...')\n \n  # Server settings\n  # Choose port 8080, for port 80\n  server_address = ('127.0.0.1', 8080)\n  httpd = HTTPServer(server_address, HTTPServer_RequestHandler)\n  print('running server...')\n  httpd.serve_forever()\n \n \nrun()"}
{"instruction": "Write a Python code for feature engineering.", "input": "", "output": "import pandas as pd\n\ndef feature_engineering(df):\n    '''\n    Function to perform feature engineering steps on a dataframe\n    '''\n    # Drop columns with missing values\n    df = df.dropna(axis=1)\n    # Check for outliers\n    df = df[(df < 3 * df.std()).all(axis=1)]\n    # Identify and remove highly correlated values\n    corr_matrix = df.corr().abs()\n    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n    to_drop = [column for column in upper.columns if any(upper[column] > 0.95)]\n    df.drop(columns = to_drop, inplace=True)\n    # Normalize data\n    for col in df.columns:\n        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())\n    return df\n\ndf = pd.read_csv('data.csv')\ndf = feature_engineering(df)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code for feature engineering.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\n\ndef feature_engineering(df):\n    '''\n    Function to perform feature engineering steps on a dataframe\n    '''\n    # Drop columns with missing values\n    df = df.dropna(axis=1)\n    # Check for outliers\n    df = df[(df < 3 * df.std()).all(axis=1)]\n    # Identify and remove highly correlated values\n    corr_matrix = df.corr().abs()\n    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n    to_drop = [column for column in upper.columns if any(upper[column] > 0.95)]\n    df.drop(columns = to_drop, inplace=True)\n    # Normalize data\n    for col in df.columns:\n        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())\n    return df\n\ndf = pd.read_csv('data.csv')\ndf = feature_engineering(df)"}
{"instruction": "Implement the QuickSort Algorithm in Python.", "input": "", "output": "\"\"\"\nImplementing the QuickSort Algorithm in Python\n\"\"\"\n\ndef partition(arr, low, high):\n    i = (low-1)     # index of smaller element\n    pivot = arr[high]     # pivot\n \n    for j in range(low, high):\n        # If current element is smaller than the pivot\n        if arr[j] < pivot:\n\n            # increment index of smaller element\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n\ndef quickSort(arr, low, high):\n    if low < high:\n        # The partition index is obtained\n        pi = partition(arr, low, high)\n        # Separately sort elements before\n        # partition and after partition\n        quickSort(arr, low, pi-1)\n        quickSort(arr, pi+1, high)\n    \n# Driver Code\narr = [10, 7, 8, 9, 1, 5]\nn = len(arr)\nquickSort(arr,0,n-1)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the QuickSort Algorithm in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplementing the QuickSort Algorithm in Python\n\"\"\"\n\ndef partition(arr, low, high):\n    i = (low-1)     # index of smaller element\n    pivot = arr[high]     # pivot\n \n    for j in range(low, high):\n        # If current element is smaller than the pivot\n        if arr[j] < pivot:\n\n            # increment index of smaller element\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n\ndef quickSort(arr, low, high):\n    if low < high:\n        # The partition index is obtained\n        pi = partition(arr, low, high)\n        # Separately sort elements before\n        # partition and after partition\n        quickSort(arr, low, pi-1)\n        quickSort(arr, pi+1, high)\n    \n# Driver Code\narr = [10, 7, 8, 9, 1, 5]\nn = len(arr)\nquickSort(arr,0,n-1)"}
{"instruction": "Create a user registration system in Python.", "input": "", "output": "import hashlib\n\nclass User:\n    def __init__(self, username, password):\n        self.username = username\n        self.password_hash = self.hash_password(password)\n\n    def check_password(self, password):\n        if self.hash_password(password) == self.password_hash:\n            return True\n        else:\n            return False\n\n    def hash_password(self, password):\n        return hashlib.sha256(password.encode('utf-8')).hexdigest()\n\nusers = {}\n\ndef register(username, password):\n    if username in users:\n        print('Username already exists!')\n        return\n    \n    users[username] = User(username, password)\n    print('Registration successful!')\n    \ndef login(username, password):\n    if username not in users:\n        print('Username doesn\\'t exist!')\n        return \n    \n    user = users[username]\n    if user.check_password(password):\n        print('Login successful!')\n    else:\n        print('Wrong password!')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a user registration system in Python.\n\n### Input:\n\n\n### Output:\nimport hashlib\n\nclass User:\n    def __init__(self, username, password):\n        self.username = username\n        self.password_hash = self.hash_password(password)\n\n    def check_password(self, password):\n        if self.hash_password(password) == self.password_hash:\n            return True\n        else:\n            return False\n\n    def hash_password(self, password):\n        return hashlib.sha256(password.encode('utf-8')).hexdigest()\n\nusers = {}\n\ndef register(username, password):\n    if username in users:\n        print('Username already exists!')\n        return\n    \n    users[username] = User(username, password)\n    print('Registration successful!')\n    \ndef login(username, password):\n    if username not in users:\n        print('Username doesn\\'t exist!')\n        return \n    \n    user = users[username]\n    if user.check_password(password):\n        print('Login successful!')\n    else:\n        print('Wrong password!')"}
{"instruction": "Compose a basic blockchain system in Python.", "input": "", "output": "import hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a basic blockchain system in Python.\n\n### Input:\n\n\n### Output:\nimport hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)"}
{"instruction": "Write a python code to implement a min-heap.", "input": "", "output": "class MinHeap:\n    def __init__(self):\n        self.heap= []\n \n    def parent(self, i):\n        return int((i - 1) / 2)\n \n    def insertKey(self, k):\n        self.heap.append(k)     \n        i = len(self.heap)-1\n        self.fix_up(i)\n \n    def fix_up(self, i):\n        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n \n    def extractMin(self):\n        if len(self.heap) == 0:\n            return -1\n        min_elem = self.heap[0]\n        if len(self.heap) > 1:\n            self.heap[0] = self.heap.pop()\n            self.fix_down(0)\n        else:\n            self.heap.pop()\n        return min_elem\n \n    def fix_down(self, i):\n        left = 2*i + 1\n        right = 2*i + 2\n        min_i = i\n        if left < len(self.heap) and self.heap[min_i] > self.heap[left]:\n            min_i = left\n        if right < len(self.heap) and self.heap[min_i] > self.heap[right]:\n            min_i = right\n        if min_i != i:\n            self.heap[min_i], self.heap[i] = self.heap[i], self.heap[min_i]\n            self.fix_down(min_i)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to implement a min-heap.\n\n### Input:\n\n\n### Output:\nclass MinHeap:\n    def __init__(self):\n        self.heap= []\n \n    def parent(self, i):\n        return int((i - 1) / 2)\n \n    def insertKey(self, k):\n        self.heap.append(k)     \n        i = len(self.heap)-1\n        self.fix_up(i)\n \n    def fix_up(self, i):\n        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n \n    def extractMin(self):\n        if len(self.heap) == 0:\n            return -1\n        min_elem = self.heap[0]\n        if len(self.heap) > 1:\n            self.heap[0] = self.heap.pop()\n            self.fix_down(0)\n        else:\n            self.heap.pop()\n        return min_elem\n \n    def fix_down(self, i):\n        left = 2*i + 1\n        right = 2*i + 2\n        min_i = i\n        if left < len(self.heap) and self.heap[min_i] > self.heap[left]:\n            min_i = left\n        if right < len(self.heap) and self.heap[min_i] > self.heap[right]:\n            min_i = right\n        if min_i != i:\n            self.heap[min_i], self.heap[i] = self.heap[i], self.heap[min_i]\n            self.fix_down(min_i)"}
{"instruction": "Explain the purpose of an iterator in Python.", "input": "", "output": "An iterator in Python is an object that allows a programmer to traverse through all the elements of a collection, regardless of its specific implementation. An iterator object is initialized with the iter() method, and the object can be iterated one element at a time using the methods of the iterator object, such as next(). This makes it possible to iterate over any collection, regardless of its specific implementation, such as lists, sets, and dictionaries.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the purpose of an iterator in Python.\n\n### Input:\n\n\n### Output:\nAn iterator in Python is an object that allows a programmer to traverse through all the elements of a collection, regardless of its specific implementation. An iterator object is initialized with the iter() method, and the object can be iterated one element at a time using the methods of the iterator object, such as next(). This makes it possible to iterate over any collection, regardless of its specific implementation, such as lists, sets, and dictionaries."}
{"instruction": "Develop an object recognition code in Python.", "input": "", "output": "import cv2\n\n# Create the classifier\nclassifier = cv2.CascadeClassifier(\"haarcascade.xml\")\n\n# Load the image\nimg = cv2.imread(\"image.jpg\")\n\n# Detect objects in the image\nobjects = classifier.detectMultiScale(img)\n\n# Loop through the objects and identify it\nfor (x,y,w,h) in objects:\n    cv2.rectangle(img,(x,y),(x+w,y+h), (255,0,0), 2)\n    cv2.putText(img, \"Object\", (x,y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2)\n\n# Display the resulting frame\ncv2.imwrite(\"result.jpg\", img)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an object recognition code in Python.\n\n### Input:\n\n\n### Output:\nimport cv2\n\n# Create the classifier\nclassifier = cv2.CascadeClassifier(\"haarcascade.xml\")\n\n# Load the image\nimg = cv2.imread(\"image.jpg\")\n\n# Detect objects in the image\nobjects = classifier.detectMultiScale(img)\n\n# Loop through the objects and identify it\nfor (x,y,w,h) in objects:\n    cv2.rectangle(img,(x,y),(x+w,y+h), (255,0,0), 2)\n    cv2.putText(img, \"Object\", (x,y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2)\n\n# Display the resulting frame\ncv2.imwrite(\"result.jpg\", img)"}
{"instruction": "Create a Python algorithm to evaluate a heap.", "input": "", "output": "def eval_heap(arr):\n # Base case\n if len(arr) == 0:\n return -1\n\n # Stores the index of the max element\n max_idx = 0\n \n # Iterate the array from index 1\n for i in range(1, len(arr)):\n # Update the max_idx if value of arr[i] \n # is greater than arr[max_idx]    \n if arr[i] > arr[max_idx]:\n max_idx = i\n\n # Check if heap property is violated\n for j in range(0, max_idx):\n if arr[j] > arr[max_idx]:\n return False\n\n # Recursively call the eval_heap on remaining elements\n return eval_heap(arr[0:max_idx])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to evaluate a heap.\n\n### Input:\n\n\n### Output:\ndef eval_heap(arr):\n # Base case\n if len(arr) == 0:\n return -1\n\n # Stores the index of the max element\n max_idx = 0\n \n # Iterate the array from index 1\n for i in range(1, len(arr)):\n # Update the max_idx if value of arr[i] \n # is greater than arr[max_idx]    \n if arr[i] > arr[max_idx]:\n max_idx = i\n\n # Check if heap property is violated\n for j in range(0, max_idx):\n if arr[j] > arr[max_idx]:\n return False\n\n # Recursively call the eval_heap on remaining elements\n return eval_heap(arr[0:max_idx])"}
{"instruction": "Create a simple calculator program in Python.", "input": "", "output": "def simple_calculator():\n    num1 = float(input(\"Enter the first number: \")) \n    num2 = float(input(\"Enter the second number: \"))  \n    oper = input(\"Enter your operation (+, -, *, /): \")  \n      \n    if oper == \"+\":\n        print(\"Result:\", num1 + num2)  \n    elif oper == \"-\":\n        print(\"Result:\", num1 - num2)  \n    elif oper == \"*\":\n        print(\"Result:\", num1 * num2)  \n    elif oper == \"/\":\n        print(\"Result:\", num1 / num2)  \n    else:\n        print(\"Invalid operation\")\n\nsimple_calculator()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple calculator program in Python.\n\n### Input:\n\n\n### Output:\ndef simple_calculator():\n    num1 = float(input(\"Enter the first number: \")) \n    num2 = float(input(\"Enter the second number: \"))  \n    oper = input(\"Enter your operation (+, -, *, /): \")  \n      \n    if oper == \"+\":\n        print(\"Result:\", num1 + num2)  \n    elif oper == \"-\":\n        print(\"Result:\", num1 - num2)  \n    elif oper == \"*\":\n        print(\"Result:\", num1 * num2)  \n    elif oper == \"/\":\n        print(\"Result:\", num1 / num2)  \n    else:\n        print(\"Invalid operation\")\n\nsimple_calculator()"}
{"instruction": "Create a script to build a chatbot in Python.", "input": "", "output": "\"\"\"\nCreate a chatbot in Python\n\"\"\"\n\nimport re\n\n# All conversation patterns\npatterns = {\n    'hello': 'hi there',\n    'how are you': 'I am doing great',\n    'goodbye': 'goodbye for now',\n    'what can you do': 'I can provide answers to basic questions related to programming'\n}\n\n# Build a chatbot\ndef chatbot(user_input):\n    #parse user input\n    user_input = user_input.lower()\n\n    #Initialize return\n    response = ''\n\n    #Find matches in patterns\n    for pattern in patterns:\n        if re.search(pattern, user_input):\n            response = '{}'.format(patterns[pattern])\n    return response\n\n#Test chatbot\nif __name__ == '__main__':\n    input_str = input('You: ')\n    print('Chatbot: {}'.format(chatbot(input_str)))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script to build a chatbot in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a chatbot in Python\n\"\"\"\n\nimport re\n\n# All conversation patterns\npatterns = {\n    'hello': 'hi there',\n    'how are you': 'I am doing great',\n    'goodbye': 'goodbye for now',\n    'what can you do': 'I can provide answers to basic questions related to programming'\n}\n\n# Build a chatbot\ndef chatbot(user_input):\n    #parse user input\n    user_input = user_input.lower()\n\n    #Initialize return\n    response = ''\n\n    #Find matches in patterns\n    for pattern in patterns:\n        if re.search(pattern, user_input):\n            response = '{}'.format(patterns[pattern])\n    return response\n\n#Test chatbot\nif __name__ == '__main__':\n    input_str = input('You: ')\n    print('Chatbot: {}'.format(chatbot(input_str)))"}
{"instruction": "Generate python program create a search engine", "input": "", "output": "\"\"\"\nCreate a search engine using Python\n\"\"\"\n\nimport re\n\ndef search(query):\n    with open('data.txt', 'r') as f:\n        data = f.read()\n    results = []\n    for word in re.findall(r'\\w+', query):\n        matches = re.findall(rf'\\b{word}\\b', data)\n        for match in matches:\n            if match not in results:\n                results.append(match)\n    return results\n\nif __name__ == '__main__':\n    query = input('Enter a query: ')\n    print(search(query))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate python program create a search engine\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a search engine using Python\n\"\"\"\n\nimport re\n\ndef search(query):\n    with open('data.txt', 'r') as f:\n        data = f.read()\n    results = []\n    for word in re.findall(r'\\w+', query):\n        matches = re.findall(rf'\\b{word}\\b', data)\n        for match in matches:\n            if match not in results:\n                results.append(match)\n    return results\n\nif __name__ == '__main__':\n    query = input('Enter a query: ')\n    print(search(query))"}
{"instruction": "Write Python code to simulate a deck of cards.", "input": "", "output": "import itertools\n\n# Create a list of all possible card values\ncard_values = [str(i) for i in range(2,11)] \ncard_values.extend(['Jack', 'Queen', 'King', 'Ace'])\n\n# Create a list of all possible suits\nsuits = ['Hearts', 'Diamonds', 'Spades', 'Clubs']\n\n# Create a list of all possible cards\ncards = list(itertools.product(card_values, suits))\n\n#Simulate a deck of cards\ndeck = []\n\nfor card in cards:\n  deck.append(card[0] + \" of \" + card[1])\n\nprint(\"Deck of cards: \", deck)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to simulate a deck of cards.\n\n### Input:\n\n\n### Output:\nimport itertools\n\n# Create a list of all possible card values\ncard_values = [str(i) for i in range(2,11)] \ncard_values.extend(['Jack', 'Queen', 'King', 'Ace'])\n\n# Create a list of all possible suits\nsuits = ['Hearts', 'Diamonds', 'Spades', 'Clubs']\n\n# Create a list of all possible cards\ncards = list(itertools.product(card_values, suits))\n\n#Simulate a deck of cards\ndeck = []\n\nfor card in cards:\n  deck.append(card[0] + \" of \" + card[1])\n\nprint(\"Deck of cards: \", deck)"}
{"instruction": "Create a Python class that models a 3D vector.", "input": "", "output": "class Vector3D:\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def add(self, vector):\n        x = self.x + vector.x\n        y = self.y + vector.y\n        z = self.z + vector.z\n        return Vector3D(x,y,z)\n\n    def subtract(self, vector):\n        x = self.x - vector.x\n        y = self.y - vector.y\n        z = self.z - vector.z\n        return Vector3D(x,y,z)\n\n    def magnitude(self):\n        return (self.x**2 + self.y**2+.self.z**2)**0.5", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that models a 3D vector.\n\n### Input:\n\n\n### Output:\nclass Vector3D:\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def add(self, vector):\n        x = self.x + vector.x\n        y = self.y + vector.y\n        z = self.z + vector.z\n        return Vector3D(x,y,z)\n\n    def subtract(self, vector):\n        x = self.x - vector.x\n        y = self.y - vector.y\n        z = self.z - vector.z\n        return Vector3D(x,y,z)\n\n    def magnitude(self):\n        return (self.x**2 + self.y**2+.self.z**2)**0.5"}
{"instruction": "Generate a code to send an email using Python.", "input": "", "output": "import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart \n\nsubject = \"Your Subject\"\nbody = \"Your message here\"\nsender = \"from@fromdomain.com\"\nreceivers = [\"to@todomain.com\"]\n\nmsg = MIMEMultipart()\nmsg['from'] = sender\nmsg['To'] = \", \".join(receivers)\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(\"username\", \"password\")\ntext = msg.as_string()\nserver.sendmail(sender, receivers, text)\nserver.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to send an email using Python.\n\n### Input:\n\n\n### Output:\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart \n\nsubject = \"Your Subject\"\nbody = \"Your message here\"\nsender = \"from@fromdomain.com\"\nreceivers = [\"to@todomain.com\"]\n\nmsg = MIMEMultipart()\nmsg['from'] = sender\nmsg['To'] = \", \".join(receivers)\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(\"username\", \"password\")\ntext = msg.as_string()\nserver.sendmail(sender, receivers, text)\nserver.quit()"}
{"instruction": "Create a Python script to predict stock values", "input": "", "output": "# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n# Read in the data \nstocks = pd.read_csv(\"stocks.csv\")\n\n# Feature Extraction \nX = stocks.iloc[:,0].values\nY = stocks.iloc[:,1].values\n\n# Feature Scaling \nX = np.reshape(X, (-1, 1))\nY = np.reshape(Y, (-1, 1))\n\n# Fit the regression model \nfrom sklearn.linear_model import LinearRegression\nregression = LinearRegression()\nregression.fit(X, Y)\n\n# Predict \ny_pred = regression.predict([[x]])\n\n# Visualization \nplt.scatter(X, Y, color=\"red\")\nplt.plot(X, regression.predict(X), color=\"blue\")\nplt.title(\"Stock Prediction (Linear Regression)\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Stock Price\")\nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to predict stock values\n\n### Input:\n\n\n### Output:\n# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n# Read in the data \nstocks = pd.read_csv(\"stocks.csv\")\n\n# Feature Extraction \nX = stocks.iloc[:,0].values\nY = stocks.iloc[:,1].values\n\n# Feature Scaling \nX = np.reshape(X, (-1, 1))\nY = np.reshape(Y, (-1, 1))\n\n# Fit the regression model \nfrom sklearn.linear_model import LinearRegression\nregression = LinearRegression()\nregression.fit(X, Y)\n\n# Predict \ny_pred = regression.predict([[x]])\n\n# Visualization \nplt.scatter(X, Y, color=\"red\")\nplt.plot(X, regression.predict(X), color=\"blue\")\nplt.title(\"Stock Prediction (Linear Regression)\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Stock Price\")\nplt.show()"}
{"instruction": "Write a python program to implement Merge Sort", "input": "", "output": "def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 #Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to implement Merge Sort\n\n### Input:\n\n\n### Output:\ndef mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 #Finding the mid of the array \n        L = arr[:mid] # Dividing the array elements  \n        R = arr[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1"}
{"instruction": "Create a basic point-of-sale system in Python.", "input": "", "output": "\"\"\"\nCreate a basic point-of-sale system in Python\n\"\"\"\n\n# Define a class for a Point of Sale (POS) system\nclass PointOfSale:\n \n  # Constructor to initialize the POS\n  def __init__(self):\n    self.total = 0 # Total amount\n    self.products = [] # List of products purchased\n \n  # Add a product to the list and calculate the total\n  def addProduct(self, product):\n    self.products.append(product)\n    self.total += product.price\n \n  # Print out the list of products purchased and the total amount\n  def printReceipt(self):\n    print(\"List of Products:\")\n    for product in self.products:\n        print(\"{} - {:.2f}\".format(product.name, product.price))\n    print(\"Total Amount: {:.2f}\".format(self.total))\n \n# Define a class for products\nclass Product:\n \n  # Constructor to initialize the product\n  def __init__(self, name, price):\n    self.name = name\n    self.price = price\n \n# Create some products\nproduct1 = Product(\"Apple\", 5.25)\nproduct2 = Product(\"Banana\", 3.00)\n \n# Create a POS System\npos = PointOfSale()\n \n# Add products to the POS\npos.addProduct(product1)\npos.addProduct(product2)\n \n# Print out the receipt\npos.printReceipt()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic point-of-sale system in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a basic point-of-sale system in Python\n\"\"\"\n\n# Define a class for a Point of Sale (POS) system\nclass PointOfSale:\n \n  # Constructor to initialize the POS\n  def __init__(self):\n    self.total = 0 # Total amount\n    self.products = [] # List of products purchased\n \n  # Add a product to the list and calculate the total\n  def addProduct(self, product):\n    self.products.append(product)\n    self.total += product.price\n \n  # Print out the list of products purchased and the total amount\n  def printReceipt(self):\n    print(\"List of Products:\")\n    for product in self.products:\n        print(\"{} - {:.2f}\".format(product.name, product.price))\n    print(\"Total Amount: {:.2f}\".format(self.total))\n \n# Define a class for products\nclass Product:\n \n  # Constructor to initialize the product\n  def __init__(self, name, price):\n    self.name = name\n    self.price = price\n \n# Create some products\nproduct1 = Product(\"Apple\", 5.25)\nproduct2 = Product(\"Banana\", 3.00)\n \n# Create a POS System\npos = PointOfSale()\n \n# Add products to the POS\npos.addProduct(product1)\npos.addProduct(product2)\n \n# Print out the receipt\npos.printReceipt()"}
{"instruction": "Implement a min heap using an array in Python.", "input": "", "output": "class MinHeap: \n    def __init__(self): \n        self.heap = [] \n\n    def __len__(self):\n        return len(self.heap) \n\n    def insert(self, element): \n        self.heap.append(element)\n        self.perc_up(len(self.heap) - 1)\n\n    def extract_min(self): \n        if self.heap[0]: \n            minval = self.heap[0] \n            self.heap[0] = self.heap[-1]\n            del self.heap[-1]\n            self.perc_down(0) \n            return minval \n        else: \n            return False\n  \n    def perc_up(self, index): \n        parent = (index-1)//2 \n        if index <= 0: \n            return\n        elif self.heap[parent] > self.heap[index]: \n            self.swap(parent, index) \n            self.perc_up(parent) \n  \n    def perc_down(self, index): \n        left = (2 * index) + 1 \n        right = (2 * index) + 2 \n        smallest = index \n        if len(self.heap) > left and self.heap[smallest] > self.heap[left]: \n            smallest = left \n        if len(self.heap) > right and self.heap[smallest] > self.heap[right]: \n            smallest = right\n  \n        if smallest != index: \n            self.swap(index, smallest) \n            self.perc_down(smallest) \n  \n    def swap(self, i1, i2): \n        self.heap[i1], self.heap[i2] = self.heap[i2], self.heap[i1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a min heap using an array in Python.\n\n### Input:\n\n\n### Output:\nclass MinHeap: \n    def __init__(self): \n        self.heap = [] \n\n    def __len__(self):\n        return len(self.heap) \n\n    def insert(self, element): \n        self.heap.append(element)\n        self.perc_up(len(self.heap) - 1)\n\n    def extract_min(self): \n        if self.heap[0]: \n            minval = self.heap[0] \n            self.heap[0] = self.heap[-1]\n            del self.heap[-1]\n            self.perc_down(0) \n            return minval \n        else: \n            return False\n  \n    def perc_up(self, index): \n        parent = (index-1)//2 \n        if index <= 0: \n            return\n        elif self.heap[parent] > self.heap[index]: \n            self.swap(parent, index) \n            self.perc_up(parent) \n  \n    def perc_down(self, index): \n        left = (2 * index) + 1 \n        right = (2 * index) + 2 \n        smallest = index \n        if len(self.heap) > left and self.heap[smallest] > self.heap[left]: \n            smallest = left \n        if len(self.heap) > right and self.heap[smallest] > self.heap[right]: \n            smallest = right\n  \n        if smallest != index: \n            self.swap(index, smallest) \n            self.perc_down(smallest) \n  \n    def swap(self, i1, i2): \n        self.heap[i1], self.heap[i2] = self.heap[i2], self.heap[i1]"}
{"instruction": "Design a program in Python to track inventory.", "input": "", "output": "class Inventory:\n  def __init__(self):\n    # Declare an empty dictionary to hold inventory information\n    self.inventory = {}\n \n  # Function for adding product\n  def add_product(self, product_name, quantity):\n    # If product_name exists in inventory, add quantity to existing product's quantity\n    if product_name in self.inventory.keys():\n      self.inventory[product_name] += quantity\n    else:\n      # If product_name is not in inventory, add it to inventory\n      self.inventory[product_name] = quantity\n \n  # Function for removing product\n  def remove_product(self, product_name, quantity):\n    # If product_name exists in inventory and there's insufficient quantity, print an error message\n    if product_name in self.inventory.keys() and self.inventory[product_name] < quantity:\n      print(\"Error: Insufficient Quantity!\")\n    else:\n      # If product_name is in inventory and there's sufficient quantity, remove product from inventory\n      self.inventory[product_name] -= quantity\n      if self.inventory[product_name] == 0:\n        del self.inventory[product_name]\n \n  # Function for printing inventory\n  def print_inventory(self):\n    print(\"Inventory:\")\n    # Iterate through keys and values of inventory and print them\n    for product_name, quantity in self.inventory.items():\n      print(product_name + \" : \" + str(quantity))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to track inventory.\n\n### Input:\n\n\n### Output:\nclass Inventory:\n  def __init__(self):\n    # Declare an empty dictionary to hold inventory information\n    self.inventory = {}\n \n  # Function for adding product\n  def add_product(self, product_name, quantity):\n    # If product_name exists in inventory, add quantity to existing product's quantity\n    if product_name in self.inventory.keys():\n      self.inventory[product_name] += quantity\n    else:\n      # If product_name is not in inventory, add it to inventory\n      self.inventory[product_name] = quantity\n \n  # Function for removing product\n  def remove_product(self, product_name, quantity):\n    # If product_name exists in inventory and there's insufficient quantity, print an error message\n    if product_name in self.inventory.keys() and self.inventory[product_name] < quantity:\n      print(\"Error: Insufficient Quantity!\")\n    else:\n      # If product_name is in inventory and there's sufficient quantity, remove product from inventory\n      self.inventory[product_name] -= quantity\n      if self.inventory[product_name] == 0:\n        del self.inventory[product_name]\n \n  # Function for printing inventory\n  def print_inventory(self):\n    print(\"Inventory:\")\n    # Iterate through keys and values of inventory and print them\n    for product_name, quantity in self.inventory.items():\n      print(product_name + \" : \" + str(quantity))"}
{"instruction": "Write a Python program to simulate a dice game.", "input": "", "output": "import random \n\ndef roll_dice(): \n  # generate random number from 1 to 6 \n  dice = random.randint(1, 6) \n  return dice \n\n# take input from the user \nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\": \n  print(\"Rolling the dices...\") \n  print(\"The values are....\") \n\n  # get two random values \n  dice1 = roll_dice() \n  dice2 = roll_dice() \n\n  print(dice1) \n  print(dice2) \n\n  roll_again = input(\"Roll the dices again?[y/n]\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a dice game.\n\n### Input:\n\n\n### Output:\nimport random \n\ndef roll_dice(): \n  # generate random number from 1 to 6 \n  dice = random.randint(1, 6) \n  return dice \n\n# take input from the user \nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\": \n  print(\"Rolling the dices...\") \n  print(\"The values are....\") \n\n  # get two random values \n  dice1 = roll_dice() \n  dice2 = roll_dice() \n\n  print(dice1) \n  print(dice2) \n\n  roll_again = input(\"Roll the dices again?[y/n]\")"}
{"instruction": "Create a code that plots a sine wave in Python.", "input": "", "output": "\"\"\"\nPlot a sine wave in Python.\n\n\"\"\"\n# Import matplotlib and numpy libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the x axis range \nx_axis = np.arange(0, 2*np.pi, 0.1)\n\n# Set the y axis range \ny_axis = np.sin(x_axis)\n\n# Plot the sine wave\nplt.plot(x_axis, y_axis)\n\n# Set the figure title\nplt.title('Sine Wave')\n\n# Set the x and y labels\nplt.xlabel('x axis')\nplt.ylabel('y axis')\n\n# Set the x and y limits\nplt.xlim(0, 2*np.pi)\nplt.ylim(-1, 1)\n\n# Draw the graph\nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code that plots a sine wave in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nPlot a sine wave in Python.\n\n\"\"\"\n# Import matplotlib and numpy libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the x axis range \nx_axis = np.arange(0, 2*np.pi, 0.1)\n\n# Set the y axis range \ny_axis = np.sin(x_axis)\n\n# Plot the sine wave\nplt.plot(x_axis, y_axis)\n\n# Set the figure title\nplt.title('Sine Wave')\n\n# Set the x and y labels\nplt.xlabel('x axis')\nplt.ylabel('y axis')\n\n# Set the x and y limits\nplt.xlim(0, 2*np.pi)\nplt.ylim(-1, 1)\n\n# Draw the graph\nplt.show()"}
{"instruction": "Explain a method of hashing a string in Python.", "input": "", "output": "One method of hashing a string in Python is to use the built-in hash() function. This function generates a hash code for a given string, which is a numerical representation of the string’s contents. It is important to note that the hash code generated is a fixed-length numerical representation regardless of the length of the string provided. Additionally, the hash code is unique for each input string and is deterministic, meaning it will always produce the same output for the same input.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain a method of hashing a string in Python.\n\n### Input:\n\n\n### Output:\nOne method of hashing a string in Python is to use the built-in hash() function. This function generates a hash code for a given string, which is a numerical representation of the string’s contents. It is important to note that the hash code generated is a fixed-length numerical representation regardless of the length of the string provided. Additionally, the hash code is unique for each input string and is deterministic, meaning it will always produce the same output for the same input."}
{"instruction": "Write a code for a thread-safe timer in Python.", "input": "", "output": "import threading\nimport time\n\nclass ThreadSafeTimer(object):\n\n    def __init__(self, interval, function, args=[], kwargs={}):\n        self.interval = interval\n        self.function = function\n        self.args = args\n        self.kwargs = kwargs\n        self.timer = None\n\n\n    def start(self):\n        self.timer = threading.Timer(self.interval, self.function, *self.args, **self.kwargs)\n        self.timer.daemon = True\n        self.timer.start()\n\n\n    def stop(self):\n        self.timer.cancel()\n        self.timer = None\n\nif __name__ == '__main__':\n    def callback():\n        print('Timer called')\n\n    t = ThreadSafeTimer(2.0, callback)\n    t.start()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code for a thread-safe timer in Python.\n\n### Input:\n\n\n### Output:\nimport threading\nimport time\n\nclass ThreadSafeTimer(object):\n\n    def __init__(self, interval, function, args=[], kwargs={}):\n        self.interval = interval\n        self.function = function\n        self.args = args\n        self.kwargs = kwargs\n        self.timer = None\n\n\n    def start(self):\n        self.timer = threading.Timer(self.interval, self.function, *self.args, **self.kwargs)\n        self.timer.daemon = True\n        self.timer.start()\n\n\n    def stop(self):\n        self.timer.cancel()\n        self.timer = None\n\nif __name__ == '__main__':\n    def callback():\n        print('Timer called')\n\n    t = ThreadSafeTimer(2.0, callback)\n    t.start()"}
{"instruction": "Generate code to compare two objects in Python.", "input": "", "output": "def compare_objects(obj1, obj2):\n    # Compare type\n    if type(obj1) != type(obj2):\n        return False\n    # Compare values\n    if isinstance(obj1, (int, float)):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, str):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, tuple):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, list):\n        if len(obj1) == len(obj2):\n            if all(x == y for x, y in zip(obj1, obj2)):\n                return True\n            else:\n                return False\n    elif isinstance(obj1, dict):\n        if len(obj1) == len(obj2):\n            if obj1 == obj2:\n                return True \n            else:\n                return False\n\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to compare two objects in Python.\n\n### Input:\n\n\n### Output:\ndef compare_objects(obj1, obj2):\n    # Compare type\n    if type(obj1) != type(obj2):\n        return False\n    # Compare values\n    if isinstance(obj1, (int, float)):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, str):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, tuple):\n        if obj1 != obj2:\n            return False\n    elif isinstance(obj1, list):\n        if len(obj1) == len(obj2):\n            if all(x == y for x, y in zip(obj1, obj2)):\n                return True\n            else:\n                return False\n    elif isinstance(obj1, dict):\n        if len(obj1) == len(obj2):\n            if obj1 == obj2:\n                return True \n            else:\n                return False\n\n    return True"}
{"instruction": "Develop a game AI in Python for the game of Go.", "input": "", "output": "import numpy as np\n\ndef evaluate(board, player_turn):\n moves = find_valid_moves(board)\n \n if len(moves) == 0:\n  return 0\n \n scores = []\n for move in moves:\n  board_copy = board.copy()\n  board_copy[move] = player_turn\n  scores.append(evaluate(board_copy, -player_turn))\n \n if player_turn == 1:\n  return max(scores)\n else:\n  return min(scores)\n\ndef find_valid_moves(board):\n moves = []\n \n for i in range(9):\n  for j in range(9):\n   if board[i][j] == 0:\n    moves.append((i, j))\n \n return moves\n\ndef play_game(board, player_turn):\n while True:\n  valid_moves = find_valid_moves(board)\n \n  if len(valid_moves) == 0:\n  return 0\n \n  best_move = None\n  best_score = -float('inf')\n \n  for move in valid_moves:\n   board_copy = board.copy()\n   board_copy[move] = player_turn\n   score = evaluate(board_copy, -player_turn)\n   \n   if score > best_score:\n    best_score = score\n    best_move = move\n \n  board[best_move] = player_turn\n \n  if has_won(board, player_turn):\n    return 1\n \n  player_turn = -player_turn", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a game AI in Python for the game of Go.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef evaluate(board, player_turn):\n moves = find_valid_moves(board)\n \n if len(moves) == 0:\n  return 0\n \n scores = []\n for move in moves:\n  board_copy = board.copy()\n  board_copy[move] = player_turn\n  scores.append(evaluate(board_copy, -player_turn))\n \n if player_turn == 1:\n  return max(scores)\n else:\n  return min(scores)\n\ndef find_valid_moves(board):\n moves = []\n \n for i in range(9):\n  for j in range(9):\n   if board[i][j] == 0:\n    moves.append((i, j))\n \n return moves\n\ndef play_game(board, player_turn):\n while True:\n  valid_moves = find_valid_moves(board)\n \n  if len(valid_moves) == 0:\n  return 0\n \n  best_move = None\n  best_score = -float('inf')\n \n  for move in valid_moves:\n   board_copy = board.copy()\n   board_copy[move] = player_turn\n   score = evaluate(board_copy, -player_turn)\n   \n   if score > best_score:\n    best_score = score\n    best_move = move\n \n  board[best_move] = player_turn\n \n  if has_won(board, player_turn):\n    return 1\n \n  player_turn = -player_turn"}
{"instruction": "Implement gradient descent in a Python program.", "input": "", "output": "# Define function to compute the gradient, given a set of weights\ndef compute_gradient(weights):\n    \n    # Compute the gradient with respect to each weight in the weight vector\n    gradients = []\n    for w in weights:\n        gradients.append(2 * w)\n    \n    # Return the gradient vector\n    return gradients\n\n# Define a function to compute the cost, given a set of weights\ndef compute_cost(weights):\n    \n    # Compute the cost with given weights\n    cost = 0\n    for w in weights:\n        cost += w**2\n    \n    # Return the cost\n    return cost\n\n# Gradient descent loop\nweights = np.array([1, 2, 3]) # Initialize weights\nlearning_rate = 0.01 # Set learning rate\n\nfor i in range(1000): # Iterate for 1000 steps\n    gradients = compute_gradient(weights) # Compute gradients\n    weights -= learning_rate * np.array(gradients) # Do gradient descent step\n    cost = compute_cost(weights) # Compute cost\n    # Print cost every 100 steps \n    if i % 100 == 0:\n        print(\"Cost at iteration %d: %f\" % (i, cost))\n\n# Print the final weights\nprint(weights)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement gradient descent in a Python program.\n\n### Input:\n\n\n### Output:\n# Define function to compute the gradient, given a set of weights\ndef compute_gradient(weights):\n    \n    # Compute the gradient with respect to each weight in the weight vector\n    gradients = []\n    for w in weights:\n        gradients.append(2 * w)\n    \n    # Return the gradient vector\n    return gradients\n\n# Define a function to compute the cost, given a set of weights\ndef compute_cost(weights):\n    \n    # Compute the cost with given weights\n    cost = 0\n    for w in weights:\n        cost += w**2\n    \n    # Return the cost\n    return cost\n\n# Gradient descent loop\nweights = np.array([1, 2, 3]) # Initialize weights\nlearning_rate = 0.01 # Set learning rate\n\nfor i in range(1000): # Iterate for 1000 steps\n    gradients = compute_gradient(weights) # Compute gradients\n    weights -= learning_rate * np.array(gradients) # Do gradient descent step\n    cost = compute_cost(weights) # Compute cost\n    # Print cost every 100 steps \n    if i % 100 == 0:\n        print(\"Cost at iteration %d: %f\" % (i, cost))\n\n# Print the final weights\nprint(weights)"}
{"instruction": "Generate a Python program to create a game loop.", "input": "", "output": "import pygame\n\n# Game constants \nWIDTH = 800\nHEIGHT = 600\nFPS = 30\n\n# Initialize pygame\npygame.init()\n\n# Create window\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n# Game loop\nrunning = True\nwhile running:\n    # Process events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            \n    # Logic \n\n    # Rendering\n    screen.fill(0, 0, 0)\n    pygame.display.flip()\n\n# Terminates the game\npygame.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to create a game loop.\n\n### Input:\n\n\n### Output:\nimport pygame\n\n# Game constants \nWIDTH = 800\nHEIGHT = 600\nFPS = 30\n\n# Initialize pygame\npygame.init()\n\n# Create window\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n# Game loop\nrunning = True\nwhile running:\n    # Process events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            \n    # Logic \n\n    # Rendering\n    screen.fill(0, 0, 0)\n    pygame.display.flip()\n\n# Terminates the game\npygame.quit()"}
{"instruction": "Generate all permutations of a string in Python.", "input": "", "output": "\"\"\"\nGenerate all permutations of a string in Python.\n\"\"\"\n\ndef permutations(string): \n    if len(string) == 1: \n        return string \n  \n    perm_list = [] # resulting list \n    for perm in permutations(string[1:]): \n        for i in range(len(string)): \n            perm_list.append(perm[:i] + string[0:1] + perm[i:]) \n  \n    return perm_list\n\nstring = \"ABC\"\npermutations = permutations(string)\nprint(permutations)\n\n# Output:\n# ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate all permutations of a string in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate all permutations of a string in Python.\n\"\"\"\n\ndef permutations(string): \n    if len(string) == 1: \n        return string \n  \n    perm_list = [] # resulting list \n    for perm in permutations(string[1:]): \n        for i in range(len(string)): \n            perm_list.append(perm[:i] + string[0:1] + perm[i:]) \n  \n    return perm_list\n\nstring = \"ABC\"\npermutations = permutations(string)\nprint(permutations)\n\n# Output:\n# ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']"}
{"instruction": "Create a Python class for an ordered dictionary.", "input": "", "output": "class OrderedDict:\n    def __init__(self):\n        self.items = []\n\n    def __setitem__(self, key, value):\n        for item in self.items:\n            if item[0] == key:\n                item[1] = value\n                break\n        else:\n            self.items.append([key, value])\n \n    def __getitem__(self, key):\n        for item in self.items:\n            if item[0] == key:\n                return item[1]\n        raise KeyError(key)\n\n    def __len__(self):\n        return len(self.items)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for an ordered dictionary.\n\n### Input:\n\n\n### Output:\nclass OrderedDict:\n    def __init__(self):\n        self.items = []\n\n    def __setitem__(self, key, value):\n        for item in self.items:\n            if item[0] == key:\n                item[1] = value\n                break\n        else:\n            self.items.append([key, value])\n \n    def __getitem__(self, key):\n        for item in self.items:\n            if item[0] == key:\n                return item[1]\n        raise KeyError(key)\n\n    def __len__(self):\n        return len(self.items)"}
{"instruction": "Write a Python code to perform string operations", "input": "", "output": "def string_operations(str1):\n    # Capitalize the string\n    str1 = str1.upper()\n    \n    # Reverse the string\n    str1 = str1[::-1]\n    \n    # Split the string in words\n    words = str1.split()\n    \n    # Concatenating string\n    str_concat = ' '.join(words)\n    \n    # Replace string\n    str_replace = str_concat.replace(\"E\", \"*\")\n    \n    # Sort the words in alphabetical order\n    words = str_replace.split()\n    words = sorted(words)\n    str_sorted = ' '.join(words)\n    \n    return str_sorted", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to perform string operations\n\n### Input:\n\n\n### Output:\ndef string_operations(str1):\n    # Capitalize the string\n    str1 = str1.upper()\n    \n    # Reverse the string\n    str1 = str1[::-1]\n    \n    # Split the string in words\n    words = str1.split()\n    \n    # Concatenating string\n    str_concat = ' '.join(words)\n    \n    # Replace string\n    str_replace = str_concat.replace(\"E\", \"*\")\n    \n    # Sort the words in alphabetical order\n    words = str_replace.split()\n    words = sorted(words)\n    str_sorted = ' '.join(words)\n    \n    return str_sorted"}
{"instruction": "Create a text-based user interface using Python.", "input": "", "output": "options=[\"Create\",\"Update\",\"Delete\",\"Retrieve\",\"Quit\"]\n\ndef createUI():\n    \n    while True:\n        for i in range(len(options)): \n            print(str(i+1)+\" \"+options[i])\n        try:\n            inputValue=int(input('Make your selection:'))\n            if inputValue in range(1,len(options)+1):\n                break\n            else:\n                print('Please select a valid option!')\n        except:\n            print('Please select a valid option!')\n    return inputValue\n\nprint(createUI())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based user interface using Python.\n\n### Input:\n\n\n### Output:\noptions=[\"Create\",\"Update\",\"Delete\",\"Retrieve\",\"Quit\"]\n\ndef createUI():\n    \n    while True:\n        for i in range(len(options)): \n            print(str(i+1)+\" \"+options[i])\n        try:\n            inputValue=int(input('Make your selection:'))\n            if inputValue in range(1,len(options)+1):\n                break\n            else:\n                print('Please select a valid option!')\n        except:\n            print('Please select a valid option!')\n    return inputValue\n\nprint(createUI())"}
{"instruction": "Create a Python GUI to generate a simple report.", "input": "", "output": "import tkinter as tk \n\n# Create main window \nwindow = tk.Tk() \nwindow.title(\"Report Generator\") \n\n# Create widgets\nlabel1 = tk.Label(window, text=\"Enter data:\") \ntext_input = tk.Text(window, height=3, width=30) \nbutton1 = tk.Button(window, text=\"Create Report\", \ncommand=generate_report) \n\n# Place widgets\nlabel1.pack() \ntext_input.pack() \nbutton1.pack() \n\n# Function to generate report \ndef generate_report(): \n\t# Fetch user input \n\tinput = text_input.get(\"1.0\", \"end-1c\") \n\t\n\t# Create report\n\t...\n\t# Process input to create report\n\t\n\t# Display report\n\treport_label = tk.Label(window, text=report)\n\treport_label.pack()\n\n# Start GUI \nwindow.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python GUI to generate a simple report.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk \n\n# Create main window \nwindow = tk.Tk() \nwindow.title(\"Report Generator\") \n\n# Create widgets\nlabel1 = tk.Label(window, text=\"Enter data:\") \ntext_input = tk.Text(window, height=3, width=30) \nbutton1 = tk.Button(window, text=\"Create Report\", \ncommand=generate_report) \n\n# Place widgets\nlabel1.pack() \ntext_input.pack() \nbutton1.pack() \n\n# Function to generate report \ndef generate_report(): \n\t# Fetch user input \n\tinput = text_input.get(\"1.0\", \"end-1c\") \n\t\n\t# Create report\n\t...\n\t# Process input to create report\n\t\n\t# Display report\n\treport_label = tk.Label(window, text=report)\n\treport_label.pack()\n\n# Start GUI \nwindow.mainloop()"}
{"instruction": "Construct a linked list data structure in Python", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\n# Linked List class contains a Node object \nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n        \n    def push(self, data):\n        # Allocate the Node & Put in the data \n        new_node = Node(data)\n    \n        # Make next of new Node as head \n        new_node.next = self.head\n    \n        # Move the head to point to new Node \n        self.head = new_node \n  \n    # Utility function to print the linked LinkedList \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data, end=\" \") \n            temp = temp.next", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a linked list data structure in Python\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\n# Linked List class contains a Node object \nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n        \n    def push(self, data):\n        # Allocate the Node & Put in the data \n        new_node = Node(data)\n    \n        # Make next of new Node as head \n        new_node.next = self.head\n    \n        # Move the head to point to new Node \n        self.head = new_node \n  \n    # Utility function to print the linked LinkedList \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data, end=\" \") \n            temp = temp.next"}
{"instruction": "Create a k-means clustering algorithm in Python.", "input": "", "output": "import numpy as np \n\ndef kmeans(k, data): \n    \"\"\"\n    Perform k-means clustering on data\n    \"\"\"\n    # randomly set initial centroids\n    centroids = data[np.random.randint(low=0, high=len(data), size=k)]\n    prev_centroids = np.zeros(centroids.shape)\n\n    clusters = np.zeros(len(data))\n    distances = np.zeros((len(data), k))\n    \n    # find the closest centroid for each sample\n    while not np.allclose(centroids, prev_centroids):\n        # save old centroids\n        prev_centroids = centroids\n    \n        # get the distance between each point and each centroid\n        for idx, centroid in enumerate(centroids):\n            distances[:, idx] = np.linalg.norm(data - centroid, axis=1)\n    \n        # assign each sample to the closest centroids\n        clusters = np.argmin(distances, axis=1)\n    \n        # update centroids \n        for idx in range(k):\n            centroids[idx] = np.mean(data[clusters == idx], axis=0)\n    \n    return clusters, centroids", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a k-means clustering algorithm in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np \n\ndef kmeans(k, data): \n    \"\"\"\n    Perform k-means clustering on data\n    \"\"\"\n    # randomly set initial centroids\n    centroids = data[np.random.randint(low=0, high=len(data), size=k)]\n    prev_centroids = np.zeros(centroids.shape)\n\n    clusters = np.zeros(len(data))\n    distances = np.zeros((len(data), k))\n    \n    # find the closest centroid for each sample\n    while not np.allclose(centroids, prev_centroids):\n        # save old centroids\n        prev_centroids = centroids\n    \n        # get the distance between each point and each centroid\n        for idx, centroid in enumerate(centroids):\n            distances[:, idx] = np.linalg.norm(data - centroid, axis=1)\n    \n        # assign each sample to the closest centroids\n        clusters = np.argmin(distances, axis=1)\n    \n        # update centroids \n        for idx in range(k):\n            centroids[idx] = np.mean(data[clusters == idx], axis=0)\n    \n    return clusters, centroids"}
{"instruction": "Generate a rotating cube in Python using OpenGL.", "input": "", "output": "import pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\n \n# cube vertices\nvertices = (\n    (1, -1, -1),\n    (1, 1, -1),\n    (-1, 1, -1),\n    (-1, -1, -1),\n    (1, -1, 1),\n    (1, 1, 1),\n    (-1, -1, 1),\n    (-1, 1, 1)\n    )\n \n# cube edges\nedges = (\n    (0,1),\n    (0,3),\n    (0,4),\n    (2,1),\n    (2,3),\n    (2,7),\n    (6,3),\n    (6,4),\n    (6,7),\n    (5,1),\n    (5,4),\n    (5,7)\n    )\n \ndef Cube():\n    glBegin(GL_LINES)\n    for edge in edges:\n        for vertex in edge:\n            glVertex3fv(vertices[vertex])\n    glEnd()\n\ndef main():\n    pygame.init()\n    display = (800,600)\n    pygame.display.set_mode(display, DOUBLEBUF|OPENGL)\n \n    # set viewport\n    gluPerspective(45, (display[0]/display[1]), 0.1, 90.0)\n    glTranslatef(0.0, 0.0, -20)\n \n    # cube rotation\n    glRotatef(45.0, 0.0, 1.0, 0.0)\n    glRotatef(45.0, 1.0, 0.0, 0.0)\n \n    # render the sphere\n    Cube()\n    pygame.display.flip()\n    pygame.time.wait(1000)\n \nif __name__ == '__main__':\n    main()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a rotating cube in Python using OpenGL.\n\n### Input:\n\n\n### Output:\nimport pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\n \n# cube vertices\nvertices = (\n    (1, -1, -1),\n    (1, 1, -1),\n    (-1, 1, -1),\n    (-1, -1, -1),\n    (1, -1, 1),\n    (1, 1, 1),\n    (-1, -1, 1),\n    (-1, 1, 1)\n    )\n \n# cube edges\nedges = (\n    (0,1),\n    (0,3),\n    (0,4),\n    (2,1),\n    (2,3),\n    (2,7),\n    (6,3),\n    (6,4),\n    (6,7),\n    (5,1),\n    (5,4),\n    (5,7)\n    )\n \ndef Cube():\n    glBegin(GL_LINES)\n    for edge in edges:\n        for vertex in edge:\n            glVertex3fv(vertices[vertex])\n    glEnd()\n\ndef main():\n    pygame.init()\n    display = (800,600)\n    pygame.display.set_mode(display, DOUBLEBUF|OPENGL)\n \n    # set viewport\n    gluPerspective(45, (display[0]/display[1]), 0.1, 90.0)\n    glTranslatef(0.0, 0.0, -20)\n \n    # cube rotation\n    glRotatef(45.0, 0.0, 1.0, 0.0)\n    glRotatef(45.0, 1.0, 0.0, 0.0)\n \n    # render the sphere\n    Cube()\n    pygame.display.flip()\n    pygame.time.wait(1000)\n \nif __name__ == '__main__':\n    main()"}
{"instruction": "Create a solution in Python Code to Solve Sudoku", "input": "", "output": "def solveSudoku(board):\n    find = find_empty(board)\n    if not find:\n        return True\n    else:\n        row, col = find\n \n    for i in range(1,10):\n        if valid(board, i, (row, col)):\n            board[row][col] = i\n \n            if solveSudoku(board):\n                return True\n \n            board[row][col] = 0\n \n    return False\n\ndef valid(board, num, pos):\n    # Check row\n    for i in range(len(board[0])):\n        if board[pos[0]][i] == num and pos[1] != i:\n            return False\n \n    # Check column\n    for i in range(len(board)):\n        if board[i][pos[1]] == num and pos[0] != i:\n            return False\n \n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n \n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if board[i][j] == num and (i,j) != pos:\n                return False\n \n    return True \n\ndef find_empty(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                return (i, j)  # row, col", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a solution in Python Code to Solve Sudoku\n\n### Input:\n\n\n### Output:\ndef solveSudoku(board):\n    find = find_empty(board)\n    if not find:\n        return True\n    else:\n        row, col = find\n \n    for i in range(1,10):\n        if valid(board, i, (row, col)):\n            board[row][col] = i\n \n            if solveSudoku(board):\n                return True\n \n            board[row][col] = 0\n \n    return False\n\ndef valid(board, num, pos):\n    # Check row\n    for i in range(len(board[0])):\n        if board[pos[0]][i] == num and pos[1] != i:\n            return False\n \n    # Check column\n    for i in range(len(board)):\n        if board[i][pos[1]] == num and pos[0] != i:\n            return False\n \n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n \n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if board[i][j] == num and (i,j) != pos:\n                return False\n \n    return True \n\ndef find_empty(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                return (i, j)  # row, col"}
{"instruction": "Create an automated trading algorithm in Python.", "input": "", "output": "import datetime\nimport pandas as pd\n \ndef automated_strategy(data, window1, window2):\n    # Calculating SMA\n    short_rolling = data.rolling(window=window1).mean()\n    long_rolling = data.rolling(window=window2).mean()\n \n    # Creating signals\n    data['short_mavg'] = short_rolling\n    data['long_mavg'] = long_rolling\n    data['signal'] = 0.0\n    data['signal'][window1:] = np.where(data['short_mavg'][window1:] \n                        > data['long_mavg'][window1:], 1.0, 0.0)   \n \n    # Generating trading orders\n    data['positions'] = data['signal'].diff()\n \n    # Initializing the plot figure\n    fig = plt.figure()\n \n     # Plotting SMA\n    ax1 = fig.add_subplot(111, ylabel='Price in $')\n    data[['Close', 'short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n \n    # Plotting the trading orders\n    ax2 = fig.add_subplot(111, ylabel='Order', yticklabels=[])\n    data['positions'].plot(ax=ax2, lw=2., color='r')\n \n    # Plotting the trading orders\n    ax3 = fig.add_subplot(111, ylabel='P&L', yticklabels=[])\n    data['p&l'].plot(ax=ax3, lw=2., color='g')\n \n    # Show the plot\n    plt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an automated trading algorithm in Python.\n\n### Input:\n\n\n### Output:\nimport datetime\nimport pandas as pd\n \ndef automated_strategy(data, window1, window2):\n    # Calculating SMA\n    short_rolling = data.rolling(window=window1).mean()\n    long_rolling = data.rolling(window=window2).mean()\n \n    # Creating signals\n    data['short_mavg'] = short_rolling\n    data['long_mavg'] = long_rolling\n    data['signal'] = 0.0\n    data['signal'][window1:] = np.where(data['short_mavg'][window1:] \n                        > data['long_mavg'][window1:], 1.0, 0.0)   \n \n    # Generating trading orders\n    data['positions'] = data['signal'].diff()\n \n    # Initializing the plot figure\n    fig = plt.figure()\n \n     # Plotting SMA\n    ax1 = fig.add_subplot(111, ylabel='Price in $')\n    data[['Close', 'short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n \n    # Plotting the trading orders\n    ax2 = fig.add_subplot(111, ylabel='Order', yticklabels=[])\n    data['positions'].plot(ax=ax2, lw=2., color='r')\n \n    # Plotting the trading orders\n    ax3 = fig.add_subplot(111, ylabel='P&L', yticklabels=[])\n    data['p&l'].plot(ax=ax3, lw=2., color='g')\n \n    # Show the plot\n    plt.show()"}
{"instruction": "Write a Python program that builds a calculator.", "input": "", "output": "while True: \n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")\n    user_input = input(\": \")\n    \n    if user_input == \"quit\":\n        break\n    elif user_input == \"add\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 + num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"subtract\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 - num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"multiply\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 * num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"divide\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 / num2)\n        print(\"The answer is \" + result)\n    else:\n        print(\"Unknown input\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that builds a calculator.\n\n### Input:\n\n\n### Output:\nwhile True: \n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")\n    user_input = input(\": \")\n    \n    if user_input == \"quit\":\n        break\n    elif user_input == \"add\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 + num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"subtract\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 - num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"multiply\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 * num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"divide\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 / num2)\n        print(\"The answer is \" + result)\n    else:\n        print(\"Unknown input\")"}
{"instruction": "Create a two-player game of Blackjack in Python.", "input": "", "output": "from random import shuffle\nfrom itertools import product\n\ndeck = list(product(['A','2','3','4','5','6','7','8','9','10','J','Q','K'],['C','D','H','S']))\nshuffle(deck)\n\nplayer1_score = 0\nplayer2_score = 0\n\ndef deal_cards(player):\n    card1 = deck.pop()\n    card2 = deck.pop()\n    player.append(card1)\n    player.append(card2)\n    return player\n\nplayer1 = deal_cards([])\nplayer2 = deal_cards([])\n\n# Player 1 turn\nplayer1_score = 0\nfor i in range(len(player1)):\n    card_score = 0\n    if (player1[i][0] == 'A'):\n        card_score = 11\n    elif (player1[i][0] == 'J' or player1[i][0] == 'Q' or player1[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player1[i][0])\n        \n    player1_score += card_score\n\n# Player 2 turn\nplayer2_score = 0\nfor i in range(len(player2)):\n    card_score = 0\n    if (player2[i][0] == 'A'):\n        card_score = 11\n    elif (player2[i][0] == 'J' or player2[i][0] == 'Q' or player2[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player2[i][0])\n        \n    player2_score += card_score\n\n# Checking the winner\nif (player1_score > player2_score):\n    print(\"Player 1 wins!\")\nelif (player2_score > player1_score):\n    print(\"Player 2 wins!\")\nelse:\n    print(\"It's a Tie!\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a two-player game of Blackjack in Python.\n\n### Input:\n\n\n### Output:\nfrom random import shuffle\nfrom itertools import product\n\ndeck = list(product(['A','2','3','4','5','6','7','8','9','10','J','Q','K'],['C','D','H','S']))\nshuffle(deck)\n\nplayer1_score = 0\nplayer2_score = 0\n\ndef deal_cards(player):\n    card1 = deck.pop()\n    card2 = deck.pop()\n    player.append(card1)\n    player.append(card2)\n    return player\n\nplayer1 = deal_cards([])\nplayer2 = deal_cards([])\n\n# Player 1 turn\nplayer1_score = 0\nfor i in range(len(player1)):\n    card_score = 0\n    if (player1[i][0] == 'A'):\n        card_score = 11\n    elif (player1[i][0] == 'J' or player1[i][0] == 'Q' or player1[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player1[i][0])\n        \n    player1_score += card_score\n\n# Player 2 turn\nplayer2_score = 0\nfor i in range(len(player2)):\n    card_score = 0\n    if (player2[i][0] == 'A'):\n        card_score = 11\n    elif (player2[i][0] == 'J' or player2[i][0] == 'Q' or player2[i][0] == 'K'):\n        card_score = 10\n    else:\n        card_score = int(player2[i][0])\n        \n    player2_score += card_score\n\n# Checking the winner\nif (player1_score > player2_score):\n    print(\"Player 1 wins!\")\nelif (player2_score > player1_score):\n    print(\"Player 2 wins!\")\nelse:\n    print(\"It's a Tie!\")"}
{"instruction": "Create a chatbot in Python for customer service.", "input": "", "output": "import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n# Define a function to get the simple POS tag\ndef get_simple_pos(tag):\n \n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# Create a lemmatizer object \nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_sentence(sentence):\n    #tokenize the sentence and find the POS tag for each token\n    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  \n    #tuple of (token, simple POS tag)\n    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]\n    lemmatized_sentence = []\n    for word, tag in nltk_tagged:\n        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))\n    return \" \".join(lemmatized_sentence)\n\n# Create the chatbot\ndef create_bot():\n    print(\"Hello! I am a customer service chatbot. How can I help you?\")\n    response = input()\n    response = lemmatize_sentence(response)\n    # Perform actions based on the response\n    if response == \"quit\":\n        return\n    else:\n        print(\"Thank you for your question. I will get back to you shortly with an answer.\")\n        create_bot()\n\ncreate_bot()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a chatbot in Python for customer service.\n\n### Input:\n\n\n### Output:\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n# Define a function to get the simple POS tag\ndef get_simple_pos(tag):\n \n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# Create a lemmatizer object \nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_sentence(sentence):\n    #tokenize the sentence and find the POS tag for each token\n    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  \n    #tuple of (token, simple POS tag)\n    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]\n    lemmatized_sentence = []\n    for word, tag in nltk_tagged:\n        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))\n    return \" \".join(lemmatized_sentence)\n\n# Create the chatbot\ndef create_bot():\n    print(\"Hello! I am a customer service chatbot. How can I help you?\")\n    response = input()\n    response = lemmatize_sentence(response)\n    # Perform actions based on the response\n    if response == \"quit\":\n        return\n    else:\n        print(\"Thank you for your question. I will get back to you shortly with an answer.\")\n        create_bot()\n\ncreate_bot()"}
{"instruction": "Implement an RSA encryption algorithm in Python.", "input": "", "output": "# generate a random prime number\ndef gen_prime(): \n    # generate a large, prime number \n    p = getPrime(1024)\n    q = getPrime(1024)\n \n    # compute the modulus\n    n = p * q\n    return n\n \n# generate the private and public key\ndef gen_keys(n): \n    # generate two distinct large primes\n    p = getPrime(1024)\n    q = getPrime(1024)\n    phi_n = (p - 1) * (q - 1)\n \n    # choose an integer e such that e and phi(n) are coprime\n    e = random.randrange(1, phi_n)\n    g = gcd(e, phi_n)\n    while g != 1:\n        e = random.randrange(1, phi_n)\n        g = gcd(e, phi_n)\n \n    # generate private key\n    d = modinv(e, phi_n)\n \n    # return public and private keypair\n    # public key is (e, n) and private key is (d, n)\n    return ((e, n), (d, n))\n \n# encrypt the message\ndef encrypt(pk, plaintext):\n    # unpack the key into it's components\n    key, n = pk\n    # convert each letter in the plaintext to numbers based on the character using a^b mod m\n    cipher = [(ord(char) ** key) % n for char in plaintext]\n    # return the array of bytes\n    return cipher\n \n# decrypt the message\ndef decrypt(pk, ciphertext):\n    # unpack the key into its components\n    key, n = pk\n    # generate the plaintext based on the ciphertext and key using a^b mod m\n    plain = [chr((char ** key) % n) for char in ciphertext]\n    # return the array of bytes as a string\n    return ''.join(plain)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an RSA encryption algorithm in Python.\n\n### Input:\n\n\n### Output:\n# generate a random prime number\ndef gen_prime(): \n    # generate a large, prime number \n    p = getPrime(1024)\n    q = getPrime(1024)\n \n    # compute the modulus\n    n = p * q\n    return n\n \n# generate the private and public key\ndef gen_keys(n): \n    # generate two distinct large primes\n    p = getPrime(1024)\n    q = getPrime(1024)\n    phi_n = (p - 1) * (q - 1)\n \n    # choose an integer e such that e and phi(n) are coprime\n    e = random.randrange(1, phi_n)\n    g = gcd(e, phi_n)\n    while g != 1:\n        e = random.randrange(1, phi_n)\n        g = gcd(e, phi_n)\n \n    # generate private key\n    d = modinv(e, phi_n)\n \n    # return public and private keypair\n    # public key is (e, n) and private key is (d, n)\n    return ((e, n), (d, n))\n \n# encrypt the message\ndef encrypt(pk, plaintext):\n    # unpack the key into it's components\n    key, n = pk\n    # convert each letter in the plaintext to numbers based on the character using a^b mod m\n    cipher = [(ord(char) ** key) % n for char in plaintext]\n    # return the array of bytes\n    return cipher\n \n# decrypt the message\ndef decrypt(pk, ciphertext):\n    # unpack the key into its components\n    key, n = pk\n    # generate the plaintext based on the ciphertext and key using a^b mod m\n    plain = [chr((char ** key) % n) for char in ciphertext]\n    # return the array of bytes as a string\n    return ''.join(plain)"}
{"instruction": "Create a simple game in Python with two players.", "input": "", "output": "import random\nimport time\n \ndef get_player_name():\n \n    return input(\"What is your name? \")\ndef get_player_choice():\n \n    choice = input(\"\\nRock, Paper or Scissors (R/P/S)? \").upper()\n    \n    if choice not in [\"R\", \"P\", \"S\"]:\n        print(\"\\nNot an valid answer. try again\")\n        get_player_choice()\n    return choice\n \n \ndef main():\n    # get player info\n    player_1_name = get_player_name()\n    player_2_name = get_player_name()\n    print(f\"\\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!\")\n    time.sleep(3)\n \n    # get player options\n    player_1_choice = get_player_choice()\n    player_2_choice = get_player_choice()\n \n    # operation\n    print(f\"\\n{player_1_name} puts {player_1_choice}.\")\n    print(f\"\\n{player_2_name} puts {player_2_choice}\")\n    time.sleep(3)\n    print(\"\\nShoot!\")\n    time.sleep(2)\n    print(\"\\nNow let's see!\")\n    time.sleep(3)\n    if player_1_choice == player_2_choice:\n        print(\"\\nIt's a tie!\")\n    elif player_1_choice == 'R' and player_2_choice == 'S':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'S' and player_2_choice == 'R':\n        print(f\"\\n{player_2_name} wins!\")\n    elif player_1_choice == 'P' and player_2_choice == 'R':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'R' and player_2_choice == 'P':\n        print(f\"\\n{player_2_name} wins!\")\n    else:\n        print(f\"\\n{player_2_name} wins!\")\n \nif __name__ == \"__main__\":\n    main()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple game in Python with two players.\n\n### Input:\n\n\n### Output:\nimport random\nimport time\n \ndef get_player_name():\n \n    return input(\"What is your name? \")\ndef get_player_choice():\n \n    choice = input(\"\\nRock, Paper or Scissors (R/P/S)? \").upper()\n    \n    if choice not in [\"R\", \"P\", \"S\"]:\n        print(\"\\nNot an valid answer. try again\")\n        get_player_choice()\n    return choice\n \n \ndef main():\n    # get player info\n    player_1_name = get_player_name()\n    player_2_name = get_player_name()\n    print(f\"\\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!\")\n    time.sleep(3)\n \n    # get player options\n    player_1_choice = get_player_choice()\n    player_2_choice = get_player_choice()\n \n    # operation\n    print(f\"\\n{player_1_name} puts {player_1_choice}.\")\n    print(f\"\\n{player_2_name} puts {player_2_choice}\")\n    time.sleep(3)\n    print(\"\\nShoot!\")\n    time.sleep(2)\n    print(\"\\nNow let's see!\")\n    time.sleep(3)\n    if player_1_choice == player_2_choice:\n        print(\"\\nIt's a tie!\")\n    elif player_1_choice == 'R' and player_2_choice == 'S':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'S' and player_2_choice == 'R':\n        print(f\"\\n{player_2_name} wins!\")\n    elif player_1_choice == 'P' and player_2_choice == 'R':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'R' and player_2_choice == 'P':\n        print(f\"\\n{player_2_name} wins!\")\n    else:\n        print(f\"\\n{player_2_name} wins!\")\n \nif __name__ == \"__main__\":\n    main()"}
{"instruction": "Implement a parse tree using a Python dictionary.", "input": "", "output": "import collections\n\n# Create a tree using a Python dictionary\nParseTree = collections.defaultdict(dict)\n\n# Function to add a node to the tree\ndef add_node(parent, child):\n    ParseTree[parent][child] = {}\n\n# Function to traverse the tree\ndef traverse_tree(node):\n    # Base case\n    if len(ParseTree[node]) == 0:\n        return\n    \n    for key, value in ParseTree[node].items():\n        print(\"{}-->{}\".format(node, key))\n        traverse_tree(key)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a parse tree using a Python dictionary.\n\n### Input:\n\n\n### Output:\nimport collections\n\n# Create a tree using a Python dictionary\nParseTree = collections.defaultdict(dict)\n\n# Function to add a node to the tree\ndef add_node(parent, child):\n    ParseTree[parent][child] = {}\n\n# Function to traverse the tree\ndef traverse_tree(node):\n    # Base case\n    if len(ParseTree[node]) == 0:\n        return\n    \n    for key, value in ParseTree[node].items():\n        print(\"{}-->{}\".format(node, key))\n        traverse_tree(key)"}
{"instruction": "Design a Python class that creates a linked list.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert(self, data):\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that creates a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert(self, data):\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node"}
{"instruction": "Implement a counter using a dictionary in Python.", "input": "", "output": "def counter(text):\n    \"\"\"\n    Function to count the occurrence of each word in the text using \n    a dictionary data structure.\n    \n    Parameters: \n    text (str): The given text to count.\n    \n    Returns: \n    dict: A dictionary of words with their counts.\n    \"\"\"\n    result = {}  # Create empty dictionary\n    for word in text.split():\n        if word in result: \n            result[word] += 1\n        else: \n            result[word] = 1\n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a counter using a dictionary in Python.\n\n### Input:\n\n\n### Output:\ndef counter(text):\n    \"\"\"\n    Function to count the occurrence of each word in the text using \n    a dictionary data structure.\n    \n    Parameters: \n    text (str): The given text to count.\n    \n    Returns: \n    dict: A dictionary of words with their counts.\n    \"\"\"\n    result = {}  # Create empty dictionary\n    for word in text.split():\n        if word in result: \n            result[word] += 1\n        else: \n            result[word] = 1\n    return result"}
{"instruction": "Create a cache storage system with TTL in Python.", "input": "", "output": "class CacheStorage:\n    def __init__(self, ttl):\n        self.ttl = ttl\n        self.cache = {}\n    \n    def store(self, key, value):\n        self.cache[key] = {\"value\": value,\n                           \"expire_at\": time.time() + self.ttl}\n    \n    def fetch(self, key):\n        # Check if key is expired\n        if self.cache[key][\"expire_at\"] > time.time():\n            return self.cache[key][\"value\"]\n        else:\n            # If expired, remove the key and return None\n            self.cache.pop(key)\n            return None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a cache storage system with TTL in Python.\n\n### Input:\n\n\n### Output:\nclass CacheStorage:\n    def __init__(self, ttl):\n        self.ttl = ttl\n        self.cache = {}\n    \n    def store(self, key, value):\n        self.cache[key] = {\"value\": value,\n                           \"expire_at\": time.time() + self.ttl}\n    \n    def fetch(self, key):\n        # Check if key is expired\n        if self.cache[key][\"expire_at\"] > time.time():\n            return self.cache[key][\"value\"]\n        else:\n            # If expired, remove the key and return None\n            self.cache.pop(key)\n            return None"}
{"instruction": "Create a Python class representing a linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList:  \n    def __init__(self):\n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head\n        self.head = new_node\n  \n    def print_list(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next\n  \nlist = LinkedList() \nlist.push(1) \nlist.push(2) \nlist.push(3) \nlist.push(4) \nlist.print_list()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class representing a linked list.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList:  \n    def __init__(self):\n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head\n        self.head = new_node\n  \n    def print_list(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next\n  \nlist = LinkedList() \nlist.push(1) \nlist.push(2) \nlist.push(3) \nlist.push(4) \nlist.print_list()"}
{"instruction": "Generate a module for sending emails with Python.", "input": "", "output": "\"\"\"\nModule for sending emails with Python\n\"\"\"\n\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n\ndef send_email(sender, recipients, subject, body):\n    message = MIMEMultipart()\n    message['From'] = sender\n    message['To'] = ', '.join(recipients)\n    message['Subject'] = subject\n    message.attach(MIMEText(body, 'plain'))\n\n    smtp_server = smtplib.SMTP('smtp.example.com')\n    smtp_server.starttls()\n    smtp_server.login('username', 'password')\n    smtp_server.send_message(message)\n    smtp_server.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a module for sending emails with Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nModule for sending emails with Python\n\"\"\"\n\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n\ndef send_email(sender, recipients, subject, body):\n    message = MIMEMultipart()\n    message['From'] = sender\n    message['To'] = ', '.join(recipients)\n    message['Subject'] = subject\n    message.attach(MIMEText(body, 'plain'))\n\n    smtp_server = smtplib.SMTP('smtp.example.com')\n    smtp_server.starttls()\n    smtp_server.login('username', 'password')\n    smtp_server.send_message(message)\n    smtp_server.quit()"}
{"instruction": "Design an algorithm for sorting a list in Python.", "input": "", "output": "def sort_list(list):\n   for i in range(len(list)-1):          # loop over index i from 0 to n-2\n       small = i                         # set minimum index to i\n       for j in range(i + 1, len(list)): # loop over index j from i+1 to n-1\n           if list[j] < list[small]:      # compare list[j] with list[small]\n               small = j                  # update minimum index\n       list[i], list[small] = list[small], list[i]  # swap list[i] and list[small]\n   return list\n\n\n# Main program\nlist = [ 3, 8, 4, 6, 2, 9, 7]\nprint (\"Original list:\", list)\nsort_list(list)\nprint (\"Sorted list:\", list)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm for sorting a list in Python.\n\n### Input:\n\n\n### Output:\ndef sort_list(list):\n   for i in range(len(list)-1):          # loop over index i from 0 to n-2\n       small = i                         # set minimum index to i\n       for j in range(i + 1, len(list)): # loop over index j from i+1 to n-1\n           if list[j] < list[small]:      # compare list[j] with list[small]\n               small = j                  # update minimum index\n       list[i], list[small] = list[small], list[i]  # swap list[i] and list[small]\n   return list\n\n\n# Main program\nlist = [ 3, 8, 4, 6, 2, 9, 7]\nprint (\"Original list:\", list)\nsort_list(list)\nprint (\"Sorted list:\", list)"}
{"instruction": "Python program to generate a tree like structure.", "input": "", "output": "def generate_tree(h): \n    # h is the height of the tree\n    # Initialize the number of spaces per line \n    n_spaces = h - 1\n  \n    # Generate the tree structure \n    for i in range(1, h+1): \n        # Print h-i spaces at the beginning of each line \n        for j in range(n_spaces): \n            print(end=\" \") \n              \n        # Print i stars at the end of each line \n        for j in range(i): \n            print(\"* \", end=\"\") \n              \n        # Move to the next line (Print a newline character) \n        print() \n          \n        # Update the number of spaces used \n        n_spaces -= 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPython program to generate a tree like structure.\n\n### Input:\n\n\n### Output:\ndef generate_tree(h): \n    # h is the height of the tree\n    # Initialize the number of spaces per line \n    n_spaces = h - 1\n  \n    # Generate the tree structure \n    for i in range(1, h+1): \n        # Print h-i spaces at the beginning of each line \n        for j in range(n_spaces): \n            print(end=\" \") \n              \n        # Print i stars at the end of each line \n        for j in range(i): \n            print(\"* \", end=\"\") \n              \n        # Move to the next line (Print a newline character) \n        print() \n          \n        # Update the number of spaces used \n        n_spaces -= 1"}
{"instruction": "Write a Python program to create a Caesar cipher.", "input": "", "output": "def encrypt(plain_text, shift): \n cipher_text = \"\" \n for char in plain_text: \n     if char.isalpha(): \n         char_code = ord(char) \n         char_code += shift \n         if char.isupper():\n             if char_code > ord('Z'): \n                 char_code -= 26 \n             elif char_code < ord('A'): \n                 char_code += 26 \n         elif char.islower(): \n             if char_code > ord('z'): \n                 char_code -= 26 \n             elif char_code < ord('a'): \n                 char_code += 26 \n         cipher_text += chr(char_code) \n     else: \n         cipher_text += char\n return cipher_text", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a Caesar cipher.\n\n### Input:\n\n\n### Output:\ndef encrypt(plain_text, shift): \n cipher_text = \"\" \n for char in plain_text: \n     if char.isalpha(): \n         char_code = ord(char) \n         char_code += shift \n         if char.isupper():\n             if char_code > ord('Z'): \n                 char_code -= 26 \n             elif char_code < ord('A'): \n                 char_code += 26 \n         elif char.islower(): \n             if char_code > ord('z'): \n                 char_code -= 26 \n             elif char_code < ord('a'): \n                 char_code += 26 \n         cipher_text += chr(char_code) \n     else: \n         cipher_text += char\n return cipher_text"}
{"instruction": "Generate a class for a Fibonacci series in Python", "input": "", "output": "class FibonacciSeries:\n    '''This class will generate a Fibonacci series'''\n\n    def __init__(self, length):\n        self.length = length\n        self.series = []\n\n    def generate_series(self):\n        '''Generates a Fibonacci series of a given length'''\n        a = 0\n        b = 1\n        while len(self.series) < self.length:\n            c = a + b\n            self.series.append(c)\n            a, b = b, c   # Parallel Assignment \n        \nif __name__ == '__main__':\n    fibonacci_series = FibonacciSeries(10)\n    fibonacci_series.generate_series()\n    print(fibonacci_series.series) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class for a Fibonacci series in Python\n\n### Input:\n\n\n### Output:\nclass FibonacciSeries:\n    '''This class will generate a Fibonacci series'''\n\n    def __init__(self, length):\n        self.length = length\n        self.series = []\n\n    def generate_series(self):\n        '''Generates a Fibonacci series of a given length'''\n        a = 0\n        b = 1\n        while len(self.series) < self.length:\n            c = a + b\n            self.series.append(c)\n            a, b = b, c   # Parallel Assignment \n        \nif __name__ == '__main__':\n    fibonacci_series = FibonacciSeries(10)\n    fibonacci_series.generate_series()\n    print(fibonacci_series.series) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"}
{"instruction": "Create a Django web application with a home page.", "input": "", "output": "# Create a new Django application\ndjango-admin startproject my_django_app\n\n# Create a Django app\npython manage.py startapp home\n\n# Add the application in the list of INSTALLED_APPS inside my_django_app/settings.py\nINSTALLED_APPS = [\n    'home',\n    ...\n]\n\n# Create the URL of the homepage in my_django_app/urls.py\nfrom home.views import home\n\nurlpatterns = [\n    path('', home, name='home'),\n    ...\n]\n\n# Create the view for home page in home/views.py\nfrom django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home/index.html')\n\n# Create the HTML view in home/templates/home/index.html\n<html>\n    <h1>Welcome to my Home Page!</h1>\n</html>", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django web application with a home page.\n\n### Input:\n\n\n### Output:\n# Create a new Django application\ndjango-admin startproject my_django_app\n\n# Create a Django app\npython manage.py startapp home\n\n# Add the application in the list of INSTALLED_APPS inside my_django_app/settings.py\nINSTALLED_APPS = [\n    'home',\n    ...\n]\n\n# Create the URL of the homepage in my_django_app/urls.py\nfrom home.views import home\n\nurlpatterns = [\n    path('', home, name='home'),\n    ...\n]\n\n# Create the view for home page in home/views.py\nfrom django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home/index.html')\n\n# Create the HTML view in home/templates/home/index.html\n<html>\n    <h1>Welcome to my Home Page!</h1>\n</html>"}
{"instruction": "Explain the usage of `print` statement in Python.", "input": "", "output": "The print statement is used to output text or other data to the standard output device in Python. It can be used to print strings, numeric data, objects, or other types of data. For example, you can print a simple string by using the print statement like this: print(\"Hello World!\"). You can also print numbers and objects by using the print statement. For example, you can print the results of math operations by using the print statement like this: print(5 * 10). You can also print variables and lists of data using the print statement. For example, you can print a list by using the print statement like this: print(list_of_numbers). The print statement is used to output data to the standard output device and can be used to debug and display results in a readable way.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the usage of `print` statement in Python.\n\n### Input:\n\n\n### Output:\nThe print statement is used to output text or other data to the standard output device in Python. It can be used to print strings, numeric data, objects, or other types of data. For example, you can print a simple string by using the print statement like this: print(\"Hello World!\"). You can also print numbers and objects by using the print statement. For example, you can print the results of math operations by using the print statement like this: print(5 * 10). You can also print variables and lists of data using the print statement. For example, you can print a list by using the print statement like this: print(list_of_numbers). The print statement is used to output data to the standard output device and can be used to debug and display results in a readable way."}
{"instruction": "Design a python program to generate a binary tree", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n        else:\n            current = self.root\n            while current is not None:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = new_node\n                        break\n                    else:\n                        current = current.left\n                elif data > current.data:\n                    if current.right is None:\n                        current.right = new_node\n                        break\n                    else:\n                        current = current.right", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to generate a binary tree\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n        else:\n            current = self.root\n            while current is not None:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = new_node\n                        break\n                    else:\n                        current = current.left\n                elif data > current.data:\n                    if current.right is None:\n                        current.right = new_node\n                        break\n                    else:\n                        current = current.right"}
{"instruction": "Design an algorithm to detect fraud using Python.", "input": "", "output": "def fraud_detection(transactions):\n    fraud_transactions = []\n    for transaction in transactions:\n        # Get the amount of the transaction\n        amount = transaction['amount']\n        # Check if the amount is greater than the user's typical spending pattern\n        if amount > user_spending_threshold(transaction['user_id']):\n            # Check if this is an unusual merchant for this user\n            if is_unusual_merchant(transaction['user_id'], transaction['merchant_id']):\n                # Flag the transaction as suspicious\n                fraud_transactions.append(transaction)\n    # Return the list of suspicious transactions\n    return fraud_transactions\n    \ndef user_spending_threshold(user_id):\n    # Code to get the user's typical spending pattern\n    ...\n    return threshold\n    \ndef is_unusual_merchant(user_id, merchant_id):\n    # Code to check if the merchant is unusual for this user\n    ...\n    return is_unusual", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to detect fraud using Python.\n\n### Input:\n\n\n### Output:\ndef fraud_detection(transactions):\n    fraud_transactions = []\n    for transaction in transactions:\n        # Get the amount of the transaction\n        amount = transaction['amount']\n        # Check if the amount is greater than the user's typical spending pattern\n        if amount > user_spending_threshold(transaction['user_id']):\n            # Check if this is an unusual merchant for this user\n            if is_unusual_merchant(transaction['user_id'], transaction['merchant_id']):\n                # Flag the transaction as suspicious\n                fraud_transactions.append(transaction)\n    # Return the list of suspicious transactions\n    return fraud_transactions\n    \ndef user_spending_threshold(user_id):\n    # Code to get the user's typical spending pattern\n    ...\n    return threshold\n    \ndef is_unusual_merchant(user_id, merchant_id):\n    # Code to check if the merchant is unusual for this user\n    ...\n    return is_unusual"}
{"instruction": "Develop a Django web application presenting a CV.", "input": "", "output": "import django\n\n# Setting up a django project\ndjango.setup()\n\n# Providing the project name and the path to working directory\ndjango-admin startproject <project_name> <working_directory_path>\n\n# Running the project server\npython manage.py runserver\n\n# Creating and adding data models\nfrom django.db import models\n\nclass CV(models.Model):\n    name = models.CharField(max_length=256)\n    age = models.IntegerField()\n    education = models.TextField()\n    experience = models.TextField()\n    skills = models.TextField()\n\n# Migrating the models\npython manage.py makemigrations\npython manage.py migrate\n\n# Creating a superuser for the admin panel\npython manage.py createsuperuser\n\n# Adding admin view for the CV\nfrom django.contrib import admin\nfrom .models import CV\n\n# Registering the CV model to the admin panel\nadmin.site.register(CV)\n\n# Creating the CV view and template\nfrom django.shortcuts import render\nfrom django.template import loader\n\ndef cv(request):\n    cvs = CV.objects.all()\n    template = loader.get_template('cv.html')\n    context = {\n        'cvs': cvs,\n    }\n    return  HttpResponse(template.render(context, request))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Django web application presenting a CV.\n\n### Input:\n\n\n### Output:\nimport django\n\n# Setting up a django project\ndjango.setup()\n\n# Providing the project name and the path to working directory\ndjango-admin startproject <project_name> <working_directory_path>\n\n# Running the project server\npython manage.py runserver\n\n# Creating and adding data models\nfrom django.db import models\n\nclass CV(models.Model):\n    name = models.CharField(max_length=256)\n    age = models.IntegerField()\n    education = models.TextField()\n    experience = models.TextField()\n    skills = models.TextField()\n\n# Migrating the models\npython manage.py makemigrations\npython manage.py migrate\n\n# Creating a superuser for the admin panel\npython manage.py createsuperuser\n\n# Adding admin view for the CV\nfrom django.contrib import admin\nfrom .models import CV\n\n# Registering the CV model to the admin panel\nadmin.site.register(CV)\n\n# Creating the CV view and template\nfrom django.shortcuts import render\nfrom django.template import loader\n\ndef cv(request):\n    cvs = CV.objects.all()\n    template = loader.get_template('cv.html')\n    context = {\n        'cvs': cvs,\n    }\n    return  HttpResponse(template.render(context, request))"}
{"instruction": "Generate a Python function to calculate windchill.", "input": "", "output": "def calc_windchill(temp, windspeed):\n    \"\"\"Calculates wind chill based on given temperature and wind speed.\n\n    Args:\n        temp (int, float): Temperature in Celsius\n        windspeed (int, float): Wind speed in km/h\n\n    Returns:\n        Wind chill in Celsius (int, float)\n    \"\"\"\n    if temp > 10 or windspeed < 4.8:\n        return temp\n   \n    windchill = 13.12 + 0.6215 * temp - 11.37 * windspeed**0.16 + 0.3965 * temp * windspeed**0.16\n\n    return windchill", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to calculate windchill.\n\n### Input:\n\n\n### Output:\ndef calc_windchill(temp, windspeed):\n    \"\"\"Calculates wind chill based on given temperature and wind speed.\n\n    Args:\n        temp (int, float): Temperature in Celsius\n        windspeed (int, float): Wind speed in km/h\n\n    Returns:\n        Wind chill in Celsius (int, float)\n    \"\"\"\n    if temp > 10 or windspeed < 4.8:\n        return temp\n   \n    windchill = 13.12 + 0.6215 * temp - 11.37 * windspeed**0.16 + 0.3965 * temp * windspeed**0.16\n\n    return windchill"}
{"instruction": "Optimize the performance of a given Python script.", "input": "", "output": "import time\n\ndef optimize_performance(function):\n    start_time = time.time()\n    function\n    end_time = time.time()\n    execution_time = end_time - start_time\n    print(\"Function took\", execution_time, \"seconds to execute.\")\n\n    # perform optimizations\n    optimized_function = function\n    start_time = time.time()\n    optimized_function\n    end_time = time.time()\n    execution_time = end_time-start_time\n    print(\"Optimized Function took\", execution_time, \"seconds to execute\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the performance of a given Python script.\n\n### Input:\n\n\n### Output:\nimport time\n\ndef optimize_performance(function):\n    start_time = time.time()\n    function\n    end_time = time.time()\n    execution_time = end_time - start_time\n    print(\"Function took\", execution_time, \"seconds to execute.\")\n\n    # perform optimizations\n    optimized_function = function\n    start_time = time.time()\n    optimized_function\n    end_time = time.time()\n    execution_time = end_time-start_time\n    print(\"Optimized Function took\", execution_time, \"seconds to execute\")"}
{"instruction": "Generate a class to represent a student in Python.", "input": "", "output": "class Student:\n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_major(self):\n        return self.major\n    \n    def set_name(self, new_name):\n        self.name = new_name\n    \n    def set_age(self, new_age):\n        self.age = new_age\n    \n    def set_major(self, new_major):\n        self.major = new_major", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class to represent a student in Python.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age \n    \n    def get_major(self):\n        return self.major\n    \n    def set_name(self, new_name):\n        self.name = new_name\n    \n    def set_age(self, new_age):\n        self.age = new_age\n    \n    def set_major(self, new_major):\n        self.major = new_major"}
{"instruction": "Create a geo-fenced notification system in Python.", "input": "", "output": "import geocoder\n\ndef notification_system(user_location, message):\n    g = geocoder.ip(user_location)\n    latitude, longitude = g.latlng\n\n    # create a geo-fence around user location\n    radius = 10 # in kilometers\n    center = (latitude, longitude)\n\n    # check if the user is within the geo-fence\n    if is_within_fence(center, radius):\n        # send notification to the user\n        send_notification(message)\n\ndef is_within_fence(center, radius):\n    pass\n\ndef send_notification(message):\n    pass", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a geo-fenced notification system in Python.\n\n### Input:\n\n\n### Output:\nimport geocoder\n\ndef notification_system(user_location, message):\n    g = geocoder.ip(user_location)\n    latitude, longitude = g.latlng\n\n    # create a geo-fence around user location\n    radius = 10 # in kilometers\n    center = (latitude, longitude)\n\n    # check if the user is within the geo-fence\n    if is_within_fence(center, radius):\n        # send notification to the user\n        send_notification(message)\n\ndef is_within_fence(center, radius):\n    pass\n\ndef send_notification(message):\n    pass"}
{"instruction": "Explain the concept of Lambda functions in Python.", "input": "", "output": "Lambda functions in Python allow us to create anonymous functions, which are functions that are not bound to a name. These functions are typically used when we need a quick function for a specific task, and do not plan to reuse it. Lambda functions can take any number of arguments, but can only have one expression. The expression is then evaluated and the result is returned. Lambda functions are typically written in a single line and are often used with higher order functions like map(), filter() and reduce().", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the concept of Lambda functions in Python.\n\n### Input:\n\n\n### Output:\nLambda functions in Python allow us to create anonymous functions, which are functions that are not bound to a name. These functions are typically used when we need a quick function for a specific task, and do not plan to reuse it. Lambda functions can take any number of arguments, but can only have one expression. The expression is then evaluated and the result is returned. Lambda functions are typically written in a single line and are often used with higher order functions like map(), filter() and reduce()."}
{"instruction": "Design a Python class for creating a digital clock", "input": "", "output": "class DigitalClock:\n    def __init__(self):\n        self.__hours = 0\n        self.__minutes = 0\n        self.__seconds = 0\n    \n    def set_time(self,hours,minutes,seconds):\n        self.__hours = hours\n        self.__minutes = minutes\n        self.__seconds = seconds\n    \n    def get_time(self):\n        return self.__hours, self.__minutes, self.__seconds\n    \n    def display(self):\n        print(str(self.__hours).zfill(2),\":\",str(self.__minutes).zfill(2),\":\",str(self.__seconds).zfill(2))\n\nmy_clock = DigitalClock()\nmy_clock.set_time(12, 45, 10)\nmy_clock.display()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for creating a digital clock\n\n### Input:\n\n\n### Output:\nclass DigitalClock:\n    def __init__(self):\n        self.__hours = 0\n        self.__minutes = 0\n        self.__seconds = 0\n    \n    def set_time(self,hours,minutes,seconds):\n        self.__hours = hours\n        self.__minutes = minutes\n        self.__seconds = seconds\n    \n    def get_time(self):\n        return self.__hours, self.__minutes, self.__seconds\n    \n    def display(self):\n        print(str(self.__hours).zfill(2),\":\",str(self.__minutes).zfill(2),\":\",str(self.__seconds).zfill(2))\n\nmy_clock = DigitalClock()\nmy_clock.set_time(12, 45, 10)\nmy_clock.display()"}
{"instruction": "Write a Python program to print a Diamond pattern.", "input": "", "output": "def diamond(n):\n    if n % 2 == 0:\n        n += 1\n    for i in range(n):\n        if i < (n + 1)//2:\n            for j in range((n - 3* i)//2):\n                print(' ', end = '')\n            for j in range(3*i + 1):\n                print('*', end = '')\n            for j in range((n - 3* i)//2):\n                print(' ', end = '')\n        else:\n            for j in range(3* i - 3*(n // 2)):\n                print(' ', end = '')\n            for j in range(2*(n - i) - 1):\n                print('*', end = '')\n            for j in range(3* i - 3*(n // 2)):\n                print(' ', end = '')\n        print('')\n\ndiamond(9)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print a Diamond pattern.\n\n### Input:\n\n\n### Output:\ndef diamond(n):\n    if n % 2 == 0:\n        n += 1\n    for i in range(n):\n        if i < (n + 1)//2:\n            for j in range((n - 3* i)//2):\n                print(' ', end = '')\n            for j in range(3*i + 1):\n                print('*', end = '')\n            for j in range((n - 3* i)//2):\n                print(' ', end = '')\n        else:\n            for j in range(3* i - 3*(n // 2)):\n                print(' ', end = '')\n            for j in range(2*(n - i) - 1):\n                print('*', end = '')\n            for j in range(3* i - 3*(n // 2)):\n                print(' ', end = '')\n        print('')\n\ndiamond(9)"}
{"instruction": "Create a game with Python that allows two players.", "input": "", "output": "import random\n\nplayers = [\"Player 1\", \"Player 2\"]\n\n# Assign random numbers to each of the players\nplayer_1_num = random.randint(1, 10) \nplayer_2_num = random.randint(1, 10)\n\n# Player 1 Turn\nplayer_1_guess = input(\"What is your guess, Player 1? (1-10): \")\n\nif player_1_guess != player_1_num:\n    print(\"Sorry! That was not the correct answer.\")\n    print(\"Player 2 wins!\")\nelse:\n    print(\"Correct! Player 1 wins!\")\n\n# Player 2 Turn\nplayer_2_guess = input(\"What is your guess, Player 2? (1-10): \")\n\nif player_2_guess != player_2_num:\n    print(\"Sorry! That was not the correct answer.\")\n    print(\"Player 1 wins!\")\nelse:\n    print(\"Correct! Player 2 wins!\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game with Python that allows two players.\n\n### Input:\n\n\n### Output:\nimport random\n\nplayers = [\"Player 1\", \"Player 2\"]\n\n# Assign random numbers to each of the players\nplayer_1_num = random.randint(1, 10) \nplayer_2_num = random.randint(1, 10)\n\n# Player 1 Turn\nplayer_1_guess = input(\"What is your guess, Player 1? (1-10): \")\n\nif player_1_guess != player_1_num:\n    print(\"Sorry! That was not the correct answer.\")\n    print(\"Player 2 wins!\")\nelse:\n    print(\"Correct! Player 1 wins!\")\n\n# Player 2 Turn\nplayer_2_guess = input(\"What is your guess, Player 2? (1-10): \")\n\nif player_2_guess != player_2_num:\n    print(\"Sorry! That was not the correct answer.\")\n    print(\"Player 1 wins!\")\nelse:\n    print(\"Correct! Player 2 wins!\")"}
{"instruction": "Create a game of ‘Rock, Paper, Scissor’ in Python.", "input": "", "output": "import random\n\noptions = ['Rock', 'Paper', 'Scissor']\n\nwhile True:\n    # Player 1 turn\n    print('What would you like to choose?\\n Rock, Paper, or Scissor?')\n    p1_choice = input()\n\n    # Player 2 turn\n    p2_choice = random.choice(options)\n\n    # Game rules\n    if p1_choice == p2_choice:\n        print('Its a tie!')\n    elif (p1_choice == 'Rock' and p2_choice == 'Paper') or (p1_choice == 'Paper' and p2_choice == 'Scissor') or (p1_choice == 'Scissor' and p2_choice == 'Rock'):\n        print('Player 2 wins')\n    else:\n        print('Player 1 wins')\n        \n    quit_game = input('Would you like to play again?(yes/no)\\n')\n    if quit_game.lower() == 'no':\n        break", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game of ‘Rock, Paper, Scissor’ in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\noptions = ['Rock', 'Paper', 'Scissor']\n\nwhile True:\n    # Player 1 turn\n    print('What would you like to choose?\\n Rock, Paper, or Scissor?')\n    p1_choice = input()\n\n    # Player 2 turn\n    p2_choice = random.choice(options)\n\n    # Game rules\n    if p1_choice == p2_choice:\n        print('Its a tie!')\n    elif (p1_choice == 'Rock' and p2_choice == 'Paper') or (p1_choice == 'Paper' and p2_choice == 'Scissor') or (p1_choice == 'Scissor' and p2_choice == 'Rock'):\n        print('Player 2 wins')\n    else:\n        print('Player 1 wins')\n        \n    quit_game = input('Would you like to play again?(yes/no)\\n')\n    if quit_game.lower() == 'no':\n        break"}
{"instruction": "Design a basic Rock-Paper-Scissors game in Python.", "input": "", "output": "import random\n\noptions = [\"Rock\", \"Paper\", \"Scissors\"]\n\ndef rock_paper_scissors(n):\n    # get computer's move\n    computer_move = random.choice(options)\n    \n    # get user's move\n    print(\"Choose one: Rock, Paper, or Scissors\")\n    user_move = input()\n    user_move = user_move.capitalize()\n    \n    # check for a tie\n    if computer_move == user_move:\n        print(f\"It's a tie! You both chose {computer_move}\")\n    \n    # check for user win\n    elif (user_move == \"Rock\" and computer_move == \"Scissors\") or (user_move == \"Paper\" and computer_move == \"Rock\") or (user_move == \"Scissors\" and computer_move == \"Paper\"):\n        print(f\"You win! {user_move} beats {computer_move}\")\n    \n    # if none of the above, user loses\n    else:\n        print(f\"You lose! {computer_move} beats {user_move}\")\n\nrock_paper_scissors(3)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic Rock-Paper-Scissors game in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\noptions = [\"Rock\", \"Paper\", \"Scissors\"]\n\ndef rock_paper_scissors(n):\n    # get computer's move\n    computer_move = random.choice(options)\n    \n    # get user's move\n    print(\"Choose one: Rock, Paper, or Scissors\")\n    user_move = input()\n    user_move = user_move.capitalize()\n    \n    # check for a tie\n    if computer_move == user_move:\n        print(f\"It's a tie! You both chose {computer_move}\")\n    \n    # check for user win\n    elif (user_move == \"Rock\" and computer_move == \"Scissors\") or (user_move == \"Paper\" and computer_move == \"Rock\") or (user_move == \"Scissors\" and computer_move == \"Paper\"):\n        print(f\"You win! {user_move} beats {computer_move}\")\n    \n    # if none of the above, user loses\n    else:\n        print(f\"You lose! {computer_move} beats {user_move}\")\n\nrock_paper_scissors(3)"}
{"instruction": "Construct an AI model to predict stocks in Python.", "input": "", "output": "import pandas as pd\nimport numpy as np\nimport keras\n\n# Read the data\ndf = pd.read_csv('stocks.csv')\n\n# Extract the features and target\nfeatures = df.drop(['Name', 'symbol', 'Close'], axis=1).values\ntarget = df.Close.values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Construct a model\nmodel = keras.Sequential([\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(1, activation='linear'),\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mse',\n              metrics=['mae'])\n\n# Train model\nmodel.fit(X_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(X_test, y_test)\n\nprint('Test accuracy:', test_acc)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an AI model to predict stocks in Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport keras\n\n# Read the data\ndf = pd.read_csv('stocks.csv')\n\n# Extract the features and target\nfeatures = df.drop(['Name', 'symbol', 'Close'], axis=1).values\ntarget = df.Close.values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Construct a model\nmodel = keras.Sequential([\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(1, activation='linear'),\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mse',\n              metrics=['mae'])\n\n# Train model\nmodel.fit(X_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(X_test, y_test)\n\nprint('Test accuracy:', test_acc)"}
{"instruction": "Create a numerical model of a 3D object in Python.", "input": "", "output": "import numpy as np\n\nclass Object3D:\n    def __init__(self):\n        # define the object points\n        self.vertices = np.array([(0., 0., 0.), (1., 0., 0.), (1., 1., 0.),\n                                  (0., 1., 0.), (0., 0., 1.), (1., 0., 1.),\n                                  (1., 1., 1.), (0., 1., 1.)])\n        # define the faces (defined by indices of the points)\n        self.faces = np.array([(0, 1, 2, 3), (4, 5, 6, 7),\n                               (0, 1, 5, 4), (2, 3, 7, 6)])\n\n        # define the object colors\n        self.colors = np.array([(1, 0, 0), (0, 1, 0), (0, 0, 1),\n                                (1, 1, 0), (1, 0, 1), (0, 1, 1)])\n\n        # define the object edges\n        self.edges = np.array([(0, 1), (1, 2), (2, 3), (3, 0),\n                               (4, 5), (5, 6), (6, 7), (7, 4),\n                               (0, 4), (1, 5), (2, 6), (3, 7)])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a numerical model of a 3D object in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\nclass Object3D:\n    def __init__(self):\n        # define the object points\n        self.vertices = np.array([(0., 0., 0.), (1., 0., 0.), (1., 1., 0.),\n                                  (0., 1., 0.), (0., 0., 1.), (1., 0., 1.),\n                                  (1., 1., 1.), (0., 1., 1.)])\n        # define the faces (defined by indices of the points)\n        self.faces = np.array([(0, 1, 2, 3), (4, 5, 6, 7),\n                               (0, 1, 5, 4), (2, 3, 7, 6)])\n\n        # define the object colors\n        self.colors = np.array([(1, 0, 0), (0, 1, 0), (0, 0, 1),\n                                (1, 1, 0), (1, 0, 1), (0, 1, 1)])\n\n        # define the object edges\n        self.edges = np.array([(0, 1), (1, 2), (2, 3), (3, 0),\n                               (4, 5), (5, 6), (6, 7), (7, 4),\n                               (0, 4), (1, 5), (2, 6), (3, 7)])"}
{"instruction": "Develop an algorithm in Python to generate a maze.", "input": "", "output": "# Algorithm to generate a maze using the depth-first search algorithm\n\ndef generate_maze(width, height):\n    maze = [[0]*width + [1] for _ in range(height)] + [[1]*(width + 1)]\n    visited = [[False]*width + [True] for _ in range(height)] + [[True]*(width + 1)]\n    stack = [(0, 0)]\n    \n    while stack:\n        (cx, cy) = stack[-1] \n        neighbours = []\n        directions = ((-1, 0), (1, 0), (0, -1), (0, 1))\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if width > nx >= 0 <= ny < height and not visited[ny][nx]:\n                neighbours.append((nx, ny)) \n        if neighbours:\n            visited[cy][cx] = True\n            (nx, ny) = neighbours[0]\n            maze[cy][cx] = 0\n            stack.append((nx, ny))\n            visited[ny][nx] = True\n        else:\n            stack.pop()\n            if stack:\n                (nx, ny) = stack[-1]\n                maze[cy][cx] = 0 \n            else:\n                break\n    \n    return maze\n\n# Driver code\nmaze = generate_maze(10, 10)\n\n# Print the generated maze\nfor line in maze:\n    print(line)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to generate a maze.\n\n### Input:\n\n\n### Output:\n# Algorithm to generate a maze using the depth-first search algorithm\n\ndef generate_maze(width, height):\n    maze = [[0]*width + [1] for _ in range(height)] + [[1]*(width + 1)]\n    visited = [[False]*width + [True] for _ in range(height)] + [[True]*(width + 1)]\n    stack = [(0, 0)]\n    \n    while stack:\n        (cx, cy) = stack[-1] \n        neighbours = []\n        directions = ((-1, 0), (1, 0), (0, -1), (0, 1))\n        for dx, dy in directions:\n            nx, ny = cx + dx, cy + dy\n            if width > nx >= 0 <= ny < height and not visited[ny][nx]:\n                neighbours.append((nx, ny)) \n        if neighbours:\n            visited[cy][cx] = True\n            (nx, ny) = neighbours[0]\n            maze[cy][cx] = 0\n            stack.append((nx, ny))\n            visited[ny][nx] = True\n        else:\n            stack.pop()\n            if stack:\n                (nx, ny) = stack[-1]\n                maze[cy][cx] = 0 \n            else:\n                break\n    \n    return maze\n\n# Driver code\nmaze = generate_maze(10, 10)\n\n# Print the generated maze\nfor line in maze:\n    print(line)"}
{"instruction": "Compose a Python class for creating a person object", "input": "", "output": "class Person:\n    \"\"\"\n    Creates a Person object with given name, age, and gender. \n    \"\"\"\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def greet(self):\n        \"\"\"\n        Prints out a greeting for the Person\n        \"\"\"\n        print('Hello, my name is ' + self.name)\n\nif __name__ == '__main__':\n    John = Person('John', 25, 'male')\n    John.greet()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python class for creating a person object\n\n### Input:\n\n\n### Output:\nclass Person:\n    \"\"\"\n    Creates a Person object with given name, age, and gender. \n    \"\"\"\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def greet(self):\n        \"\"\"\n        Prints out a greeting for the Person\n        \"\"\"\n        print('Hello, my name is ' + self.name)\n\nif __name__ == '__main__':\n    John = Person('John', 25, 'male')\n    John.greet()"}
{"instruction": "Develop a class for implementing a stack in Python.", "input": "", "output": "class Stack: \n\n    # Constructor \n    def __init__(self): \n        self.stack = [] \n\n    # Pop operation \n    def pop(self): \n        if len(self.stack) <= 0: \n            return \"Stack is empty\" \n        return self.stack.pop() \n\n    # Push operation \n    def push(self, data): \n        self.stack.append(data) \n\n    # Peek operation \n    def peek(self): \n        if len(self.stack) <= 0: \n            return \"Stack is empty\" \n        return self.stack[-1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class for implementing a stack in Python.\n\n### Input:\n\n\n### Output:\nclass Stack: \n\n    # Constructor \n    def __init__(self): \n        self.stack = [] \n\n    # Pop operation \n    def pop(self): \n        if len(self.stack) <= 0: \n            return \"Stack is empty\" \n        return self.stack.pop() \n\n    # Push operation \n    def push(self, data): \n        self.stack.append(data) \n\n    # Peek operation \n    def peek(self): \n        if len(self.stack) <= 0: \n            return \"Stack is empty\" \n        return self.stack[-1]"}
{"instruction": "Create a python program to scrape data from Twitter", "input": "", "output": "import tweepy\n\nconsumer_key = ''\nconsumer_secret = ''\n\naccess_token = ''\naccess_token_secret = ''\n\n# authorization\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# get data from a particular twitter user\ntweets = api.user_timeline(screen_name='twitter_handle', count=200, include_rts=False, exclude_replies=True) \n\nfor tweet in tweets: \n    # scraping a data from tweets\n    print(tweet.text)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to scrape data from Twitter\n\n### Input:\n\n\n### Output:\nimport tweepy\n\nconsumer_key = ''\nconsumer_secret = ''\n\naccess_token = ''\naccess_token_secret = ''\n\n# authorization\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# get data from a particular twitter user\ntweets = api.user_timeline(screen_name='twitter_handle', count=200, include_rts=False, exclude_replies=True) \n\nfor tweet in tweets: \n    # scraping a data from tweets\n    print(tweet.text)"}
{"instruction": "Train a model to classify spam emails using Python.", "input": "", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a model to classify spam emails using Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))"}
{"instruction": "Create a Python class that merges two sorted lists.", "input": "", "output": "class MergeTwoLists():\n    def merge(self, left_list, right_list):\n        \"\"\"Merge two sorted lists\"\"\"\n        i = 0\n        j = 0\n        merged_list = []\n        while i < len(left_list) and j < len(right_list):\n            if left_list[i] < right_list[j]:\n                merged_list.append(left_list[i])\n                i += 1\n            else:\n                merged_list.append(right_list[j])\n                j += 1\n\n        merged_list += left_list[i:]\n        merged_list += right_list[j:]\n        return merged_list", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that merges two sorted lists.\n\n### Input:\n\n\n### Output:\nclass MergeTwoLists():\n    def merge(self, left_list, right_list):\n        \"\"\"Merge two sorted lists\"\"\"\n        i = 0\n        j = 0\n        merged_list = []\n        while i < len(left_list) and j < len(right_list):\n            if left_list[i] < right_list[j]:\n                merged_list.append(left_list[i])\n                i += 1\n            else:\n                merged_list.append(right_list[j])\n                j += 1\n\n        merged_list += left_list[i:]\n        merged_list += right_list[j:]\n        return merged_list"}
{"instruction": "Create a Python Class to handle JSON formatted data", "input": "", "output": "import json\n\nclass JSONHandler():\n    '''A class to handle JSON-formatted data'''\n    \n    def __init__(self, json_string):\n        self.json_string = json_string\n        self.data = self.__parse_json_data()\n        \n    def __parse_json_data(self):\n        parsed_data = json.loads(self.json_string)\n        return parsed_data\n        \n    def get_data(self):\n        return self.data\n        \n    def set_data(self, new_data):\n        self.data = new_data\n        self.__update_json_data()\n\n    def __update_json_data(self):\n        self.json_string = json.dumps(self.data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Class to handle JSON formatted data\n\n### Input:\n\n\n### Output:\nimport json\n\nclass JSONHandler():\n    '''A class to handle JSON-formatted data'''\n    \n    def __init__(self, json_string):\n        self.json_string = json_string\n        self.data = self.__parse_json_data()\n        \n    def __parse_json_data(self):\n        parsed_data = json.loads(self.json_string)\n        return parsed_data\n        \n    def get_data(self):\n        return self.data\n        \n    def set_data(self, new_data):\n        self.data = new_data\n        self.__update_json_data()\n\n    def __update_json_data(self):\n        self.json_string = json.dumps(self.data)"}
{"instruction": "Generate a load testing report for a given website.", "input": "", "output": "\"\"\"\nPython script to generate a load testing report for a given website\n\"\"\"\n\nimport requests\nimport json\n\ndef generate_report(url):\n    # Send a request to the given URL\n    response = requests.get(url)\n\n    # Get the request duration\n    duration = response.elapsed.total_seconds()\n\n    # Generate the report as a dictionary\n    report = {\n        'URL': url,\n        'StatusCode': response.status_code,\n        'Duration': duration\n    }\n\n    return report\n\nif __name__ == '__main__':\n    url = 'http://example.com'\n    report = generate_report(url)\n    print(json.dumps(report, indent=4))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a load testing report for a given website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nPython script to generate a load testing report for a given website\n\"\"\"\n\nimport requests\nimport json\n\ndef generate_report(url):\n    # Send a request to the given URL\n    response = requests.get(url)\n\n    # Get the request duration\n    duration = response.elapsed.total_seconds()\n\n    # Generate the report as a dictionary\n    report = {\n        'URL': url,\n        'StatusCode': response.status_code,\n        'Duration': duration\n    }\n\n    return report\n\nif __name__ == '__main__':\n    url = 'http://example.com'\n    report = generate_report(url)\n    print(json.dumps(report, indent=4))"}
{"instruction": "Design a class in Python which models a board game.", "input": "", "output": "class BoardGame:\n \n    # Attributes\n    num_players = 0\n    game_state = None\n    max_turns = 0\n \n    # Methods\n \n    def __init__(self, num_players, max_turns):\n        self.num_players = num_players\n        self.max_turns = max_turns\n        self.game_state = self.initialize_state()\n \n    def initialize_state(self):\n        # Initialize variables, boards, etc.\n        return # BoardGame's state \n \n    def play_turn(self):\n        # Perform actions of current turn\n        self.game_state = # Game's state after turn\n \n    def check_end_game(self):\n        # Determine if max turns has reached\n        return # True or False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python which models a board game.\n\n### Input:\n\n\n### Output:\nclass BoardGame:\n \n    # Attributes\n    num_players = 0\n    game_state = None\n    max_turns = 0\n \n    # Methods\n \n    def __init__(self, num_players, max_turns):\n        self.num_players = num_players\n        self.max_turns = max_turns\n        self.game_state = self.initialize_state()\n \n    def initialize_state(self):\n        # Initialize variables, boards, etc.\n        return # BoardGame's state \n \n    def play_turn(self):\n        # Perform actions of current turn\n        self.game_state = # Game's state after turn\n \n    def check_end_game(self):\n        # Determine if max turns has reached\n        return # True or False"}
{"instruction": "Write a Python class to represent a complex number.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __repr__(self):\n        if self.imaginary >= 0:\n            return '{} + {}i'.format(self.real, self.imaginary)\n        else:\n            return '{} - {}i'.format(self.real, abs(self.imaginary))\n\n    def __add__(self, other):\n        real = self.real + other.real\n        imaginary = self.imaginary + other.imaginary\n        return ComplexNumber(real, imaginary)\n\n    def __sub__(self, other):\n        real = self.real - other.real\n        imaginary = self.imaginary - other.imaginary\n        return ComplexNumber(real, imaginary)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to represent a complex number.\n\n### Input:\n\n\n### Output:\nclass ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __repr__(self):\n        if self.imaginary >= 0:\n            return '{} + {}i'.format(self.real, self.imaginary)\n        else:\n            return '{} - {}i'.format(self.real, abs(self.imaginary))\n\n    def __add__(self, other):\n        real = self.real + other.real\n        imaginary = self.imaginary + other.imaginary\n        return ComplexNumber(real, imaginary)\n\n    def __sub__(self, other):\n        real = self.real - other.real\n        imaginary = self.imaginary - other.imaginary\n        return ComplexNumber(real, imaginary)"}
{"instruction": "Design a class for a generic linked list in Python.", "input": "", "output": "class LinkedList:\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n    \n    def sort(self):\n        if self.head is None:\n            return\n        current_node = self.head\n        while current_node.next is not None:\n            next_node = current_node.next\n            if next_node.data < current_node.data:\n                temp = current_node.data\n                current_node.data = next_node.data\n                next_node.data = temp\n            current_node = next_node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for a generic linked list in Python.\n\n### Input:\n\n\n### Output:\nclass LinkedList:\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n    \n    def sort(self):\n        if self.head is None:\n            return\n        current_node = self.head\n        while current_node.next is not None:\n            next_node = current_node.next\n            if next_node.data < current_node.data:\n                temp = current_node.data\n                current_node.data = next_node.data\n                next_node.data = temp\n            current_node = next_node"}
{"instruction": "Can you explain the concept of quicksort in Python?", "input": "", "output": "Quicksort is a divide-and-conquer algorithm that works by recursively partitioning a list into two sublists of items based on a pivot value. The left sublist contains all items less than the pivot value and the right sublist contains all items greater than the pivot value. The quicksort algorithm then recursively sorts these sublists and combines them back together to form the final sorted list.\n\nIn Python, one implementation of the quicksort algorithm is as follows:\n\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you explain the concept of quicksort in Python?\n\n### Input:\n\n\n### Output:\nQuicksort is a divide-and-conquer algorithm that works by recursively partitioning a list into two sublists of items based on a pivot value. The left sublist contains all items less than the pivot value and the right sublist contains all items greater than the pivot value. The quicksort algorithm then recursively sorts these sublists and combines them back together to form the final sorted list.\n\nIn Python, one implementation of the quicksort algorithm is as follows:\n\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)"}
{"instruction": "Create a simple calculator application in Python 3.", "input": "", "output": "def calculator():\n    while True:\n        print(\"Options:\")\n        print(\"Enter 'add' to add two numbers\")\n        print(\"Enter 'subtract' to subtract two numbers\")\n        print(\"Enter 'quit' to end the program\")\n        user_input = input(\": \")\n\n        if user_input == \"quit\":\n            break\n        elif user_input == \"add\":\n            num1 = float(input(\"Enter a number: \"))\n            num2 = float(input(\"Enter another number: \"))\n            result = str(num1 + num2)\n            print(\"The answer is \" + result)\n        elif user_input == \"subtract\":\n            num1 = float(input(\"Enter a number: \"))\n            num2 = float(input(\"Enter another number: \"))\n            result = str(num1 - num2)\n            print(\"The answer is \" + result)\n        else:\n            print(\"Unknown input\")\n            \ncalculator()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple calculator application in Python 3.\n\n### Input:\n\n\n### Output:\ndef calculator():\n    while True:\n        print(\"Options:\")\n        print(\"Enter 'add' to add two numbers\")\n        print(\"Enter 'subtract' to subtract two numbers\")\n        print(\"Enter 'quit' to end the program\")\n        user_input = input(\": \")\n\n        if user_input == \"quit\":\n            break\n        elif user_input == \"add\":\n            num1 = float(input(\"Enter a number: \"))\n            num2 = float(input(\"Enter another number: \"))\n            result = str(num1 + num2)\n            print(\"The answer is \" + result)\n        elif user_input == \"subtract\":\n            num1 = float(input(\"Enter a number: \"))\n            num2 = float(input(\"Enter another number: \"))\n            result = str(num1 - num2)\n            print(\"The answer is \" + result)\n        else:\n            print(\"Unknown input\")\n            \ncalculator()"}
{"instruction": "Create a code in Python to print a Pascal triangle.", "input": "", "output": "def pascal_triangle(n): \n    # Two empty lists to store the previous and current row \n    prev_row = []     \n    curr_row = []     \n  \n    # Looping through the rows \n    for i in range(n): \n          \n        # Reseting the curr_row for each row \n        curr_row = [] \n          \n        # Looping through columns \n        for j in range(i + 1): \n              \n            # Handling edges of the pascal's triangle \n            if j == 0 or j == i:  \n                curr_row.append(1) \n            else: \n                curr_row.append(prev_row[j] + prev_row[j - 1])  \n          \n        # Printing the current row  \n        print(curr_row)  \n          \n        # Setting the current row as the previous row before moving to the next row. \n        prev_row = curr_row  \n        \n\n# call the pascal triangle function \nn = 5\npascal_triangle(n)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code in Python to print a Pascal triangle.\n\n### Input:\n\n\n### Output:\ndef pascal_triangle(n): \n    # Two empty lists to store the previous and current row \n    prev_row = []     \n    curr_row = []     \n  \n    # Looping through the rows \n    for i in range(n): \n          \n        # Reseting the curr_row for each row \n        curr_row = [] \n          \n        # Looping through columns \n        for j in range(i + 1): \n              \n            # Handling edges of the pascal's triangle \n            if j == 0 or j == i:  \n                curr_row.append(1) \n            else: \n                curr_row.append(prev_row[j] + prev_row[j - 1])  \n          \n        # Printing the current row  \n        print(curr_row)  \n          \n        # Setting the current row as the previous row before moving to the next row. \n        prev_row = curr_row  \n        \n\n# call the pascal triangle function \nn = 5\npascal_triangle(n)"}
{"instruction": "Write a code to check for a cycle in a linked list.", "input": "", "output": "# Python program to detect loop in a linked list \n# Node class \nclass Node: \n\t# Constructor to initialize the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\t\nclass LinkedList: \n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Function to insert a new node at the beginning \n\tdef push(self, new_data): \n\t\tnew_node = Node(new_data) \n\t\tnew_node.next = self.head \n\t\tself.head = new_node \n\n\t# Utility function to print it the linked LinkedList \n\tdef printList(self): \n\t\ttemp = self.head \n\t\twhile(temp): \n\t\t\tprint temp.data, \n\t\t\ttemp = temp.next\n\n\tdef detect_loop(self): \n\t\tslow_p = self.head \n\t\tfast_p = self.head \n\n\t\twhile(slow_p and fast_p and fast_p.next): \n\t\t\tslow_p = slow_p.next\n\t\t\tfast_p = fast_p.next.next\n\t\t\tif slow_p == fast_p: \n\t\t\t\tprint \"Found Loop\"\n\t\t\t\treturn\n\n# Driver program for testing \nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(10) \n\n# Create a loop for testing \nllist.head.next.next.next.next = llist.head \n\nllist.detect_loop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to check for a cycle in a linked list.\n\n### Input:\n\n\n### Output:\n# Python program to detect loop in a linked list \n# Node class \nclass Node: \n\t# Constructor to initialize the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\t\nclass LinkedList: \n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Function to insert a new node at the beginning \n\tdef push(self, new_data): \n\t\tnew_node = Node(new_data) \n\t\tnew_node.next = self.head \n\t\tself.head = new_node \n\n\t# Utility function to print it the linked LinkedList \n\tdef printList(self): \n\t\ttemp = self.head \n\t\twhile(temp): \n\t\t\tprint temp.data, \n\t\t\ttemp = temp.next\n\n\tdef detect_loop(self): \n\t\tslow_p = self.head \n\t\tfast_p = self.head \n\n\t\twhile(slow_p and fast_p and fast_p.next): \n\t\t\tslow_p = slow_p.next\n\t\t\tfast_p = fast_p.next.next\n\t\t\tif slow_p == fast_p: \n\t\t\t\tprint \"Found Loop\"\n\t\t\t\treturn\n\n# Driver program for testing \nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(10) \n\n# Create a loop for testing \nllist.head.next.next.next.next = llist.head \n\nllist.detect_loop()"}
{"instruction": "Create a GUI in Python for displaying a data table.", "input": "", "output": "import tkinter as tk\nimport pandas as pd\n\nroot= tk.Tk() \ncanvas1 = tk.Canvas(root, width = 300, height = 300,  relief = 'raised')\ncanvas1.pack()\n\ndf = pd.DataFrame({'Product':['Apple','Banana','Orange'],'Price':[10,20,30]})\n\ntable = tk.LabelFrame(root, text='Product Table')\ntable.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8)\n\ntable_body = tk.Frame(table) \ntable_body.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8)\n\ndata = df.values.tolist() \ncolumn_headings = list(df.columns.values) \n\nframe_header = tk.Frame(table_body)\nframe_header.pack(fill='both', expand='yes')\n\nfor col_h in column_headings:\n    label=tk.Label(frame_header,text=str(col_h),font=\"Helvetica 10 bold\")\n    label.pack(fill='both', pady=10, padx=10, side='left')\n\nframe_table=tk.Frame(table_body)   \nframe_table.pack(fill='both', expand='yes')\n\nrow_num = 0\n\nfor row in data:\n    col_num = 0\n    for col in row:\n        label = tk.Label(frame_table,text=str(col), relief='solid', width=10)\n        label.grid(column=col_num, row=row_num)\n        col_num += 1\n    row_num += 1\n\nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI in Python for displaying a data table.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\nimport pandas as pd\n\nroot= tk.Tk() \ncanvas1 = tk.Canvas(root, width = 300, height = 300,  relief = 'raised')\ncanvas1.pack()\n\ndf = pd.DataFrame({'Product':['Apple','Banana','Orange'],'Price':[10,20,30]})\n\ntable = tk.LabelFrame(root, text='Product Table')\ntable.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8)\n\ntable_body = tk.Frame(table) \ntable_body.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8)\n\ndata = df.values.tolist() \ncolumn_headings = list(df.columns.values) \n\nframe_header = tk.Frame(table_body)\nframe_header.pack(fill='both', expand='yes')\n\nfor col_h in column_headings:\n    label=tk.Label(frame_header,text=str(col_h),font=\"Helvetica 10 bold\")\n    label.pack(fill='both', pady=10, padx=10, side='left')\n\nframe_table=tk.Frame(table_body)   \nframe_table.pack(fill='both', expand='yes')\n\nrow_num = 0\n\nfor row in data:\n    col_num = 0\n    for col in row:\n        label = tk.Label(frame_table,text=str(col), relief='solid', width=10)\n        label.grid(column=col_num, row=row_num)\n        col_num += 1\n    row_num += 1\n\nroot.mainloop()"}
{"instruction": "Write an algorithm to generate an L-system fractal.", "input": "", "output": "#This code uses Python Turtle library to create Fractal Design\nimport turtle\n\n#define the base fractal\nbaseFractal=\"FX\"\n\n#variable lookup table\nlookupTable={\"X\":\"X+YF+\", \"Y\":\"-FX-Y\"}\n\n#define the number of levels of recursion\nlevelsOfRecursion=7\n\n#this function recursively creates the fractal\ndef drawFractal(cmd, levelsOfRecursion):\n    for command in cmd:\n        #check if its a F,X or Y command\n        if(command==\"F\"):\n            turtle.forward(100/(levelsOfRecursion))\n        elif command==\"X\" or command==\"Y\":\n            #create newCommand by looking up the lookup table\n            newCmd=lookupTable[command]\n            #draw the replacement\n            drawFractal(newCmd, levelsOfRecursion-1)\n        elif command==\"+\":\n            #turn left\n            turtle.left(90)\n        elif command==\"-\":\n            #turn right\n            turtle.right(90)\n\n#initialize the Turtle\nturtle.setup(500,500)\nturtle.penup()\nturtle.goto(-150,150)\nturtle.pendown() \nturtle.speed(100)\n\n#call the fractal drawing function\ndrawFractal(baseFractal, levelsOfRecursion)\n    \n#hold the screen\nturtle.exitonclick()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to generate an L-system fractal.\n\n### Input:\n\n\n### Output:\n#This code uses Python Turtle library to create Fractal Design\nimport turtle\n\n#define the base fractal\nbaseFractal=\"FX\"\n\n#variable lookup table\nlookupTable={\"X\":\"X+YF+\", \"Y\":\"-FX-Y\"}\n\n#define the number of levels of recursion\nlevelsOfRecursion=7\n\n#this function recursively creates the fractal\ndef drawFractal(cmd, levelsOfRecursion):\n    for command in cmd:\n        #check if its a F,X or Y command\n        if(command==\"F\"):\n            turtle.forward(100/(levelsOfRecursion))\n        elif command==\"X\" or command==\"Y\":\n            #create newCommand by looking up the lookup table\n            newCmd=lookupTable[command]\n            #draw the replacement\n            drawFractal(newCmd, levelsOfRecursion-1)\n        elif command==\"+\":\n            #turn left\n            turtle.left(90)\n        elif command==\"-\":\n            #turn right\n            turtle.right(90)\n\n#initialize the Turtle\nturtle.setup(500,500)\nturtle.penup()\nturtle.goto(-150,150)\nturtle.pendown() \nturtle.speed(100)\n\n#call the fractal drawing function\ndrawFractal(baseFractal, levelsOfRecursion)\n    \n#hold the screen\nturtle.exitonclick()"}
{"instruction": "Design a \"rock, paper, scissors\" game using Python.", "input": "", "output": "\"\"\"\nDesign a \"rock, paper, scissors\" game using Python.\n\"\"\"\n\nimport random\n\nOPTIONS = [\"rock\", \"paper\", \"scissors\"]\n\ndef play_game():\n    # Player selection\n    print(\"Choose your weapon: rock, paper, or scissors\")\n    player_choice = input().lower()\n\n    # Computer selection\n    computer_choice = random.choice(OPTIONS)\n    print(f\"Computer chose {computer_choice.title()}\")\n\n    # Compare selections\n    if player_choice == computer_choice:\n        print(\"It's a tie!\")\n    else:\n        if player_choice == \"rock\":\n            if computer_choice == \"paper\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"scissors\":\n                print(\"Player wins!\")\n        elif player_choice == \"paper\":\n            if computer_choice == \"scissors\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"rock\":\n                print(\"Player wins!\")\n        elif player_choice == \"scissors\":\n            if computer_choice == \"rock\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"paper\":\n                print(\"Player wins!\")\n\nif __name__ == \"__main__\":\n    play_game()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a \"rock, paper, scissors\" game using Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a \"rock, paper, scissors\" game using Python.\n\"\"\"\n\nimport random\n\nOPTIONS = [\"rock\", \"paper\", \"scissors\"]\n\ndef play_game():\n    # Player selection\n    print(\"Choose your weapon: rock, paper, or scissors\")\n    player_choice = input().lower()\n\n    # Computer selection\n    computer_choice = random.choice(OPTIONS)\n    print(f\"Computer chose {computer_choice.title()}\")\n\n    # Compare selections\n    if player_choice == computer_choice:\n        print(\"It's a tie!\")\n    else:\n        if player_choice == \"rock\":\n            if computer_choice == \"paper\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"scissors\":\n                print(\"Player wins!\")\n        elif player_choice == \"paper\":\n            if computer_choice == \"scissors\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"rock\":\n                print(\"Player wins!\")\n        elif player_choice == \"scissors\":\n            if computer_choice == \"rock\":\n                print(\"Computer wins!\")\n            elif computer_choice == \"paper\":\n                print(\"Player wins!\")\n\nif __name__ == \"__main__\":\n    play_game()"}
{"instruction": "Create a python class to store the data of a student", "input": "", "output": "class Student:\n    def __init__(self, name, age, gender, major, gpa):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.major = major\n        self.gpa  = gpa\n    \n    def print_student_info(self):\n        print(\"Name: {}\".format(self.name))\n        print(\"Age: {}\".format(self.age))\n        print(\"Gender: {}\".format(self.gender))\n        print(\"Major: {}\".format(self.major))\n        print(\"GPA: {}\".format(self.gpa))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class to store the data of a student\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age, gender, major, gpa):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.major = major\n        self.gpa  = gpa\n    \n    def print_student_info(self):\n        print(\"Name: {}\".format(self.name))\n        print(\"Age: {}\".format(self.age))\n        print(\"Gender: {}\".format(self.gender))\n        print(\"Major: {}\".format(self.major))\n        print(\"GPA: {}\".format(self.gpa))"}
{"instruction": "Write a Python program to automate web form filling.", "input": "", "output": "from selenium import webdriver\nbrowser = webdriver.Chrome()\n\n# navigate to website\nbrowser.get(\"website_url\")\n\n# fill form\nname_field = browser.find_element_by_id(\"name\")\nname_field.send_keys(\"John Doe\")\n\nemail_field = browser.find_element_by_id(\"email\")\nemail_field.send_keys(\"example@domain.com\")\n\nage_field = browser.find_element_by_id(\"age\")\nage_field.send_keys(\"25\")\n\n# submit form\nsubmit_button = browser.find_element_by_id(\"submit\")\nsubmit_button.click()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to automate web form filling.\n\n### Input:\n\n\n### Output:\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\n\n# navigate to website\nbrowser.get(\"website_url\")\n\n# fill form\nname_field = browser.find_element_by_id(\"name\")\nname_field.send_keys(\"John Doe\")\n\nemail_field = browser.find_element_by_id(\"email\")\nemail_field.send_keys(\"example@domain.com\")\n\nage_field = browser.find_element_by_id(\"age\")\nage_field.send_keys(\"25\")\n\n# submit form\nsubmit_button = browser.find_element_by_id(\"submit\")\nsubmit_button.click()"}
{"instruction": "Develop an algorithm in Python for sorting an array.", "input": "", "output": "# Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for sorting an array.\n\n### Input:\n\n\n### Output:\n# Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"instruction": "Write a function to implement Bubble Sort in Python.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to implement Bubble Sort in Python.\n\n### Input:\n\n\n### Output:\ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"instruction": "Explain the purpose of using dictionaries in Python.", "input": "", "output": "Dictionaries are used in Python to store data in the form of key-value pairs, where each key is associated with a specific value. Dictionaries can be used for a variety of tasks including representing complex data, creating lookup tables, and organizing information. The key-value pairs in a dictionary are mutable, meaning they can be changed at any point in the program. Finally, dictionaries are very efficient in terms of memory space and can be used to store large amounts of data in a relatively small amount of space.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the purpose of using dictionaries in Python.\n\n### Input:\n\n\n### Output:\nDictionaries are used in Python to store data in the form of key-value pairs, where each key is associated with a specific value. Dictionaries can be used for a variety of tasks including representing complex data, creating lookup tables, and organizing information. The key-value pairs in a dictionary are mutable, meaning they can be changed at any point in the program. Finally, dictionaries are very efficient in terms of memory space and can be used to store large amounts of data in a relatively small amount of space."}
{"instruction": "Optimize your code in Python so that it runs faster.", "input": "", "output": "import time\n\ndef slow_function():\n    # some code that takes a long time to run\n    time.sleep(5)\n\nstart_time = time.time()\nslow_function()\nelapsed_time = time.time() - start_time\nprint(f\"Function took {elapsed_time} seconds.\")\n\n# Rewritten with optimisation\nimport time\nfrom functools import lru_cache\n\n@lru_cache()\ndef fast_function():\n    # some code that takes a long time to run\n    time.sleep(5)\n\nstart_time = time.time()\nfast_function()\nelapsed_time = time.time() - start_time\nprint(f\"Function took {elapsed_time} seconds.\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize your code in Python so that it runs faster.\n\n### Input:\n\n\n### Output:\nimport time\n\ndef slow_function():\n    # some code that takes a long time to run\n    time.sleep(5)\n\nstart_time = time.time()\nslow_function()\nelapsed_time = time.time() - start_time\nprint(f\"Function took {elapsed_time} seconds.\")\n\n# Rewritten with optimisation\nimport time\nfrom functools import lru_cache\n\n@lru_cache()\ndef fast_function():\n    # some code that takes a long time to run\n    time.sleep(5)\n\nstart_time = time.time()\nfast_function()\nelapsed_time = time.time() - start_time\nprint(f\"Function took {elapsed_time} seconds.\")"}
{"instruction": "Create a Python class to accurately define a circle.", "input": "", "output": "class Circle():\n    \"\"\"\n    Accurately define a circle in Python\n    \"\"\"\n    def __init__(self, x, y, radius):\n        \"\"\"\n        Constructor for Circle\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.radius = radius\n    \n    def get_area(self):\n        \"\"\"\n        Returns area of the circle\n        \"\"\"\n        return 3.14*self.radius**2\n    \n    def get_perimeter(self):\n        \"\"\"\n        Returns perimeter of the circle\n        \"\"\"\n        return 2*3.14*self.radius\n    \n    def get_centre(self):\n        \"\"\"\n        Returns the centre point of the circle\n        \"\"\"\n        return self.x, self.y", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to accurately define a circle.\n\n### Input:\n\n\n### Output:\nclass Circle():\n    \"\"\"\n    Accurately define a circle in Python\n    \"\"\"\n    def __init__(self, x, y, radius):\n        \"\"\"\n        Constructor for Circle\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.radius = radius\n    \n    def get_area(self):\n        \"\"\"\n        Returns area of the circle\n        \"\"\"\n        return 3.14*self.radius**2\n    \n    def get_perimeter(self):\n        \"\"\"\n        Returns perimeter of the circle\n        \"\"\"\n        return 2*3.14*self.radius\n    \n    def get_centre(self):\n        \"\"\"\n        Returns the centre point of the circle\n        \"\"\"\n        return self.x, self.y"}
{"instruction": "Write a Python program to create a tic-tac-toe game.", "input": "", "output": "# define a function to draw the board\ndef draw_board(): \n  \n    print(\"\\n\")                   \n    print(\" --- | --- | --- \")\n    print(\"  7  |  8  |  9  \") \n    print(\" --- | --- | --- \")\n    print(\"  4  |  5  |  6  \") \n    print(\" --- | --- | --- \")\n    print(\"  1  |  2  |  3  \") \n    print(\" --- | --- | --- \")\n  \n# define a function to check if position is empty \ndef check_position(position, board): \n    return board[position] == ' '\n  \n# define a function to check if board is full and return boolean  \ndef is_board_full(board): \n    for i in range(1, 10): \n        if check_position(i, board): \n            return False\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a tic-tac-toe game.\n\n### Input:\n\n\n### Output:\n# define a function to draw the board\ndef draw_board(): \n  \n    print(\"\\n\")                   \n    print(\" --- | --- | --- \")\n    print(\"  7  |  8  |  9  \") \n    print(\" --- | --- | --- \")\n    print(\"  4  |  5  |  6  \") \n    print(\" --- | --- | --- \")\n    print(\"  1  |  2  |  3  \") \n    print(\" --- | --- | --- \")\n  \n# define a function to check if position is empty \ndef check_position(position, board): \n    return board[position] == ' '\n  \n# define a function to check if board is full and return boolean  \ndef is_board_full(board): \n    for i in range(1, 10): \n        if check_position(i, board): \n            return False\n    return True"}
{"instruction": "Implement a K Nearest Neighbors algorithm in Python.", "input": "", "output": "import numpy as np \nfrom math import sqrt \nimport warnings \nfrom collections import Counter \n\ndef k_nearest_neighbors(data, predict, k=3): \n    if len(data) >= k: \n        warnings.warn('K is set to a value less than total voting groups!') \n  \n    distances =[] \n    for group in data: \n        for features in data[group]: \n            euclidean_distance = np.linalg.norm(np.array(features) - np.array(predict)) \n            distances.append([euclidean_distance, group]) \n  \n    votes = [i[1] for i in sorted(distances)[:k]] \n    vote_result = Counter(votes).most_common(1)[0][0] \n    confidence = Counter(votes).most_common(1)[0][1] / k \n\n    return vote_result, confidence", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a K Nearest Neighbors algorithm in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np \nfrom math import sqrt \nimport warnings \nfrom collections import Counter \n\ndef k_nearest_neighbors(data, predict, k=3): \n    if len(data) >= k: \n        warnings.warn('K is set to a value less than total voting groups!') \n  \n    distances =[] \n    for group in data: \n        for features in data[group]: \n            euclidean_distance = np.linalg.norm(np.array(features) - np.array(predict)) \n            distances.append([euclidean_distance, group]) \n  \n    votes = [i[1] for i in sorted(distances)[:k]] \n    vote_result = Counter(votes).most_common(1)[0][0] \n    confidence = Counter(votes).most_common(1)[0][1] / k \n\n    return vote_result, confidence"}
{"instruction": "Create a python code to convert a given xml to json.", "input": "", "output": "import xml.etree.ElementTree as etree \nimport json\n\ndef xml_to_json(xml_data):\n    root = etree.fromstring(xml_data)\n    json_data = json.dumps(etree_to_dict(root), indent=4)\n    return json_data\n\ndef etree_to_dict(t):\n    d = {t.tag: {} if t.attrib else None}\n    children = list(t)\n    if children:\n        dd = defaultdict(list)\n        for dc in map(etree_to_dict, children):\n            for k, v in dc.items():\n                dd[k].append(v)\n        d = {t.tag: {k:v[0] if len(v) == 1 else v\n                 for k, v in dd.items()}}\n    if t.attrib:\n        d[t.tag].update(('@' + k, v)\n                        for k, v in t.attrib.items())\n    if t.text:\n        text = t.text.strip()\n        if children or t.attrib:\n            if text:\n              d[t.tag]['#text'] = text\n        else:\n            d[t.tag] = text\n    return d", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to convert a given xml to json.\n\n### Input:\n\n\n### Output:\nimport xml.etree.ElementTree as etree \nimport json\n\ndef xml_to_json(xml_data):\n    root = etree.fromstring(xml_data)\n    json_data = json.dumps(etree_to_dict(root), indent=4)\n    return json_data\n\ndef etree_to_dict(t):\n    d = {t.tag: {} if t.attrib else None}\n    children = list(t)\n    if children:\n        dd = defaultdict(list)\n        for dc in map(etree_to_dict, children):\n            for k, v in dc.items():\n                dd[k].append(v)\n        d = {t.tag: {k:v[0] if len(v) == 1 else v\n                 for k, v in dd.items()}}\n    if t.attrib:\n        d[t.tag].update(('@' + k, v)\n                        for k, v in t.attrib.items())\n    if t.text:\n        text = t.text.strip()\n        if children or t.attrib:\n            if text:\n              d[t.tag]['#text'] = text\n        else:\n            d[t.tag] = text\n    return d"}
{"instruction": "Generate a spiral matrix of size m x n using Python.", "input": "", "output": "def generate_spiral_matrix(m, n):\n    matrix = []\n    r = 0\n    c = 0\n    while (r < m and c < n):\n        # list to add elements of the first row\n        for i in range(c, n): \n            matrix.append(r * n + i + 1) \n        r += 1\n  \n        # list to add elements of the last column\n        for i in range(r, m): \n            matrix.append(i * n + n - 1 + 1)\n        n = n - 1\n  \n        # if last row exist\n        if ( r < m): \n                # list to add elements of the last row\n                for i in range(n - 1, c - 1, -1): \n                    matrix.append((m - 1) * n + i + 1) \n                m -= 1\n          \n        # if first column exits\n        if (c < n): \n            # list to add elements of the first column\n            for i in range(m - 1, r - 1, -1): \n                matrix.append(i * n + c + 1) \n            c += 1\n\n    return matrix", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a spiral matrix of size m x n using Python.\n\n### Input:\n\n\n### Output:\ndef generate_spiral_matrix(m, n):\n    matrix = []\n    r = 0\n    c = 0\n    while (r < m and c < n):\n        # list to add elements of the first row\n        for i in range(c, n): \n            matrix.append(r * n + i + 1) \n        r += 1\n  \n        # list to add elements of the last column\n        for i in range(r, m): \n            matrix.append(i * n + n - 1 + 1)\n        n = n - 1\n  \n        # if last row exist\n        if ( r < m): \n                # list to add elements of the last row\n                for i in range(n - 1, c - 1, -1): \n                    matrix.append((m - 1) * n + i + 1) \n                m -= 1\n          \n        # if first column exits\n        if (c < n): \n            # list to add elements of the first column\n            for i in range(m - 1, r - 1, -1): \n                matrix.append(i * n + c + 1) \n            c += 1\n\n    return matrix"}
{"instruction": "Generate a python function to classify iris flowers.", "input": "", "output": "\"\"\"\nGenerate a python function to classify iris flowers\n\"\"\"\nimport numpy as np\nfrom sklearn import neighbors\n\ndef classify_iris(data):\n    \"\"\"Classifies the input data into one of the three species of iris flower.\n\n    :param data: The data to be classified as an (N, 4) array of floats\n\n    :returns: An array (N, ) of strings representing the species of the data\n    \"\"\"\n\n    # Train the model\n    x_train, y_train = get_iris_training_data()\n    model = neighbors.KNeighborsClassifier()\n    model.fit(x_train, y_train)\n\n    # Classify the input data\n    predictions = model.predict(data)\n\n    return predictions\n    \ndef get_iris_training_data():\n    \"\"\"Read the iris training and target data from a file\n\n    :returns: Two NumPy arrays representing the training data\n        and target values\n    \"\"\"\n\n    x = np.genfromtxt('data/iris/x_train.csv', delimiter=',')\n    y = np.genfromtxt('data/iris/y_train.csv', delimiter=',', dtype=str)\n\n    return x, y", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function to classify iris flowers.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a python function to classify iris flowers\n\"\"\"\nimport numpy as np\nfrom sklearn import neighbors\n\ndef classify_iris(data):\n    \"\"\"Classifies the input data into one of the three species of iris flower.\n\n    :param data: The data to be classified as an (N, 4) array of floats\n\n    :returns: An array (N, ) of strings representing the species of the data\n    \"\"\"\n\n    # Train the model\n    x_train, y_train = get_iris_training_data()\n    model = neighbors.KNeighborsClassifier()\n    model.fit(x_train, y_train)\n\n    # Classify the input data\n    predictions = model.predict(data)\n\n    return predictions\n    \ndef get_iris_training_data():\n    \"\"\"Read the iris training and target data from a file\n\n    :returns: Two NumPy arrays representing the training data\n        and target values\n    \"\"\"\n\n    x = np.genfromtxt('data/iris/x_train.csv', delimiter=',')\n    y = np.genfromtxt('data/iris/y_train.csv', delimiter=',', dtype=str)\n\n    return x, y"}
{"instruction": "Design a Python program to optimize a cost function.", "input": "", "output": "import numpy as np\n\ndef optimize(func, n, method=\"gradient_descent\", iter_num=100, step_size=0.01):\n    \"\"\"\n    Input: Cost function, dimension of the variable, optimization method, number of iterations, step size\n    Output: Optimal variable\n    \"\"\"\n    # define our variable\n    x = np.zeros(n, dtype=float)\n\n    if method == \"gradient_descent\":\n        for i in range(iter_num):\n            # calculate the gradient\n            grad = np.gradient(func, x)\n\n            # update x by taking a step in the opposite direction of the gradient\n            x -= step_size * grad\n    elif method == \"newton_method\":\n        for i in range(iter_num):\n            # calculate the gradient\n            grad = np.gradient(func, x)\n            # calculate the hessian\n            hessian = np.gradient(grad, x)\n\n            # update x by taking a step in the opposite direction of the gradient and divided by the hessian\n            x -= np.linalg.inv(hessian) .dot(grad)\n\n    return x", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to optimize a cost function.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef optimize(func, n, method=\"gradient_descent\", iter_num=100, step_size=0.01):\n    \"\"\"\n    Input: Cost function, dimension of the variable, optimization method, number of iterations, step size\n    Output: Optimal variable\n    \"\"\"\n    # define our variable\n    x = np.zeros(n, dtype=float)\n\n    if method == \"gradient_descent\":\n        for i in range(iter_num):\n            # calculate the gradient\n            grad = np.gradient(func, x)\n\n            # update x by taking a step in the opposite direction of the gradient\n            x -= step_size * grad\n    elif method == \"newton_method\":\n        for i in range(iter_num):\n            # calculate the gradient\n            grad = np.gradient(func, x)\n            # calculate the hessian\n            hessian = np.gradient(grad, x)\n\n            # update x by taking a step in the opposite direction of the gradient and divided by the hessian\n            x -= np.linalg.inv(hessian) .dot(grad)\n\n    return x"}
{"instruction": "Create a Python application to simulate a dice game.", "input": "", "output": "# Create a Python application to simulate a dice game \nimport random\n\n# Remind the player of the rules\nprint(\"You are playing a dice game. Roll the dice to determine who will go first\\n\")\n\n# Set number of players, configuring the game\nnum_players = int(input(\"Enter the number of players: \"))\nplayer_list = []\nfirst_player = 0\n\n# Loop for each individual players\nfor player in range(1, num_players + 1):\n    # Simulate rolling a dice\n    roll = 0\n    roll = random.randint(1, 6)\n\n    # Player name\n    print(\"Player \" + str(player))\n    name = input(\"Enter your name: \")\n\n    # Append name and roll value to the list\n    player_list.append((name, roll))\n    print(\"You have rolled: {0}\\n\".format(roll))\n\n# Get the player with the highest roll\nmax_roll = 0\nfor player in player_list:\n    # Store the highest value of the roll\n    if player[1] > max_roll:\n        first_player = player\n        max_roll = player[1]\n\n# Announce the winner\nprint(\"{0} is the first player with the roll of {1}\".format(first_player[0], first_player[1]))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python application to simulate a dice game.\n\n### Input:\n\n\n### Output:\n# Create a Python application to simulate a dice game \nimport random\n\n# Remind the player of the rules\nprint(\"You are playing a dice game. Roll the dice to determine who will go first\\n\")\n\n# Set number of players, configuring the game\nnum_players = int(input(\"Enter the number of players: \"))\nplayer_list = []\nfirst_player = 0\n\n# Loop for each individual players\nfor player in range(1, num_players + 1):\n    # Simulate rolling a dice\n    roll = 0\n    roll = random.randint(1, 6)\n\n    # Player name\n    print(\"Player \" + str(player))\n    name = input(\"Enter your name: \")\n\n    # Append name and roll value to the list\n    player_list.append((name, roll))\n    print(\"You have rolled: {0}\\n\".format(roll))\n\n# Get the player with the highest roll\nmax_roll = 0\nfor player in player_list:\n    # Store the highest value of the roll\n    if player[1] > max_roll:\n        first_player = player\n        max_roll = player[1]\n\n# Announce the winner\nprint(\"{0} is the first player with the roll of {1}\".format(first_player[0], first_player[1]))"}
{"instruction": "Generate code for a simple calculator app in Python.", "input": "", "output": "import sys\n \n# Simple python calculator\n \n# Function to add two numbers\ndef add(num1, num2):\n    return num1 + num2\n \n# Function to subtract two numbers\ndef subtract(num1, num2):\n    return num1 - num2\n \n# Function to multiply two numbers\ndef multiply(num1, num2):\n    return num1 * num2\n\n# Function to divide two numbers\ndef divide(num1, num2):\n    return num1 / num2\n\n# Get user input\nwhile True:\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    task = input(\"What do you want to do (add/subtract/multiply/divide): \")\n \n# Perform task\n    if task == \"add\":\n        output = add(num1, num2)\n    elif task == \"subtract\":\n        output = subtract(num1, num2)\n    elif task == \"multiply\":\n        output = multiply(num1, num2)\n    elif task == \"divide\":\n        output = divide(num1, num2)\n    else:\n        output = \"Invalid input\"\n \n# Print output\n    print(f\"Result: {output}\")\n    command = input(\"Do you wish to continue? (y/n): \")\n    if command == \"y\":\n        continue\n    else:\n        sys.exit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a simple calculator app in Python.\n\n### Input:\n\n\n### Output:\nimport sys\n \n# Simple python calculator\n \n# Function to add two numbers\ndef add(num1, num2):\n    return num1 + num2\n \n# Function to subtract two numbers\ndef subtract(num1, num2):\n    return num1 - num2\n \n# Function to multiply two numbers\ndef multiply(num1, num2):\n    return num1 * num2\n\n# Function to divide two numbers\ndef divide(num1, num2):\n    return num1 / num2\n\n# Get user input\nwhile True:\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    task = input(\"What do you want to do (add/subtract/multiply/divide): \")\n \n# Perform task\n    if task == \"add\":\n        output = add(num1, num2)\n    elif task == \"subtract\":\n        output = subtract(num1, num2)\n    elif task == \"multiply\":\n        output = multiply(num1, num2)\n    elif task == \"divide\":\n        output = divide(num1, num2)\n    else:\n        output = \"Invalid input\"\n \n# Print output\n    print(f\"Result: {output}\")\n    command = input(\"Do you wish to continue? (y/n): \")\n    if command == \"y\":\n        continue\n    else:\n        sys.exit()"}
{"instruction": "Convert SVG markers to PNG files of different sizes.", "input": "", "output": "#!/usr/bin/python\nfrom lxml import etree\nimport gzip, re, copy, tempfile, subprocess, os\n\nSVG_NAMESPACE=\"http://www.w3.org/2000/svg\"\nINKSCAPE_NAMESPACE=\"http://www.inkscape.org/namespaces/inkscape\"\n_safe = re.compile(\"^[A-Za-z]+$\")\n\nsizes=[64,32,16,8,4]\n\ntree = etree.parse(gzip.open(\"Markers.svgz\"))\n\nlabels = etree.ETXPath(\"//{%s}g/@{%s}label\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(tree)\nfor l in labels:\n\tif not _safe.match(l): raise Exception(\"Label not safe: \"+l)\n\n\tctree = copy.deepcopy(tree)\n\tlayers = etree.ETXPath(\"//{%s}g[./@{%s}label]\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(ctree)\n\tfor layer in layers:\n\t\tl2 = layer.get(\"{%s}label\" % INKSCAPE_NAMESPACE)\n\t\tif l2 == l:\n\t\t\tlayer.attrib[\"style\"]=\"\"\n\t\telse:\n\t\t\tlayer.attrib[\"style\"]=\"display:none\"\n\n\tf = tempfile.NamedTemporaryFile(delete=False)\n\tf.write(etree.tostring(ctree))\n\tf.close()\n\tcmd=[\"rsvg-convert\",\n\t\t\"-w\", \"62\", \"-h\", \"62\",\n\t\t\"-o\", \"/tmp/%s.png\" % l,\n\t\tf.name]\n\tprint \"Running\", \" \".join(cmd)\n\tsubprocess.call(cmd)\n\tos.unlink(f.name)\n\nfor size in sizes:\n\tcmd = [\"montage\"]\n\tfor l in labels: cmd.append(\"/tmp/%s.png\" % l)\n\tcmd.extend([\"-geometry\", \"%sx%s+1+1\" % (size-2, size-2), \"-background\", \"none\", \"PNG32:markers-%s.png\" % size ])\n\tprint \"Running\", \" \".join(cmd)\n\tsubprocess.call(cmd)\nfor l in labels: os.unlink(\"/tmp/%s.png\" % l)\n", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert SVG markers to PNG files of different sizes.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/python\nfrom lxml import etree\nimport gzip, re, copy, tempfile, subprocess, os\n\nSVG_NAMESPACE=\"http://www.w3.org/2000/svg\"\nINKSCAPE_NAMESPACE=\"http://www.inkscape.org/namespaces/inkscape\"\n_safe = re.compile(\"^[A-Za-z]+$\")\n\nsizes=[64,32,16,8,4]\n\ntree = etree.parse(gzip.open(\"Markers.svgz\"))\n\nlabels = etree.ETXPath(\"//{%s}g/@{%s}label\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(tree)\nfor l in labels:\n\tif not _safe.match(l): raise Exception(\"Label not safe: \"+l)\n\n\tctree = copy.deepcopy(tree)\n\tlayers = etree.ETXPath(\"//{%s}g[./@{%s}label]\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(ctree)\n\tfor layer in layers:\n\t\tl2 = layer.get(\"{%s}label\" % INKSCAPE_NAMESPACE)\n\t\tif l2 == l:\n\t\t\tlayer.attrib[\"style\"]=\"\"\n\t\telse:\n\t\t\tlayer.attrib[\"style\"]=\"display:none\"\n\n\tf = tempfile.NamedTemporaryFile(delete=False)\n\tf.write(etree.tostring(ctree))\n\tf.close()\n\tcmd=[\"rsvg-convert\",\n\t\t\"-w\", \"62\", \"-h\", \"62\",\n\t\t\"-o\", \"/tmp/%s.png\" % l,\n\t\tf.name]\n\tprint \"Running\", \" \".join(cmd)\n\tsubprocess.call(cmd)\n\tos.unlink(f.name)\n\nfor size in sizes:\n\tcmd = [\"montage\"]\n\tfor l in labels: cmd.append(\"/tmp/%s.png\" % l)\n\tcmd.extend([\"-geometry\", \"%sx%s+1+1\" % (size-2, size-2), \"-background\", \"none\", \"PNG32:markers-%s.png\" % size ])\n\tprint \"Running\", \" \".join(cmd)\n\tsubprocess.call(cmd)\nfor l in labels: os.unlink(\"/tmp/%s.png\" % l)\n"}
{"instruction": "Generate a response for an HTTP request using Python.", "input": "", "output": "import http.server\n\nclass RequestHandler(http.server.BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><body><h1>Hello World!</h1></body></html>')\n\nif __name__ == '__main__':\n    server = http.server.HTTPServer(('localhost', 8080), RequestHandler)\n    print('Starting server, use <Ctrl-C> to stop')\n    server.serve_forever()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a response for an HTTP request using Python.\n\n### Input:\n\n\n### Output:\nimport http.server\n\nclass RequestHandler(http.server.BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><body><h1>Hello World!</h1></body></html>')\n\nif __name__ == '__main__':\n    server = http.server.HTTPServer(('localhost', 8080), RequestHandler)\n    print('Starting server, use <Ctrl-C> to stop')\n    server.serve_forever()"}
{"instruction": "Implement a generic multi-value dictionary in Python.", "input": "", "output": "class MultiValueDict:\n    def __init__(self):\n        # Initialize and empty dictionary\n        self.dict = {}\n\n    def add(self, key, value):\n        # Add value to key\n        if key in self.dict:\n            self.dict[key].append(value)\n        else:\n            self.dict[key] = [value]\n\n    def get(self, key):\n        # Return the list of values for given key\n        if key in self.dict:\n            return self.dict[key]\n-->\n        else:\n            return None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a generic multi-value dictionary in Python.\n\n### Input:\n\n\n### Output:\nclass MultiValueDict:\n    def __init__(self):\n        # Initialize and empty dictionary\n        self.dict = {}\n\n    def add(self, key, value):\n        # Add value to key\n        if key in self.dict:\n            self.dict[key].append(value)\n        else:\n            self.dict[key] = [value]\n\n    def get(self, key):\n        # Return the list of values for given key\n        if key in self.dict:\n            return self.dict[key]\n-->\n        else:\n            return None"}
{"instruction": "Compare two JSON objects and check if they are equal.", "input": "", "output": "import json \n  \ndef json_compare(json1, json2): \n    # convert both the JSON objects to Python dictionary \n    json1_dict = json.loads(json1) \n    json2_dict = json.loads(json2) \n  \n    # check if the keys are equal \n    if (json1_dict.keys() == json2_dict.keys()):  \n  \n        # if keys are equal, check if the values are equal \n        for key in json1_dict.keys(): \n            if (json1_dict[key] != json2_dict[key]): \n                return False\n        return True\n    else: \n        return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two JSON objects and check if they are equal.\n\n### Input:\n\n\n### Output:\nimport json \n  \ndef json_compare(json1, json2): \n    # convert both the JSON objects to Python dictionary \n    json1_dict = json.loads(json1) \n    json2_dict = json.loads(json2) \n  \n    # check if the keys are equal \n    if (json1_dict.keys() == json2_dict.keys()):  \n  \n        # if keys are equal, check if the values are equal \n        for key in json1_dict.keys(): \n            if (json1_dict[key] != json2_dict[key]): \n                return False\n        return True\n    else: \n        return False"}
{"instruction": "Create a Python class to represent a 3D vector object", "input": "", "output": "class Vector3D(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return f\"Vector3D({self.x}, {self.y}, {self.z})\"\n    \n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)\n    \n    def __mul__(self, scalar):\n        return Vector3D(self.x * scalar,\n                        self.y * scalar,\n                        self.z * scalar)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a 3D vector object\n\n### Input:\n\n\n### Output:\nclass Vector3D(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return f\"Vector3D({self.x}, {self.y}, {self.z})\"\n    \n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)\n    \n    def __mul__(self, scalar):\n        return Vector3D(self.x * scalar,\n                        self.y * scalar,\n                        self.z * scalar)"}
{"instruction": "Create a function in Python to reverse a linked list.", "input": "", "output": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n        \n\ndef reverseList(head):\n    # initialize prev to null\n    prev = None\n    # till end of list\n    while head is not None:\n        # new points to old head\n        new = head\n        # move head to the postion of old head\n        head = head.next\n        # transfer old head's next to pointing at previus element\n        new.next = prev\n        # prev points to new head\n        prev = new\n    # prev will become new head\n    head = prev\n    return head", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to reverse a linked list.\n\n### Input:\n\n\n### Output:\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n        \n\ndef reverseList(head):\n    # initialize prev to null\n    prev = None\n    # till end of list\n    while head is not None:\n        # new points to old head\n        new = head\n        # move head to the postion of old head\n        head = head.next\n        # transfer old head's next to pointing at previus element\n        new.next = prev\n        # prev points to new head\n        prev = new\n    # prev will become new head\n    head = prev\n    return head"}
{"instruction": "Generate a random password of 8 characters in Python.", "input": "", "output": "\"\"\"\nGenerate a random password of 8 characters in Python\n\"\"\"\n\n# Import necessary modules\nimport random \nimport string\n\n# Create an empty string\npassword = \"\"\n\n# Define a function to generate a random password\ndef random_password(length = 8):\n    # A list of characters\n    chars = string.ascii_lowercase + string.digits + string.ascii_uppercase\n\n    # Iterate over length to fill the password string\n    for i in range(length):\n        # Choose a random character out of the list\n        char = random.choice(chars)\n\n        # Append the chosen character to the password\n        global password\n        password += char\n    \n    return password\n\n# Call the password generator\npassword = random_password()\n\n# Print the password\nprint(password)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password of 8 characters in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a random password of 8 characters in Python\n\"\"\"\n\n# Import necessary modules\nimport random \nimport string\n\n# Create an empty string\npassword = \"\"\n\n# Define a function to generate a random password\ndef random_password(length = 8):\n    # A list of characters\n    chars = string.ascii_lowercase + string.digits + string.ascii_uppercase\n\n    # Iterate over length to fill the password string\n    for i in range(length):\n        # Choose a random character out of the list\n        char = random.choice(chars)\n\n        # Append the chosen character to the password\n        global password\n        password += char\n    \n    return password\n\n# Call the password generator\npassword = random_password()\n\n# Print the password\nprint(password)"}
{"instruction": "Design a class in Python representing a bank account.", "input": "", "output": "class BankAccount:\n    def __init__(self, username, balance):\n        self.username = username\n        self.balance = balance\n\n    def show_balance(self):\n        print(f\"Balance of {self.username}'s account is {self.balance}\")\n    \n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"{amount} was added to the balance. Current balance is {self.balance}\")\n        else:\n            print(\"Cannot deposit negative value\")\n    \n    def withdraw(self, amount):\n        if amount > 0:\n            if amount <= self.balance:\n                self.balance -= amount\n                print(f\"{amount} was withdrawn from the balance. Current balance is {self.balance}\")\n            else:\n                print(\"Cannot withdraw more than current balance\")\n        else:\n            print(\"Cannot withdraw negative value\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python representing a bank account.\n\n### Input:\n\n\n### Output:\nclass BankAccount:\n    def __init__(self, username, balance):\n        self.username = username\n        self.balance = balance\n\n    def show_balance(self):\n        print(f\"Balance of {self.username}'s account is {self.balance}\")\n    \n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"{amount} was added to the balance. Current balance is {self.balance}\")\n        else:\n            print(\"Cannot deposit negative value\")\n    \n    def withdraw(self, amount):\n        if amount > 0:\n            if amount <= self.balance:\n                self.balance -= amount\n                print(f\"{amount} was withdrawn from the balance. Current balance is {self.balance}\")\n            else:\n                print(\"Cannot withdraw more than current balance\")\n        else:\n            print(\"Cannot withdraw negative value\")"}
{"instruction": "Create a python class for a Binary Search Tree (BST).", "input": "", "output": "class BinarySearchTree:\n    \n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    \n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        else: \n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)\n    \n    def contains(self, target):\n        if self.value == target:\n            return True\n        \n        elif target < self.value:\n            if self.left is None:\n                return False\n            else:\n                return self.left.contains(target)\n        \n        else:\n            if self.right is None:\n                return False\n            else:\n                return self.right.contains(target)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class for a Binary Search Tree (BST).\n\n### Input:\n\n\n### Output:\nclass BinarySearchTree:\n    \n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    \n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        else: \n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)\n    \n    def contains(self, target):\n        if self.value == target:\n            return True\n        \n        elif target < self.value:\n            if self.left is None:\n                return False\n            else:\n                return self.left.contains(target)\n        \n        else:\n            if self.right is None:\n                return False\n            else:\n                return self.right.contains(target)"}
{"instruction": "Create a list of HTML tags using the Python language.", "input": "", "output": "html_tags = [\"a\", \"abbr\", \"acronym\", \"address\", \"applet\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"basefont\", \"bdi\", \"bdo\", \"big\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"center\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"dir\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"font\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"keygen\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"noframes\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strike\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"tt\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of HTML tags using the Python language.\n\n### Input:\n\n\n### Output:\nhtml_tags = [\"a\", \"abbr\", \"acronym\", \"address\", \"applet\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"basefont\", \"bdi\", \"bdo\", \"big\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"center\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"dir\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"font\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"keygen\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"noframes\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strike\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"tt\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"]"}
{"instruction": "Design a feed-forward neural network class in Python.", "input": "", "output": "# Define a Feed-Forward Neural Network class in Python\nclass NeuralNetwork(object):\n\n    def __init__(self):\n        # Define the parameters of network\n        self.input_nodes = 0\n        self.hidden_nodes = 0\n        self.output_nodes = 0\n\n    def forward(self, inputs):\n        # Initialize the weights for the inputs and hidden layers\n        self.weights_input_to_hidden = np.random.normal(0.0, self.input_nodes**-0.5, \n                                       (self.input_nodes, self.hidden_nodes))\n\n        self.weights_hidden_to_output = np.random.normal(0.0, self.hidden_nodes**-0.5, \n                                       (self.hidden_nodes, self.output_nodes))\n\n        # Calculate signals going into hidden layer\n        hidden_inputs = np.dot(inputs, self.weights_input_to_hidden)\n        hidden_outputs = self.activation_function(hidden_inputs)\n        \n        # Calculate signals going into output layer\n        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output)\n        final_outputs = final_inputs\n        \n        return final_outputs\n\n    def activation_function(self, x):\n        # Define a sigmoid activation function\n        return 1 / (1 + (np.exp(-x)))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a feed-forward neural network class in Python.\n\n### Input:\n\n\n### Output:\n# Define a Feed-Forward Neural Network class in Python\nclass NeuralNetwork(object):\n\n    def __init__(self):\n        # Define the parameters of network\n        self.input_nodes = 0\n        self.hidden_nodes = 0\n        self.output_nodes = 0\n\n    def forward(self, inputs):\n        # Initialize the weights for the inputs and hidden layers\n        self.weights_input_to_hidden = np.random.normal(0.0, self.input_nodes**-0.5, \n                                       (self.input_nodes, self.hidden_nodes))\n\n        self.weights_hidden_to_output = np.random.normal(0.0, self.hidden_nodes**-0.5, \n                                       (self.hidden_nodes, self.output_nodes))\n\n        # Calculate signals going into hidden layer\n        hidden_inputs = np.dot(inputs, self.weights_input_to_hidden)\n        hidden_outputs = self.activation_function(hidden_inputs)\n        \n        # Calculate signals going into output layer\n        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output)\n        final_outputs = final_inputs\n        \n        return final_outputs\n\n    def activation_function(self, x):\n        # Define a sigmoid activation function\n        return 1 / (1 + (np.exp(-x)))"}
{"instruction": "Generate a Python program to render a Mandelbrot set.", "input": "", "output": "import numpy as np\nimport matplotlib.pyplot as plt \n\ndef mandelbrot(width, height):\n    # Super sample size (larger number of iterations for high-quality image)\n    ssample = 4\n    # Width and height of the image\n    width *= ssample\n    height *= ssample\n    # Maximum iterations for each point on the complex plane.\n    max_iteration = 100\n\n    # Initialize an empty array for storing the iteration count.\n    cmap = np.zeros([height, width])\n    x0, x1 = -2., 1.\n    y0, y1 = -1.5, 1.5\n\n    # Loop over a grid of points on the complex plane.\n    for y in range(height):\n        zy = y * (y1 - y0) / (height - 1) + y0\n        for x in range(width):\n            zx = x * (x1 - x0) / (width - 1) + x0\n            z = zx + zy * 1j\n            c = z\n\n            # Iterate until the iteration count exceeds the maximum.\n            for n in range(max_iteration):\n            \t# Calculate the next value in the sequence\n                z = z * z + c\n                # Check if the absolute value of 'z' has exceeded 2\n                if abs(z) > 4:\n                    break\n            # Set the iteration count (cmap) for the current point.\n            cmap[y, x] = n\n\n    cmap = cmap / (np.max(cmap) / 255.) # Rescale for better visibility\n    cmap = cmap[::ssample, ::ssample] # Resize\n    plt.imsave('mandelbrot.png', cmap, cmap='nipy_spectral')\n\nmandelbrot(800, 600)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to render a Mandelbrot set.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt \n\ndef mandelbrot(width, height):\n    # Super sample size (larger number of iterations for high-quality image)\n    ssample = 4\n    # Width and height of the image\n    width *= ssample\n    height *= ssample\n    # Maximum iterations for each point on the complex plane.\n    max_iteration = 100\n\n    # Initialize an empty array for storing the iteration count.\n    cmap = np.zeros([height, width])\n    x0, x1 = -2., 1.\n    y0, y1 = -1.5, 1.5\n\n    # Loop over a grid of points on the complex plane.\n    for y in range(height):\n        zy = y * (y1 - y0) / (height - 1) + y0\n        for x in range(width):\n            zx = x * (x1 - x0) / (width - 1) + x0\n            z = zx + zy * 1j\n            c = z\n\n            # Iterate until the iteration count exceeds the maximum.\n            for n in range(max_iteration):\n            \t# Calculate the next value in the sequence\n                z = z * z + c\n                # Check if the absolute value of 'z' has exceeded 2\n                if abs(z) > 4:\n                    break\n            # Set the iteration count (cmap) for the current point.\n            cmap[y, x] = n\n\n    cmap = cmap / (np.max(cmap) / 255.) # Rescale for better visibility\n    cmap = cmap[::ssample, ::ssample] # Resize\n    plt.imsave('mandelbrot.png', cmap, cmap='nipy_spectral')\n\nmandelbrot(800, 600)"}
{"instruction": "Automate the process of sending an email using Python.", "input": "", "output": "import smtplib \n\n# creates SMTP session \ns = smtplib.SMTP('smtp.gmail.com', 587) \n  \n# start TLS for security \ns.starttls() \n  \n# Authentication \ns.login(\"sender_email_id\", \"sender_email_id_password\") \n  \n# message to be sent \nmessage = \"Message_you_need_to_send\"\n\n# sending the mail \ns.sendmail(\"sender_email_id\", \"receiver_email_id\", message) \n\n# terminating the session \ns.quit() \n\nprint(\"Email sent successfully to recipient\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the process of sending an email using Python.\n\n### Input:\n\n\n### Output:\nimport smtplib \n\n# creates SMTP session \ns = smtplib.SMTP('smtp.gmail.com', 587) \n  \n# start TLS for security \ns.starttls() \n  \n# Authentication \ns.login(\"sender_email_id\", \"sender_email_id_password\") \n  \n# message to be sent \nmessage = \"Message_you_need_to_send\"\n\n# sending the mail \ns.sendmail(\"sender_email_id\", \"receiver_email_id\", message) \n\n# terminating the session \ns.quit() \n\nprint(\"Email sent successfully to recipient\")"}
{"instruction": "Implement a web scraper in Python using BeautifulSoup.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Make a get request to get the remote data\nr = requests.get('https://www.example.com')\n\n# Parse the text\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract data\ndata = []\nfor tr in soup.find_all('tr'): # Find all table rows\n    row = []\n    for td in tr.find_all('td'): # Find all table data\n        row.append(td.text)\n    data.append(row)\n\n# Print the extracted data\nprint(data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web scraper in Python using BeautifulSoup.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make a get request to get the remote data\nr = requests.get('https://www.example.com')\n\n# Parse the text\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract data\ndata = []\nfor tr in soup.find_all('tr'): # Find all table rows\n    row = []\n    for td in tr.find_all('td'): # Find all table data\n        row.append(td.text)\n    data.append(row)\n\n# Print the extracted data\nprint(data)"}
{"instruction": "Can you explain what the yield keyword does in Python?", "input": "", "output": "The yield keyword in Python is used to create generator functions. A generator function is a special type of function where it can yield multiple values in steps instead of a single return statement. Each time the function yields, the state of the function is saved, and the next time the function is called, the function continues from where it left off. This allows for efficient code that uses less memory because the variables are not stored in memory but are instead recalled every time the function is called.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you explain what the yield keyword does in Python?\n\n### Input:\n\n\n### Output:\nThe yield keyword in Python is used to create generator functions. A generator function is a special type of function where it can yield multiple values in steps instead of a single return statement. Each time the function yields, the state of the function is saved, and the next time the function is called, the function continues from where it left off. This allows for efficient code that uses less memory because the variables are not stored in memory but are instead recalled every time the function is called."}
{"instruction": "Write a function to implement insertion sort in Python", "input": "", "output": "\"\"\"\nFunction to implement insertion sort in Python\n\"\"\"\n\ndef insertionSort(arr): \n  \n    # traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to implement insertion sort in Python\n\n### Input:\n\n\n### Output:\n\"\"\"\nFunction to implement insertion sort in Python\n\"\"\"\n\ndef insertionSort(arr): \n  \n    # traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction": "Create a Python program to implement a Priority Queue.", "input": "", "output": "class PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def is_empty(self):\n        return len(self.queue) == []\n    \n    def insert(self, data):\n        self.queue.append(data)\n    \n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement a Priority Queue.\n\n### Input:\n\n\n### Output:\nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def is_empty(self):\n        return len(self.queue) == []\n    \n    def insert(self, data):\n        self.queue.append(data)\n    \n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()"}
{"instruction": "Create a Python class to process credit card payments.", "input": "", "output": "class CreditCardProcessor:\n    def __init__(self):\n        self.cards = {}\n        self.payments = {}\n        \n    def add_card(self, card_number, card_holder_name):\n        self.cards[card_number] = card_holder_name\n        \n    def process_payment(self, card_number, amount):\n        if card_number not in self.cards:\n            raise ValueError(f'{card_number} is not a valid card number.')\n        if amount < 0:\n            raise ValueError('Payment cannot be negative.')\n        \n        self.payments[card_number] = amount\n        print(f'Payment of {amount} processed for {self.cards[card_number]}')\n        \n    def get_total_payments(self):\n        return sum(self.payments.values())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to process credit card payments.\n\n### Input:\n\n\n### Output:\nclass CreditCardProcessor:\n    def __init__(self):\n        self.cards = {}\n        self.payments = {}\n        \n    def add_card(self, card_number, card_holder_name):\n        self.cards[card_number] = card_holder_name\n        \n    def process_payment(self, card_number, amount):\n        if card_number not in self.cards:\n            raise ValueError(f'{card_number} is not a valid card number.')\n        if amount < 0:\n            raise ValueError('Payment cannot be negative.')\n        \n        self.payments[card_number] = amount\n        print(f'Payment of {amount} processed for {self.cards[card_number]}')\n        \n    def get_total_payments(self):\n        return sum(self.payments.values())"}
{"instruction": "Design a simple linear regression algorithm in Python.", "input": "", "output": "def simple_linear_regression(X, y): \n    # calculate the mean value of a list of numbers \n    def mean(values): \n        return sum(values) / float(len(values)) \n\n    # calculate covariance between x and y \n    def covariance(x, mean_x, y, mean_y): \n        covar = 0.0\n        for i in range(len(x)): \n            covar += (x[i] - mean_x) * (y[i] - mean_y) \n        return covar \n\n    # calculate the variance of a list of numbers \n    def variance(values, mean): \n        return sum([(x - mean)**2 for x in values]) \n  \n    # calculate coefficients \n    def coefficients(X, y): \n        x_mean, y_mean = mean(X), mean(y) \n        b1 = covariance(X, x_mean, y, y_mean) / variance(X, x_mean) \n        b0 = y_mean - b1 * x_mean \n        return [b0, b1] \n  \n    b = coefficients(X, y) \n    return b[0], b[1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a simple linear regression algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef simple_linear_regression(X, y): \n    # calculate the mean value of a list of numbers \n    def mean(values): \n        return sum(values) / float(len(values)) \n\n    # calculate covariance between x and y \n    def covariance(x, mean_x, y, mean_y): \n        covar = 0.0\n        for i in range(len(x)): \n            covar += (x[i] - mean_x) * (y[i] - mean_y) \n        return covar \n\n    # calculate the variance of a list of numbers \n    def variance(values, mean): \n        return sum([(x - mean)**2 for x in values]) \n  \n    # calculate coefficients \n    def coefficients(X, y): \n        x_mean, y_mean = mean(X), mean(y) \n        b1 = covariance(X, x_mean, y, y_mean) / variance(X, x_mean) \n        b0 = y_mean - b1 * x_mean \n        return [b0, b1] \n  \n    b = coefficients(X, y) \n    return b[0], b[1]"}
{"instruction": "Create a class to generate an HTML table using Python.", "input": "", "output": "\"\"\"\nCreate a class to generate an HTML table using Python.\n\"\"\"\n\nclass HtmlTable:\n    def __init__(self, table_headers, table_data):\n        self.table_headers = table_headers\n        self.table_data = table_data\n\n    def generate_html_table(self):\n        html = \"<table>\\n\"\n        html += self.generate_headers()\n        html += self.generate_rows()\n        html += \"</table>\"\n        return html\n\n    def generate_headers(self):\n        html = \"<tr>\"\n        for header in self.table_headers:\n            html += \"<th>{}</th>\".format(header)\n        html += \"</tr>\"\n        return html\n\n    def generate_rows(self):\n        html = \"\"\n\n        for row in self.table_data:\n            html += \"<tr>\"\n            for col in row:\n                html += \"<td>{}</td>\".format(col)\n            html += \"</tr>\\n\"\n\n        return html", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to generate an HTML table using Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a class to generate an HTML table using Python.\n\"\"\"\n\nclass HtmlTable:\n    def __init__(self, table_headers, table_data):\n        self.table_headers = table_headers\n        self.table_data = table_data\n\n    def generate_html_table(self):\n        html = \"<table>\\n\"\n        html += self.generate_headers()\n        html += self.generate_rows()\n        html += \"</table>\"\n        return html\n\n    def generate_headers(self):\n        html = \"<tr>\"\n        for header in self.table_headers:\n            html += \"<th>{}</th>\".format(header)\n        html += \"</tr>\"\n        return html\n\n    def generate_rows(self):\n        html = \"\"\n\n        for row in self.table_data:\n            html += \"<tr>\"\n            for col in row:\n                html += \"<td>{}</td>\".format(col)\n            html += \"</tr>\\n\"\n\n        return html"}
{"instruction": "Design a Python program to solve a given sudoku board.", "input": "", "output": "def solve(board):\n\n    # find empty cell\n    for row in range(len(board)):\n        for col in range(len(board[0])):\n            if board[row][col] == 0:\n                for num in range(1, 10):\n                    # If a number is valid for the current cell\n                    if isValid(board, row, col, num):\n                        # Assign the number\n                        board[row][col] = num\n\n                        # Recursively check all of the other cells\n                        if solve(board):\ne                            return True \n                        \n                        # If there is no solution for the current cell, reset the number\n                        board[row][col] = 0\n                \n                # No valid number was found.\n                return False\n    \n    # When all cells have been checked and there is no empty cell left\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to solve a given sudoku board.\n\n### Input:\n\n\n### Output:\ndef solve(board):\n\n    # find empty cell\n    for row in range(len(board)):\n        for col in range(len(board[0])):\n            if board[row][col] == 0:\n                for num in range(1, 10):\n                    # If a number is valid for the current cell\n                    if isValid(board, row, col, num):\n                        # Assign the number\n                        board[row][col] = num\n\n                        # Recursively check all of the other cells\n                        if solve(board):\ne                            return True \n                        \n                        # If there is no solution for the current cell, reset the number\n                        board[row][col] = 0\n                \n                # No valid number was found.\n                return False\n    \n    # When all cells have been checked and there is no empty cell left\n    return True"}
{"instruction": "Create a Markov model in Python to generate a trigram.", "input": "", "output": "import random\nimport copy\n \ndef create_trigram_model(words_list):\n    trigram_model = {}\n    for i in range(len(words_list)-2):\n        w1 = words_list[i]\n        w2 = words_list[i+1]\n        w3 = words_list[i+2]\n \n        if (w1, w2) in trigram_model:\n            trigram_model[(w1, w2)].append(w3)\n        else:\n            trigram_model[(w1,w2)] = [w3]\n    return trigram_model\n \ndef generate_words(trigram_model):\n    new_string = []\n    keys = list(trigram_model.keys())\n    rand_start_word = keys[random.randint(0, len(keys)-1)]\n    new_string.extend(rand_start_word)\n     \n    while(True):\n        next_word_possible_list = trigram_model[tuple(new_string[-2:])]\n        if len(next_word_possible_list) == 0:\n            break\n        next_word = next_word_possible_list[random.randint(0, len(next_word_possible_list)-1)]\n        new_string.append(next_word)\n         \n        if len(new_string) > 20:\n            break\n     \n    return new_string", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Markov model in Python to generate a trigram.\n\n### Input:\n\n\n### Output:\nimport random\nimport copy\n \ndef create_trigram_model(words_list):\n    trigram_model = {}\n    for i in range(len(words_list)-2):\n        w1 = words_list[i]\n        w2 = words_list[i+1]\n        w3 = words_list[i+2]\n \n        if (w1, w2) in trigram_model:\n            trigram_model[(w1, w2)].append(w3)\n        else:\n            trigram_model[(w1,w2)] = [w3]\n    return trigram_model\n \ndef generate_words(trigram_model):\n    new_string = []\n    keys = list(trigram_model.keys())\n    rand_start_word = keys[random.randint(0, len(keys)-1)]\n    new_string.extend(rand_start_word)\n     \n    while(True):\n        next_word_possible_list = trigram_model[tuple(new_string[-2:])]\n        if len(next_word_possible_list) == 0:\n            break\n        next_word = next_word_possible_list[random.randint(0, len(next_word_possible_list)-1)]\n        new_string.append(next_word)\n         \n        if len(new_string) > 20:\n            break\n     \n    return new_string"}
{"instruction": "Explain the data structure of a binary tree in Python.", "input": "", "output": "A binary tree is a data structure consisting of nodes where each node can have at most two children. Each node contains a value, which can be any data type, along with a left and right pointer which points to the left and right child respectively. The root node is the topmost node in the tree and does not have any parent. Each node in the binary tree has a unique path from the root node to it and each node has a level associated with it.\n##\n7. Instruction: Create an HTML table to display the following data with three columns: Name, Country, and Age.\n7. Input:\nNoam  Israel  24\nJohn  US      25\nDavid France  22\n7. Output:\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Country</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>Noam</td>\n        <td>Israel</td>\n        <td>24</td>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>US</td>\n        <td>25</td>\n    </tr>\n    <tr>\n        <td>David</td>\n        <td>France</td>\n        <td>22</td>\n    </tr>\n</table>", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the data structure of a binary tree in Python.\n\n### Input:\n\n\n### Output:\nA binary tree is a data structure consisting of nodes where each node can have at most two children. Each node contains a value, which can be any data type, along with a left and right pointer which points to the left and right child respectively. The root node is the topmost node in the tree and does not have any parent. Each node in the binary tree has a unique path from the root node to it and each node has a level associated with it.\n##\n7. Instruction: Create an HTML table to display the following data with three columns: Name, Country, and Age.\n7. Input:\nNoam  Israel  24\nJohn  US      25\nDavid France  22\n7. Output:\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Country</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>Noam</td>\n        <td>Israel</td>\n        <td>24</td>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>US</td>\n        <td>25</td>\n    </tr>\n    <tr>\n        <td>David</td>\n        <td>France</td>\n        <td>22</td>\n    </tr>\n</table>"}
{"instruction": "Build a Python program to decrypt a given secret code.", "input": "", "output": "def decrypt(code):\n    # create a shift list \n    shift_list = [1, 3, 5, 7, 9, 11] \n  \n    # empty list to store decoded message \n    decoded_message = ''\n  \n    # iterate over characters in the secret code\n    for char in code: \n        # store character's ASCII value in a variable \n        char_ascii_value = ord(char) \n        # shift list index for correct decryption\n        shift_index = 0\n        # loop until incorrect shift index\n        while char_ascii_value // len(shift_list) > 0: \n            char_ascii_value -= len(shift_list)\n            shift_index += 1\n        # decryption\n        decrypted_char_ascii_value = char_ascii_value - shift_list[shift_index] \n        # add decrypted character to the decoded message\n        decoded_message += chr(decrypted_char_ascii_value) \n  \n    # return decoded message \n    return decoded_message \n    \n    \nsecret_code = '§ ¢ °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°'\nprint(decrypt(secret_code))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to decrypt a given secret code.\n\n### Input:\n\n\n### Output:\ndef decrypt(code):\n    # create a shift list \n    shift_list = [1, 3, 5, 7, 9, 11] \n  \n    # empty list to store decoded message \n    decoded_message = ''\n  \n    # iterate over characters in the secret code\n    for char in code: \n        # store character's ASCII value in a variable \n        char_ascii_value = ord(char) \n        # shift list index for correct decryption\n        shift_index = 0\n        # loop until incorrect shift index\n        while char_ascii_value // len(shift_list) > 0: \n            char_ascii_value -= len(shift_list)\n            shift_index += 1\n        # decryption\n        decrypted_char_ascii_value = char_ascii_value - shift_list[shift_index] \n        # add decrypted character to the decoded message\n        decoded_message += chr(decrypted_char_ascii_value) \n  \n    # return decoded message \n    return decoded_message \n    \n    \nsecret_code = '§ ¢ °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°'\nprint(decrypt(secret_code))"}
{"instruction": "Design a data structure in Python for a deck of cards.", "input": "", "output": "class Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python for a deck of cards.\n\n### Input:\n\n\n### Output:\nclass Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)"}
{"instruction": "Design an optimized selection sort algorithm in Python.", "input": "", "output": "def selection_sort(arr): \n    n = len(arr) \n    # Traverse through all array elements \n    for i in range(n): \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an optimized selection sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef selection_sort(arr): \n    n = len(arr) \n    # Traverse through all array elements \n    for i in range(n): \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]"}
{"instruction": "Use Python to create a website with a title and a form.", "input": "", "output": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef homepage():\n    return render_template('index.html', title='My Website')\n\n@app.route('/form', methods=['GET', 'POST'])\ndef form():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        return \"Your email address is {}\".format(email)\n    else:\n        return render_template('form.html', title='Form')\n\nif __name__ == '__main__':\n    app.run()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to create a website with a title and a form.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef homepage():\n    return render_template('index.html', title='My Website')\n\n@app.route('/form', methods=['GET', 'POST'])\ndef form():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        return \"Your email address is {}\".format(email)\n    else:\n        return render_template('form.html', title='Form')\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction": "Develop a class to perform linear regression in Python.", "input": "", "output": "class LinearRegression:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n    \n    def fit(self):\n        x_mean = self.X.mean()\n        y_mean = self.y.mean()\n        n = len(self.X)\n        \n        m = ( ( ( self.X * self.y).sum() - n*x_mean*y_mean ) ) /( ( ( self.X*self.X ).sum() - n*x_mean*x_mean ))\n        c = y_mean - m*x_mean\n        \n        return m, c\n      \n    def predict(self, m, c, X):\n        y_pred = m*X + c\n        return y_pred", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class to perform linear regression in Python.\n\n### Input:\n\n\n### Output:\nclass LinearRegression:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n    \n    def fit(self):\n        x_mean = self.X.mean()\n        y_mean = self.y.mean()\n        n = len(self.X)\n        \n        m = ( ( ( self.X * self.y).sum() - n*x_mean*y_mean ) ) /( ( ( self.X*self.X ).sum() - n*x_mean*x_mean ))\n        c = y_mean - m*x_mean\n        \n        return m, c\n      \n    def predict(self, m, c, X):\n        y_pred = m*X + c\n        return y_pred"}
{"instruction": "Generate a code for guessing a random number in Python.", "input": "", "output": "# This code uses the random module  \nimport random\n\n# Generate random number from 0 to 100\nrandomNumber = random.randint(0, 100)  \n\n# Ask user to guess the number\n# Keep guessing till user gets it right\nwhile True: \n    userNumber = int(input(\"Guess the number: \"))\n\n    if userNumber == randomNumber: \n        print(\"You guessed right!\") \n        break \n    elif userNumber > randomNumber:\n        print(\"Your guess is too high!\")\n    else:\n        print(\"Your guess is too low!\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code for guessing a random number in Python.\n\n### Input:\n\n\n### Output:\n# This code uses the random module  \nimport random\n\n# Generate random number from 0 to 100\nrandomNumber = random.randint(0, 100)  \n\n# Ask user to guess the number\n# Keep guessing till user gets it right\nwhile True: \n    userNumber = int(input(\"Guess the number: \"))\n\n    if userNumber == randomNumber: \n        print(\"You guessed right!\") \n        break \n    elif userNumber > randomNumber:\n        print(\"Your guess is too high!\")\n    else:\n        print(\"Your guess is too low!\")"}
{"instruction": "Write a Python program to find a substring in a string.", "input": "", "output": "def find_substring(source, substring):\n    '''This function returns the start index of a substring in given string '''\n    if substring not in source:\n        return -1\n    i=0\n    while i < len(source):\n        if source[i] == substring[0]:\n            flag = True\n            for j in range(len(substring)):\n                if substring[j] != source[i+j]:\n                    flag = False\n                    break\n            if flag:\n                return i\n        i += 1\n    return -1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find a substring in a string.\n\n### Input:\n\n\n### Output:\ndef find_substring(source, substring):\n    '''This function returns the start index of a substring in given string '''\n    if substring not in source:\n        return -1\n    i=0\n    while i < len(source):\n        if source[i] == substring[0]:\n            flag = True\n            for j in range(len(substring)):\n                if substring[j] != source[i+j]:\n                    flag = False\n                    break\n            if flag:\n                return i\n        i += 1\n    return -1"}
{"instruction": "Build a web application using the Django web framework.", "input": "", "output": "# Create a virtual environment to start the project\n$ virtualenv venv\n\n# Activate the virtual environment\n$ source venv/bin/activate\n\n# Install the required dependencies for the Django web project\n$ pip install django\n\n# Create the Django project\n$ django-admin startproject mysite\n\n# Change to the mysite directory\n$ cd mysite\n\n# Create the database tables\n$ python manage.py migrate\n\n# Create a superuser\n$ python manage.py createsuperuser\n\n# Start the development server\n$ python manage.py runserver", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web application using the Django web framework.\n\n### Input:\n\n\n### Output:\n# Create a virtual environment to start the project\n$ virtualenv venv\n\n# Activate the virtual environment\n$ source venv/bin/activate\n\n# Install the required dependencies for the Django web project\n$ pip install django\n\n# Create the Django project\n$ django-admin startproject mysite\n\n# Change to the mysite directory\n$ cd mysite\n\n# Create the database tables\n$ python manage.py migrate\n\n# Create a superuser\n$ python manage.py createsuperuser\n\n# Start the development server\n$ python manage.py runserver"}
{"instruction": "Write a Python program to create a GraphQL API endpoint", "input": "", "output": "import graphene\n\nclass Query(graphene.ObjectType):\n    # An endpoint to fetch all books\n    books = graphene.List(BookType)\n\n    def resolve_books(self, info):\n        return books\n\n\nclass Mutation(graphene.ObjectType):\n    # An endpoint to add a book\n    add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), )\n\n    def mutate(self, info, title, author):\n        book = Book(title=title, author=author)\n        book.save()\n\n        return book\n\nschema = graphene.Schema(query=Query, mutation=Mutation)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a GraphQL API endpoint\n\n### Input:\n\n\n### Output:\nimport graphene\n\nclass Query(graphene.ObjectType):\n    # An endpoint to fetch all books\n    books = graphene.List(BookType)\n\n    def resolve_books(self, info):\n        return books\n\n\nclass Mutation(graphene.ObjectType):\n    # An endpoint to add a book\n    add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), )\n\n    def mutate(self, info, title, author):\n        book = Book(title=title, author=author)\n        book.save()\n\n        return book\n\nschema = graphene.Schema(query=Query, mutation=Mutation)"}
{"instruction": "Generate a set of commands to create a web application.", "input": "", "output": "# Create the project structure\nmkdir app\ncd app\nmkdir static templates\n\n# Install all the dependencies\npip install flask\npip install flask-sqlalchemy\n\n# Create the application\ntouch app.py\n\n# Create the base template\ntouch templates/base.html\n\n# Create the model\ntouch models.py\n\n# Create the view\ntouch views.py\n\n# Create the routes\ntouch routes.py\n\n# Create the static assets\ntouch static/style.css\n\n# Create the database\npython manage.py db init\npython manage.py db migrate\npython manage.py db upgrade\n\n# Run the server\npython app.py", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of commands to create a web application.\n\n### Input:\n\n\n### Output:\n# Create the project structure\nmkdir app\ncd app\nmkdir static templates\n\n# Install all the dependencies\npip install flask\npip install flask-sqlalchemy\n\n# Create the application\ntouch app.py\n\n# Create the base template\ntouch templates/base.html\n\n# Create the model\ntouch models.py\n\n# Create the view\ntouch views.py\n\n# Create the routes\ntouch routes.py\n\n# Create the static assets\ntouch static/style.css\n\n# Create the database\npython manage.py db init\npython manage.py db migrate\npython manage.py db upgrade\n\n# Run the server\npython app.py"}
{"instruction": "Create a python program to send an email using smtplib.", "input": "", "output": "import smtplib\n\ndef send_email():\n    # Enter your email details here\n    email_address = 'myemail@example.com'\n    email_password = 'my_password'\n    to_address = 'recipient@example.com'\n\n    # Create a smtplib server\n    server = smtplib.SMTP('smtp.gmail.com',587)\n    server.ehlo()\n    server.starttls()\n    server.login(email_address, email_password)\n\n    # Create the message\n    message = \"\"\"\\\n    Subject: Test Email\n\n    This is a test email.\n    \"\"\"\n\n    # Send the email\n    server.sendmail(email_address, to_address, message)\n    server.quit()\n\nif __name__ == '__main__':\n    send_email()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to send an email using smtplib.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\ndef send_email():\n    # Enter your email details here\n    email_address = 'myemail@example.com'\n    email_password = 'my_password'\n    to_address = 'recipient@example.com'\n\n    # Create a smtplib server\n    server = smtplib.SMTP('smtp.gmail.com',587)\n    server.ehlo()\n    server.starttls()\n    server.login(email_address, email_password)\n\n    # Create the message\n    message = \"\"\"\\\n    Subject: Test Email\n\n    This is a test email.\n    \"\"\"\n\n    # Send the email\n    server.sendmail(email_address, to_address, message)\n    server.quit()\n\nif __name__ == '__main__':\n    send_email()"}
{"instruction": "Generate code to implement linear regression in Python.", "input": "", "output": "#Import the libraries\nimport numpy as np\n\n#Define the  linear regression function\ndef lin_reg(X,Y):\n    #Calculate the mean of given values\n   mean_x = np.mean(X)\n    mean_y = np.mean(Y)\n   #Calculate mean of different values    \n    mean_diff_x_y = np.mean([X[i] - Y[i] for i in range(len(X))])\n    #Calculate Variance \n    var_x = np.var(X)\n    var_y = np.var(Y)\n    #calculate coefficient of correlation\n    coefficient = mean_diff_x_y / np.sqrt(var_x*var_y)\n    \n    #calculate intercept and slope \n    intercept= mean_y - (coefficient*mean_x)\n    slope= coefficient*(np.sqrt(var_x)/np.sqrt(var_y))\n    \n    #Return the values\n    return intercept, slope", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to implement linear regression in Python.\n\n### Input:\n\n\n### Output:\n#Import the libraries\nimport numpy as np\n\n#Define the  linear regression function\ndef lin_reg(X,Y):\n    #Calculate the mean of given values\n   mean_x = np.mean(X)\n    mean_y = np.mean(Y)\n   #Calculate mean of different values    \n    mean_diff_x_y = np.mean([X[i] - Y[i] for i in range(len(X))])\n    #Calculate Variance \n    var_x = np.var(X)\n    var_y = np.var(Y)\n    #calculate coefficient of correlation\n    coefficient = mean_diff_x_y / np.sqrt(var_x*var_y)\n    \n    #calculate intercept and slope \n    intercept= mean_y - (coefficient*mean_x)\n    slope= coefficient*(np.sqrt(var_x)/np.sqrt(var_y))\n    \n    #Return the values\n    return intercept, slope"}
{"instruction": "Design a function to print a diamond pattern in python.", "input": "", "output": "def draw_diamond(stars): \n  for i in range(stars): \n      \n      # loop to print spaces \n      for j in range(stars - i - 1): \n          print(end=\" \") \n        \n      # loop to print stars \n      for j in range(i + 1): \n          print(\"*\", end=\" \") \n      \n      # new line after printing each row \n      print()  \n  \n  # loop to print rows of stars for bottom side of pattern \n  for i in range(stars - 1, 0, -1): \n      # loop to print spaces \n      for j in range(stars - i - 1): \n          print(end=\" \") \n        \n      # loop to print stars \n      for j in range(i): \n          print(\"*\", end=\" \") \n      \n      # new line after printing each row \n      print()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to print a diamond pattern in python.\n\n### Input:\n\n\n### Output:\ndef draw_diamond(stars): \n  for i in range(stars): \n      \n      # loop to print spaces \n      for j in range(stars - i - 1): \n          print(end=\" \") \n        \n      # loop to print stars \n      for j in range(i + 1): \n          print(\"*\", end=\" \") \n      \n      # new line after printing each row \n      print()  \n  \n  # loop to print rows of stars for bottom side of pattern \n  for i in range(stars - 1, 0, -1): \n      # loop to print spaces \n      for j in range(stars - i - 1): \n          print(end=\" \") \n        \n      # loop to print stars \n      for j in range(i): \n          print(\"*\", end=\" \") \n      \n      # new line after printing each row \n      print()"}
{"instruction": "Write a Python class to simulate a game of tic-tac-toe.", "input": "", "output": "class TicTacToe:\n board = []\n\n def __init__(self):\n self.board = [[' ' for x in range(3)] for y in range(3)]\n\n def display_board(self):\n for row in self.board:\n print('|'.join(row))\n\n def make_move(self, player, row, col):\n if self.board[row][col] == ' ':\n self.board[row][col] = player\n else:\n print \"This cell is occupied!\"\n\n def check_win(self):\n for row in self.board:\n if row[0] == row[1] == row[2] != ' ':\n return row[0]\n if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n return self.board[0][0]\n if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n return self.board[0][2]\n for col in range(3):\n if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n return self.board[0][col]\n return ' '", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to simulate a game of tic-tac-toe.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n board = []\n\n def __init__(self):\n self.board = [[' ' for x in range(3)] for y in range(3)]\n\n def display_board(self):\n for row in self.board:\n print('|'.join(row))\n\n def make_move(self, player, row, col):\n if self.board[row][col] == ' ':\n self.board[row][col] = player\n else:\n print \"This cell is occupied!\"\n\n def check_win(self):\n for row in self.board:\n if row[0] == row[1] == row[2] != ' ':\n return row[0]\n if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n return self.board[0][0]\n if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n return self.board[0][2]\n for col in range(3):\n if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n return self.board[0][col]\n return ' '"}
{"instruction": "Generate an AI model for spam classification in Python.", "input": "", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\n\n# Read the data \ndata = pd.read_csv('spam.csv')\n\n# Extract the features \nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['Message'].values).toarray()\n\n# Extract labels\ny = data['Label'].values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)\n\n# Train a SVM classifier model\nsvc_model = SVC(kernel='linear')\nsvc_model.fit(X_train, y_train)\n\n# Evaluate the model performance \ny_pred = svc_model.predict(X_test)\nprint(classification_report(y_test, y_pred))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an AI model for spam classification in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\n\n# Read the data \ndata = pd.read_csv('spam.csv')\n\n# Extract the features \nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['Message'].values).toarray()\n\n# Extract labels\ny = data['Label'].values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)\n\n# Train a SVM classifier model\nsvc_model = SVC(kernel='linear')\nsvc_model.fit(X_train, y_train)\n\n# Evaluate the model performance \ny_pred = svc_model.predict(X_test)\nprint(classification_report(y_test, y_pred))"}
{"instruction": "Design a neural network in Python for object detection.", "input": "", "output": "import torch \nimport torch.nn as nn \n  \nclass ObjectDetectionNetwork(nn.Module): \n\n def __init__(self): \n  super(ObjectDetectionNetwork, self).__init__() \n  \n  # Layer 1 \n  self.layer1 = nn.Conv2d(3, 32, 3, padding=1) \n  self.bn1 = nn.BatchNorm2d(32) \n  self.relu1 = nn.ReLU()\n  \n  # Layer 2 \n  self.layer2 = nn.Conv2d(32, 64, 3, padding=1) \n  self.bn2 = nn.BatchNorm2d(64) \n  self.relu2 = nn.ReLU()\n  \n  # Layer 3 \n  self.layer3 = nn.Conv2d(64, 128, 3, padding=1) \n  self.bn3 = nn.BatchNorm2d(128) \n  self.relu3 = nn.ReLU()\n  \n  # Layer 4 \n  self.layer4 = nn.Conv2d(128, 256, 3, padding=1) \n  self.bn4 = nn.BatchNorm2d(256) \n  self.relu4 = nn.ReLU()\n  \n  # Layer 5 \n  self.layer5 = nn.Conv2d(256, 512, 3, padding=1) \n  self.bn5 = nn.BatchNorm2d(512) \n  self.relu5 = nn.ReLU()\n  \n  # Max pooling layer \n  self.maxpool = nn.MaxPool2d(2, 2) \n  \n  # Fully connected layer \n  self.fc1 = nn.Linear(512, 4) \n  \n  \n # Forward pass \n def forward(self, x): \n  # Layer 1 \n  x = self.layer1(x) \n  x = self.bn1(x) \n  x = self.relu1(x) \n  \n  # Layer 2 \n  x = self.layer2(x) \n  x = self.bn2(x) \n  x = self.relu2(x) \n  \n  # Layer 3 \n  x = self.layer3(x) \n  x = self.bn3(x) \n  x = self.relu3(x) \n  \n  # Layer 4 \n  x = self.layer4(x) \n  x = self.bn4(x) \n  x = self.relu4(x) \n  \n  # Layer 5 \n  x = self.layer5(x) \n  x = self.bn5(x) \n  x = self.relu5(x) \n  \n  # Max pooling \n  x = self.maxpool(x) \n  \n  # Reshape \n  x = x.view(-1, 512) \n  \n  # Fully connected layer \n  x = self.fc1(x) \n  \n  return x", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python for object detection.\n\n### Input:\n\n\n### Output:\nimport torch \nimport torch.nn as nn \n  \nclass ObjectDetectionNetwork(nn.Module): \n\n def __init__(self): \n  super(ObjectDetectionNetwork, self).__init__() \n  \n  # Layer 1 \n  self.layer1 = nn.Conv2d(3, 32, 3, padding=1) \n  self.bn1 = nn.BatchNorm2d(32) \n  self.relu1 = nn.ReLU()\n  \n  # Layer 2 \n  self.layer2 = nn.Conv2d(32, 64, 3, padding=1) \n  self.bn2 = nn.BatchNorm2d(64) \n  self.relu2 = nn.ReLU()\n  \n  # Layer 3 \n  self.layer3 = nn.Conv2d(64, 128, 3, padding=1) \n  self.bn3 = nn.BatchNorm2d(128) \n  self.relu3 = nn.ReLU()\n  \n  # Layer 4 \n  self.layer4 = nn.Conv2d(128, 256, 3, padding=1) \n  self.bn4 = nn.BatchNorm2d(256) \n  self.relu4 = nn.ReLU()\n  \n  # Layer 5 \n  self.layer5 = nn.Conv2d(256, 512, 3, padding=1) \n  self.bn5 = nn.BatchNorm2d(512) \n  self.relu5 = nn.ReLU()\n  \n  # Max pooling layer \n  self.maxpool = nn.MaxPool2d(2, 2) \n  \n  # Fully connected layer \n  self.fc1 = nn.Linear(512, 4) \n  \n  \n # Forward pass \n def forward(self, x): \n  # Layer 1 \n  x = self.layer1(x) \n  x = self.bn1(x) \n  x = self.relu1(x) \n  \n  # Layer 2 \n  x = self.layer2(x) \n  x = self.bn2(x) \n  x = self.relu2(x) \n  \n  # Layer 3 \n  x = self.layer3(x) \n  x = self.bn3(x) \n  x = self.relu3(x) \n  \n  # Layer 4 \n  x = self.layer4(x) \n  x = self.bn4(x) \n  x = self.relu4(x) \n  \n  # Layer 5 \n  x = self.layer5(x) \n  x = self.bn5(x) \n  x = self.relu5(x) \n  \n  # Max pooling \n  x = self.maxpool(x) \n  \n  # Reshape \n  x = x.view(-1, 512) \n  \n  # Fully connected layer \n  x = self.fc1(x) \n  \n  return x"}
{"instruction": "Design a class for random password generation in Python.", "input": "", "output": "import random\n\nclass RandomPasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n        self.password_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890!@#$%^\"\n\n    def generate_password(self):\n        password = \"\"\n        for _ in range(self.length):\n            index = random.randint(0, len(self.password_chars) - 1 )\n            password += self.password_chars[index]\n        return password", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for random password generation in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nclass RandomPasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n        self.password_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890!@#$%^\"\n\n    def generate_password(self):\n        password = \"\"\n        for _ in range(self.length):\n            index = random.randint(0, len(self.password_chars) - 1 )\n            password += self.password_chars[index]\n        return password"}
{"instruction": "Create a class in Python to represent a rational number.", "input": "", "output": "class Rational:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def __add__(self, other):\n        new_numerator = self.numerator * other.denominator + other.numerator * self.denominator\n        new_denominator = self.denominator * other.denominator\n        return Rational(new_numerator, new_denominator)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a rational number.\n\n### Input:\n\n\n### Output:\nclass Rational:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def __add__(self, other):\n        new_numerator = self.numerator * other.denominator + other.numerator * self.denominator\n        new_denominator = self.denominator * other.denominator\n        return Rational(new_numerator, new_denominator)"}
{"instruction": "Design a python class that contains an array of objects.", "input": "", "output": "class ArrayObjects:\n    def __init__(self):\n        self.obj_array = [] \n\n    # Adds an object to array.\n    def add_object(self, obj):\n        self.obj_array.append(obj)\n    \n    # Deletes an object from array.\n    def delete_object(self, obj):\n        self.obj_array.remove(obj)\n    \n    # Indexes an object in array.\n    def index_object(self, index):\n        return self.obj_array[index]\n    \n    # Returns the size of the array.\n    def array_size(self):\n        return len(self.obj_array)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python class that contains an array of objects.\n\n### Input:\n\n\n### Output:\nclass ArrayObjects:\n    def __init__(self):\n        self.obj_array = [] \n\n    # Adds an object to array.\n    def add_object(self, obj):\n        self.obj_array.append(obj)\n    \n    # Deletes an object from array.\n    def delete_object(self, obj):\n        self.obj_array.remove(obj)\n    \n    # Indexes an object in array.\n    def index_object(self, index):\n        return self.obj_array[index]\n    \n    # Returns the size of the array.\n    def array_size(self):\n        return len(self.obj_array)"}
{"instruction": "Generate a Python library for linear algebra operations.", "input": "", "output": "import numpy as np\n\ndef add(x, y):\n    # adds two matrices x and y\n    return np.add(x, y)\n\ndef subtract(x, y):\n    # subtracts two matrices x and y\n    return np.subtract(x, y)\n\ndef multiply(x, y):\n    # multiplies two matrices x and y\n    return np.matmul(x, y)\n\ndef transpose(x):\n    # transpose a matrix x\n    return np.transpose(x)\n\ndef determinant(x):\n    # finds the determinant of a matrix x\n    return np.linalg.det(x)\n\ndef inverse(x):\n    # finds the inverse of a matrix x\n    return np.linalg.inv(x)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python library for linear algebra operations.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef add(x, y):\n    # adds two matrices x and y\n    return np.add(x, y)\n\ndef subtract(x, y):\n    # subtracts two matrices x and y\n    return np.subtract(x, y)\n\ndef multiply(x, y):\n    # multiplies two matrices x and y\n    return np.matmul(x, y)\n\ndef transpose(x):\n    # transpose a matrix x\n    return np.transpose(x)\n\ndef determinant(x):\n    # finds the determinant of a matrix x\n    return np.linalg.det(x)\n\ndef inverse(x):\n    # finds the inverse of a matrix x\n    return np.linalg.inv(x)"}
{"instruction": "Design a neural model for text classification in Python.", "input": "", "output": "import torch\nimport torch.nn as nn\n\nclass TextClassificationModel(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, output_dim, dropout):\n        super().__init__()\n        \n        self.embedding = nn.Embedding(vocab_size, embedding_dim)\n        self.fc = nn.Linear(embedding_dim, output_dim)\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, x):\n        embedded = self.embedding(x)\n        \n        embedded = self.dropout(embedded)\n        \n        logits = self.fc(embedded)\n        return logits", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural model for text classification in Python.\n\n### Input:\n\n\n### Output:\nimport torch\nimport torch.nn as nn\n\nclass TextClassificationModel(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, output_dim, dropout):\n        super().__init__()\n        \n        self.embedding = nn.Embedding(vocab_size, embedding_dim)\n        self.fc = nn.Linear(embedding_dim, output_dim)\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, x):\n        embedded = self.embedding(x)\n        \n        embedded = self.dropout(embedded)\n        \n        logits = self.fc(embedded)\n        return logits"}
{"instruction": "Create a function in Python for reversing a linked list.", "input": "", "output": "# Node class \nclass Node: \n  \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data\n        self.next = None  # Initialize next as null\n  \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # Function to reverse the linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for reversing a linked list.\n\n### Input:\n\n\n### Output:\n# Node class \nclass Node: \n  \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data\n        self.next = None  # Initialize next as null\n  \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # Function to reverse the linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev"}
{"instruction": "Write a Python script to classify emails as spam or not.", "input": "", "output": "#import packages\nimport numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\n\n# Load the data from the 'spam' emails dataset\nemails_data = pd.read_csv(\"emails.csv\")\n\n# Split the data into features and labels\nX = emails_data.drop(\"label\", axis=1)\ny = emails_data[\"label\"]\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=0\n)\n\n# Create the Multinomial Naive Bayes model\nmnb = MultinomialNB()\n\n# Train the model\nmnb.fit(X_train, y_train)\n\n# Make predictions\npredictions = mnb.predict(X_test)\n\n# Evaluate the accuracy of the model\nprint(\"Accuracy:\", accuracy_score(y_test, predictions))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to classify emails as spam or not.\n\n### Input:\n\n\n### Output:\n#import packages\nimport numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\n\n# Load the data from the 'spam' emails dataset\nemails_data = pd.read_csv(\"emails.csv\")\n\n# Split the data into features and labels\nX = emails_data.drop(\"label\", axis=1)\ny = emails_data[\"label\"]\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=0\n)\n\n# Create the Multinomial Naive Bayes model\nmnb = MultinomialNB()\n\n# Train the model\nmnb.fit(X_train, y_train)\n\n# Make predictions\npredictions = mnb.predict(X_test)\n\n# Evaluate the accuracy of the model\nprint(\"Accuracy:\", accuracy_score(y_test, predictions))"}
{"instruction": "Generate a program in Python to classify text documents.", "input": "", "output": "import spacy\nnlp = spacy.load('en_core_web_sm')\n\ndef classifier(doc):\n    if doc.text.startswith('http'):\n        return 'Website'\n    elif doc.text.startswith('www'):\n        return 'Website'\n    elif '@' in doc.text:\n        return 'Email'\n    elif '#' in doc.text:\n        return 'Hashtag'\n    elif doc.is_space:\n        return 'Space'\n    else:\n        doc = nlp(doc.text)\n        tokens_no_punct = [token for token in doc if not token.is_punct]\n        token_length = len(tokens_no_punct)\n        if token_length <= 3:\n            return 'Short Text'\n        elif token_length > 3 and token_length <=15:\n            return 'Medium Text'\n        elif token_length > 15:\n            return 'Long Text'\n            \nif __name__ == '__main__':\n    doc = input('Input your text:')\n    print('Classification: ' + classifier(doc))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to classify text documents.\n\n### Input:\n\n\n### Output:\nimport spacy\nnlp = spacy.load('en_core_web_sm')\n\ndef classifier(doc):\n    if doc.text.startswith('http'):\n        return 'Website'\n    elif doc.text.startswith('www'):\n        return 'Website'\n    elif '@' in doc.text:\n        return 'Email'\n    elif '#' in doc.text:\n        return 'Hashtag'\n    elif doc.is_space:\n        return 'Space'\n    else:\n        doc = nlp(doc.text)\n        tokens_no_punct = [token for token in doc if not token.is_punct]\n        token_length = len(tokens_no_punct)\n        if token_length <= 3:\n            return 'Short Text'\n        elif token_length > 3 and token_length <=15:\n            return 'Medium Text'\n        elif token_length > 15:\n            return 'Long Text'\n            \nif __name__ == '__main__':\n    doc = input('Input your text:')\n    print('Classification: ' + classifier(doc))"}
{"instruction": "Write a python program for performing linear regression.", "input": "", "output": "#import the modules\nimport matplotlib.pyplot as plt \nimport numpy as np \n  \n#set the independent and dependent variables \nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \ny = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) \n\n#calculate the mean\nx_mean = np.mean(x) \ny_mean = np.mean(y) \n  \n# Calculate the b1 and b0 \nnumerator = 0\ndenominator = 0\nfor i in range(len(x)): \n    numerator += (x[i] - x_mean)*(y[i] - y_mean) \n    denominator += (x[i] - x_mean)**2 \nb1 = numerator / denominator \nb0 = y_mean - (b1 * x_mean) \n\n# Print the coefficients\nprint(\"b1 =\", b1) \nprint(\"b0 =\", b0)  \n  \n# Plotting Values and Regression Line \nmax_x = np.max(x) + 100\nmin_x = np.min(x) - 100\n  \n# Calculating line values x and y \nx1 = np.linspace(min_x, max_x, 1000) \ny1 = b0 + b1 * x1 \n  \n# Ploting Line \nplt.plot(x1, y1, color='#00ff00', label='Linear Regression') \n  \n# Ploting Scatter Points \nplt.scatter(x, y, color='#ff0000', label='Scatter Plot') \n  \n# Add title\nplt.title(\"Linear Regression\") \n\n# Show the plot\nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program for performing linear regression.\n\n### Input:\n\n\n### Output:\n#import the modules\nimport matplotlib.pyplot as plt \nimport numpy as np \n  \n#set the independent and dependent variables \nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \ny = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) \n\n#calculate the mean\nx_mean = np.mean(x) \ny_mean = np.mean(y) \n  \n# Calculate the b1 and b0 \nnumerator = 0\ndenominator = 0\nfor i in range(len(x)): \n    numerator += (x[i] - x_mean)*(y[i] - y_mean) \n    denominator += (x[i] - x_mean)**2 \nb1 = numerator / denominator \nb0 = y_mean - (b1 * x_mean) \n\n# Print the coefficients\nprint(\"b1 =\", b1) \nprint(\"b0 =\", b0)  \n  \n# Plotting Values and Regression Line \nmax_x = np.max(x) + 100\nmin_x = np.min(x) - 100\n  \n# Calculating line values x and y \nx1 = np.linspace(min_x, max_x, 1000) \ny1 = b0 + b1 * x1 \n  \n# Ploting Line \nplt.plot(x1, y1, color='#00ff00', label='Linear Regression') \n  \n# Ploting Scatter Points \nplt.scatter(x, y, color='#ff0000', label='Scatter Plot') \n  \n# Add title\nplt.title(\"Linear Regression\") \n\n# Show the plot\nplt.show()"}
{"instruction": "Create an algorithm for text summarization using Python.", "input": "", "output": "# import libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom heapq import nlargest\n \n# Define text summarization function\ndef summarize(text):\n    # Tokenize text\n    words = word_tokenize(text)\n \n    # Calculate word frequencies\n    word_frequencies = FreqDist(words)\n    # Identify the most frequecny words\n    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)\n \n    # Identify sentences\n    sentences = sent_tokenize(text)\n \n    # Calculate sentence score based on most frequent words\n    sentence_scores = {} \n    for sentence in sentences:\n        score = 0\n        for word in word_tokenize(sentence.lower()):\n            if word in most_frequent_words:\n                score += 1\n        sentence_scores[sentence] = score\n \n    # Choose the highest score sentences from the list\n    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)\n \n    return ' '.join(summarized_text)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm for text summarization using Python.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom heapq import nlargest\n \n# Define text summarization function\ndef summarize(text):\n    # Tokenize text\n    words = word_tokenize(text)\n \n    # Calculate word frequencies\n    word_frequencies = FreqDist(words)\n    # Identify the most frequecny words\n    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)\n \n    # Identify sentences\n    sentences = sent_tokenize(text)\n \n    # Calculate sentence score based on most frequent words\n    sentence_scores = {} \n    for sentence in sentences:\n        score = 0\n        for word in word_tokenize(sentence.lower()):\n            if word in most_frequent_words:\n                score += 1\n        sentence_scores[sentence] = score\n \n    # Choose the highest score sentences from the list\n    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)\n \n    return ' '.join(summarized_text)"}
{"instruction": "Generate a class in Python to represent a deck of cards.", "input": "", "output": "import random\n\nclass Deck():\n CARDS = [\n 'Ace of Spades',\n 'Two of Spades',\n 'Three of Spades',\n 'Four of Spades',\n 'Five of Spades',\n 'Six of Spades',\n 'Seven of Spades',\n 'Eight of Spades',\n 'Nine of Spades',\n 'Ten of Spades',\n 'Jack of Spades',\n 'Queen of Spades',\n 'King of Spades',\n 'Ace of Hearts',\n 'Two of Hearts',\n 'Three of Hearts',\n 'Four of Hearts',\n 'Five of Hearts',\n 'Six of Hearts',\n 'Seven of Hearts',\n 'Eight of Hearts',\n 'Nine of Hearts',\n 'Ten of Hearts',\n 'Jack of Hearts',\n 'Queen of Hearts',\n 'King of Hearts',\n 'Ace of Clubs',\n 'Two of Clubs',\n 'Three of Clubs',\n 'Four of Clubs',\n 'Five of Clubs',\n 'Six of Clubs',\n 'Seven of Clubs',\n 'Eight of Clubs',\n 'Nine of Clubs',\n 'Ten of Clubs',\n 'Jack of Clubs',\n 'Queen of Clubs',\n 'King of Clubs',\n 'Ace of Diamonds',\n 'Two of Diamonds',\n 'Three of Diamonds',\n 'Four of Diamonds',\n 'Five of Diamonds',\n 'Six of Diamonds',\n 'Seven of Diamonds',\n 'Eight of Diamonds',\n 'Nine of Diamonds',\n 'Ten of Diamonds',\n 'Jack of Diamonds',\n 'Queen of Diamonds',\n 'King of Diamonds'\n]\n\n def __init__(self):\n self._cards = Deck.CARDS.copy()\n\n def draw_card(self):\n return random.choice(self._cards)\n\n def remove_card(self, card):\n self._cards.remove(card)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python to represent a deck of cards.\n\n### Input:\n\n\n### Output:\nimport random\n\nclass Deck():\n CARDS = [\n 'Ace of Spades',\n 'Two of Spades',\n 'Three of Spades',\n 'Four of Spades',\n 'Five of Spades',\n 'Six of Spades',\n 'Seven of Spades',\n 'Eight of Spades',\n 'Nine of Spades',\n 'Ten of Spades',\n 'Jack of Spades',\n 'Queen of Spades',\n 'King of Spades',\n 'Ace of Hearts',\n 'Two of Hearts',\n 'Three of Hearts',\n 'Four of Hearts',\n 'Five of Hearts',\n 'Six of Hearts',\n 'Seven of Hearts',\n 'Eight of Hearts',\n 'Nine of Hearts',\n 'Ten of Hearts',\n 'Jack of Hearts',\n 'Queen of Hearts',\n 'King of Hearts',\n 'Ace of Clubs',\n 'Two of Clubs',\n 'Three of Clubs',\n 'Four of Clubs',\n 'Five of Clubs',\n 'Six of Clubs',\n 'Seven of Clubs',\n 'Eight of Clubs',\n 'Nine of Clubs',\n 'Ten of Clubs',\n 'Jack of Clubs',\n 'Queen of Clubs',\n 'King of Clubs',\n 'Ace of Diamonds',\n 'Two of Diamonds',\n 'Three of Diamonds',\n 'Four of Diamonds',\n 'Five of Diamonds',\n 'Six of Diamonds',\n 'Seven of Diamonds',\n 'Eight of Diamonds',\n 'Nine of Diamonds',\n 'Ten of Diamonds',\n 'Jack of Diamonds',\n 'Queen of Diamonds',\n 'King of Diamonds'\n]\n\n def __init__(self):\n self._cards = Deck.CARDS.copy()\n\n def draw_card(self):\n return random.choice(self._cards)\n\n def remove_card(self, card):\n self._cards.remove(card)"}
{"instruction": "Design a Python program to simulate a simple calculator.", "input": "", "output": "#Function to add two numbers\ndef add(val1, val2):\n    return val1+val2\n\n#Function to subtract two numbers\ndef subtract(val1, val2):\n    return val1-val2\n\n#Function to multiply two numbers\ndef multiply(val1, val2):\n    return val1*val2\n\n#Function to divide two numbers\ndef divide(val1, val2):\n    return val1/val2\n\nwhile True:\n    print(\"Please provide the operator and operands\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n    print(\"5. Exit\")\n    \n    \n    # Take input from the user \n    choice = int(input(\"Enter your choice of operation: \")) \n  \n    # Check if choice is one of the four options\n    if choice in (1, 2, 3, 4): \n        num1 = float(input(\"Enter the first number: \")) \n        num2 = float(input(\"Enter the second number: \")) \n  \n        if choice == 1: \n            print(num1, \"+\", num2, \"=\", \n                    add(num1,num2)) \n  \n        elif choice == 2: \n            print(num1, \"-\", num2, \"=\", \n                    subtract(num1,num2)) \n  \n        elif choice == 3: \n            print(num1, \"*\", num2, \"=\", \n                    multiply(num1,num2)) \n  \n        elif choice == 4: \n            print(num1, \"/\", num2, \"=\", \n                    divide(num1,num2)) \n    \n    elif choice == 5:\n        print(\"Exiting Program!\")\n        break\n    else: \n        print(\"Please enter a valid option!\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to simulate a simple calculator.\n\n### Input:\n\n\n### Output:\n#Function to add two numbers\ndef add(val1, val2):\n    return val1+val2\n\n#Function to subtract two numbers\ndef subtract(val1, val2):\n    return val1-val2\n\n#Function to multiply two numbers\ndef multiply(val1, val2):\n    return val1*val2\n\n#Function to divide two numbers\ndef divide(val1, val2):\n    return val1/val2\n\nwhile True:\n    print(\"Please provide the operator and operands\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n    print(\"5. Exit\")\n    \n    \n    # Take input from the user \n    choice = int(input(\"Enter your choice of operation: \")) \n  \n    # Check if choice is one of the four options\n    if choice in (1, 2, 3, 4): \n        num1 = float(input(\"Enter the first number: \")) \n        num2 = float(input(\"Enter the second number: \")) \n  \n        if choice == 1: \n            print(num1, \"+\", num2, \"=\", \n                    add(num1,num2)) \n  \n        elif choice == 2: \n            print(num1, \"-\", num2, \"=\", \n                    subtract(num1,num2)) \n  \n        elif choice == 3: \n            print(num1, \"*\", num2, \"=\", \n                    multiply(num1,num2)) \n  \n        elif choice == 4: \n            print(num1, \"/\", num2, \"=\", \n                    divide(num1,num2)) \n    \n    elif choice == 5:\n        print(\"Exiting Program!\")\n        break\n    else: \n        print(\"Please enter a valid option!\")"}
{"instruction": "Create an algorithm to optimize a search query in Python.", "input": "", "output": "def optimize_search(query):\n    # Clean the query string\n    query = query.lower()\n    query = query.strip()\n    query = re.sub(r'[^\\w\\s]', '', query)\n     \n    # Tokenize the query\n    tokens = nltk.word_tokenize(query)\n     \n    # Stem the tokens\n    stemmer = nltk.stem.PorterStemmer()\n    stemmed_tokens = [stemmer.stem(t) for t in tokens]\n     \n    # Join the stemmed tokens together\n    processed_query = ' '.join(stemmed_tokens)\n     \n    return processed_query", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to optimize a search query in Python.\n\n### Input:\n\n\n### Output:\ndef optimize_search(query):\n    # Clean the query string\n    query = query.lower()\n    query = query.strip()\n    query = re.sub(r'[^\\w\\s]', '', query)\n     \n    # Tokenize the query\n    tokens = nltk.word_tokenize(query)\n     \n    # Stem the tokens\n    stemmer = nltk.stem.PorterStemmer()\n    stemmed_tokens = [stemmer.stem(t) for t in tokens]\n     \n    # Join the stemmed tokens together\n    processed_query = ' '.join(stemmed_tokens)\n     \n    return processed_query"}
{"instruction": "Create an object-oriented calculator program with Python.", "input": "", "output": "class Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        return a / b\n    \n\ncalc = Calculator()\n\n# Example operations\nnum1 = 10\nnum2 = 2\n\nadd_result = calc.add(num1, num2)\nsubtract_result = calc.subtract(num1, num2)\nmultiply_result = calc.multiply(num1, num2)\ndivide_result = calc.divide(num1, num2)\n\nprint(add_result, subtract_result, multiply_result, divide_result)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented calculator program with Python.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        return a / b\n    \n\ncalc = Calculator()\n\n# Example operations\nnum1 = 10\nnum2 = 2\n\nadd_result = calc.add(num1, num2)\nsubtract_result = calc.subtract(num1, num2)\nmultiply_result = calc.multiply(num1, num2)\ndivide_result = calc.divide(num1, num2)\n\nprint(add_result, subtract_result, multiply_result, divide_result)"}
{"instruction": "Create a neural network with two hidden layers in Python.", "input": "", "output": "import numpy as np #importing the libraries \nfrom sklearn.neural_network import MLPClassifier #importing the neural network classifier\n\n#defining the input values\nX = np.array([[0,0],[0,1],[1,0],[1,1]])\ny = np.array([[0],[1],[1],[0]])\n\n#Creating the model\nmodel = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers.\nmodel.fit(X,y)\n\n#Testing the model with a new input\ntest_data = np.array([[1,1]])\nprediction = model.predict(test_data) \nprint(\"The model predicts the output as:\",prediction[0])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network with two hidden layers in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np #importing the libraries \nfrom sklearn.neural_network import MLPClassifier #importing the neural network classifier\n\n#defining the input values\nX = np.array([[0,0],[0,1],[1,0],[1,1]])\ny = np.array([[0],[1],[1],[0]])\n\n#Creating the model\nmodel = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers.\nmodel.fit(X,y)\n\n#Testing the model with a new input\ntest_data = np.array([[1,1]])\nprediction = model.predict(test_data) \nprint(\"The model predicts the output as:\",prediction[0])"}
{"instruction": "Create a web crawler in Python to scrape data from Quora.", "input": "", "output": "# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\n \n# define the search url\nurl = 'https://www.quora.com/search'\n \n# create a payload for the query parameters\npayload = {'q': 'machine learning'}\n \n# get the content from the specified url\nr = requests.get(url, params=payload)\n \n# parse the content\nsoup = BeautifulSoup(r.content, 'html.parser')\n \n# collect data from all the elements with class 'question_link'\nresults = soup.find_all('a', class_='question_link')\n \n# print the results\nfor result in results:\n    print(result.text)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python to scrape data from Quora.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\n \n# define the search url\nurl = 'https://www.quora.com/search'\n \n# create a payload for the query parameters\npayload = {'q': 'machine learning'}\n \n# get the content from the specified url\nr = requests.get(url, params=payload)\n \n# parse the content\nsoup = BeautifulSoup(r.content, 'html.parser')\n \n# collect data from all the elements with class 'question_link'\nresults = soup.find_all('a', class_='question_link')\n \n# print the results\nfor result in results:\n    print(result.text)"}
{"instruction": "Develop an algorithm in Python for detecting spam emails.", "input": "", "output": "def detect_spam(email):\n  \"\"\"This function uses a combination of keyword matching, regex pattern matching \n  and machine learning algorithms to detect spam emails.\"\"\"\n  \n  # Keyword matching\n  spam_keywords = [\"unsubscribe\", \"offer\", \"discount\", \"special\"]\n  for keyword in spam_keywords:\n    if keyword in email:\n      return 1\n  \n  # Regex pattern matching\n  spam_pattern = r\"\\d{5}-\\d{5}-\\d{5}-\\d{5}\"\n  matches = re.search(spam_pattern, email)\n  if matches:\n    return 1\n  \n  # Machine learning\n  # Train a machine learning model and predict whether or not the given email is a spam\n  \n  return 0", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for detecting spam emails.\n\n### Input:\n\n\n### Output:\ndef detect_spam(email):\n  \"\"\"This function uses a combination of keyword matching, regex pattern matching \n  and machine learning algorithms to detect spam emails.\"\"\"\n  \n  # Keyword matching\n  spam_keywords = [\"unsubscribe\", \"offer\", \"discount\", \"special\"]\n  for keyword in spam_keywords:\n    if keyword in email:\n      return 1\n  \n  # Regex pattern matching\n  spam_pattern = r\"\\d{5}-\\d{5}-\\d{5}-\\d{5}\"\n  matches = re.search(spam_pattern, email)\n  if matches:\n    return 1\n  \n  # Machine learning\n  # Train a machine learning model and predict whether or not the given email is a spam\n  \n  return 0"}
{"instruction": "Construct a program to automate the task of sending email", "input": "", "output": "import smtplib\n \n# Sender email address and password\nsender_email = \"example@gmail.com\"\npassword = \"your_password\"\n \n# Receiver email address\nrec_email = \"example@gmail.com\"\n \n# Message to send\nmessage = \"This is a message from Python\"\n \n# Email subject\nsubject = \"Automated Email from Python\"\n \n# Email body\nbody = \"Subject: {}\\n\\n{}\".format(subject, message)\n \n# Initialize the server\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.starttls()\n \n# Login with sender email and password\nserver.login(sender_email, password)\n \n# Send the email\nserver.sendmail(sender_email, rec_email, body)\n \n# Quit the server\nserver.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to automate the task of sending email\n\n### Input:\n\n\n### Output:\nimport smtplib\n \n# Sender email address and password\nsender_email = \"example@gmail.com\"\npassword = \"your_password\"\n \n# Receiver email address\nrec_email = \"example@gmail.com\"\n \n# Message to send\nmessage = \"This is a message from Python\"\n \n# Email subject\nsubject = \"Automated Email from Python\"\n \n# Email body\nbody = \"Subject: {}\\n\\n{}\".format(subject, message)\n \n# Initialize the server\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.starttls()\n \n# Login with sender email and password\nserver.login(sender_email, password)\n \n# Send the email\nserver.sendmail(sender_email, rec_email, body)\n \n# Quit the server\nserver.quit()"}
{"instruction": "Create a Python script to optimize search engine queries.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_keywords_from_page(url):\n    headers = {\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'\n    }\n\n    response = requests.get(url, headers = headers)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    keywords = soup.find('meta', attrs={'name':'keywords'})\n    if keywords:\n        return keywords['content']\n    else:\n        return \"\"\n\n# Optimize search queries by finding keywords from a given website\ndef optimize_query(url):\n    keywords = get_keywords_from_page(url)\n    if keywords:\n        return keywords\n    else:\n        return url", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to optimize search engine queries.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_keywords_from_page(url):\n    headers = {\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'\n    }\n\n    response = requests.get(url, headers = headers)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    keywords = soup.find('meta', attrs={'name':'keywords'})\n    if keywords:\n        return keywords['content']\n    else:\n        return \"\"\n\n# Optimize search queries by finding keywords from a given website\ndef optimize_query(url):\n    keywords = get_keywords_from_page(url)\n    if keywords:\n        return keywords\n    else:\n        return url"}
{"instruction": "Code a Python class for evaluating a decision tree model.", "input": "", "output": "class DecisionTreeEvaluator():\n    \"\"\"\n    Decision Tree model evaluation implementation.\n    \"\"\"\n    def __init__(self):\n        self.model = model\n \n    def evaluate(self, X_test, y_test):\n        \"\"\"\n        Evaluates the given decision tree model on the given test data.\n \n        Parameters\n        ----------\n        X_test : array-like, shape = [n_samples, n_features]\n        Test samples.\n \n        y_test : array-like, shape = [n_samples]\n        True labels for X_test.\n \n        Returns\n        -------\n        accuracy : float\n        The accuracy of the decision tree model.\n        \"\"\"\n        y_pred = self.model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        return accuracy", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a Python class for evaluating a decision tree model.\n\n### Input:\n\n\n### Output:\nclass DecisionTreeEvaluator():\n    \"\"\"\n    Decision Tree model evaluation implementation.\n    \"\"\"\n    def __init__(self):\n        self.model = model\n \n    def evaluate(self, X_test, y_test):\n        \"\"\"\n        Evaluates the given decision tree model on the given test data.\n \n        Parameters\n        ----------\n        X_test : array-like, shape = [n_samples, n_features]\n        Test samples.\n \n        y_test : array-like, shape = [n_samples]\n        True labels for X_test.\n \n        Returns\n        -------\n        accuracy : float\n        The accuracy of the decision tree model.\n        \"\"\"\n        y_pred = self.model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        return accuracy"}
{"instruction": "Write a code in Python to automate filling out web forms.", "input": "", "output": "\"\"\"\nAutomating web form filling\n\"\"\"\n\nimport requests\n\ndef fill_form(url, data):\n    \"\"\"\n    Takes in a url and a data dictionary and fills out an online form\n    \"\"\"\n\n    # Make a POST request to the url with data\n    response = requests.post(url, data=data)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # Provide the url and data to be used\n    URL = 'http://www.example.com'\n    DATA = {\n        'name': 'John',\n        'email': 'john@example.com'\n    }\n\n    # Call the fill_form function\n    result = fill_form(URL, DATA)\n\n    if result:\n        print('Form filled successfully!')\n    else:\n        print('Form fill failed!')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to automate filling out web forms.\n\n### Input:\n\n\n### Output:\n\"\"\"\nAutomating web form filling\n\"\"\"\n\nimport requests\n\ndef fill_form(url, data):\n    \"\"\"\n    Takes in a url and a data dictionary and fills out an online form\n    \"\"\"\n\n    # Make a POST request to the url with data\n    response = requests.post(url, data=data)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # Provide the url and data to be used\n    URL = 'http://www.example.com'\n    DATA = {\n        'name': 'John',\n        'email': 'john@example.com'\n    }\n\n    # Call the fill_form function\n    result = fill_form(URL, DATA)\n\n    if result:\n        print('Form filled successfully!')\n    else:\n        print('Form fill failed!')"}
{"instruction": "Generate a class in Python that implements a linked list.", "input": "", "output": "class Node:\n    def __init__(self, data=None, next_node=None):\n        self.data = data\n        self.next_node = next_node\n\n    def get_data(self):\n        return self.data\n\n    def get_next(self):\n        return self.next_node\n\n    def set_next(self, new_next):\n        self.next_node = new_next\n\n\nclass SinglyLinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.set_next(self.head)\n        self.head = new_node\n\n    def get_size(self):\n        size = 0\n        current = self.head\n        while current:\n            size += 1\n            current = current.get_next()\n        return size\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.get_next()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python that implements a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data=None, next_node=None):\n        self.data = data\n        self.next_node = next_node\n\n    def get_data(self):\n        return self.data\n\n    def get_next(self):\n        return self.next_node\n\n    def set_next(self, new_next):\n        self.next_node = new_next\n\n\nclass SinglyLinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.set_next(self.head)\n        self.head = new_node\n\n    def get_size(self):\n        size = 0\n        current = self.head\n        while current:\n            size += 1\n            current = current.get_next()\n        return size\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.get_next()"}
{"instruction": "Design a program to simulate a vending machine in Python.", "input": "", "output": "def vending_machine():\n    # Variable to store the user's choice\n    choice = '' \n    # List of items available \n    products = {1 : \"Chips\", 2 : \"Chocolate\", 3 : \"Coke\", 4 : \"Sprite\"} \n    # Dictionary to store the price corresponding to each product \n    price = {1 : 40, 2 : 20, 3 : 30, 4 : 30} \n    while choice != \"quit\":\n        # Print the available products\n        print(\"Available products:\")\n        for product in products:\n            print(product, \":\", products[product], \"-\", price[product], \"Rupees\")\n        # Get the user's choice\n        choice = input(\"Enter your choice (1-4): \")\n        if choice.isdigit() == False:\n            print(\"Invalid input.\")\n        elif int(choice) > 0 and int(choice) < 5:\n            print(\"You have purchased\", products[int(choice)] + \".\")\n            print(\"Thank you for shopping with us.\")\n        elif choice == \"quit\":\n            break\n        else:\n            print(\"Invalid input.\")\n\n# Call the function\nvending_machine()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to simulate a vending machine in Python.\n\n### Input:\n\n\n### Output:\ndef vending_machine():\n    # Variable to store the user's choice\n    choice = '' \n    # List of items available \n    products = {1 : \"Chips\", 2 : \"Chocolate\", 3 : \"Coke\", 4 : \"Sprite\"} \n    # Dictionary to store the price corresponding to each product \n    price = {1 : 40, 2 : 20, 3 : 30, 4 : 30} \n    while choice != \"quit\":\n        # Print the available products\n        print(\"Available products:\")\n        for product in products:\n            print(product, \":\", products[product], \"-\", price[product], \"Rupees\")\n        # Get the user's choice\n        choice = input(\"Enter your choice (1-4): \")\n        if choice.isdigit() == False:\n            print(\"Invalid input.\")\n        elif int(choice) > 0 and int(choice) < 5:\n            print(\"You have purchased\", products[int(choice)] + \".\")\n            print(\"Thank you for shopping with us.\")\n        elif choice == \"quit\":\n            break\n        else:\n            print(\"Invalid input.\")\n\n# Call the function\nvending_machine()"}
{"instruction": "Design a Python program to simulate a simple ATM machine.", "input": "", "output": "# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to simulate a simple ATM machine.\n\n### Input:\n\n\n### Output:\n# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)"}
{"instruction": "Design an algorithm in Python for solving sudoku puzzles.", "input": "", "output": "import numpy as np\n\ndef solve_sudoku(board):\n    N = len(board)\n    CELLS = N**2\n    ROWS = [set(range(1,N+1)) for i in range(CELLS)]\n    COLS = [set(range(1,N+1)) for i in range(CELLS)]\n    BLOCKS = [set(range(1,N+1)) for i in range(CELLS)]\n             \n    # Convert board to binary\n    board_binary = np.array(board) \n    board_binary[board_binary!=0] = 1\n    # Calculate block numbers\n    block_nums = (board_binary.reshape(N,-1)+1).reshape(-1) - 1\n    # Generate sets for each cell\n    for i in range(CELLS):\n        if board[i]!=0:\n            num = board[i]\n            ROWS[i] = {num}\n            col = i // N\n            COLS[col].remove(num)\n            blk = block_nums[i]\n            BLOCKS[blk].remove(num)\n                              \n    # Start search\n    stack = [-1]\n    while stack:\n        i = stack.pop() + 1\n        # Fill cell with number between 1..N\n        while i< CELLS and board[i]!=0:\n            i += 1\n        # No valid number found\n        if i == CELLS:\n            continue\n        row, col, blk = i//N, i%N, block_nums[i]\n        available = ROWS[i] & COLS[col] & BLOCKS[blk]\n        for num in available:\n            # fill current cell\n            board[i] = num\n            # Remove the number from other cells in \n            # the same row, col and block\n            ROWS[i] -= {num}\n            COLS[col] -= {num}\n            BLOCKS[blk] -= {num}\n            stack.append(i)\n            break\n    return board", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for solving sudoku puzzles.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef solve_sudoku(board):\n    N = len(board)\n    CELLS = N**2\n    ROWS = [set(range(1,N+1)) for i in range(CELLS)]\n    COLS = [set(range(1,N+1)) for i in range(CELLS)]\n    BLOCKS = [set(range(1,N+1)) for i in range(CELLS)]\n             \n    # Convert board to binary\n    board_binary = np.array(board) \n    board_binary[board_binary!=0] = 1\n    # Calculate block numbers\n    block_nums = (board_binary.reshape(N,-1)+1).reshape(-1) - 1\n    # Generate sets for each cell\n    for i in range(CELLS):\n        if board[i]!=0:\n            num = board[i]\n            ROWS[i] = {num}\n            col = i // N\n            COLS[col].remove(num)\n            blk = block_nums[i]\n            BLOCKS[blk].remove(num)\n                              \n    # Start search\n    stack = [-1]\n    while stack:\n        i = stack.pop() + 1\n        # Fill cell with number between 1..N\n        while i< CELLS and board[i]!=0:\n            i += 1\n        # No valid number found\n        if i == CELLS:\n            continue\n        row, col, blk = i//N, i%N, block_nums[i]\n        available = ROWS[i] & COLS[col] & BLOCKS[blk]\n        for num in available:\n            # fill current cell\n            board[i] = num\n            # Remove the number from other cells in \n            # the same row, col and block\n            ROWS[i] -= {num}\n            COLS[col] -= {num}\n            BLOCKS[blk] -= {num}\n            stack.append(i)\n            break\n    return board"}
{"instruction": "Generate a Python function to calculate compound interest.", "input": "", "output": "def calculate_compound_interest(principal_amount, rate, time_period): \n    total_amount = principal_amount * (pow((1 + rate / 100), time_period)) \n    compound_interest = total_amount - principal_amount \n    return compound_interest \n  \n# Driver code \nprincipal_amount = 1000\nrate = 4.4\ntime_period = 2\n  \n# Calculating compound interest \ncompound_interest = calculate_compound_interest(principal_amount, rate, time_period) \n  \n# Printing the values \nprint(\"Compound interest is\", compound_interest)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to calculate compound interest.\n\n### Input:\n\n\n### Output:\ndef calculate_compound_interest(principal_amount, rate, time_period): \n    total_amount = principal_amount * (pow((1 + rate / 100), time_period)) \n    compound_interest = total_amount - principal_amount \n    return compound_interest \n  \n# Driver code \nprincipal_amount = 1000\nrate = 4.4\ntime_period = 2\n  \n# Calculating compound interest \ncompound_interest = calculate_compound_interest(principal_amount, rate, time_period) \n  \n# Printing the values \nprint(\"Compound interest is\", compound_interest)"}
{"instruction": "Create a fish shape using the given Python turtle library.", "input": "", "output": "import turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a fish shape using the given Python turtle library.\n\n### Input:\n\n\n### Output:\nimport turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish()"}
{"instruction": "Design a function in Python to generate a random password.", "input": "", "output": "\"\"\"\nDesign a function in Python to generate a random password\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password(length=16):\n    # list of possible characters for the password\n    characters = string.ascii_letters + string.punctuation + string.digits\n    \n    # generate a random password\n    password = ''.join(random.choice(characters) for i in range(length))\n    \n    # return the random password\n    return password\n\n# generate a random password\nrandom_password = generate_password()\n\n# print the random password\nprint(random_password)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to generate a random password.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a function in Python to generate a random password\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password(length=16):\n    # list of possible characters for the password\n    characters = string.ascii_letters + string.punctuation + string.digits\n    \n    # generate a random password\n    password = ''.join(random.choice(characters) for i in range(length))\n    \n    # return the random password\n    return password\n\n# generate a random password\nrandom_password = generate_password()\n\n# print the random password\nprint(random_password)"}
{"instruction": "Create a python program to detect if a word is an isogram.", "input": "", "output": "def is_isogram(string):\n    # empty strings are isograms\n    if len(string) == 0:\n        return True\n\n    # convert string to lowercase \n    string = string.lower()\n\n    # create a set to store seen letters \n    seen_letters = set()\n\n    for char in string:\n        # if char is not seen, add it to set \n        if char not in seen_letters:  \n            seen_letters.add(char) \n        \n        # if char is already seen, it is not an isogram  \n        else: \n            return False\n\n    # all letters are unique, it is an isogram\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to detect if a word is an isogram.\n\n### Input:\n\n\n### Output:\ndef is_isogram(string):\n    # empty strings are isograms\n    if len(string) == 0:\n        return True\n\n    # convert string to lowercase \n    string = string.lower()\n\n    # create a set to store seen letters \n    seen_letters = set()\n\n    for char in string:\n        # if char is not seen, add it to set \n        if char not in seen_letters:  \n            seen_letters.add(char) \n        \n        # if char is already seen, it is not an isogram  \n        else: \n            return False\n\n    # all letters are unique, it is an isogram\n    return True"}
{"instruction": "Design and implement a code to reverse a string in Python.", "input": "", "output": "\"\"\"Design and implement a code to reverse a string in Python\"\"\"\n\ndef reverse_string(string):\n    \"\"\" Function to reverse a given string\"\"\"\n    # Initialize the empty string to store the reversed string \n    reversed_string = \"\"\n\n    # Iterate through the characters of the string in reverse order\n    for i in range(len(string) - 1, -1, -1): \n        reversed_string += string[i]\n\n    # Return the reversed string\n    return reversed_string\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    reversed_string = reverse_string(string)\n    print(reversed_string)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a code to reverse a string in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"Design and implement a code to reverse a string in Python\"\"\"\n\ndef reverse_string(string):\n    \"\"\" Function to reverse a given string\"\"\"\n    # Initialize the empty string to store the reversed string \n    reversed_string = \"\"\n\n    # Iterate through the characters of the string in reverse order\n    for i in range(len(string) - 1, -1, -1): \n        reversed_string += string[i]\n\n    # Return the reversed string\n    return reversed_string\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    reversed_string = reverse_string(string)\n    print(reversed_string)"}
{"instruction": "Design a class in Python that represents a complex number.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, realpart, imagpart):\n        self.realpart = realpart\n        self.imagpart = imagpart\n\n    def __add__(self, other):\n        newRealPart = self.realpart + other.realpart\n        newImagPart = self.imagpart + other.imagpart\n        return ComplexNumber(newRealPart, newImagPart)\n\n    def __sub__(self, other):\n        newRealPart = self.realpart - other.realpart\n        newImagPart = self.imagpart - other.imagpart\n        return ComplexNumber(newRealPart, newImagPart)\n\n    def __str__(self):\n        return '{} + {}i'.format(self.realpart, self.imagpart)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that represents a complex number.\n\n### Input:\n\n\n### Output:\nclass ComplexNumber:\n    def __init__(self, realpart, imagpart):\n        self.realpart = realpart\n        self.imagpart = imagpart\n\n    def __add__(self, other):\n        newRealPart = self.realpart + other.realpart\n        newImagPart = self.imagpart + other.imagpart\n        return ComplexNumber(newRealPart, newImagPart)\n\n    def __sub__(self, other):\n        newRealPart = self.realpart - other.realpart\n        newImagPart = self.imagpart - other.imagpart\n        return ComplexNumber(newRealPart, newImagPart)\n\n    def __str__(self):\n        return '{} + {}i'.format(self.realpart, self.imagpart)"}
{"instruction": "Compile a list of popular Python libraries and their uses.", "input": "", "output": "1. Scikit-learn: Machine learning library for predictive analysis.\n2. Numpy: Library for scientific computing with large multi-dimensional arrays and matrices.\n3. Pandas: Library for data manipulation and analysis.\n4. Matplotlib: 2D plotting library.\n5. TensorFlow: Library for building machine learning applications.\n6. Django: Web framework for building web applications.\n7. Keras: Library for deep learning applications.\n8. NLTK: Natural language processing library.\n9. Scipy: Library for scientific computing with linear algebra, integration, optimization, and statistics methods.\n10. Flask: Micro web framework for building web applications.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile a list of popular Python libraries and their uses.\n\n### Input:\n\n\n### Output:\n1. Scikit-learn: Machine learning library for predictive analysis.\n2. Numpy: Library for scientific computing with large multi-dimensional arrays and matrices.\n3. Pandas: Library for data manipulation and analysis.\n4. Matplotlib: 2D plotting library.\n5. TensorFlow: Library for building machine learning applications.\n6. Django: Web framework for building web applications.\n7. Keras: Library for deep learning applications.\n8. NLTK: Natural language processing library.\n9. Scipy: Library for scientific computing with linear algebra, integration, optimization, and statistics methods.\n10. Flask: Micro web framework for building web applications."}
{"instruction": "Design Python code to construct a 2D classification model.", "input": "", "output": "# Import libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\nX = np.loadtxt('data.csv', delimiter=', ',skiprows=1, usecols=[0,1])\ny = np.loadtxt('data.csv', delimiter=', ', skiprows=1, usecols=[2], dtype=str)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5)\n\n# Create and train the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_pred, y_test)\nprint('Model accuracy:', accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign Python code to construct a 2D classification model.\n\n### Input:\n\n\n### Output:\n# Import libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\nX = np.loadtxt('data.csv', delimiter=', ',skiprows=1, usecols=[0,1])\ny = np.loadtxt('data.csv', delimiter=', ', skiprows=1, usecols=[2], dtype=str)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5)\n\n# Create and train the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_pred, y_test)\nprint('Model accuracy:', accuracy)"}
{"instruction": "Create a Python script to analyze the sentiment of a text.", "input": "", "output": "import re\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_analyzer(text):\n    # Tokenize the text\n    tokens = word_tokenize(text)\n\n    # Create stemmer object\n    stemmer = SnowballStemmer('english')\n\n    # Stem each token\n    stemmed_words = [stemmer.stem(word) for word in tokens]\n\n    # Remove punctuation\n    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]\n\n    # Remove stopwords\n    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]\n\n    # Create a SentimentIntensityAnalyzer object\n    sid = SentimentIntensityAnalyzer()\n\n    # Get the polarity score of the text\n    polarity_score = sid.polarity_scores(' '.join(meaningful_words))\n\n    return polarity_score", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to analyze the sentiment of a text.\n\n### Input:\n\n\n### Output:\nimport re\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_analyzer(text):\n    # Tokenize the text\n    tokens = word_tokenize(text)\n\n    # Create stemmer object\n    stemmer = SnowballStemmer('english')\n\n    # Stem each token\n    stemmed_words = [stemmer.stem(word) for word in tokens]\n\n    # Remove punctuation\n    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]\n\n    # Remove stopwords\n    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]\n\n    # Create a SentimentIntensityAnalyzer object\n    sid = SentimentIntensityAnalyzer()\n\n    # Get the polarity score of the text\n    polarity_score = sid.polarity_scores(' '.join(meaningful_words))\n\n    return polarity_score"}
{"instruction": "Create an email client GUI in Python using Tkinter library", "input": "", "output": "import tkinter as tk\n \n# create a main window\nwindow = tk.Tk()\nwindow.title(\"Email Client\")  \n    \n# add labels and entry fields\nlbl_from = tk.Label(window, text=\"From:\")\nlbl_from.grid(padx=10, pady=10, row=0, column=0, sticky=\"W\")\nent_from = tk.Entry(window,width=50)\nent_from.grid(padx=10, pady=10, row=0, column=1)\n \nlbl_to = tk.Label(window, text=\"To:\")\nlbl_to.grid(padx=10, pady=10, row=1, column=0, sticky=\"W\")\nent_to = tk.Entry(window,width=50)\nent_to.grid(padx=10, pady=10, row=1, column=1) \n \nlbl_subject = tk.Label(window, text=\"Subject:\")\nlbl_subject.grid(padx=10, pady=10, row=2, column=0, sticky=\"W\")\nent_subject = tk.Entry(window,width=50)\nent_subject.grid(padx=10, pady=10, row=2, column=1)\n \nlbl_body = tk.Label(window, text=\"Body:\")\nlbl_body.grid(padx=10, pady=10, row=3,column=0, sticky=\"W\")\ntxt_body = tk.Text(window, height=10, width=50)\ntxt_body.grid(padx=10, pady=10, row=3, column=1)\n \n# enter main loop\nwindow.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an email client GUI in Python using Tkinter library\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n \n# create a main window\nwindow = tk.Tk()\nwindow.title(\"Email Client\")  \n    \n# add labels and entry fields\nlbl_from = tk.Label(window, text=\"From:\")\nlbl_from.grid(padx=10, pady=10, row=0, column=0, sticky=\"W\")\nent_from = tk.Entry(window,width=50)\nent_from.grid(padx=10, pady=10, row=0, column=1)\n \nlbl_to = tk.Label(window, text=\"To:\")\nlbl_to.grid(padx=10, pady=10, row=1, column=0, sticky=\"W\")\nent_to = tk.Entry(window,width=50)\nent_to.grid(padx=10, pady=10, row=1, column=1) \n \nlbl_subject = tk.Label(window, text=\"Subject:\")\nlbl_subject.grid(padx=10, pady=10, row=2, column=0, sticky=\"W\")\nent_subject = tk.Entry(window,width=50)\nent_subject.grid(padx=10, pady=10, row=2, column=1)\n \nlbl_body = tk.Label(window, text=\"Body:\")\nlbl_body.grid(padx=10, pady=10, row=3,column=0, sticky=\"W\")\ntxt_body = tk.Text(window, height=10, width=50)\ntxt_body.grid(padx=10, pady=10, row=3, column=1)\n \n# enter main loop\nwindow.mainloop()"}
{"instruction": "In Python, create a server program listening to two ports.", "input": "", "output": "import socket\n\n# Create a TCP/IP socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to the port\nserver_1_address = ('localhost', 10000)\nserver_2_address = ('localhost', 20000)\ns.bind(server_1_address)\ns.bind(server_2_address)\n\n# Listen for incoming connections\ns.listen(1)\n\nwhile True:\n    # Wait for a connection\n    connection_1, client_address_1 = s.accept()\n    connection_2, client_address_2 = s.accept()\n\n    try:\n        print(\"Connection from:\", client_address_1, \"and\", client_address_2)\n\n        # Receive the data in small chunks and retransmit it\n        while True:\n            data_1 = connection_1.recv(1024, 0)\n            data_2 = connection_2.recv(1024, 0)\n            if data_1:\n                connection_1.sendall(data_1, 0)\n            if data_2:\n                connection_2.sendall(data_2, 0)\n            else:\n                break\n\n    finally:\n        # Clean up the connection\n        connection_1.close()\n        connection_2.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a server program listening to two ports.\n\n### Input:\n\n\n### Output:\nimport socket\n\n# Create a TCP/IP socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to the port\nserver_1_address = ('localhost', 10000)\nserver_2_address = ('localhost', 20000)\ns.bind(server_1_address)\ns.bind(server_2_address)\n\n# Listen for incoming connections\ns.listen(1)\n\nwhile True:\n    # Wait for a connection\n    connection_1, client_address_1 = s.accept()\n    connection_2, client_address_2 = s.accept()\n\n    try:\n        print(\"Connection from:\", client_address_1, \"and\", client_address_2)\n\n        # Receive the data in small chunks and retransmit it\n        while True:\n            data_1 = connection_1.recv(1024, 0)\n            data_2 = connection_2.recv(1024, 0)\n            if data_1:\n                connection_1.sendall(data_1, 0)\n            if data_2:\n                connection_2.sendall(data_2, 0)\n            else:\n                break\n\n    finally:\n        # Clean up the connection\n        connection_1.close()\n        connection_2.close()"}
{"instruction": "Create a GUI interface in Python to multiply two matrices.", "input": "", "output": "import tkinter \n\n# create the UI\nroot = tkinter.Tk() \nroot.title(\"Matrix Multiplication\") \n\n# define the input fields\nmatrix_1_entry = tkinter.Label(root, text=\"Matrix 1\")\nmatrix_1_entry.grid(row=0, column=0)\nmatrix_1_input = tkinter.Entry(root)\nmatrix_1_input.grid(row=0, column=1)\n\nmatrix_2_entry = tkinter.Label(root, text=\"Matrix 2\")\nmatrix_2_entry.grid(row=1, column=0)\nmatrix_2_input = tkinter.Entry(root)\nmatrix_2_input.grid(row=1, column=1)\n\n# set up the button for multiplication\nmultiply_button = tkinter.Button(root, text=\"Multiply\") \nmultiply_button.grid(row=2, column=0)\n\n# display the output\nresult_label = tkinter.Label(root, text=\"Result:\")\nresult_label.grid(row=3, column=0)\nresult_display = tkinter.Entry(root)\nresult_display.grid(row=3, column=1)\n\n# define the function for matrix multiplication\ndef multiply_matrices():\n    matrix_1 = eval(matrix_1_input.get())\n    matrix_2 = eval(matrix_2_input.get())\n    result = [[sum(a*b for a,b in zip(x_row,y_column)) for y_column in zip(*matrix_2)] for x_row in matrix_1] \n    result_display.delete(0, tkinter.END)\n    result_display.insert(0, str(result))\n\nmultiply_button.configure(command=multiply_matrices) \n\nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI interface in Python to multiply two matrices.\n\n### Input:\n\n\n### Output:\nimport tkinter \n\n# create the UI\nroot = tkinter.Tk() \nroot.title(\"Matrix Multiplication\") \n\n# define the input fields\nmatrix_1_entry = tkinter.Label(root, text=\"Matrix 1\")\nmatrix_1_entry.grid(row=0, column=0)\nmatrix_1_input = tkinter.Entry(root)\nmatrix_1_input.grid(row=0, column=1)\n\nmatrix_2_entry = tkinter.Label(root, text=\"Matrix 2\")\nmatrix_2_entry.grid(row=1, column=0)\nmatrix_2_input = tkinter.Entry(root)\nmatrix_2_input.grid(row=1, column=1)\n\n# set up the button for multiplication\nmultiply_button = tkinter.Button(root, text=\"Multiply\") \nmultiply_button.grid(row=2, column=0)\n\n# display the output\nresult_label = tkinter.Label(root, text=\"Result:\")\nresult_label.grid(row=3, column=0)\nresult_display = tkinter.Entry(root)\nresult_display.grid(row=3, column=1)\n\n# define the function for matrix multiplication\ndef multiply_matrices():\n    matrix_1 = eval(matrix_1_input.get())\n    matrix_2 = eval(matrix_2_input.get())\n    result = [[sum(a*b for a,b in zip(x_row,y_column)) for y_column in zip(*matrix_2)] for x_row in matrix_1] \n    result_display.delete(0, tkinter.END)\n    result_display.insert(0, str(result))\n\nmultiply_button.configure(command=multiply_matrices) \n\nroot.mainloop()"}
{"instruction": "Create a web-scraping program to extract data from twitter.", "input": "", "output": "\"\"\"\nCreate a web scraping program to extract data from twitter.\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef scrape_data():\n    url = 'https://twitter.com/search?q=%23python'\n    response = requests.get(url)\n    html = response.text\n    soup = BeautifulSoup(html, 'html.parser') \n    tweets = soup.find_all('p', {'class': 'TweetTextSize'})\n    for tweet in tweets:\n        print(tweet.text)\n        \nif __name__ == \"__main__\":\n    scrape_data()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-scraping program to extract data from twitter.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a web scraping program to extract data from twitter.\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef scrape_data():\n    url = 'https://twitter.com/search?q=%23python'\n    response = requests.get(url)\n    html = response.text\n    soup = BeautifulSoup(html, 'html.parser') \n    tweets = soup.find_all('p', {'class': 'TweetTextSize'})\n    for tweet in tweets:\n        print(tweet.text)\n        \nif __name__ == \"__main__\":\n    scrape_data()"}
{"instruction": "Create a class in Python to perform basic stack operations.", "input": "", "output": "class Stack: \n  \n    def __init__(self): \n        self.stack = [] \n  \n    def push(self, data): \n        self.stack.append(data) \n  \n    def pop(self): \n        if len(self.stack) < 1:\n            return None \n        else: \n            return self.stack.pop() \n  \n    def top(self): \n        if len(self.stack) < 1:\n            return None \n        else: \n            return self.stack[-1] \n  \n    def is_empty(self): \n        return len(self.stack) == 0", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to perform basic stack operations.\n\n### Input:\n\n\n### Output:\nclass Stack: \n  \n    def __init__(self): \n        self.stack = [] \n  \n    def push(self, data): \n        self.stack.append(data) \n  \n    def pop(self): \n        if len(self.stack) < 1:\n            return None \n        else: \n            return self.stack.pop() \n  \n    def top(self): \n        if len(self.stack) < 1:\n            return None \n        else: \n            return self.stack[-1] \n  \n    def is_empty(self): \n        return len(self.stack) == 0"}
{"instruction": "Generate a function in Python to find the length of a list.", "input": "", "output": "\"\"\"\nGenerate a function in Python to find the length of a list\n\"\"\"\n\ndef find_list_length(mylist):\n    # initialize a counter\n    length = 0\n    \n    # loop through the list\n    for item in mylist:\n        # increment the counter for each item\n        length += 1\n    \n    # return the length of the list\n    return length\n\n# A sample list\nmy_list = [1, 2, 3, 4, 5]\n\n# Find the length of the list\nlist_length = find_list_length(my_list)\n\n# Print the list length\nprint(list_length) # 5", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to find the length of a list.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a function in Python to find the length of a list\n\"\"\"\n\ndef find_list_length(mylist):\n    # initialize a counter\n    length = 0\n    \n    # loop through the list\n    for item in mylist:\n        # increment the counter for each item\n        length += 1\n    \n    # return the length of the list\n    return length\n\n# A sample list\nmy_list = [1, 2, 3, 4, 5]\n\n# Find the length of the list\nlist_length = find_list_length(my_list)\n\n# Print the list length\nprint(list_length) # 5"}
{"instruction": "Develop a code that implements linear regression in Python.", "input": "", "output": "import numpy as np\n\n# define the data\n# X = [1, 2, 3, 4, 5]\n# Y = [2, 4, 5, 4, 5]\nX = np.array([1, 2, 3, 4, 5])\nY = np.array([2, 4, 5, 4, 5])\n\n# calculate the mean of x and y\nxmean = np.mean(X)\nymean = np.mean(Y)\n\n# calculate the equations\nnum = 0\nden = 0\n\nfor i in range(len(X)):\n    num += (X[i] - xmean)*(Y[i] - ymean)\n    den += (X[i] - xmean)**2\n\n# calculate m and c \nm = num/den\nc = ymean - m*xmean\n\n# display the line equation \nprint(\"Regression line equation:\")\nprint(\"y = {}x + {}\".format(m, c))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code that implements linear regression in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# define the data\n# X = [1, 2, 3, 4, 5]\n# Y = [2, 4, 5, 4, 5]\nX = np.array([1, 2, 3, 4, 5])\nY = np.array([2, 4, 5, 4, 5])\n\n# calculate the mean of x and y\nxmean = np.mean(X)\nymean = np.mean(Y)\n\n# calculate the equations\nnum = 0\nden = 0\n\nfor i in range(len(X)):\n    num += (X[i] - xmean)*(Y[i] - ymean)\n    den += (X[i] - xmean)**2\n\n# calculate m and c \nm = num/den\nc = ymean - m*xmean\n\n# display the line equation \nprint(\"Regression line equation:\")\nprint(\"y = {}x + {}\".format(m, c))"}
{"instruction": "Write a Python program to simulate a random neuron network.", "input": "", "output": "import random\n\n# Neuron class\nclass Neuron:\n    # Initialize inputs and weights\n    def __init__(self, numInputs):\n        self.weights = []\n        for i in range(numInputs):\n            self.weights.append(random.uniform(-1, 1))\n\n    # Process inputs and produce output\n    def process(self, inputs):\n        # Multiply inputs by weights\n        output = 0\n        for i in range(len(self.weights)):\n            output += self.weights[i] * inputs[i]\n\n        # Use sigmoid function to normalize result\n        return 1 / (1 + math.exp(-output))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a random neuron network.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Neuron class\nclass Neuron:\n    # Initialize inputs and weights\n    def __init__(self, numInputs):\n        self.weights = []\n        for i in range(numInputs):\n            self.weights.append(random.uniform(-1, 1))\n\n    # Process inputs and produce output\n    def process(self, inputs):\n        # Multiply inputs by weights\n        output = 0\n        for i in range(len(self.weights)):\n            output += self.weights[i] * inputs[i]\n\n        # Use sigmoid function to normalize result\n        return 1 / (1 + math.exp(-output))"}
{"instruction": "Write an algorithm to detect a cycle linked list in Python.", "input": "", "output": "def detect_cycle(head):\n    \"\"\"Detects whether a linked list contains a cycle.\n\n    Args:\n        head (ListNode): The head node of the linked list.\n\n    Returns:\n        bool: True if there is a cycle, and False if there isn't.\n    \"\"\"\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n        # move slow and fast by one step\n        slow = slow.next\n        fast = fast.next.next\n        # fast will catch up slow if a cycle exists\n        if slow == fast:\n            return True\n    # fast has reached the end and no cycle\n    return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to detect a cycle linked list in Python.\n\n### Input:\n\n\n### Output:\ndef detect_cycle(head):\n    \"\"\"Detects whether a linked list contains a cycle.\n\n    Args:\n        head (ListNode): The head node of the linked list.\n\n    Returns:\n        bool: True if there is a cycle, and False if there isn't.\n    \"\"\"\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n        # move slow and fast by one step\n        slow = slow.next\n        fast = fast.next.next\n        # fast will catch up slow if a cycle exists\n        if slow == fast:\n            return True\n    # fast has reached the end and no cycle\n    return False"}
{"instruction": "Develop a Python program to detect a loop in a linked list.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n    slow_ptr = head\n    fast_ptr = head\n\n    #check if the linked list is empty\n    if head is None:\n        return False\n\n    #iterate over the list\n    while fast_ptr is not None and fast_ptr.next is not None:\n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n       \n        #if the slow and fast pointer are pointing to the same node, then there is a loop\n        if slow_ptr == fast_ptr:\n            return True\n    \n    return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to detect a loop in a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n    slow_ptr = head\n    fast_ptr = head\n\n    #check if the linked list is empty\n    if head is None:\n        return False\n\n    #iterate over the list\n    while fast_ptr is not None and fast_ptr.next is not None:\n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n       \n        #if the slow and fast pointer are pointing to the same node, then there is a loop\n        if slow_ptr == fast_ptr:\n            return True\n    \n    return False"}
{"instruction": "Create a web server using Python's built-in HTTPD framework", "input": "", "output": "\"\"\"\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass MyServer(HTTPServer):\n    def __init__(self, server_address, handler_class):\n        super().__init__(server_address, handler_class)\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response_only(200)\n        self.end_headers()\n        self.wfile.write(\"Hello, world!\".encode(\"utf-8\"))\n\nif __name__==\"__main__\":\n    HOST, PORT = \"localhost\", 8002\n\n    server = MyServer((HOST, PORT), MyHandler)\n    print(\"Start server at http://{}:{}\".format(HOST, PORT))\n    server.serve_forever()\n\"\"\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web server using Python's built-in HTTPD framework\n\n### Input:\n\n\n### Output:\n\"\"\"\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass MyServer(HTTPServer):\n    def __init__(self, server_address, handler_class):\n        super().__init__(server_address, handler_class)\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response_only(200)\n        self.end_headers()\n        self.wfile.write(\"Hello, world!\".encode(\"utf-8\"))\n\nif __name__==\"__main__\":\n    HOST, PORT = \"localhost\", 8002\n\n    server = MyServer((HOST, PORT), MyHandler)\n    print(\"Start server at http://{}:{}\".format(HOST, PORT))\n    server.serve_forever()\n\"\"\""}
{"instruction": "Explain the concept of recursion with an example in Python.", "input": "", "output": "Recursion is a programming concept which involves a function invoking itself. Instead of using loops, recursion makes use of a function calling itself with a different input value each time. An example of recursive function in Python is the factorial function, defined as follows:\n\ndef factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)\n\nThe function factorial(x) takes a single parameter x and returns x multiplied by the factorial of x-1. This recursive process will continue until it reaches the base case, which is x==1, where the function returns the value 1.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the concept of recursion with an example in Python.\n\n### Input:\n\n\n### Output:\nRecursion is a programming concept which involves a function invoking itself. Instead of using loops, recursion makes use of a function calling itself with a different input value each time. An example of recursive function in Python is the factorial function, defined as follows:\n\ndef factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)\n\nThe function factorial(x) takes a single parameter x and returns x multiplied by the factorial of x-1. This recursive process will continue until it reaches the base case, which is x==1, where the function returns the value 1."}
{"instruction": "Create a class in Python to implement a doubly-linked list.", "input": "", "output": "class DoublyLinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None \n        self.next = None\n \nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n \n    def append(self, data):\n        if self.head is None:\n            new_node = DoublyLinkedListNode(data)\n            new_node.prev = None\n            self.head = new_node\n        else:\n            new_node = DoublyLinkedListNode(data)\n            cur = self.head\n            while cur.next:\n                cur = cur.next\n            cur.next = new_node\n            new_node.prev = cur \n            new_node.next = None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to implement a doubly-linked list.\n\n### Input:\n\n\n### Output:\nclass DoublyLinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None \n        self.next = None\n \nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n \n    def append(self, data):\n        if self.head is None:\n            new_node = DoublyLinkedListNode(data)\n            new_node.prev = None\n            self.head = new_node\n        else:\n            new_node = DoublyLinkedListNode(data)\n            cur = self.head\n            while cur.next:\n                cur = cur.next\n            cur.next = new_node\n            new_node.prev = cur \n            new_node.next = None"}
{"instruction": "Design a Python class for creating a student record system.", "input": "", "output": "class StudentRecord:\n    def __init__(self, student_id, name, age, course):\n        self.student_id = student_id\n        self.name = name\n        self.age = age\n        self.course = course\n \n    def get_student_records(self):\n        return {\n            'student_id': self.student_id,\n            'name': self.name,\n            'age': self.age,\n            'course': self.course\n        }\n \n    def set_student_records(self, updates):\n        self.student_id = updates.get('student_id', self.student_id)\n        self.name = updates.get('name', self.name)\n        self.age = updates.get('age', self.age)\n        self.course = updates.get('course', self.course)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for creating a student record system.\n\n### Input:\n\n\n### Output:\nclass StudentRecord:\n    def __init__(self, student_id, name, age, course):\n        self.student_id = student_id\n        self.name = name\n        self.age = age\n        self.course = course\n \n    def get_student_records(self):\n        return {\n            'student_id': self.student_id,\n            'name': self.name,\n            'age': self.age,\n            'course': self.course\n        }\n \n    def set_student_records(self, updates):\n        self.student_id = updates.get('student_id', self.student_id)\n        self.name = updates.get('name', self.name)\n        self.age = updates.get('age', self.age)\n        self.course = updates.get('course', self.course)"}
{"instruction": "Design a class in Python to implement a doubly-linked list.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None\n\nclass DLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add(self, data):\n        node = Node(data)\n        if self.head is None:\n            self.head = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n        self.tail = node\n\n    def delete(self, node):\n        if node.prev is not None:\n            node.prev.next = node.next\n        else:\n            self.head = node.next\n        if node.next is not None:\n            node.next.prev = node.prev\n        else:\n            self.tail = node.prev", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to implement a doubly-linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None\n\nclass DLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add(self, data):\n        node = Node(data)\n        if self.head is None:\n            self.head = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n        self.tail = node\n\n    def delete(self, node):\n        if node.prev is not None:\n            node.prev.next = node.next\n        else:\n            self.head = node.next\n        if node.next is not None:\n            node.next.prev = node.prev\n        else:\n            self.tail = node.prev"}
{"instruction": "Design a Python script to merge two sorted arrays into one.", "input": "", "output": "def merge_arrays(arr1, arr2):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # initialize empty result list and pointers to traverse the both array\n    arr_merged, i, j = [], 0, 0\n    \n    # traverse both array and compare the element\n    # append the lesser one to result\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            arr_merged.append(arr1[i])\n            i += 1\n        else:\n            arr_merged.append(arr2[j])\n            j += 1\n    \n    # append remaining elements(if any) of faster completed array to result\n    while i < len1:\n        arr_merged.append(arr1[i])\n        i += 1\n    while j < len2:\n        arr_merged.append(arr2[j])\n        j += 1\n    return arr_merged", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to merge two sorted arrays into one.\n\n### Input:\n\n\n### Output:\ndef merge_arrays(arr1, arr2):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # initialize empty result list and pointers to traverse the both array\n    arr_merged, i, j = [], 0, 0\n    \n    # traverse both array and compare the element\n    # append the lesser one to result\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            arr_merged.append(arr1[i])\n            i += 1\n        else:\n            arr_merged.append(arr2[j])\n            j += 1\n    \n    # append remaining elements(if any) of faster completed array to result\n    while i < len1:\n        arr_merged.append(arr1[i])\n        i += 1\n    while j < len2:\n        arr_merged.append(arr2[j])\n        j += 1\n    return arr_merged"}
{"instruction": "Implement a starter K-means clustering algorithm in Python.", "input": "", "output": "import numpy as np\n\ndef kmeans(X, k, tol = 0.001, max_iter = 300):\n    m = X.shape[0] # number of training examples\n    n = X.shape[1] # number of features\n\n    ## initialize the centroids\n    centroids = np.zeros((k, n))\n\n    ## randomly select k data points as centroids\n    for i in range(k):\n        centroids[i] = X[np.random.choice(m),:]\n\n    ## initialize the cluster index\n    cluster_index = np.zeros(m)\n    pre_cluster_index = np.zeros(m)\n\n    for it in range(max_iter):\n\n        ## calculate the distance with each centroids \n        for i in range(m):\n            min_distance = float('inf')\n            for j in range(k):\n                d = np.sum((X[i]-centroids[j])**2)\n                if d < min_distance:\n                    min_distance = d\n                    cluster_index[i] = j\n\n        ## check converging or not\n        if np.array_equal(pre_cluster_index, cluster_index):\n            break\n        pre_cluster_index = cluster_index\n\n        ## move the centroid to the average of points in the cluster\n        for i in range(k):\n            points_in_cluster =X[cluster_index == i]\n            centroids[i] = np.mean(points_in_cluster, axis=0)\n\n    return centroids, cluster_index", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a starter K-means clustering algorithm in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef kmeans(X, k, tol = 0.001, max_iter = 300):\n    m = X.shape[0] # number of training examples\n    n = X.shape[1] # number of features\n\n    ## initialize the centroids\n    centroids = np.zeros((k, n))\n\n    ## randomly select k data points as centroids\n    for i in range(k):\n        centroids[i] = X[np.random.choice(m),:]\n\n    ## initialize the cluster index\n    cluster_index = np.zeros(m)\n    pre_cluster_index = np.zeros(m)\n\n    for it in range(max_iter):\n\n        ## calculate the distance with each centroids \n        for i in range(m):\n            min_distance = float('inf')\n            for j in range(k):\n                d = np.sum((X[i]-centroids[j])**2)\n                if d < min_distance:\n                    min_distance = d\n                    cluster_index[i] = j\n\n        ## check converging or not\n        if np.array_equal(pre_cluster_index, cluster_index):\n            break\n        pre_cluster_index = cluster_index\n\n        ## move the centroid to the average of points in the cluster\n        for i in range(k):\n            points_in_cluster =X[cluster_index == i]\n            centroids[i] = np.mean(points_in_cluster, axis=0)\n\n    return centroids, cluster_index"}
{"instruction": "Develop a chatbot with Python to answer customer inquiries.", "input": "", "output": "import re\nimport random\n\nclass Chatbot:\n    # constructor\n    def __init__(self):\n        self.responses = {\n            # greetings\n            \"hi\": [\"Hello!\", \"Hi!\", \"Hey!\", \"Hi there!\"],\n            \"hello\": [\"Howdy!\", \"Hey!\", \"Hey there!\"],\n            # farewells\n            \"bye\": [\"Goodbye!\", \"Bye!\", \"See you later!\"],\n            \"goodbye\": [\"Bye!\", \"Farewell!\", \"See you later!\"],\n            # general\n            \"thanks\": [\"You're welcome!\", \"It was my pleasure!\", \"No problem!\"]\n        }\n    \n    # tokenizes the input\n    def tokenize_input(self, input_text):\n        return re.split(\" \", input_text.lower())\n    \n    # checks if a given word exists in the responses\n    def is_valid_input(self, word):\n        return word in self.responses\n    \n    # main rule-based chatbot logic\n    def chatbot_response(self, input_text):\n        tokenized_input = self.tokenize_input(input_text)\n        \n        if any([self.is_valid_input(word) for word in tokenized_input]):\n            # select a random valid response\n            random_index = random.randint(0, len(self.responses[tokenized_input[0]]) - 1)\n            return self.responses[tokenized_input[0]][random_index]\n        else:\n            return \"I'm sorry, I don't understand.\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a chatbot with Python to answer customer inquiries.\n\n### Input:\n\n\n### Output:\nimport re\nimport random\n\nclass Chatbot:\n    # constructor\n    def __init__(self):\n        self.responses = {\n            # greetings\n            \"hi\": [\"Hello!\", \"Hi!\", \"Hey!\", \"Hi there!\"],\n            \"hello\": [\"Howdy!\", \"Hey!\", \"Hey there!\"],\n            # farewells\n            \"bye\": [\"Goodbye!\", \"Bye!\", \"See you later!\"],\n            \"goodbye\": [\"Bye!\", \"Farewell!\", \"See you later!\"],\n            # general\n            \"thanks\": [\"You're welcome!\", \"It was my pleasure!\", \"No problem!\"]\n        }\n    \n    # tokenizes the input\n    def tokenize_input(self, input_text):\n        return re.split(\" \", input_text.lower())\n    \n    # checks if a given word exists in the responses\n    def is_valid_input(self, word):\n        return word in self.responses\n    \n    # main rule-based chatbot logic\n    def chatbot_response(self, input_text):\n        tokenized_input = self.tokenize_input(input_text)\n        \n        if any([self.is_valid_input(word) for word in tokenized_input]):\n            # select a random valid response\n            random_index = random.randint(0, len(self.responses[tokenized_input[0]]) - 1)\n            return self.responses[tokenized_input[0]][random_index]\n        else:\n            return \"I'm sorry, I don't understand.\""}
{"instruction": "Develop an AI solution for object recognition using Python.", "input": "", "output": "import cv2\nimport numpy as np\nimport tensorflow as tf\n\n# Load the COCO class labels .txt file\nlabels_file_path = tf.keras.utils.get_file('label.txt', 'https://raw.githubusercontent.com/qw3081020/models/master/label.txt')\nwith open(labels_file_path, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# Initialize the recognition model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(len(labels), activation='softmax'))\n\n# Load model weights\nmodel.load_weights('model.h5')\n\n# Load the input image\nimage = cv2.imread('input_image.jpg')\nimage = cv2.resize(image, (300, 300))\n\n# Use the model to predict the labels\nlabels_predicted = model.predict(np.expand_dims(image, axis=0))[0]\n\n# Sort the labels by confidence\nlabels_sorted_by_confidence = [\n    label for label, confidence in \n    sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True)\n]\n\n# Print the predicted labels\nprint(labels_sorted_by_confidence)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI solution for object recognition using Python.\n\n### Input:\n\n\n### Output:\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n\n# Load the COCO class labels .txt file\nlabels_file_path = tf.keras.utils.get_file('label.txt', 'https://raw.githubusercontent.com/qw3081020/models/master/label.txt')\nwith open(labels_file_path, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# Initialize the recognition model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(len(labels), activation='softmax'))\n\n# Load model weights\nmodel.load_weights('model.h5')\n\n# Load the input image\nimage = cv2.imread('input_image.jpg')\nimage = cv2.resize(image, (300, 300))\n\n# Use the model to predict the labels\nlabels_predicted = model.predict(np.expand_dims(image, axis=0))[0]\n\n# Sort the labels by confidence\nlabels_sorted_by_confidence = [\n    label for label, confidence in \n    sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True)\n]\n\n# Print the predicted labels\nprint(labels_sorted_by_confidence)"}
{"instruction": "Design a Python class for encoding an arbitrary binary tree.", "input": "", "output": "class TreeNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass TreeEncoder:\n    def encode(self, root):\n        if root is None: \n            return \"None\"\n        else: \n            left_tree = self.encode(root.left)\n            right_tree = self.encode(root.right)\n            return str(root.value) + \"(\" + left_tree + \", \" + right_tree + \")\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for encoding an arbitrary binary tree.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass TreeEncoder:\n    def encode(self, root):\n        if root is None: \n            return \"None\"\n        else: \n            left_tree = self.encode(root.left)\n            right_tree = self.encode(root.right)\n            return str(root.value) + \"(\" + left_tree + \", \" + right_tree + \")\""}
{"instruction": "Design a Python program to optimize the operation of a robot", "input": "", "output": "\"\"\"\nDesign a Python program to optimize the operation of a robot\n\nThis program will take a function that maps the robot's movement from one cell to another in an environment, as well as a data structure that represents the cost associated with each cell as its input. The program will return an optimal path for the robot to take from a start cell to an end cell while minimizing its cost.\n\n\"\"\"\n\ndef optimize_robot(map_func, cost_map):\n    pass", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to optimize the operation of a robot\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python program to optimize the operation of a robot\n\nThis program will take a function that maps the robot's movement from one cell to another in an environment, as well as a data structure that represents the cost associated with each cell as its input. The program will return an optimal path for the robot to take from a start cell to an end cell while minimizing its cost.\n\n\"\"\"\n\ndef optimize_robot(map_func, cost_map):\n    pass"}
{"instruction": "Develop a Python program to generate a valid ISBN-13 number.", "input": "", "output": "def get_ISBN():\n    #Make a list of random integers\n    digits = [random.randint(0, 9) for _ in range(12)]\n    #Calculate the checksum \n    sum_ = 0\n    for index, digit in enumerate(digits):\n        weight = 1 if (index % 2 == 0) else 3\n        sum_ += digit * weight\n    #Calculate the checksum digit\n    checksum = 10 - (sum_ % 10)\n    # Append the checksum digit to the ISBN\n    isbn = ''.join(map(str, digits)) + str(checksum)\n    return isbn", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate a valid ISBN-13 number.\n\n### Input:\n\n\n### Output:\ndef get_ISBN():\n    #Make a list of random integers\n    digits = [random.randint(0, 9) for _ in range(12)]\n    #Calculate the checksum \n    sum_ = 0\n    for index, digit in enumerate(digits):\n        weight = 1 if (index % 2 == 0) else 3\n        sum_ += digit * weight\n    #Calculate the checksum digit\n    checksum = 10 - (sum_ % 10)\n    # Append the checksum digit to the ISBN\n    isbn = ''.join(map(str, digits)) + str(checksum)\n    return isbn"}
{"instruction": "Develop a program in Python to operate with complex numbers.", "input": "", "output": "import cmath\n\n# define two operations to add and subtract complex numbers\ndef add_complex(num1, num2): \n    return num1+num2\n\ndef sub_complex(num1,num2): \n    return num1-num2\n\n# add two complex numbers \nnum1 = complex(5, 7) \nnum2 = complex(3, 4) \nprint(\"Addition of two complex numbers : \", \nadd_complex(num1, num2))\n\n# subtract two complex numbers\nnum1 = complex(5, 7) \nnum2 = complex(3, 4) \nprint(\"Subtraction of two complex numbers : \", \nsub_complex(num1, num2))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to operate with complex numbers.\n\n### Input:\n\n\n### Output:\nimport cmath\n\n# define two operations to add and subtract complex numbers\ndef add_complex(num1, num2): \n    return num1+num2\n\ndef sub_complex(num1,num2): \n    return num1-num2\n\n# add two complex numbers \nnum1 = complex(5, 7) \nnum2 = complex(3, 4) \nprint(\"Addition of two complex numbers : \", \nadd_complex(num1, num2))\n\n# subtract two complex numbers\nnum1 = complex(5, 7) \nnum2 = complex(3, 4) \nprint(\"Subtraction of two complex numbers : \", \nsub_complex(num1, num2))"}
{"instruction": "Write a Python program to implement a stack using two queues", "input": "", "output": "class Stack: \n    def __init__(self): \n        self.queue1 = [] \n        self.queue2 = []\n   \n    def push(self,data): \n        self.queue1.append(data) \n   \n   \n    def pop(self): \n        if len(self.queue1) == 0: \n            return None\n        while len(self.queue1) > 1: \n            temp = self.queue1.pop(0) \n            self.queue2.append(temp) \n  \n        elem = self.queue1.pop(0) \n        self.queue1, self.queue2 = self.queue2, self.queue1 \n        return elem", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement a stack using two queues\n\n### Input:\n\n\n### Output:\nclass Stack: \n    def __init__(self): \n        self.queue1 = [] \n        self.queue2 = []\n   \n    def push(self,data): \n        self.queue1.append(data) \n   \n   \n    def pop(self): \n        if len(self.queue1) == 0: \n            return None\n        while len(self.queue1) > 1: \n            temp = self.queue1.pop(0) \n            self.queue2.append(temp) \n  \n        elem = self.queue1.pop(0) \n        self.queue1, self.queue2 = self.queue2, self.queue1 \n        return elem"}
{"instruction": "Write a Python class to detect and block malicious requests.", "input": "", "output": "class RequestChecker():\n    def __init__(self):\n        pass\n    \n    def check_request(self, request):\n        # Your code to check the request\n        is_malicious = False # If a malicious request is found, set it to True\n        \n        if is_malicious:\n            print('Malicious request detected!')\n        else:\n            print('Request is clean.')\n            \n        return is_malicious\n\nrequest_checker = RequestChecker()\nrequest_checker.check_request(request)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to detect and block malicious requests.\n\n### Input:\n\n\n### Output:\nclass RequestChecker():\n    def __init__(self):\n        pass\n    \n    def check_request(self, request):\n        # Your code to check the request\n        is_malicious = False # If a malicious request is found, set it to True\n        \n        if is_malicious:\n            print('Malicious request detected!')\n        else:\n            print('Request is clean.')\n            \n        return is_malicious\n\nrequest_checker = RequestChecker()\nrequest_checker.check_request(request)"}
{"instruction": "What are the differences between lists and tuples in Python?", "input": "", "output": "Lists and tuples are both data structures in Python. The main difference between them is that a list is mutable (can be changed) while a tuple is immutable (cannot be changed). Tuples use parentheses and lists use square brackets. Tuples can contain any type of data, including other tuples, and can be indexed and sliced. Lists, on the other hand, cannot contain mutable objects, such as other lists, and cannot be indexed or sliced because they are mutable. Tuples also tend to be faster than lists.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the differences between lists and tuples in Python?\n\n### Input:\n\n\n### Output:\nLists and tuples are both data structures in Python. The main difference between them is that a list is mutable (can be changed) while a tuple is immutable (cannot be changed). Tuples use parentheses and lists use square brackets. Tuples can contain any type of data, including other tuples, and can be indexed and sliced. Lists, on the other hand, cannot contain mutable objects, such as other lists, and cannot be indexed or sliced because they are mutable. Tuples also tend to be faster than lists."}
{"instruction": "Suggest an algorithm to generate a string of random numbers.", "input": "", "output": "A simple algorithm to generate a string of random numbers is to use the Python standard library's random module to generate n number of random numbers in the range [0, 9]. The generated random numbers can then be appended to a string to form the desired string of random numbers.\n\ndef generateRandomNumberString(length):\n    # Generate a random string of length N\n    import random\n    string = ''\n    for i in range(0,length):\n        x = random.randint(0,9)\n        string += str(x)\n    return string", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an algorithm to generate a string of random numbers.\n\n### Input:\n\n\n### Output:\nA simple algorithm to generate a string of random numbers is to use the Python standard library's random module to generate n number of random numbers in the range [0, 9]. The generated random numbers can then be appended to a string to form the desired string of random numbers.\n\ndef generateRandomNumberString(length):\n    # Generate a random string of length N\n    import random\n    string = ''\n    for i in range(0,length):\n        x = random.randint(0,9)\n        string += str(x)\n    return string"}
{"instruction": "Write a Python code to filter block sites in a proxy server.", "input": "", "output": "def block_sites(proxy_url):\n    # Create a request instance\n    req = urllib.request.Request(proxy_url)\n    # Download page data\n    with urllib.request.urlopen(req) as response:\n       page_data = response.read()\n    # Parse page data\n    page_soup = BeautifulSoup(page_data, \"html.parser\")\n    # Extract block-list items\n    block_list = page_soup.find_all('ul', {'class': 'block-list'})\n    # Filter out sites on the block list\n    filtered_sites = [site.text.strip() for site in block_list]\n    return filtered_sites", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to filter block sites in a proxy server.\n\n### Input:\n\n\n### Output:\ndef block_sites(proxy_url):\n    # Create a request instance\n    req = urllib.request.Request(proxy_url)\n    # Download page data\n    with urllib.request.urlopen(req) as response:\n       page_data = response.read()\n    # Parse page data\n    page_soup = BeautifulSoup(page_data, \"html.parser\")\n    # Extract block-list items\n    block_list = page_soup.find_all('ul', {'class': 'block-list'})\n    # Filter out sites on the block list\n    filtered_sites = [site.text.strip() for site in block_list]\n    return filtered_sites"}
{"instruction": "How would you implement the bubble sort algorithm in Python?", "input": "", "output": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code \narr = [3, 5, 2, 7, 4] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you implement the bubble sort algorithm in Python?\n\n### Input:\n\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code \narr = [3, 5, 2, 7, 4] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction": "Create a basic implementation of a linked list using Python.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None \n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head  \n        self.head = new_node  \n  \n    def print_list(self): \n        temp = self.head  \n        while (temp): \n            print (temp.data) \n            temp = temp.next\n  \n # Driver code \nllist = LinkedList() \nllist.push(1) \nllist.push(3) \nllist.push(11) \nllist.push(5) \nllist.push(9) \n  \nllist.print_list()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic implementation of a linked list using Python.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None \n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head  \n        self.head = new_node  \n  \n    def print_list(self): \n        temp = self.head  \n        while (temp): \n            print (temp.data) \n            temp = temp.next\n  \n # Driver code \nllist = LinkedList() \nllist.push(1) \nllist.push(3) \nllist.push(11) \nllist.push(5) \nllist.push(9) \n  \nllist.print_list()"}
{"instruction": "Write a Python code to implement Gradient Descent Algorithm.", "input": "", "output": "\"\"\"\nImplement gradient descent algorithm in Python\n\"\"\"\nimport numpy as np\n\ndef gradient_descent(x,y,learning_rate=0.01,iterations=100): \n    m_curr = b_curr = 0\n    n = len(x)\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2/n)*sum(x*(y-y_predicted))\n        bd = -(2/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        print (\"m {}, b {}, cost {} iteration {}\".format(m_curr,b_curr,cost, i))\n    return m_curr, b_curr", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to implement Gradient Descent Algorithm.\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplement gradient descent algorithm in Python\n\"\"\"\nimport numpy as np\n\ndef gradient_descent(x,y,learning_rate=0.01,iterations=100): \n    m_curr = b_curr = 0\n    n = len(x)\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2/n)*sum(x*(y-y_predicted))\n        bd = -(2/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        print (\"m {}, b {}, cost {} iteration {}\".format(m_curr,b_curr,cost, i))\n    return m_curr, b_curr"}
{"instruction": "Generate a list of prime numbers in Python between 20 and 50", "input": "", "output": "nums = range(20, 51)\nprimes = []\n\n# loop through each number\nfor num in nums:\n    is_prime = True # assume the number is prime unless proven otherwise\n    \n    # loop through each number that is less than the target number\n    for i in range(2, num):\n        # if the target number is divisible by any number, then it is not a prime number\n        if (num % i == 0):\n            is_prime = False\n            break\n\n    # if the number is prime, then add it to the list of primes\n    if is_prime:\n        primes.append(num)\n\n# print the list of prime numbers\nprint(primes) # [23, 29, 31, 37, 41, 43, 47]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of prime numbers in Python between 20 and 50\n\n### Input:\n\n\n### Output:\nnums = range(20, 51)\nprimes = []\n\n# loop through each number\nfor num in nums:\n    is_prime = True # assume the number is prime unless proven otherwise\n    \n    # loop through each number that is less than the target number\n    for i in range(2, num):\n        # if the target number is divisible by any number, then it is not a prime number\n        if (num % i == 0):\n            is_prime = False\n            break\n\n    # if the number is prime, then add it to the list of primes\n    if is_prime:\n        primes.append(num)\n\n# print the list of prime numbers\nprint(primes) # [23, 29, 31, 37, 41, 43, 47]"}
{"instruction": "Create a Python web server that can serve a static web page.", "input": "", "output": "from http.server import HTTPServer\nfrom http.server import BaseHTTPRequestHandler\n\nclass MyHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # send response status code\n        self.send_response(200)\n\n        # send headers\n        self.send_header('Content-Type', 'text/html')\n        self.end_headers()\n\n        # write the content as response\n        self.wfile.write(b\"<html><body><h1>Hello World!!</h1></body></html>\")\n\n# configure server properties\nport = 8080\nserver_address = ('127.0.0.1', port)\n\n# instantiate server\nhttpd = HTTPServer(server_address, MyHTTPRequestHandler)\n\n# run server\nhttpd.serve_forever()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web server that can serve a static web page.\n\n### Input:\n\n\n### Output:\nfrom http.server import HTTPServer\nfrom http.server import BaseHTTPRequestHandler\n\nclass MyHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # send response status code\n        self.send_response(200)\n\n        # send headers\n        self.send_header('Content-Type', 'text/html')\n        self.end_headers()\n\n        # write the content as response\n        self.wfile.write(b\"<html><body><h1>Hello World!!</h1></body></html>\")\n\n# configure server properties\nport = 8080\nserver_address = ('127.0.0.1', port)\n\n# instantiate server\nhttpd = HTTPServer(server_address, MyHTTPRequestHandler)\n\n# run server\nhttpd.serve_forever()"}
{"instruction": "Design a Python class to represent a four-player chess game.", "input": "", "output": "class ChessGame:\n    \"\"\"\n    Represent a four-player chess game.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the board with pieces and their starting positions.\n        \"\"\"\n        self.white_players = {\"king\": (7, 0),\n                              \"queen\": (7, 3),\n                              \"bishop\": (7, 2),\n                              \"knight\": (7, 1),\n                              \"pawn\": (6, 0)}\n\n        self.black_players = {\"king\": (0, 0),\n                              \"queen\": (0, 3),\n                              \"bishop\": (0, 2),\n                              \"knight\": (0, 1),\n                              \"pawn\": (1, 0)}", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a four-player chess game.\n\n### Input:\n\n\n### Output:\nclass ChessGame:\n    \"\"\"\n    Represent a four-player chess game.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the board with pieces and their starting positions.\n        \"\"\"\n        self.white_players = {\"king\": (7, 0),\n                              \"queen\": (7, 3),\n                              \"bishop\": (7, 2),\n                              \"knight\": (7, 1),\n                              \"pawn\": (6, 0)}\n\n        self.black_players = {\"king\": (0, 0),\n                              \"queen\": (0, 3),\n                              \"bishop\": (0, 2),\n                              \"knight\": (0, 1),\n                              \"pawn\": (1, 0)}"}
{"instruction": "Implement the Cohen-Sutherland clipping algorithm in Python.", "input": "", "output": "def cohen_sutherland_clipping(x1, y1, x2, y2, box):\n    code_p1 = get_code(x1, y1, box)\n    code_p2 = get_code(x2, y2, box)\n\n    accept = False\n    while (True):\n\n        if (code_p1 == 0 and code_p2 == 0):\n            accept = True\n            break\n        elif (code_p1 & code_p2 != 0):\n            break\n        else:\n            x, y = get_intersection(x1, y1, x2, y2, box, code_p1)\n            if (code_p1 == 0):\n                x2 = x\n                y2 = y\n                code_p2 = get_code(x2, y2, box) \n            else:\n                x1 = x\n                y1 = y\n                code_p1 = get_code(x1, y1, box)\n\n    if (accept):\n        return (x1, y1, x2, y2)\n    else:\n        return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the Cohen-Sutherland clipping algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef cohen_sutherland_clipping(x1, y1, x2, y2, box):\n    code_p1 = get_code(x1, y1, box)\n    code_p2 = get_code(x2, y2, box)\n\n    accept = False\n    while (True):\n\n        if (code_p1 == 0 and code_p2 == 0):\n            accept = True\n            break\n        elif (code_p1 & code_p2 != 0):\n            break\n        else:\n            x, y = get_intersection(x1, y1, x2, y2, box, code_p1)\n            if (code_p1 == 0):\n                x2 = x\n                y2 = y\n                code_p2 = get_code(x2, y2, box) \n            else:\n                x1 = x\n                y1 = y\n                code_p1 = get_code(x1, y1, box)\n\n    if (accept):\n        return (x1, y1, x2, y2)\n    else:\n        return False"}
{"instruction": "Generate a web server with Python to enable online shopping.", "input": "", "output": "import sys\nimport logging \nfrom flask import Flask, render_template, request \n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef home():\n    return render_template(\"index.html\")\n\n@app.route(\"/shop\", methods=['GET', 'POST'])\ndef shop():\n    if request.method == \"POST\":\n        product_name = request.form.get(\"product_name\")\n        if product_name is None:\n            logging.error(\"Product not found\")\n            return render_template(\"shop.html\", message=\"Product not found. Please try again.\")\n        else:\n            logging.info(\"Product found : {}\".format(product_name))\n            return render_template(\"shop.html\", product_name=product_name)\n    else:\n        return render_template(\"shop.html\")\n    \nif __name__ == '__main__':\n    app.run()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a web server with Python to enable online shopping.\n\n### Input:\n\n\n### Output:\nimport sys\nimport logging \nfrom flask import Flask, render_template, request \n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef home():\n    return render_template(\"index.html\")\n\n@app.route(\"/shop\", methods=['GET', 'POST'])\ndef shop():\n    if request.method == \"POST\":\n        product_name = request.form.get(\"product_name\")\n        if product_name is None:\n            logging.error(\"Product not found\")\n            return render_template(\"shop.html\", message=\"Product not found. Please try again.\")\n        else:\n            logging.info(\"Product found : {}\".format(product_name))\n            return render_template(\"shop.html\", product_name=product_name)\n    else:\n        return render_template(\"shop.html\")\n    \nif __name__ == '__main__':\n    app.run()"}
{"instruction": "Generate a set of Python classes to initialize a game board.", "input": "", "output": "class Board:\n    def __init__(self, rows, columns):\n        \"\"\" Constructor to initilize the board\"\"\"\n\n        # Grid of the board\n        self.grid = []\n\n        # Initialize the grid\n        for row in range(rows):\n            self.grid.append([])\n            for col in range(columns):\n                self.grid[row].append(\"\")\n\nclass Player:\n    def __init__(self, name):\n        \"\"\" Constructor to initilize the player \"\"\"\n\n        self.name = name\n        self.score = 0\n        self.moves = 0\n\nclass GameEngine:\n    def __init__(self, board, player1, player2):\n        \"\"\" Constructor to initilize the game engine \"\"\"\n\n        self.board = board\n        self.player1 = player1\n        self.player2 = player2\n        self.current_player = player1\n        self.winning_player = None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of Python classes to initialize a game board.\n\n### Input:\n\n\n### Output:\nclass Board:\n    def __init__(self, rows, columns):\n        \"\"\" Constructor to initilize the board\"\"\"\n\n        # Grid of the board\n        self.grid = []\n\n        # Initialize the grid\n        for row in range(rows):\n            self.grid.append([])\n            for col in range(columns):\n                self.grid[row].append(\"\")\n\nclass Player:\n    def __init__(self, name):\n        \"\"\" Constructor to initilize the player \"\"\"\n\n        self.name = name\n        self.score = 0\n        self.moves = 0\n\nclass GameEngine:\n    def __init__(self, board, player1, player2):\n        \"\"\" Constructor to initilize the game engine \"\"\"\n\n        self.board = board\n        self.player1 = player1\n        self.player2 = player2\n        self.current_player = player1\n        self.winning_player = None"}
{"instruction": "Create a to-do list for programming tasks for the next week.", "input": "", "output": "1. Complete pending assignments. \n2. Review algorithms. \n3. Update the portfolio website. \n4. Attend a programming workshop. \n5. Start working on a Machine Learning project. \n6. Read some articles on JavaScript. \n7. Create a web application using Node.js. \n8. Practice solving programming puzzles. \n9. Write a program for sorting an array. \n10. Research on different AI technologies. \n11. Write a blog post on recent web development trends. \n12. Participate in hackathons. \n13. Build a basic chatbot using Python. \n14. Try to implement a Genetic Algorithm. \n15. Learn a new programming language. \n16. Make an interactive website using HTML, CSS and JavaScript. \n17. Update skills by working on an open source project. \n18. Create a machine learning model to classify images. \n19. Work on an Android application.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a to-do list for programming tasks for the next week.\n\n### Input:\n\n\n### Output:\n1. Complete pending assignments. \n2. Review algorithms. \n3. Update the portfolio website. \n4. Attend a programming workshop. \n5. Start working on a Machine Learning project. \n6. Read some articles on JavaScript. \n7. Create a web application using Node.js. \n8. Practice solving programming puzzles. \n9. Write a program for sorting an array. \n10. Research on different AI technologies. \n11. Write a blog post on recent web development trends. \n12. Participate in hackathons. \n13. Build a basic chatbot using Python. \n14. Try to implement a Genetic Algorithm. \n15. Learn a new programming language. \n16. Make an interactive website using HTML, CSS and JavaScript. \n17. Update skills by working on an open source project. \n18. Create a machine learning model to classify images. \n19. Work on an Android application."}
{"instruction": "Design a Python class for representing a binary search tree.", "input": "", "output": "class TreeNode:\n    def __init__(self,data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self,data):\n        node = TreeNode(data)\n\n        if self.root is None:\n            self.root = node\n        else:\n            current = self.root\n            while True:\n                if data < current.data:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = node\n                        break\n                elif data > current.data:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = node\n                        break\n                else:\n                    break", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for representing a binary search tree.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self,data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self,data):\n        node = TreeNode(data)\n\n        if self.root is None:\n            self.root = node\n        else:\n            current = self.root\n            while True:\n                if data < current.data:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = node\n                        break\n                elif data > current.data:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = node\n                        break\n                else:\n                    break"}
{"instruction": "Create an algorithm in Python to solve a given sudoku board.", "input": "", "output": "def solveSudoku(board):\n    if not findUnassignedLocation(board):\n        return True\n \n    for num in range(1, 10):\n        if isSafe(board, row, col, num):\n            board[row][col] = num\n \n            if solveSudoku(board): \n                return True\n            board[row][col] = 0\n    return False\n\ndef findUnassignedLocation(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                return (i, j)\n    return None\n\ndef isSafe(board, row, col, num):\n    # Check row\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n \n    # Check column\n    for i in range(9):\n        if board[i][col] == num:\n            return False\n \n    # Check sub-grid\n    row_start = (row // 3) * 3\n    col_start = (col // 3) * 3\n    for i in range(row_start, row_start + 3):\n        for j in range(col_start, col_start + 3):\n            if board[i][j] == num:\n                return False\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to solve a given sudoku board.\n\n### Input:\n\n\n### Output:\ndef solveSudoku(board):\n    if not findUnassignedLocation(board):\n        return True\n \n    for num in range(1, 10):\n        if isSafe(board, row, col, num):\n            board[row][col] = num\n \n            if solveSudoku(board): \n                return True\n            board[row][col] = 0\n    return False\n\ndef findUnassignedLocation(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                return (i, j)\n    return None\n\ndef isSafe(board, row, col, num):\n    # Check row\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n \n    # Check column\n    for i in range(9):\n        if board[i][col] == num:\n            return False\n \n    # Check sub-grid\n    row_start = (row // 3) * 3\n    col_start = (col // 3) * 3\n    for i in range(row_start, row_start + 3):\n        for j in range(col_start, col_start + 3):\n            if board[i][j] == num:\n                return False\n    return True"}
{"instruction": "Write a  code in Python to create and display a linked list.", "input": "", "output": "# A linked list node \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # Function to insert a new node at the beginning \n    def push(self, new_data): \n  \n        # 1 & 2: Allocate the Node & \n        #         Put in the data \n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node \n        self.head = new_node \n  \n    # This function prints contents of linked list \n    # starting from head \n    def printList(self): \n        temp = self.head \n        while temp: \n            print temp.data \n            temp = temp.next\n  \n  \n# Driver program \nlinkedlist = LinkedList() \nlinkedlist.push(1) \nlinkedlist.push(2) \nlinkedlist.push(3) \nlinkedlist.push(4) \nlinkedlist.printList()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a  code in Python to create and display a linked list.\n\n### Input:\n\n\n### Output:\n# A linked list node \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # Function to insert a new node at the beginning \n    def push(self, new_data): \n  \n        # 1 & 2: Allocate the Node & \n        #         Put in the data \n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node \n        self.head = new_node \n  \n    # This function prints contents of linked list \n    # starting from head \n    def printList(self): \n        temp = self.head \n        while temp: \n            print temp.data \n            temp = temp.next\n  \n  \n# Driver program \nlinkedlist = LinkedList() \nlinkedlist.push(1) \nlinkedlist.push(2) \nlinkedlist.push(3) \nlinkedlist.push(4) \nlinkedlist.printList()"}
{"instruction": "Create a python program to simulate a race between two cars.", "input": "", "output": "import random \n\n# Initialize cars \nclass Car: \n    def __init__(self, name): \n        self.name = name \n        self.speed = 0\n        self.distance_travelled = 0\n\n# Create cars \ncar1 = Car('Red') \ncar2 = Car('Black') \n\n# Simulation loop \nwhile(True): \n    # Increase speed for each car \n    car1.speed = round(random.uniform(0, 100), 2) \n    car2.speed = round(random.uniform(0, 100), 2) \n    \n    # If any car has higher speed, increase its distance \n    if car1.speed > car2.speed: \n        car1.distance_travelled += car1.speed \n    else: \n        car2.distance_travelled += car2.speed \n        \n    # Display the current state \n    print('Car 1 Speed: ', car1.speed, ' km/h', \n          '\\tCar 1 Distance Travelled:', car1.distance_travelled,\n          '\\nCar 2 Speed: ', car2.speed, ' km/h', \n          '\\tCar 2 Distance Travelled:', car2.distance_travelled) \n    \n    # End the loop if either car has travelled 1000 km or more \n    if car1.distance_travelled >= 1000 or car2.distance_travelled >= 1000: \n        break\n\n# Print the final winner of the race \nif car1.distance_travelled > car2.distance_travelled: \n    print('\\n{} won the race!'.format(car1.name)) \nelse: \n    print('\\n{} won the race!'.format(car2.name))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to simulate a race between two cars.\n\n### Input:\n\n\n### Output:\nimport random \n\n# Initialize cars \nclass Car: \n    def __init__(self, name): \n        self.name = name \n        self.speed = 0\n        self.distance_travelled = 0\n\n# Create cars \ncar1 = Car('Red') \ncar2 = Car('Black') \n\n# Simulation loop \nwhile(True): \n    # Increase speed for each car \n    car1.speed = round(random.uniform(0, 100), 2) \n    car2.speed = round(random.uniform(0, 100), 2) \n    \n    # If any car has higher speed, increase its distance \n    if car1.speed > car2.speed: \n        car1.distance_travelled += car1.speed \n    else: \n        car2.distance_travelled += car2.speed \n        \n    # Display the current state \n    print('Car 1 Speed: ', car1.speed, ' km/h', \n          '\\tCar 1 Distance Travelled:', car1.distance_travelled,\n          '\\nCar 2 Speed: ', car2.speed, ' km/h', \n          '\\tCar 2 Distance Travelled:', car2.distance_travelled) \n    \n    # End the loop if either car has travelled 1000 km or more \n    if car1.distance_travelled >= 1000 or car2.distance_travelled >= 1000: \n        break\n\n# Print the final winner of the race \nif car1.distance_travelled > car2.distance_travelled: \n    print('\\n{} won the race!'.format(car1.name)) \nelse: \n    print('\\n{} won the race!'.format(car2.name))"}
{"instruction": "Write a code to delete a certain element from a linked list.", "input": "", "output": "# Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to delete a certain element from a linked list.\n\n### Input:\n\n\n### Output:\n# Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None"}
{"instruction": "Write a Python code for extracting numbers from a given text.", "input": "", "output": "import re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code for extracting numbers from a given text.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))"}
{"instruction": "Devise a python program to generate permutations of an array.", "input": "", "output": "def generate_permutations(nums):\n    result = []\n    perms_help(nums, 0, len(nums)-1, result)\n    return result\n\ndef perms_help(nums, l, r, result): \n    if l == r: \n        result.append(\"\".join(nums)) \n    else: \n        for i in range(l, r + 1):\n            # swap character\n            nums[l], nums[i] = nums[i], nums[l]\n            # recur\n            perms_help(nums, l + 1, r, result)\n            # backtrack\n            nums[l], nums[i] = nums[i], nums[l]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a python program to generate permutations of an array.\n\n### Input:\n\n\n### Output:\ndef generate_permutations(nums):\n    result = []\n    perms_help(nums, 0, len(nums)-1, result)\n    return result\n\ndef perms_help(nums, l, r, result): \n    if l == r: \n        result.append(\"\".join(nums)) \n    else: \n        for i in range(l, r + 1):\n            # swap character\n            nums[l], nums[i] = nums[i], nums[l]\n            # recur\n            perms_help(nums, l + 1, r, result)\n            # backtrack\n            nums[l], nums[i] = nums[i], nums[l]"}
{"instruction": "Write a Python program to send an email to a group of people.", "input": "", "output": "# Imports\nimport smtplib\n\n# Define the email addresses\nrecipients = ['person1@mail.com', 'person2@mail.com', 'person3@mail.com']\n\n# Connect to SMTP server\nwith smtplib.SMTP('smtp.mail.com', 587) as server:\n\t# Start TLS\n\tserver.starttls()\n\n\t# Login\n\tserver.login('your_email_address', 'your_password')\n\n\t# Construct the message\n\tmessage = '''\n\tSubject: Your Subject Here\n\t\n\tMessage body here\n\t'''\n\n\t# Send mail\n\tserver.sendmail('your_email_address', recipients, message)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to send an email to a group of people.\n\n### Input:\n\n\n### Output:\n# Imports\nimport smtplib\n\n# Define the email addresses\nrecipients = ['person1@mail.com', 'person2@mail.com', 'person3@mail.com']\n\n# Connect to SMTP server\nwith smtplib.SMTP('smtp.mail.com', 587) as server:\n\t# Start TLS\n\tserver.starttls()\n\n\t# Login\n\tserver.login('your_email_address', 'your_password')\n\n\t# Construct the message\n\tmessage = '''\n\tSubject: Your Subject Here\n\t\n\tMessage body here\n\t'''\n\n\t# Send mail\n\tserver.sendmail('your_email_address', recipients, message)"}
{"instruction": "Can you give an example of a decision tree written in Python?", "input": "", "output": "import pandas as pd\nfrom sklearn import tree\n\n# Data \ndata = {'c1': ['x','x','x','x','y','y','y','y'],'c2': ['g','g','d','d','g','g','d','d'],'c3': ['l','h','h','l','h','l','l','h'],\n        'target': ['0','0','0','0','1','1','1','1']}\n\ninputs = pd.DataFrame(data = data) \n\n# Training the decision tree \ndtree = tree.DecisionTreeClassifier(criterion = 'entropy')\ndtree.fit(X = inputs[['c1','c2','c3']], y = inputs['target'])\n\n# Visualizing the Decision Tree \ntree.plot_tree(dtree)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you give an example of a decision tree written in Python?\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn import tree\n\n# Data \ndata = {'c1': ['x','x','x','x','y','y','y','y'],'c2': ['g','g','d','d','g','g','d','d'],'c3': ['l','h','h','l','h','l','l','h'],\n        'target': ['0','0','0','0','1','1','1','1']}\n\ninputs = pd.DataFrame(data = data) \n\n# Training the decision tree \ndtree = tree.DecisionTreeClassifier(criterion = 'entropy')\ndtree.fit(X = inputs[['c1','c2','c3']], y = inputs['target'])\n\n# Visualizing the Decision Tree \ntree.plot_tree(dtree)"}
{"instruction": "Explain the built-in sorting function of the Python language.", "input": "", "output": "The built-in sorting function of Python is called \"sorted()\". The sorted() function takes an iterable object as an argument and returns a sorted list. By default, it sorts the elements of the iterable object in ascending order. However, it also provides an optional argument for specifying the desired sorting order (e.g. descending order) as well as different sorting algorithms (e.g. insertion sort, selection sort, bubble sort). Additionally, it can be used to sort both numbers and strings.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the built-in sorting function of the Python language.\n\n### Input:\n\n\n### Output:\nThe built-in sorting function of Python is called \"sorted()\". The sorted() function takes an iterable object as an argument and returns a sorted list. By default, it sorts the elements of the iterable object in ascending order. However, it also provides an optional argument for specifying the desired sorting order (e.g. descending order) as well as different sorting algorithms (e.g. insertion sort, selection sort, bubble sort). Additionally, it can be used to sort both numbers and strings."}
{"instruction": "Generate a Python program to print the first 5 prime numbers.", "input": "", "output": "# Python program to print the first  \n# 5 prime numbers \n  \n# function to generate and print first  \n# 5 prime numbers \ndef display_first_five_primes(): \n    print(\"The first five prime numbers are:\") \n    primenums = [2] \n    num = 3 \n    while len(primenums) < 5: \n        for p in primenums: \n            if (num % p) == 0: \n                break \n        else: \n            primenums.append(num) \n        num += 1 \n  \n    for i in primenums: \n        print(i) \n  \n# Driver code \nif __name__ == '__main__': \n    display_first_five_primes()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print the first 5 prime numbers.\n\n### Input:\n\n\n### Output:\n# Python program to print the first  \n# 5 prime numbers \n  \n# function to generate and print first  \n# 5 prime numbers \ndef display_first_five_primes(): \n    print(\"The first five prime numbers are:\") \n    primenums = [2] \n    num = 3 \n    while len(primenums) < 5: \n        for p in primenums: \n            if (num % p) == 0: \n                break \n        else: \n            primenums.append(num) \n        num += 1 \n  \n    for i in primenums: \n        print(i) \n  \n# Driver code \nif __name__ == '__main__': \n    display_first_five_primes()"}
{"instruction": "Create a Python program that simulates a game of Tic-Tac-Toe.", "input": "", "output": "board = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]\n\ndef start_game():\n    # Display the UI of the game\n    print(\"Let the game begin!\\n\")\n    print(\"1 | 2 | 3\")\n    print(\"---------\")\n    print(\"4 | 5 | 6\")\n    print(\"---------\")\n    print(\"7 | 8 | 9\")\n    print(\"\")\n\n\ndef draw_board(board):\n    print(\" \"+board[0][0]+\" | \"+board[0][1]+\" | \"+board[0][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[1][0]+\" | \"+board[1][1]+\" | \"+board[1][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[2][0]+\" | \"+board[2][1]+\" | \"+board[2][2]+\" \")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that simulates a game of Tic-Tac-Toe.\n\n### Input:\n\n\n### Output:\nboard = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]\n\ndef start_game():\n    # Display the UI of the game\n    print(\"Let the game begin!\\n\")\n    print(\"1 | 2 | 3\")\n    print(\"---------\")\n    print(\"4 | 5 | 6\")\n    print(\"---------\")\n    print(\"7 | 8 | 9\")\n    print(\"\")\n\n\ndef draw_board(board):\n    print(\" \"+board[0][0]+\" | \"+board[0][1]+\" | \"+board[0][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[1][0]+\" | \"+board[1][1]+\" | \"+board[1][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[2][0]+\" | \"+board[2][1]+\" | \"+board[2][2]+\" \")"}
{"instruction": "Create a program in Python that implements a car racing game.", "input": "", "output": "import random\n\nMAX_DISTANCE = 20\n\ndef race():\n    print(\"Let's race!\")\n    car_a_distance = 0\n    car_b_distance = 0\n\n    while car_a_distance < MAX_DISTANCE and car_b_distance < MAX_DISTANCE:\n        car_a_distance += random.randint(1, 5)\n        car_b_distance += random.randint(1, 5)\n        if car_a_distance == MAX_DISTANCE:\n            print(\"Car A wins!\")\n        elif car_b_distance == MAX_DISTANCE:\n            print(\"Car B wins!\")\n        else:\n            print(\"Car A: \" + str(car_a_distance) + \" \" + \"Car B: \" + str(car_b_distance))\n    \nrace()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that implements a car racing game.\n\n### Input:\n\n\n### Output:\nimport random\n\nMAX_DISTANCE = 20\n\ndef race():\n    print(\"Let's race!\")\n    car_a_distance = 0\n    car_b_distance = 0\n\n    while car_a_distance < MAX_DISTANCE and car_b_distance < MAX_DISTANCE:\n        car_a_distance += random.randint(1, 5)\n        car_b_distance += random.randint(1, 5)\n        if car_a_distance == MAX_DISTANCE:\n            print(\"Car A wins!\")\n        elif car_b_distance == MAX_DISTANCE:\n            print(\"Car B wins!\")\n        else:\n            print(\"Car A: \" + str(car_a_distance) + \" \" + \"Car B: \" + str(car_b_distance))\n    \nrace()"}
{"instruction": "Build a machine learning model in Python to classify animals.", "input": "", "output": "#import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python to classify animals.\n\n### Input:\n\n\n### Output:\n#import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)"}
{"instruction": "What are the benefits of using list comprehensions in Python?", "input": "", "output": "The benefits of using list comprehensions in Python are: \n1. List comprehensions are more efficient than \"for\" or \"while\" loops, as they allow you to write the same code in fewer lines. \n2. They are easier to read, as the code is concise and requires less mental effort to understand. \n3. They allow you to write compact and elegant code, as you can transform a few lines of code into a single line of list comprehension. \n4. They are faster to execute, as list comprehensions are evaluated at compile-time. \n5. List comprehensions also allow you to process and manipulate data in sophisticated ways.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the benefits of using list comprehensions in Python?\n\n### Input:\n\n\n### Output:\nThe benefits of using list comprehensions in Python are: \n1. List comprehensions are more efficient than \"for\" or \"while\" loops, as they allow you to write the same code in fewer lines. \n2. They are easier to read, as the code is concise and requires less mental effort to understand. \n3. They allow you to write compact and elegant code, as you can transform a few lines of code into a single line of list comprehension. \n4. They are faster to execute, as list comprehensions are evaluated at compile-time. \n5. List comprehensions also allow you to process and manipulate data in sophisticated ways."}
{"instruction": "Create a timer class in Python to create a 5-minute countdown", "input": "", "output": "import time\n\nclass Timer:\n    # Constructor\n    def __init__(self, duration):\n        self.duration = duration\n        self.start_time = time.time()\n        self.end_time = self.start_time + self.duration\n\n    # Methods\n    def start(self):\n        while time.time() < self.end_time:\n            minutes, seconds = divmod((self.end_time - time.time()), 60)\n            print(f'{int(minutes)} minutes and {int(seconds)} seconds left')\n            time.sleep(1)\n        print('Timer completed')\n        \nif __name__ == '__main__':\n    timer = Timer(300) # Timer duration in seconds (5-minute timer in this example)\n    timer.start()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a timer class in Python to create a 5-minute countdown\n\n### Input:\n\n\n### Output:\nimport time\n\nclass Timer:\n    # Constructor\n    def __init__(self, duration):\n        self.duration = duration\n        self.start_time = time.time()\n        self.end_time = self.start_time + self.duration\n\n    # Methods\n    def start(self):\n        while time.time() < self.end_time:\n            minutes, seconds = divmod((self.end_time - time.time()), 60)\n            print(f'{int(minutes)} minutes and {int(seconds)} seconds left')\n            time.sleep(1)\n        print('Timer completed')\n        \nif __name__ == '__main__':\n    timer = Timer(300) # Timer duration in seconds (5-minute timer in this example)\n    timer.start()"}
{"instruction": "Write a python program to solve a given 0-1 knapsack problem.", "input": "", "output": "def knapsack(capacity, values, weights): \n    n = len(values) \n  \n    # Initialize the two dimensional dp table with 0s \n    dp = [[0 for x in range(capacity + 1)] for x in range(n + 1)] \n  \n    # Compute the values of the dp table \n    for i in range(n + 1): \n        for w in range(capacity + 1): \n            if i == 0 or w == 0: \n                dp[i][w] = 0\n            elif weights[i - 1] <= w: \n                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n  \n    # Get the optimal value from the last cell \n    return dp[n][capacity]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to solve a given 0-1 knapsack problem.\n\n### Input:\n\n\n### Output:\ndef knapsack(capacity, values, weights): \n    n = len(values) \n  \n    # Initialize the two dimensional dp table with 0s \n    dp = [[0 for x in range(capacity + 1)] for x in range(n + 1)] \n  \n    # Compute the values of the dp table \n    for i in range(n + 1): \n        for w in range(capacity + 1): \n            if i == 0 or w == 0: \n                dp[i][w] = 0\n            elif weights[i - 1] <= w: \n                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n  \n    # Get the optimal value from the last cell \n    return dp[n][capacity]"}
{"instruction": "Write a Python program to create a stack using a linked list.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data= data\n        self.next = None\n        \nclass Stack:\n    def __init__(self):\n        self.head = None\n        self.tail = self.head\n        self.items = 0\n\n    def push(self, data):\n        new_node = Node(data)\n      \n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head = new_node\n        self.tail = self.head\n        self.items +=1\n\n    def pop(self):\n        if self.head is None:\n            return None\n\n        data = self.head.data\n        self.head = self.head.next\n        self.items -= 1\n        return data", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a stack using a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data= data\n        self.next = None\n        \nclass Stack:\n    def __init__(self):\n        self.head = None\n        self.tail = self.head\n        self.items = 0\n\n    def push(self, data):\n        new_node = Node(data)\n      \n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head = new_node\n        self.tail = self.head\n        self.items +=1\n\n    def pop(self):\n        if self.head is None:\n            return None\n\n        data = self.head.data\n        self.head = self.head.next\n        self.items -= 1\n        return data"}
{"instruction": "Create an optimization algorithm to minimize a cost function.", "input": "", "output": "# Python code to implement \n# the Gradient Descent algorithm\n\ndef gradientDescent(x, y, learning_rate, max_iterations): \n  \n    m_curr = b_curr = 0\n    n = len(x)\n    cost_previous = 0\n    cost_present = 0\n    iteration = 0 \n  \n    while iteration < max_iterations: \n        y_predicted = m_curr * x + b_curr \n        cost_present = (1/n) * sum([val**2 for val in (y-y_predicted)]) \n        md = -(2/n)*sum(x*(y-y_predicted)) \n        bd = -(2/n)*sum(y-y_predicted) \n        m_curr = m_curr - learning_rate * md \n        b_curr = b_curr - learning_rate * bd \n        iteration = iteration + 1\n        cost_previous = cost_present\n  \n    return m_curr, b_curr, cost_previous", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm to minimize a cost function.\n\n### Input:\n\n\n### Output:\n# Python code to implement \n# the Gradient Descent algorithm\n\ndef gradientDescent(x, y, learning_rate, max_iterations): \n  \n    m_curr = b_curr = 0\n    n = len(x)\n    cost_previous = 0\n    cost_present = 0\n    iteration = 0 \n  \n    while iteration < max_iterations: \n        y_predicted = m_curr * x + b_curr \n        cost_present = (1/n) * sum([val**2 for val in (y-y_predicted)]) \n        md = -(2/n)*sum(x*(y-y_predicted)) \n        bd = -(2/n)*sum(y-y_predicted) \n        m_curr = m_curr - learning_rate * md \n        b_curr = b_curr - learning_rate * bd \n        iteration = iteration + 1\n        cost_previous = cost_present\n  \n    return m_curr, b_curr, cost_previous"}
{"instruction": "Write Python code to delete a node from a singly linked list.", "input": "", "output": "def deleteNode(head, key): \n  \n    # Store head node \n    temp = head \n  \n    # If head node itself holds the key to be deleted \n    if (temp is not None): \n        if (temp.data == key): \n            head = temp.next\n            temp = None\n            return head \n  \n    # Search for the key to be deleted, keep track of the \n    # previous node as we need to change 'prev.next' \n    while(temp is not None): \n        if temp.data == key: \n            break \n        prev = temp \n        temp = temp.next\n  \n    # if key was not present in linked list \n    if (temp == None): \n        return head \n  \n    # Unlink the node from linked list \n    prev.next = temp.next\n  \n    temp = None\n  \n    return head", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to delete a node from a singly linked list.\n\n### Input:\n\n\n### Output:\ndef deleteNode(head, key): \n  \n    # Store head node \n    temp = head \n  \n    # If head node itself holds the key to be deleted \n    if (temp is not None): \n        if (temp.data == key): \n            head = temp.next\n            temp = None\n            return head \n  \n    # Search for the key to be deleted, keep track of the \n    # previous node as we need to change 'prev.next' \n    while(temp is not None): \n        if temp.data == key: \n            break \n        prev = temp \n        temp = temp.next\n  \n    # if key was not present in linked list \n    if (temp == None): \n        return head \n  \n    # Unlink the node from linked list \n    prev.next = temp.next\n  \n    temp = None\n  \n    return head"}
{"instruction": "Create a Python program to detect anomalies in a time series.", "input": "", "output": "import numpy as np \nimport matplotlib.pyplot as plt\n\ndef detect_anomalies(data):\n    '''This function detects anomalies in a time series.'''\n    # calculate rolling mean and rolling standard deviation\n    rolling_mean = np.mean(data, axis=0)\n    rolling_std = np.std(data, axis=0)\n\n    # create an empty dataframe\n    anomalies_df = []\n\n    # detect anomalies\n    for i in range(len(data)): \n        z_score = (data[i] - rolling_mean) / rolling_std\n        if np.abs(z_score) > 3:\n            anomalies_df.append(data[i])\n\n    # plot the anomalies\n    plt.plot(data, color='blue', label='Original data')\n    plt.scatter(range(len(data)), anomalies_df, color='red', label='Anomalies')\n    plt.legend()\n    plt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect anomalies in a time series.\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport matplotlib.pyplot as plt\n\ndef detect_anomalies(data):\n    '''This function detects anomalies in a time series.'''\n    # calculate rolling mean and rolling standard deviation\n    rolling_mean = np.mean(data, axis=0)\n    rolling_std = np.std(data, axis=0)\n\n    # create an empty dataframe\n    anomalies_df = []\n\n    # detect anomalies\n    for i in range(len(data)): \n        z_score = (data[i] - rolling_mean) / rolling_std\n        if np.abs(z_score) > 3:\n            anomalies_df.append(data[i])\n\n    # plot the anomalies\n    plt.plot(data, color='blue', label='Original data')\n    plt.scatter(range(len(data)), anomalies_df, color='red', label='Anomalies')\n    plt.legend()\n    plt.show()"}
{"instruction": "Design a web API for a database powered by MongoDB in Python.", "input": "", "output": "# Import the required libraries \nimport pymongo\nimport json\n\n# Establish a connection to the database \nclient = pymongo.MongoClient(\"mongodb://localhost:27017\")\nmydb = client[\"mydb\"]\n\n# Define the API endpoints \n@app.route(\"/api/v1/getAll\", methods=[\"GET\"])\ndef api_get_all():\n    # Get all the documents from the database and return as JSON\n    documents = mydb.mycollection.find({})\n    data = [json.loads(d) for d in documents]\n    return json.dumps({\"data\": data})\n\n@app.route(\"/api/v1/add\", methods=[\"POST\"])\ndef api_add():\n    # Create a document from the `request.data` and insert it into the database\n    doc = json.loads(request.data)\n    mydb.mycollection.update(doc)\n    return json.dumps({\"message\": \"Document added successfully!\"})", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web API for a database powered by MongoDB in Python.\n\n### Input:\n\n\n### Output:\n# Import the required libraries \nimport pymongo\nimport json\n\n# Establish a connection to the database \nclient = pymongo.MongoClient(\"mongodb://localhost:27017\")\nmydb = client[\"mydb\"]\n\n# Define the API endpoints \n@app.route(\"/api/v1/getAll\", methods=[\"GET\"])\ndef api_get_all():\n    # Get all the documents from the database and return as JSON\n    documents = mydb.mycollection.find({})\n    data = [json.loads(d) for d in documents]\n    return json.dumps({\"data\": data})\n\n@app.route(\"/api/v1/add\", methods=[\"POST\"])\ndef api_add():\n    # Create a document from the `request.data` and insert it into the database\n    doc = json.loads(request.data)\n    mydb.mycollection.update(doc)\n    return json.dumps({\"message\": \"Document added successfully!\"})"}
{"instruction": "Create a priority queue with a custom max function in Python.", "input": "", "output": "class PriorityQueue(object): \n    def __init__(self): \n        self.queue = [] \n  \n    def __str__(self): \n        return ' '.join([str(i) for i in self.queue]) \n  \n    # for checking if the queue is empty \n    def isEmpty(self): \n        return len(self.queue) == 0\n  \n    # for inserting an element in the queue \n    def insert(self, data): \n        self.queue.append(data) \n  \n    # for popping an element based on custom max function \n    def max_pop(self, max_func): \n        max_val = self.queue[0]\n        max_index = 0\n        for i in range(len(self.queue)):\n            if max_func(max_val, self.queue[i]) == self.queue[i]: \n                max_val = self.queue[i] \n                max_index = i \n        del self.queue[max_index] \n        return max_val", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a priority queue with a custom max function in Python.\n\n### Input:\n\n\n### Output:\nclass PriorityQueue(object): \n    def __init__(self): \n        self.queue = [] \n  \n    def __str__(self): \n        return ' '.join([str(i) for i in self.queue]) \n  \n    # for checking if the queue is empty \n    def isEmpty(self): \n        return len(self.queue) == 0\n  \n    # for inserting an element in the queue \n    def insert(self, data): \n        self.queue.append(data) \n  \n    # for popping an element based on custom max function \n    def max_pop(self, max_func): \n        max_val = self.queue[0]\n        max_index = 0\n        for i in range(len(self.queue)):\n            if max_func(max_val, self.queue[i]) == self.queue[i]: \n                max_val = self.queue[i] \n                max_index = i \n        del self.queue[max_index] \n        return max_val"}
{"instruction": "Build a class in Python that implements a singly linked list.", "input": "", "output": "# Define a Node class\nclass Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# Define a Linkedlist class\nclass LinkedList(object): \n    # Defines the head  \n    def __init__(self): \n        self.head = None\n  \n    # Add a new node at the beginning of the list \n    def prepend(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    # Add a new node at the end of the list \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node \n            return \n        last = self.head \n        while last.next: \n            last = last.next\n        last.next = new_node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a class in Python that implements a singly linked list.\n\n### Input:\n\n\n### Output:\n# Define a Node class\nclass Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# Define a Linkedlist class\nclass LinkedList(object): \n    # Defines the head  \n    def __init__(self): \n        self.head = None\n  \n    # Add a new node at the beginning of the list \n    def prepend(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    # Add a new node at the end of the list \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node \n            return \n        last = self.head \n        while last.next: \n            last = last.next\n        last.next = new_node"}
{"instruction": "Design  a program to optimize a set of constraints in Python.", "input": "", "output": "# Assume input is of the form:\n# {\n#  \"constraint1\": [[x1, y1, z1], [a1, b1, c1]],\n#  \"constraint2\": [[x2, y2, z2], [a2, b2, c2]],\n#  ...\n# }\ndef optimize_constraints(data):\n    # Initialize optimization problem\n    problem = Problem(\"Optimization problem\")\n\n    # Add variables to problem\n    for key, value in data.items():\n        for i in range(len(value)):\n            var = problem.add_variable(\"{}_{}\".format(key, i), type=float)\n            # Add constraints\n            problem.add_constraint(var == value[i], name=\"Constraint_{}_{}\".format(key, i))\n\n    # Solve problem\n    problem.solve()\n\n    # Return optimized constraints\n    solution = {}\n    for key, value in data.items():\n        solution[key] = [problem.get_value(\"{}_{}\".format(key, i))\n                         for i in range(len(value))]\n\n    return solution", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign  a program to optimize a set of constraints in Python.\n\n### Input:\n\n\n### Output:\n# Assume input is of the form:\n# {\n#  \"constraint1\": [[x1, y1, z1], [a1, b1, c1]],\n#  \"constraint2\": [[x2, y2, z2], [a2, b2, c2]],\n#  ...\n# }\ndef optimize_constraints(data):\n    # Initialize optimization problem\n    problem = Problem(\"Optimization problem\")\n\n    # Add variables to problem\n    for key, value in data.items():\n        for i in range(len(value)):\n            var = problem.add_variable(\"{}_{}\".format(key, i), type=float)\n            # Add constraints\n            problem.add_constraint(var == value[i], name=\"Constraint_{}_{}\".format(key, i))\n\n    # Solve problem\n    problem.solve()\n\n    # Return optimized constraints\n    solution = {}\n    for key, value in data.items():\n        solution[key] = [problem.get_value(\"{}_{}\".format(key, i))\n                         for i in range(len(value))]\n\n    return solution"}
{"instruction": "Develop a software system to automate an law office workflow.", "input": "", "output": "# Create Python scripts to automate law office workflow\n\n# Import libraries\nimport pandas as pd\nimport datetime \n\n# Create dataframe to hold initial project details\ndf = pd.DataFrame(columns=[\"Task Name\", \"Due Date\", \"Assigned To\"])\n\n# Create functions to store and retrieve workflow data\ndef store_data(name, due_date, assigned_to):\n  df.loc[len(df)] = ([name, due_date, assigned_to])\n  \n  # Store data in a CSV file\n  df.to_csv(\"law_office_workflow.csv\")\n  \ndef retrieve_data():\n  data = pd.read_csv(\"law_office_workflow.csv\")\n  return data\n\n# Set variables to store user input\ninput_name = input(\"What is the task name? \")\ninput_duedate = input(\"What is the due date? \")\ninput_assignee = input(\"Who is the assignee? \")\n\n# Store user input data\nstore_data(input_name, input_duedate, input_assignee)\n\n# Use the retrieve_data() function to get the stored data\nmy_data = retrieve_data()\n\n# Print the stored data\nprint(my_data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a software system to automate an law office workflow.\n\n### Input:\n\n\n### Output:\n# Create Python scripts to automate law office workflow\n\n# Import libraries\nimport pandas as pd\nimport datetime \n\n# Create dataframe to hold initial project details\ndf = pd.DataFrame(columns=[\"Task Name\", \"Due Date\", \"Assigned To\"])\n\n# Create functions to store and retrieve workflow data\ndef store_data(name, due_date, assigned_to):\n  df.loc[len(df)] = ([name, due_date, assigned_to])\n  \n  # Store data in a CSV file\n  df.to_csv(\"law_office_workflow.csv\")\n  \ndef retrieve_data():\n  data = pd.read_csv(\"law_office_workflow.csv\")\n  return data\n\n# Set variables to store user input\ninput_name = input(\"What is the task name? \")\ninput_duedate = input(\"What is the due date? \")\ninput_assignee = input(\"Who is the assignee? \")\n\n# Store user input data\nstore_data(input_name, input_duedate, input_assignee)\n\n# Use the retrieve_data() function to get the stored data\nmy_data = retrieve_data()\n\n# Print the stored data\nprint(my_data)"}
{"instruction": "Design a Python algorithm for the sorting of two linked lists", "input": "", "output": "def merge_sorted_lists(list1, list2):\n    # Create a new list for the result\n    result = [] \n    # Make iterators for both lists\n    iter1 = iter(list1)  \n    iter2 = iter(list2) \n    # Initialize the elements to compare\n    elem1 = next(iter1, None) \n    elem2 = next(iter2, None)  \n  \n    # Compare the elements of both lists \n    while elem1 is not None and elem2 is not None: \n        # Pick the smaller element \n        if elem1 <= elem2: \n           result.append(elem1) \n           elem1 = next(iter1, None)  \n        else: \n           result.append(elem2) \n           elem2 = next(iter2, None) \n  \n    # Append the remaining elements of list1  \n    if elem1 is not None: \n        result.append(elem1) \n        for elem1 in iter1: result.append(elem1) \n  \n    # Append the remaining elements of the list2  \n    if elem2 is not None: \n        result.append(elem2) \n        for elem2 in iter2: \n            result.append(elem2) \n  \n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm for the sorting of two linked lists\n\n### Input:\n\n\n### Output:\ndef merge_sorted_lists(list1, list2):\n    # Create a new list for the result\n    result = [] \n    # Make iterators for both lists\n    iter1 = iter(list1)  \n    iter2 = iter(list2) \n    # Initialize the elements to compare\n    elem1 = next(iter1, None) \n    elem2 = next(iter2, None)  \n  \n    # Compare the elements of both lists \n    while elem1 is not None and elem2 is not None: \n        # Pick the smaller element \n        if elem1 <= elem2: \n           result.append(elem1) \n           elem1 = next(iter1, None)  \n        else: \n           result.append(elem2) \n           elem2 = next(iter2, None) \n  \n    # Append the remaining elements of list1  \n    if elem1 is not None: \n        result.append(elem1) \n        for elem1 in iter1: result.append(elem1) \n  \n    # Append the remaining elements of the list2  \n    if elem2 is not None: \n        result.append(elem2) \n        for elem2 in iter2: \n            result.append(elem2) \n  \n    return result"}
{"instruction": "Align text cells in a table to the left,he right, and center.", "input": "", "output": "# Python program to align text cells in a table to the left,he right, and center \n\ntable = [('Name', 'Age', 'Gender'),\n         ('John', '21', 'Male'),\n         ('Doe', '25', 'Female')]\n\nfor row in table:\n    # Align text to the left \n    left_aligned = \"{:<10}{:<10}{:<10}\".format(*row)  \n    \n    # Align text to the right\n    right_aligned = \"{:>10}{:>10}{:>10}\".format(*row) \n    \n    # Align text to the center\n    center_aligned = \"{:^10}{:^10}{:^10}\".format(*row) \n\nprint(\"Left aligned:\")\nprint(left_aligned) \n\nprint(\"Right aligned:\")\nprint(right_aligned)\n\nprint(\"Center aligned:\")\nprint(center_aligned) \n\n# Output:\n# Left aligned:\n# Name      Age       Gender    \n# John      21        Male      \n# Doe       25        Female  \n\n# Right aligned:\n#      Name      Age      Gender\n#      John       21       Male\n#      Doe        25       Female  \n\n# Center aligned:\n#    Name     Age     Gender  \n#    John      21      Male    \n#    Doe       25      Female", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAlign text cells in a table to the left,he right, and center.\n\n### Input:\n\n\n### Output:\n# Python program to align text cells in a table to the left,he right, and center \n\ntable = [('Name', 'Age', 'Gender'),\n         ('John', '21', 'Male'),\n         ('Doe', '25', 'Female')]\n\nfor row in table:\n    # Align text to the left \n    left_aligned = \"{:<10}{:<10}{:<10}\".format(*row)  \n    \n    # Align text to the right\n    right_aligned = \"{:>10}{:>10}{:>10}\".format(*row) \n    \n    # Align text to the center\n    center_aligned = \"{:^10}{:^10}{:^10}\".format(*row) \n\nprint(\"Left aligned:\")\nprint(left_aligned) \n\nprint(\"Right aligned:\")\nprint(right_aligned)\n\nprint(\"Center aligned:\")\nprint(center_aligned) \n\n# Output:\n# Left aligned:\n# Name      Age       Gender    \n# John      21        Male      \n# Doe       25        Female  \n\n# Right aligned:\n#      Name      Age      Gender\n#      John       21       Male\n#      Doe        25       Female  \n\n# Center aligned:\n#    Name     Age     Gender  \n#    John      21      Male    \n#    Doe       25      Female"}
{"instruction": "Create a python program for encrypting and decrypting strings", "input": "", "output": "import random\n\ndef encrypt(string):\n    \"\"\"Encrypts a given string using a random 2D matrix\"\"\"\n    \n    # Generate random 2D matrix\n    matrix = [[random.randint(0, 9) for x in range(len(string))] for y in range(len(string))]\n    encrypted_str = \"\"\n\n    # Encrypt the string\n    for col in range(len(string)):\n        for row in range(len(string)):\n            encrypted_str += str(matrix[row][col] ^ ord(string[row]))\n\n    return encrypted_str\n\ndef decrypt(string):\n    \"\"\"Decrypts a given encrypted string\"\"\"\n    encrypted_str = \"\"\n    matrix_size = int(len(string) ** 0.5)\n    encrypted_str = \"\"\n\n    # Generate a 2D matrix from the encrypted string \n    matrix = []\n    for row in range(matrix_size):\n        matrix.append([])\n        for col in range(matrix_size):\n            matrix[row].append(int(string[col + (row * matrix_size): col + (row * matrix_size) + 1]))\n    \n    # Decrypt the string\n    for col in range(matrix_size):\n        for row in range(matrix_size):\n            encrypted_str += chr(matrix[row][col] ^ matrix[row][0])\n        \n    return encrypted_str", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program for encrypting and decrypting strings\n\n### Input:\n\n\n### Output:\nimport random\n\ndef encrypt(string):\n    \"\"\"Encrypts a given string using a random 2D matrix\"\"\"\n    \n    # Generate random 2D matrix\n    matrix = [[random.randint(0, 9) for x in range(len(string))] for y in range(len(string))]\n    encrypted_str = \"\"\n\n    # Encrypt the string\n    for col in range(len(string)):\n        for row in range(len(string)):\n            encrypted_str += str(matrix[row][col] ^ ord(string[row]))\n\n    return encrypted_str\n\ndef decrypt(string):\n    \"\"\"Decrypts a given encrypted string\"\"\"\n    encrypted_str = \"\"\n    matrix_size = int(len(string) ** 0.5)\n    encrypted_str = \"\"\n\n    # Generate a 2D matrix from the encrypted string \n    matrix = []\n    for row in range(matrix_size):\n        matrix.append([])\n        for col in range(matrix_size):\n            matrix[row].append(int(string[col + (row * matrix_size): col + (row * matrix_size) + 1]))\n    \n    # Decrypt the string\n    for col in range(matrix_size):\n        for row in range(matrix_size):\n            encrypted_str += chr(matrix[row][col] ^ matrix[row][0])\n        \n    return encrypted_str"}
{"instruction": "Design a Python class for performing a heap sort on an array.", "input": "", "output": "class HeapSort: \n  \n    def __init__(self, array): \n        self.array = array \n  \n    def sort(self): \n        n = len(self.array) \n  \n        # Build a maxheap \n        for i in range(n // 2 - 1, -1, -1): \n            self._heapify(n, i) \n  \n        # One by one extract elements \n        for i in range(n - 1, 0, -1): \n            self.array[i], self.array[0] = self.array[0], self.array[i]  # swap \n            self._heapify(i, 0) \n  \n    def _heapify(self, n, i): \n        largest = i  # Initialize largest as root \n        l = 2 * i + 1  # left = 2*i + 1 \n        r = 2 * i + 2  # right = 2*i + 2 \n  \n        # See if left child of root exists and is \n        # greater than root \n        if l < n and self.array[i] < self.array[l]: \n            largest = l \n  \n        # See if right child of root exists and is \n        # greater than root \n        if r < n and self.array[largest] < self.array[r]: \n            largest = r \n  \n        # Change root, if needed \n        if largest != i: \n            self.array[i], self.array[largest] = self.array[largest], self.array[i]  # swap \n  \n            # Heapify the root \n            self._heapify(n, largest)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for performing a heap sort on an array.\n\n### Input:\n\n\n### Output:\nclass HeapSort: \n  \n    def __init__(self, array): \n        self.array = array \n  \n    def sort(self): \n        n = len(self.array) \n  \n        # Build a maxheap \n        for i in range(n // 2 - 1, -1, -1): \n            self._heapify(n, i) \n  \n        # One by one extract elements \n        for i in range(n - 1, 0, -1): \n            self.array[i], self.array[0] = self.array[0], self.array[i]  # swap \n            self._heapify(i, 0) \n  \n    def _heapify(self, n, i): \n        largest = i  # Initialize largest as root \n        l = 2 * i + 1  # left = 2*i + 1 \n        r = 2 * i + 2  # right = 2*i + 2 \n  \n        # See if left child of root exists and is \n        # greater than root \n        if l < n and self.array[i] < self.array[l]: \n            largest = l \n  \n        # See if right child of root exists and is \n        # greater than root \n        if r < n and self.array[largest] < self.array[r]: \n            largest = r \n  \n        # Change root, if needed \n        if largest != i: \n            self.array[i], self.array[largest] = self.array[largest], self.array[i]  # swap \n  \n            # Heapify the root \n            self._heapify(n, largest)"}
{"instruction": "Develop an AI Application in Python to detect facial emotion.", "input": "", "output": "# import relevant libraries\nimport cv2\nimport numpy as np\n\n# load the pre-trained CascadeClassifier model\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n\n# define the facial emotion recognizer\ndef recognize_emotion(img):\n    # convert the image to grayscale for better processing\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # detect the faces\n    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n    # if no face is detected\n    if len(faces) == 0:\n        return None, None\n    # if faces are detected\n    else:\n        # extract the coordinates of the face\n        x,y,w,h = faces[0] \n        # crop the detected face\n        face = gray[y:y+h, x:x+w]\n        # Return both the face and coordinates\n        return face, faces[0]\n\n# capture the video from the webcam \ncam = cv2.VideoCapture(0)\n\nwhile True:\n    # Read the frame\n    ret, img = cam.read()\n    # Detect the faces\n    face, rect = recognize_emotion(img)\n    # Draw the detected rectangle\n    if rect is not None:\n        (x,y,w,h) = rect\n        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2) \n    # Draw the resulting image\n    cv2.imshow('FaceDetection', img)\n    # Stop if escape key is pressed\n    if cv2.waitKey(1) == 27: \n        break \n# Release the VideoCapture object\ncam.release()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI Application in Python to detect facial emotion.\n\n### Input:\n\n\n### Output:\n# import relevant libraries\nimport cv2\nimport numpy as np\n\n# load the pre-trained CascadeClassifier model\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n\n# define the facial emotion recognizer\ndef recognize_emotion(img):\n    # convert the image to grayscale for better processing\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # detect the faces\n    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n    # if no face is detected\n    if len(faces) == 0:\n        return None, None\n    # if faces are detected\n    else:\n        # extract the coordinates of the face\n        x,y,w,h = faces[0] \n        # crop the detected face\n        face = gray[y:y+h, x:x+w]\n        # Return both the face and coordinates\n        return face, faces[0]\n\n# capture the video from the webcam \ncam = cv2.VideoCapture(0)\n\nwhile True:\n    # Read the frame\n    ret, img = cam.read()\n    # Detect the faces\n    face, rect = recognize_emotion(img)\n    # Draw the detected rectangle\n    if rect is not None:\n        (x,y,w,h) = rect\n        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2) \n    # Draw the resulting image\n    cv2.imshow('FaceDetection', img)\n    # Stop if escape key is pressed\n    if cv2.waitKey(1) == 27: \n        break \n# Release the VideoCapture object\ncam.release()"}
{"instruction": "Create a Django application in Python to display a news feed.", "input": "", "output": "# Create a Django project with a newsfeed app\n$ django-admin startproject django_newsfeed \n$ python manage.py startapp newsfeed \n\n# Add the app to the installed apps list\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'newsfeed',\n]\n\n# Create models\nfrom django.db import models\nfrom django.utils import timezone\n\nclass NewsFeedEntry(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(default=timezone.now)\n    published_at = models.DateTimeField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\n# Migrate the database\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n# Create a view for the list of NewsFeed entries\nfrom django.shortcuts import render\nfrom .models import NewsFeedEntry\n\ndef index(request):\n    entries = NewsFeedEntry.objects.all()\n    context = {\n        'entries': entries\n    }\n    return render(request, 'newsfeed/index.html', context)\n\n# Create a template for the newsfeed entries\n<h1>NewsFeed</h1>\n<ul>\n    {% for entry in entries %}\n    <li><a href=\"#\">{{ entry.title }}</a></li>\n    {% endfor %}\n</ul>", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django application in Python to display a news feed.\n\n### Input:\n\n\n### Output:\n# Create a Django project with a newsfeed app\n$ django-admin startproject django_newsfeed \n$ python manage.py startapp newsfeed \n\n# Add the app to the installed apps list\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'newsfeed',\n]\n\n# Create models\nfrom django.db import models\nfrom django.utils import timezone\n\nclass NewsFeedEntry(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(default=timezone.now)\n    published_at = models.DateTimeField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\n# Migrate the database\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n# Create a view for the list of NewsFeed entries\nfrom django.shortcuts import render\nfrom .models import NewsFeedEntry\n\ndef index(request):\n    entries = NewsFeedEntry.objects.all()\n    context = {\n        'entries': entries\n    }\n    return render(request, 'newsfeed/index.html', context)\n\n# Create a template for the newsfeed entries\n<h1>NewsFeed</h1>\n<ul>\n    {% for entry in entries %}\n    <li><a href=\"#\">{{ entry.title }}</a></li>\n    {% endfor %}\n</ul>"}
{"instruction": "Construct a Python class for playing 'Rock, Paper, Scissors'.", "input": "", "output": "class Game:\n    def __init__(self):\n        pass\n    \n    def play_game(self, player_choice):\n        # list of possible choices\n        choices = [\"rock\", \"paper\", \"scissors\"]\n        \n        # randomly choose one from the list\n        computer_choice = choices[random.randint(0, 2)]\n        \n        # compare choice\n        # rock beats scissors\n        if computer_choice == choices[0] and player_choice == choices[2]:\n            print(\"Computer chose rock. You lose.\")\n        elif computer_choice == choices[2] and player_choice == choices[0]:\n            print(\"Computer chose scissors. You win.\")\n            \n        # paper beats rock\n        elif computer_choice == choices[1] and player_choice == choices[0]:\n            print(\"Computer chose paper. You lose.\")\n        elif computer_choice == choices[0] and player_choice == choices[1]:\n            print(\"Computer chose rock. You win.\")\n            \n        # scissors beats paper\n        elif computer_choice == choices[2] and player_choice == choices[1]:\n            print(\"Computer chose scissors. You lose.\")\n        elif computer_choice == choices[1] and player_choice == choices[2]:\n            print(\"Computer chose paper. You win.\")\n            \n        # draw\n        elif computer_choice == player_choice:\n            print(\"Computer chose the same thing. Draw.\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python class for playing 'Rock, Paper, Scissors'.\n\n### Input:\n\n\n### Output:\nclass Game:\n    def __init__(self):\n        pass\n    \n    def play_game(self, player_choice):\n        # list of possible choices\n        choices = [\"rock\", \"paper\", \"scissors\"]\n        \n        # randomly choose one from the list\n        computer_choice = choices[random.randint(0, 2)]\n        \n        # compare choice\n        # rock beats scissors\n        if computer_choice == choices[0] and player_choice == choices[2]:\n            print(\"Computer chose rock. You lose.\")\n        elif computer_choice == choices[2] and player_choice == choices[0]:\n            print(\"Computer chose scissors. You win.\")\n            \n        # paper beats rock\n        elif computer_choice == choices[1] and player_choice == choices[0]:\n            print(\"Computer chose paper. You lose.\")\n        elif computer_choice == choices[0] and player_choice == choices[1]:\n            print(\"Computer chose rock. You win.\")\n            \n        # scissors beats paper\n        elif computer_choice == choices[2] and player_choice == choices[1]:\n            print(\"Computer chose scissors. You lose.\")\n        elif computer_choice == choices[1] and player_choice == choices[2]:\n            print(\"Computer chose paper. You win.\")\n            \n        # draw\n        elif computer_choice == player_choice:\n            print(\"Computer chose the same thing. Draw.\")"}
{"instruction": "Construct an Object-Oriented design in Python to model a Book.", "input": "", "output": "class Book:\n    \n    def __init__(self, title, author, pages, publisher):\n        self.title = title\n        self.author = author\n        self.pages = pages\n        self.publisher = publisher\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_pages(self):\n        return self.pages\n    \n    def get_publisher(self):\n        return self.publisher", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an Object-Oriented design in Python to model a Book.\n\n### Input:\n\n\n### Output:\nclass Book:\n    \n    def __init__(self, title, author, pages, publisher):\n        self.title = title\n        self.author = author\n        self.pages = pages\n        self.publisher = publisher\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_pages(self):\n        return self.pages\n    \n    def get_publisher(self):\n        return self.publisher"}
{"instruction": "Write a generic Python data structure to hold last N elements.", "input": "", "output": "class LastNElements:\n    def __init__(self, n):\n        self.n = n\n        self.elements = []\n \n    def push(self, element):\n        if len(self.elements) < self.n:\n            self.elements.append(element)\n        else:\n            # Shift the elements to the left\n            for i in range(len(self.elements)-1):\n                self.elements[i] = self.elements[i+1]\n            self.elements[-1] = element\n \n    def get_elements(self):\n        return self.elements", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a generic Python data structure to hold last N elements.\n\n### Input:\n\n\n### Output:\nclass LastNElements:\n    def __init__(self, n):\n        self.n = n\n        self.elements = []\n \n    def push(self, element):\n        if len(self.elements) < self.n:\n            self.elements.append(element)\n        else:\n            # Shift the elements to the left\n            for i in range(len(self.elements)-1):\n                self.elements[i] = self.elements[i+1]\n            self.elements[-1] = element\n \n    def get_elements(self):\n        return self.elements"}
{"instruction": "Create an API in Python and deploy it with the Flask framework", "input": "", "output": "# import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API in Python and deploy it with the Flask framework\n\n### Input:\n\n\n### Output:\n# import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run()"}
{"instruction": "Generate a sequence of instructions to debug a Python Program.", "input": "", "output": "1. Check your syntax − Check if there is any syntax error in your program. \n2. Check for runtime errors − Check if the program can be compiled without errors.\n3. Check the logic − Check if your program follows the intended logic and produces desired output. \n4. Add logging and debugging statements − Use print statements or logging functions for trace debugging and test the program execution.\n5. Use a debugger − A debugger allows you to step through the execution of a program and inspect the values of variables at each step.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a sequence of instructions to debug a Python Program.\n\n### Input:\n\n\n### Output:\n1. Check your syntax − Check if there is any syntax error in your program. \n2. Check for runtime errors − Check if the program can be compiled without errors.\n3. Check the logic − Check if your program follows the intended logic and produces desired output. \n4. Add logging and debugging statements − Use print statements or logging functions for trace debugging and test the program execution.\n5. Use a debugger − A debugger allows you to step through the execution of a program and inspect the values of variables at each step."}
{"instruction": "Create a python program to implement a binary search algorithm", "input": "", "output": "def binary_search(arr, x): \n    # Set the initial midpoint\n    start = 0\n    end = len(arr) - 1 \n    mid = 0\n  \n    while (start<=end): \n  \n        mid = (start + end) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif arr[mid] > x: \n            end = mid - 1 \n  \n        # If x is present at mid \n        else: \n            return mid \n  \n    # If we reach here, then the element \n    # was not present \n    return -1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to implement a binary search algorithm\n\n### Input:\n\n\n### Output:\ndef binary_search(arr, x): \n    # Set the initial midpoint\n    start = 0\n    end = len(arr) - 1 \n    mid = 0\n  \n    while (start<=end): \n  \n        mid = (start + end) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif arr[mid] > x: \n            end = mid - 1 \n  \n        # If x is present at mid \n        else: \n            return mid \n  \n    # If we reach here, then the element \n    # was not present \n    return -1"}
{"instruction": "Generate a universal JSON serialization from any Python class.", "input": "", "output": "import json\n\ndef serialize_object(obj):\n    if hasattr(obj, '__dict__'):\n        return obj.__dict__\n    else:\n        return obj\n\ndef serialize_class(class_instance):\n    return json.dumps(class_instance, default=serialize_object)\n\nif __name__ == '__main__':\n    # Sample\n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n        def hello(self):\n            print(\"Hello, my name is {} and I'm {} years old\".format(self.name, self.age))\n    \n    person = Person('Jane', 20)\n    print(serialize_class(person))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a universal JSON serialization from any Python class.\n\n### Input:\n\n\n### Output:\nimport json\n\ndef serialize_object(obj):\n    if hasattr(obj, '__dict__'):\n        return obj.__dict__\n    else:\n        return obj\n\ndef serialize_class(class_instance):\n    return json.dumps(class_instance, default=serialize_object)\n\nif __name__ == '__main__':\n    # Sample\n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n        def hello(self):\n            print(\"Hello, my name is {} and I'm {} years old\".format(self.name, self.age))\n    \n    person = Person('Jane', 20)\n    print(serialize_class(person))"}
{"instruction": "Design a neural network in Python for predicting house prices.", "input": "", "output": "import tensorflow as tf \nfrom tensorflow import keras \n\n# create a Neural Network\nmodel = keras.Sequential([ \n    keras.layers.Dense(64, activation=tf.nn.relu, input_shape=(6,)), \n    keras.layers.Dense(64, activation=tf.nn.relu), \n    keras.layers.Dense(1) \n]) \n  \n# compile the model \nmodel.compile(optimizer = 'rmsprop', \n              loss = keras.losses.MeanSquaredError(), \n              metrics=['accuracy']) \n              \n# train the model\nmodel.fit(X_train, y_train, epochs=40) \n\n# test the model \ntest_loss, test_acc = model.evaluate(X_test, y_test) \n\nprint('Test accuracy:', test_acc)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python for predicting house prices.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf \nfrom tensorflow import keras \n\n# create a Neural Network\nmodel = keras.Sequential([ \n    keras.layers.Dense(64, activation=tf.nn.relu, input_shape=(6,)), \n    keras.layers.Dense(64, activation=tf.nn.relu), \n    keras.layers.Dense(1) \n]) \n  \n# compile the model \nmodel.compile(optimizer = 'rmsprop', \n              loss = keras.losses.MeanSquaredError(), \n              metrics=['accuracy']) \n              \n# train the model\nmodel.fit(X_train, y_train, epochs=40) \n\n# test the model \ntest_loss, test_acc = model.evaluate(X_test, y_test) \n\nprint('Test accuracy:', test_acc)"}
{"instruction": "Write a proper open-ended text classification model in Python.", "input": "", "output": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\n\n# preprocess and load the data\ndata = pd.read_csv('Dataset.csv')\nX = data['text']\ny = data['label']\n\nvectorizer = CountVectorizer(binary= True)\nX = vectorizer.fit_transform(X)\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3)\n\n# Train the model\nmodel = BernoulliNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy:', accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a proper open-ended text classification model in Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\n\n# preprocess and load the data\ndata = pd.read_csv('Dataset.csv')\nX = data['text']\ny = data['label']\n\nvectorizer = CountVectorizer(binary= True)\nX = vectorizer.fit_transform(X)\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3)\n\n# Train the model\nmodel = BernoulliNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy:', accuracy)"}
{"instruction": "Generate a code to implement the quicksort algorithm in Python", "input": "", "output": "\"\"\"\nImplement quicksort algorithm\n\"\"\"\ndef partition(arr,low,high): \n    i = ( low-1 )          \n    pivot = arr[high]     \n    for j in range(low , high): \n        if arr[j] <= pivot:             \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n  \ndef quick_sort(arr,low,high): \n    if low < high: \n        pi = partition(arr,low,high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nif __name__ == '__main__':\n    arr = [9,4,2,7,3,8,5,6]\n    n = len(arr) \n    quick_sort(arr,0,n-1)\n    print(\"The sorted array is:\")\n    for i in arr: \n        print (i),", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to implement the quicksort algorithm in Python\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplement quicksort algorithm\n\"\"\"\ndef partition(arr,low,high): \n    i = ( low-1 )          \n    pivot = arr[high]     \n    for j in range(low , high): \n        if arr[j] <= pivot:             \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n  \ndef quick_sort(arr,low,high): \n    if low < high: \n        pi = partition(arr,low,high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nif __name__ == '__main__':\n    arr = [9,4,2,7,3,8,5,6]\n    n = len(arr) \n    quick_sort(arr,0,n-1)\n    print(\"The sorted array is:\")\n    for i in arr: \n        print (i),"}
{"instruction": "Write code in Python to implement a linked list using classes.", "input": "", "output": "class Node:\n    \"\"\"Node class to represent the node in a linked list\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    \"\"\"LinkedList class to represent the entire linked list\"\"\"\n    def __init__(self):\n        self.head = None\n    \n    def print_list(self):\n        node = self.head\n        while(node):\n            print(node.data)\n            node = node.next\n\n# Creating a linked list \nlinked_list = LinkedList()\n\n# Creating the nodes\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\n# Linking the nodes\nlinked_list.head = node1\nnode1.next = node2\nnode2.next = node3\n\n# Printing the linked list\nlinked_list.print_list()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to implement a linked list using classes.\n\n### Input:\n\n\n### Output:\nclass Node:\n    \"\"\"Node class to represent the node in a linked list\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    \"\"\"LinkedList class to represent the entire linked list\"\"\"\n    def __init__(self):\n        self.head = None\n    \n    def print_list(self):\n        node = self.head\n        while(node):\n            print(node.data)\n            node = node.next\n\n# Creating a linked list \nlinked_list = LinkedList()\n\n# Creating the nodes\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\n# Linking the nodes\nlinked_list.head = node1\nnode1.next = node2\nnode2.next = node3\n\n# Printing the linked list\nlinked_list.print_list()"}
{"instruction": "Write a Python program to classify emails as spam or not spam.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load emails\nemails = pd.read_csv('emails.csv')\n\n# Create Multinomial Naive Bayes classifier\ntfidf = TfidfVectorizer(stop_words='english')\nX = tfidf.fit_transform(emails.email).toarray()\ny = emails.spam\nclassifier = MultinomialNB().fit(X,y)\n\n# Make predictions for new emails\nemail = [\"Hi, I am offering a great deal on your favorite products.\"]\nemail_transformed = tfidf.transform(email).toarray()\nprobability = classifier.predict_proba(email_transformed)\n\n# Show results\nif probability[0][1] > 0.5:\n    print(\"This email is marked as SPAM\")\nelse:\n    print(\"This email is NOT marked as SPAM\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load emails\nemails = pd.read_csv('emails.csv')\n\n# Create Multinomial Naive Bayes classifier\ntfidf = TfidfVectorizer(stop_words='english')\nX = tfidf.fit_transform(emails.email).toarray()\ny = emails.spam\nclassifier = MultinomialNB().fit(X,y)\n\n# Make predictions for new emails\nemail = [\"Hi, I am offering a great deal on your favorite products.\"]\nemail_transformed = tfidf.transform(email).toarray()\nprobability = classifier.predict_proba(email_transformed)\n\n# Show results\nif probability[0][1] > 0.5:\n    print(\"This email is marked as SPAM\")\nelse:\n    print(\"This email is NOT marked as SPAM\")"}
{"instruction": "Design and code an entry-level language interpreter in Python.", "input": "", "output": "class Interpreter:\n \n    def __init__(self):\n        self.opeartors = {\n            '+':   self.add,\n            '-':   self.sub,\n            '/':   self.div,\n            '*':   self.mul,\n        }\n \n    def parse(self, text):\n        expressions = text.split(' ')\n        return expressions\n \n    def evaluate(self, expressions):\n        operator = self.opeartors.get(expressions[1])\n        if not operator:\n            raise Exception('Invalid operator')\n        return operator(expressions[0], expressions[2])\n \n    def add(self, a, b):\n        return int(a) + int(b)\n \n    def sub(self, a, b):\n        return int(a) - int(b)\n \n    def div(self, a, b):\n        return int(a) / int(b)\n \n    def mul(self, a, b):\n        return int(a) * int(b)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and code an entry-level language interpreter in Python.\n\n### Input:\n\n\n### Output:\nclass Interpreter:\n \n    def __init__(self):\n        self.opeartors = {\n            '+':   self.add,\n            '-':   self.sub,\n            '/':   self.div,\n            '*':   self.mul,\n        }\n \n    def parse(self, text):\n        expressions = text.split(' ')\n        return expressions\n \n    def evaluate(self, expressions):\n        operator = self.opeartors.get(expressions[1])\n        if not operator:\n            raise Exception('Invalid operator')\n        return operator(expressions[0], expressions[2])\n \n    def add(self, a, b):\n        return int(a) + int(b)\n \n    def sub(self, a, b):\n        return int(a) - int(b)\n \n    def div(self, a, b):\n        return int(a) / int(b)\n \n    def mul(self, a, b):\n        return int(a) * int(b)"}
{"instruction": "Write a python code to merge two sorted linked lists into one.", "input": "", "output": "class Node:\n    def __init__(self, value):\n        self.data = value\n        self.next = None\n \n \ndef merge_sorted_lists(head_a, head_b):\n    # Create a new linked list.\n    new_list = Node(None)\n    tail = new_list\n \n    current_a = head_a\n    current_b = head_b\n \n    while current_a is not None or current_b is not None:\n        if current_a is None:\n            tail.next = current_b\n            current_b = current_b.next\n        elif current_b is None:\n            tail.next = current_a\n            current_a = current_a.next\n        elif current_a.data <= current_b.data:\n            tail.next = current_a\n            current_a = current_a.next\n        else:\n            tail.next = current_b\n            current_b = current_b.next\n        tail = tail.next\n \n    return new_list.next", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to merge two sorted linked lists into one.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, value):\n        self.data = value\n        self.next = None\n \n \ndef merge_sorted_lists(head_a, head_b):\n    # Create a new linked list.\n    new_list = Node(None)\n    tail = new_list\n \n    current_a = head_a\n    current_b = head_b\n \n    while current_a is not None or current_b is not None:\n        if current_a is None:\n            tail.next = current_b\n            current_b = current_b.next\n        elif current_b is None:\n            tail.next = current_a\n            current_a = current_a.next\n        elif current_a.data <= current_b.data:\n            tail.next = current_a\n            current_a = current_a.next\n        else:\n            tail.next = current_b\n            current_b = current_b.next\n        tail = tail.next\n \n    return new_list.next"}
{"instruction": "Design a program in Python to encrypt data using AES algorithm", "input": "", "output": "from Crypto.Cipher import AES\n\n# the block size for the cipher object; must be 16, 24, or 32 for AES\nBLOCK_SIZE = 16\n\n# the character used for padding--with a block cipher such as AES, the value\n# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is\n# used to ensure that your value is always a multiple of BLOCK_SIZE\nPADDING = '{'\n\n# one-liner to sufficiently pad the text to be encrypted\npad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING\n\n# one-liners to encrypt/encode and decrypt/decode a string\n# encrypt with AES, encode with base64\nEncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))\nDecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)\n\n# generate a random secret key\nsecret = os.urandom(BLOCK_SIZE)\n\n# create a cipher object using the random secret\ncipher = AES.new(secret)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to encrypt data using AES algorithm\n\n### Input:\n\n\n### Output:\nfrom Crypto.Cipher import AES\n\n# the block size for the cipher object; must be 16, 24, or 32 for AES\nBLOCK_SIZE = 16\n\n# the character used for padding--with a block cipher such as AES, the value\n# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is\n# used to ensure that your value is always a multiple of BLOCK_SIZE\nPADDING = '{'\n\n# one-liner to sufficiently pad the text to be encrypted\npad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING\n\n# one-liners to encrypt/encode and decrypt/decode a string\n# encrypt with AES, encode with base64\nEncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))\nDecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)\n\n# generate a random secret key\nsecret = os.urandom(BLOCK_SIZE)\n\n# create a cipher object using the random secret\ncipher = AES.new(secret)"}
{"instruction": "Generate a code to create a linear regression model in python.", "input": "", "output": "\"\"\"\nLinear regression model in python\n\"\"\"\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Read the data from CSV\nX, y = np.loadtxt('data.csv', delimiter=',', unpack=True)\n\n# Calculate the mean of X and y\nmean_x = np.mean(X)\nmean_y = np.mean(y)\n\n# Calculate the b1 and b0\nb1 = np.sum([(xi-mean_x)*(yi-mean_y) for xi, yi in zip(X,y)])/np.sum([(xi-mean_x)**2 for xi in X])\nb0 = mean_y - (b1*mean_x)\n\n# Print coefficient values\nprint(b0, b1)\n\n# Calculate predicted values\ny_pred = [b0 + b1*xi for xi in X] \n\n# Calculate the coefficient of determination\nSS_res = np.sum([(yi-yp)**2 for yi, yp in zip(y, y_pred)])\nSS_tot = np.sum([(yi-mean_y)**2 for yi in y])\nR2 = 1-SS_res/SS_tot\n\n# Plot the data\nplt.scatter(X, y, color='c', label='data')\nplt.plot(X, y_pred, color='g', label='model')\nplt.title('Linear Regression Model. r2 = '+str(R2))\nplt.legend()\n# Show the plot \nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to create a linear regression model in python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nLinear regression model in python\n\"\"\"\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Read the data from CSV\nX, y = np.loadtxt('data.csv', delimiter=',', unpack=True)\n\n# Calculate the mean of X and y\nmean_x = np.mean(X)\nmean_y = np.mean(y)\n\n# Calculate the b1 and b0\nb1 = np.sum([(xi-mean_x)*(yi-mean_y) for xi, yi in zip(X,y)])/np.sum([(xi-mean_x)**2 for xi in X])\nb0 = mean_y - (b1*mean_x)\n\n# Print coefficient values\nprint(b0, b1)\n\n# Calculate predicted values\ny_pred = [b0 + b1*xi for xi in X] \n\n# Calculate the coefficient of determination\nSS_res = np.sum([(yi-yp)**2 for yi, yp in zip(y, y_pred)])\nSS_tot = np.sum([(yi-mean_y)**2 for yi in y])\nR2 = 1-SS_res/SS_tot\n\n# Plot the data\nplt.scatter(X, y, color='c', label='data')\nplt.plot(X, y_pred, color='g', label='model')\nplt.title('Linear Regression Model. r2 = '+str(R2))\nplt.legend()\n# Show the plot \nplt.show()"}
{"instruction": "Write a Python class to convert a roman numeral to an integer.", "input": "", "output": "class Roman_int():\n    def __init__(self, Roman_num):\n        self.roman_numeral = Roman_num\n\n    @staticmethod\n    def get_value(char):\n        if(char == 'I'):\n            return 1\n        elif(char == 'V'):\n            return 5\n        elif(char == 'X'):\n            return 10\n        elif(char == 'L'):\n            return 50\n        elif(char == 'C'):\n            return 100\n        elif(char == 'D'):\n            return 500\n        elif(char == 'M'):\n            return 1000\n\n    def get_integer(self):\n        num = 0\n        for i in range(len(self.roman_numeral)):\n            s1 = Roman_int.get_value(self.roman_numeral[i])\n            if (i+1 < len(self.roman_numeral)):\n                s2 = Roman_int.get_value(self.roman_numeral[i+1])\n                if s1 >= s2:\n                    num = num + s1\n                else:\n                    num = num + s2 - s1\n        return num", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to convert a roman numeral to an integer.\n\n### Input:\n\n\n### Output:\nclass Roman_int():\n    def __init__(self, Roman_num):\n        self.roman_numeral = Roman_num\n\n    @staticmethod\n    def get_value(char):\n        if(char == 'I'):\n            return 1\n        elif(char == 'V'):\n            return 5\n        elif(char == 'X'):\n            return 10\n        elif(char == 'L'):\n            return 50\n        elif(char == 'C'):\n            return 100\n        elif(char == 'D'):\n            return 500\n        elif(char == 'M'):\n            return 1000\n\n    def get_integer(self):\n        num = 0\n        for i in range(len(self.roman_numeral)):\n            s1 = Roman_int.get_value(self.roman_numeral[i])\n            if (i+1 < len(self.roman_numeral)):\n                s2 = Roman_int.get_value(self.roman_numeral[i+1])\n                if s1 >= s2:\n                    num = num + s1\n                else:\n                    num = num + s2 - s1\n        return num"}
{"instruction": "Implement a python program to perform document classification.", "input": "", "output": "import numpy as np\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\nnewsgroups_train = fetch_20newsgroups(subset='train', shuffle=True)\n\n# Create bag of words\ncount_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(newsgroups_train.data)\n\n# Creating vectors\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n\n# Create classifier\nclf = MultinomialNB().fit(X_train_tfidf, newsgroups_train.target)\n\n# Get input document to classify\ndocs_new = ['God is love', 'OpenGL on the GPU is fast']\nX_new_counts = count_vect.transform(docs_new)\nX_new_tfidf = tfidf_transformer.transform(X_new_counts)\n\n# Predicted categories for input document\nprint(clf.predict(X_new_tfidf))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a python program to perform document classification.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\nnewsgroups_train = fetch_20newsgroups(subset='train', shuffle=True)\n\n# Create bag of words\ncount_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(newsgroups_train.data)\n\n# Creating vectors\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n\n# Create classifier\nclf = MultinomialNB().fit(X_train_tfidf, newsgroups_train.target)\n\n# Get input document to classify\ndocs_new = ['God is love', 'OpenGL on the GPU is fast']\nX_new_counts = count_vect.transform(docs_new)\nX_new_tfidf = tfidf_transformer.transform(X_new_counts)\n\n# Predicted categories for input document\nprint(clf.predict(X_new_tfidf))"}
{"instruction": "Construct a program in Python that finds the nth prime number.", "input": "", "output": "\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python that finds the nth prime number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)"}
{"instruction": "Write a Python program that can recognize handwritten letters.", "input": "", "output": "import numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Build the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(\n optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can recognize handwritten letters.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Build the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(\n optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)"}
{"instruction": "Create a Python class that implements a Linked List structure.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n\n    def insert(self, new_node):\n        temp = self.head \n  \n        if temp is None: \n            self.head = new_node \n            return \n  \n        while temp.next is not None: \n            temp = temp.next\n\n        temp.next = new_node\n#\n5. Instruction: Given a list of integers, write a Python program to find the longest increasing sub-sequence from the given list.\n5. Input:\n[2, 3, 4, 5, 6, 1, 7, 8]\n5. Output:\ndef longestIncreasingSubsequence(arr): \n    n = len(arr) \n  \n    lis = [1]*n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum\n\narr = [2, 3, 4, 5, 6, 1, 7, 8]\nprint(\"Length of Longest Increasing Subsequence is\", longestIncreasingSubsequence(arr))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that implements a Linked List structure.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n\n    def insert(self, new_node):\n        temp = self.head \n  \n        if temp is None: \n            self.head = new_node \n            return \n  \n        while temp.next is not None: \n            temp = temp.next\n\n        temp.next = new_node\n#\n5. Instruction: Given a list of integers, write a Python program to find the longest increasing sub-sequence from the given list.\n5. Input:\n[2, 3, 4, 5, 6, 1, 7, 8]\n5. Output:\ndef longestIncreasingSubsequence(arr): \n    n = len(arr) \n  \n    lis = [1]*n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum\n\narr = [2, 3, 4, 5, 6, 1, 7, 8]\nprint(\"Length of Longest Increasing Subsequence is\", longestIncreasingSubsequence(arr))"}
{"instruction": "Write Python code to build an ensembler for sentiment analysis", "input": "", "output": "import pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nclass Ensembler(object):\n\n    def __init__(self):\n        self.ensemble_model = None\n\n    def build_model(self, X, y):\n        # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier\n        nb_classifier = BernoulliNB()\n        log_classifier = LogisticRegression()\n        vectorizer = DictVectorizer()\n\n        X_vectorized = vectorizer.fit_transform(X).toarray()\n\n        voting_model = VotingClassifier(\n            estimators=[\n                ('nb', nb_classifier), \n                ('log', log_classifier)\n            ], \n            voting='soft', \n            n_jobs=-1\n            )\n\n        self.ensemble_model = voting_model.fit(X_vectorized, y)\n\n    def predict(self, X):\n        X_vectorized = self.vectorizer.transform(X).toarray()\n        return self.ensemble_model.predict(X_vectorized)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to build an ensembler for sentiment analysis\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nclass Ensembler(object):\n\n    def __init__(self):\n        self.ensemble_model = None\n\n    def build_model(self, X, y):\n        # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier\n        nb_classifier = BernoulliNB()\n        log_classifier = LogisticRegression()\n        vectorizer = DictVectorizer()\n\n        X_vectorized = vectorizer.fit_transform(X).toarray()\n\n        voting_model = VotingClassifier(\n            estimators=[\n                ('nb', nb_classifier), \n                ('log', log_classifier)\n            ], \n            voting='soft', \n            n_jobs=-1\n            )\n\n        self.ensemble_model = voting_model.fit(X_vectorized, y)\n\n    def predict(self, X):\n        X_vectorized = self.vectorizer.transform(X).toarray()\n        return self.ensemble_model.predict(X_vectorized)"}
{"instruction": "Consider a way to detect malicious HTTP requests using Python.", "input": "", "output": "\"\"\"\nDetect malicious HTTP requests using Python\n\"\"\"\nimport requests\nfrom urllib.parse import urlparse\nimport re\n\ndef detect_malicious_requests(url):\n    # Parse the URL\n    parsed_url = urlparse(url)\n\n    # Check for malicious URL patterns\n    malicious_patterns = [\n        r\"\\.exe$\",\n        r\"\\.js$\",\n        r\"\\.gz$\",\n        r\"\\.bat$\",\n        r\"\\.zip$\",\n        r\"\\.php$\",\n        r\"\\.sh$\",\n        r\"\\.json$\"\n    ]\n    for pattern in malicious_patterns:\n        if re.search(pattern, parsed_url.path):\n            return \"MALICIOUS\"\n\n    # Check for suspicious file extensions\n    suspicious_file_extensions = [\n        \".xml\",\n        \".config\",\n        \".log\",\n        \".ini\"\n    ]\n    for extension in suspicious_file_extensions:\n        if parsed_url.path.endswith(extension):\n            return \"SUSPICIOUS\"\n\n    # Check for HTTP status codes\n    response = requests.get(url)\n    if response.status_code == 401:\n        return \"MALICIOUS\"\n\n    return \"SAFE\"\n\nif __name__ == '__main__':\n    url = \"http://example.com/index.php\"\n    print(detect_malicious_requests(url))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConsider a way to detect malicious HTTP requests using Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDetect malicious HTTP requests using Python\n\"\"\"\nimport requests\nfrom urllib.parse import urlparse\nimport re\n\ndef detect_malicious_requests(url):\n    # Parse the URL\n    parsed_url = urlparse(url)\n\n    # Check for malicious URL patterns\n    malicious_patterns = [\n        r\"\\.exe$\",\n        r\"\\.js$\",\n        r\"\\.gz$\",\n        r\"\\.bat$\",\n        r\"\\.zip$\",\n        r\"\\.php$\",\n        r\"\\.sh$\",\n        r\"\\.json$\"\n    ]\n    for pattern in malicious_patterns:\n        if re.search(pattern, parsed_url.path):\n            return \"MALICIOUS\"\n\n    # Check for suspicious file extensions\n    suspicious_file_extensions = [\n        \".xml\",\n        \".config\",\n        \".log\",\n        \".ini\"\n    ]\n    for extension in suspicious_file_extensions:\n        if parsed_url.path.endswith(extension):\n            return \"SUSPICIOUS\"\n\n    # Check for HTTP status codes\n    response = requests.get(url)\n    if response.status_code == 401:\n        return \"MALICIOUS\"\n\n    return \"SAFE\"\n\nif __name__ == '__main__':\n    url = \"http://example.com/index.php\"\n    print(detect_malicious_requests(url))"}
{"instruction": "Create a Python program to implement a selection sort algorithm", "input": "", "output": "def selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement a selection sort algorithm\n\n### Input:\n\n\n### Output:\ndef selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr"}
{"instruction": "Design a program in Python to implement a queue data structure.", "input": "", "output": "class Queue:\n     # Initialize the queue \n    def __init__(self): \n        self.items = [] \n\n    # Add an element to the queue \n    def enqueue(self, item): \n        self.items.insert(0, item) \n\n    # Remove the last element from the queue \n    def dequeue(self): \n        return self.items.pop() \n\n    # Check if the queue is empty \n    def isEmpty(self): \n        return self.items == [] \n\n    # Get the size of the queue \n    def size(self): \n        return len(self.items)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to implement a queue data structure.\n\n### Input:\n\n\n### Output:\nclass Queue:\n     # Initialize the queue \n    def __init__(self): \n        self.items = [] \n\n    # Add an element to the queue \n    def enqueue(self, item): \n        self.items.insert(0, item) \n\n    # Remove the last element from the queue \n    def dequeue(self): \n        return self.items.pop() \n\n    # Check if the queue is empty \n    def isEmpty(self): \n        return self.items == [] \n\n    # Get the size of the queue \n    def size(self): \n        return len(self.items)"}
{"instruction": "Implement a web server in Python to serve static HTML webpages.", "input": "", "output": "from http.server import CGIHTTPRequestHandler, HTTPServer\n\nclass MyHTTPServer(CGIHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        file = open('index.html', 'r')\n        html = file.read()\n        file.close()\n        self.wfile.write(html.encode())\n\nserver = HTTPServer(('', 8080), MyHTTPServer)\nprint(\"Starting server at http://localhost:8080\")\nserver.serve_forever()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web server in Python to serve static HTML webpages.\n\n### Input:\n\n\n### Output:\nfrom http.server import CGIHTTPRequestHandler, HTTPServer\n\nclass MyHTTPServer(CGIHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        file = open('index.html', 'r')\n        html = file.read()\n        file.close()\n        self.wfile.write(html.encode())\n\nserver = HTTPServer(('', 8080), MyHTTPServer)\nprint(\"Starting server at http://localhost:8080\")\nserver.serve_forever()"}
{"instruction": "Come up with a solution to parse an HTML document using Python.", "input": "", "output": "Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution to parse an HTML document using Python.\n\n### Input:\n\n\n### Output:\nUsing the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document."}
{"instruction": "Create a program that prints out a directory of a given folder.", "input": "", "output": "# Python program to print a directory of a given folder \n\n\nimport os \n\n# Function to get Directory Listing \ndef directoryListing(dirname): \n\n\t# Create list to hold filenames \n\tfilenames = os.listdir(dirname) \n\n\t# Print the Directory Contents \n\tprint(\"Directory contents of \"+dirname +\": \") \n\tfor file in filenames: \n\t\tprint(file) \n\n# Driver Code \nif __name__ == '__main__': \n\n\t# Provide the relative path \n\tdirname = '.'\n\n\t# Calling Directory Listing Function \n\tdirectoryListing(dirname)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that prints out a directory of a given folder.\n\n### Input:\n\n\n### Output:\n# Python program to print a directory of a given folder \n\n\nimport os \n\n# Function to get Directory Listing \ndef directoryListing(dirname): \n\n\t# Create list to hold filenames \n\tfilenames = os.listdir(dirname) \n\n\t# Print the Directory Contents \n\tprint(\"Directory contents of \"+dirname +\": \") \n\tfor file in filenames: \n\t\tprint(file) \n\n# Driver Code \nif __name__ == '__main__': \n\n\t# Provide the relative path \n\tdirname = '.'\n\n\t# Calling Directory Listing Function \n\tdirectoryListing(dirname)"}
{"instruction": "Generate Python code to sort a given list using insertion sort.", "input": "", "output": "def insertion_sort(list):\n    \"\"\"\n    Sort a given list using insertion sort.\n    list: the list to be sorted\n    \"\"\"\n    # loop through each element in the list, starting from the second element\n    for i in range(1, len(list)):  \n        temp = list[i] \n  \n        # find the position where the current element should be inserted\n        j = i-1\n        while j >= 0 and temp < list[j] : \n                list[j+1] = list[j] \n                j -= 1\n        list[j+1] = temp \n  \n    return list", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to sort a given list using insertion sort.\n\n### Input:\n\n\n### Output:\ndef insertion_sort(list):\n    \"\"\"\n    Sort a given list using insertion sort.\n    list: the list to be sorted\n    \"\"\"\n    # loop through each element in the list, starting from the second element\n    for i in range(1, len(list)):  \n        temp = list[i] \n  \n        # find the position where the current element should be inserted\n        j = i-1\n        while j >= 0 and temp < list[j] : \n                list[j+1] = list[j] \n                j -= 1\n        list[j+1] = temp \n  \n    return list"}
{"instruction": "Optimize a Python program for performing matrix multiplication.", "input": "", "output": "def MatrixMultiplication(A, B): \n    # Dimensions of A \n    m = len(A) \n    p = len(A[0]) \n    # Dimensions of B \n    q = len(B) \n    r = len(B[0]) \n    # Generating the result matrix \n    # C with dimensions m x r \n    C = [[0 for row in range(0, r)] for col in range(0, m)] \n    for i in range(0, m): \n        for j in range(0, r): \n            for k in range(0, p): \n                # Performing the multiplication operation \n                C[i][j] += A[i][k] * B[k][j] \n    # Printing the result matrix \n    return C", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program for performing matrix multiplication.\n\n### Input:\n\n\n### Output:\ndef MatrixMultiplication(A, B): \n    # Dimensions of A \n    m = len(A) \n    p = len(A[0]) \n    # Dimensions of B \n    q = len(B) \n    r = len(B[0]) \n    # Generating the result matrix \n    # C with dimensions m x r \n    C = [[0 for row in range(0, r)] for col in range(0, m)] \n    for i in range(0, m): \n        for j in range(0, r): \n            for k in range(0, p): \n                # Performing the multiplication operation \n                C[i][j] += A[i][k] * B[k][j] \n    # Printing the result matrix \n    return C"}
{"instruction": "Generate a Python class that sorts the elements of a given list", "input": "", "output": "\"\"\"\nGenerate a Python class that sorts the elements of a given list\n\"\"\"\n\nclass Sort:\n    def __init__(self, lst):\n        self.lst = lst\n\n    def bubble_sort(self):\n        length = len(self.lst)\n        for i in range(length):\n            for j in range(length - i -1):\n                if self.lst[j] > self.lst[j + 1]:\n                    self.lst[j], self.lst[j + 1] = self.lst[j + 1], self.lst[j]\n        return self.lst\n\nif __name__ == '__main__':\n    lst = [7, 3, 2, 9, 1]\n    s = Sort(lst)\n    print(s.bubble_sort())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class that sorts the elements of a given list\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a Python class that sorts the elements of a given list\n\"\"\"\n\nclass Sort:\n    def __init__(self, lst):\n        self.lst = lst\n\n    def bubble_sort(self):\n        length = len(self.lst)\n        for i in range(length):\n            for j in range(length - i -1):\n                if self.lst[j] > self.lst[j + 1]:\n                    self.lst[j], self.lst[j + 1] = self.lst[j + 1], self.lst[j]\n        return self.lst\n\nif __name__ == '__main__':\n    lst = [7, 3, 2, 9, 1]\n    s = Sort(lst)\n    print(s.bubble_sort())"}
{"instruction": "Develop a custom classifier in Python to detect malicious URLs.", "input": "", "output": "import pandas as pd\nfrom sklearn import svm\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# read in train/test data\ndf_train = pd.read_csv('train_data.csv')\ndf_test = pd.read_csv('test_data.csv')\n\n# Vectorize the data\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(df_train.url)\nX_test = vectorizer.transform(df_test.url)\n\n# Fit the model\nmodel = svm.SVC(kernel='linear', probability=True)\nmodel.fit(X_train, df_train.malicious)\n\n# Make predictions\npredictions = model.predict_proba(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a custom classifier in Python to detect malicious URLs.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn import svm\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# read in train/test data\ndf_train = pd.read_csv('train_data.csv')\ndf_test = pd.read_csv('test_data.csv')\n\n# Vectorize the data\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(df_train.url)\nX_test = vectorizer.transform(df_test.url)\n\n# Fit the model\nmodel = svm.SVC(kernel='linear', probability=True)\nmodel.fit(X_train, df_train.malicious)\n\n# Make predictions\npredictions = model.predict_proba(X_test)"}
{"instruction": "Describe the differences between objects and classes in Python.", "input": "", "output": "Objects are instances of classes and are used to store data and behavior. Class is a blueprint or template for objects. It defines the attributes and methods of an object. Classes are typically used to represent real world objects or concepts and encapsulate both data and behavior. Objects are essentially specific instances of a class and can be created by instantiating the class. Objects are used to interact with the user and manipulate data. They are also used to create relationships between objects and between classes.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe the differences between objects and classes in Python.\n\n### Input:\n\n\n### Output:\nObjects are instances of classes and are used to store data and behavior. Class is a blueprint or template for objects. It defines the attributes and methods of an object. Classes are typically used to represent real world objects or concepts and encapsulate both data and behavior. Objects are essentially specific instances of a class and can be created by instantiating the class. Objects are used to interact with the user and manipulate data. They are also used to create relationships between objects and between classes."}
{"instruction": "Write a Python script to solve a partial differential equation.", "input": "", "output": "import numpy as np\nimport scipy.special\nfrom scipy.integrate import ode\n\ndef pde_solve(u0, t0, t1, dt):\n    # Define the right-hand side\n    def f(t, u, args):\n        dudt = args*u\n        return dudt\n    \n    # Create the solver\n    solver = ode(f).set_integrator('dopri5', method='adams')\n    solver.set_initial_value(u0, t0).set_f_params(args)\n    \n    # Solve the equation\n    t = t0\n    u = u0\n    while solver.successful() and solver.t < t1:\n        u = solver.integrate(solver.t + dt)\n        t = solver.t\n    \n    return u", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to solve a partial differential equation.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport scipy.special\nfrom scipy.integrate import ode\n\ndef pde_solve(u0, t0, t1, dt):\n    # Define the right-hand side\n    def f(t, u, args):\n        dudt = args*u\n        return dudt\n    \n    # Create the solver\n    solver = ode(f).set_integrator('dopri5', method='adams')\n    solver.set_initial_value(u0, t0).set_f_params(args)\n    \n    # Solve the equation\n    t = t0\n    u = u0\n    while solver.successful() and solver.t < t1:\n        u = solver.integrate(solver.t + dt)\n        t = solver.t\n    \n    return u"}
{"instruction": "Create a Python class to classify emails with machine learning.", "input": "", "output": "class EmailClassifier: \n  \n    # Initialize the vectorizer and classifier \n    def __init__(self): \n        self.vectorizer = TfidfVectorizer(stop_words=\"english\") \n        self.classifier = MultinomialNB() \n  \n    # Fit the emails to the vectorizer \n    def fit(self, emails, labels): \n        self.vectorizer.fit(emails) \n        self.classifier.fit(self.vectorize(emails), labels) \n  \n    # Transform the emails to a vectorized form \n    def vectorize(self, emails): \n        return self.vectorizer.transform(emails) \n  \n    # Predict the labels for the emails \n    def predict(self, emails): \n        return self.classifier.predict(self.vectorize(emails))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to classify emails with machine learning.\n\n### Input:\n\n\n### Output:\nclass EmailClassifier: \n  \n    # Initialize the vectorizer and classifier \n    def __init__(self): \n        self.vectorizer = TfidfVectorizer(stop_words=\"english\") \n        self.classifier = MultinomialNB() \n  \n    # Fit the emails to the vectorizer \n    def fit(self, emails, labels): \n        self.vectorizer.fit(emails) \n        self.classifier.fit(self.vectorize(emails), labels) \n  \n    # Transform the emails to a vectorized form \n    def vectorize(self, emails): \n        return self.vectorizer.transform(emails) \n  \n    # Predict the labels for the emails \n    def predict(self, emails): \n        return self.classifier.predict(self.vectorize(emails))"}
{"instruction": "Write a Python class which implements the Quick-Sort algorithm.", "input": "", "output": "class QuickSort(object):\n    \n    def __init__(self, array):\n        self.array = array\n    \n    def partition(self, low, high):\n        i = low - 1\n        pivot = self.array[high]\n        for j in range(low, high):\n            if self.array[j] <= pivot:\n                i = i + 1\n                self.array[i], self.array[j] = self.array[j], self.array[i]\n        self.array[i + 1], self.array[high] = self.array[high], self.array[i + 1]\n        return i + 1\n    \n    def quick_sort(self, low, high):\n        if low < high:\n            partition_index = self.partition(low, high)\n            self.quick_sort(low, partition_index - 1)\n            self.quick_sort(partition_index + 1, high)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class which implements the Quick-Sort algorithm.\n\n### Input:\n\n\n### Output:\nclass QuickSort(object):\n    \n    def __init__(self, array):\n        self.array = array\n    \n    def partition(self, low, high):\n        i = low - 1\n        pivot = self.array[high]\n        for j in range(low, high):\n            if self.array[j] <= pivot:\n                i = i + 1\n                self.array[i], self.array[j] = self.array[j], self.array[i]\n        self.array[i + 1], self.array[high] = self.array[high], self.array[i + 1]\n        return i + 1\n    \n    def quick_sort(self, low, high):\n        if low < high:\n            partition_index = self.partition(low, high)\n            self.quick_sort(low, partition_index - 1)\n            self.quick_sort(partition_index + 1, high)"}
{"instruction": "Build a neural network in Python that classifies cats and dogs.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow import keras\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(512, activation='relu'))\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer=keras.optimizers.RMSprop(lr=1e-4), metrics=['acc'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a neural network in Python that classifies cats and dogs.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(512, activation='relu'))\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer=keras.optimizers.RMSprop(lr=1e-4), metrics=['acc'])"}
{"instruction": "Develop a function in Python that reverses a given linked list.", "input": "", "output": "# Node class \nclass Node: \n \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n \n    # Function to initialize the Linked List object \n    def __init__(self):  \n        self.head = None\n \n    # Function to reverse linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n\n# Code execution starts here \nif __name__=='__main__': \n    # Start with the empty list \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n    llist.head.next = second; # Link first node with second  \n    second.next = third; # Link second node with the third node \n    llist.reverse()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that reverses a given linked list.\n\n### Input:\n\n\n### Output:\n# Node class \nclass Node: \n \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n \n    # Function to initialize the Linked List object \n    def __init__(self):  \n        self.head = None\n \n    # Function to reverse linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n\n# Code execution starts here \nif __name__=='__main__': \n    # Start with the empty list \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n    llist.head.next = second; # Link first node with second  \n    second.next = third; # Link second node with the third node \n    llist.reverse()"}
{"instruction": "Create a program to print a binary tree in reverse level order.", "input": "", "output": "# Python program to print reverse level \n# order traversal\n  \n# Binary Tree Node\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.left = None\n        self.right = None\n  \n#reverse Level Order Traversal \ndef reverseLevelOrder(root): \n    # Base Case \n    if root is None: \n        return\n  \n    # Create an empty queue for level order  \n    # traversal \n    q = []\n  \n    # Enqueue Root and initialize height \n    q.append(root) \n      \n    # Loop while there is at least one  \n    # discovered node \n    while(len(q) > 0): \n        # Print front of queue and remove it from queue \n        print(q[len(q)-1].data) \n        node = q.pop(len(q)-1) \n          \n        # Insert right child first \n        if node.right is not None: \n            q.append(node.right) \n          \n        # Insert left child \n        if node.left is not None: \n            q.append(node.left)  \n  \n#Driver Program\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n  \n# Function Call \nreverseLevelOrder(root)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to print a binary tree in reverse level order.\n\n### Input:\n\n\n### Output:\n# Python program to print reverse level \n# order traversal\n  \n# Binary Tree Node\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.left = None\n        self.right = None\n  \n#reverse Level Order Traversal \ndef reverseLevelOrder(root): \n    # Base Case \n    if root is None: \n        return\n  \n    # Create an empty queue for level order  \n    # traversal \n    q = []\n  \n    # Enqueue Root and initialize height \n    q.append(root) \n      \n    # Loop while there is at least one  \n    # discovered node \n    while(len(q) > 0): \n        # Print front of queue and remove it from queue \n        print(q[len(q)-1].data) \n        node = q.pop(len(q)-1) \n          \n        # Insert right child first \n        if node.right is not None: \n            q.append(node.right) \n          \n        # Insert left child \n        if node.left is not None: \n            q.append(node.left)  \n  \n#Driver Program\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n  \n# Function Call \nreverseLevelOrder(root)"}
{"instruction": "Create a program to simulate a 3 body orbital system in Python.", "input": "", "output": "import numpy as np\n\ndef simulateSystem(x1, v1, x2, v2, x3, v3, time):\n    G = 6.67 * 10**-11\n    m1, m2, m3 = 10, 5, 15 # mass of each body (in kilograms)\n    dt = time / 500.0 # time step\n    X = []\n    Y = []\n\n    for t in range(time):\n        # Compute forces\n        r12 = np.sqrt( (x2[0]-x1[0])**2 + (x2[1]-x1[1])**2 )\n        r23 = np.sqrt( (x3[0]-x2[0])**2 + (x3[1]-x2[1])**2 )\n        r13 = np.sqrt( (x3[0]-x1[0])**2 + (x3[1]-x1[1])**2 )\n\n        F12x = G * m1 * m2 * (x2[0] - x1[0]) / r12**3\n        F12y = G * m1 * m2 * (x2[1] - x1[1]) / r12**3\n\n        F23x = G * m2 * m3 * (x3[0] - x2[0]) / r23**3\n        F23y = G * m2 * m3 * (x3[1] - x2[1]) / r23**3\n\n        F31x = G * m3 * m1 * (x3[0] - x1[0]) / r13**3\n        F31y = G * m3 * m1 * (x3[1] - x1[1]) / r13**3\n\n        # Update position\n        x1[0] += v1[0] * dt\n        x1[1] += v1[1] * dt\n\n        x2[0] += v2[0] * dt\n        x2[1] += v2[1] * dt\n\n        x3[0] += v3[0] * dt\n        x3[1] += v3[1] * dt\n\n        # Update velocity\n        v1[0] += (F12x + F31x) * dt / m1\n        v1[1] += (F12y + F31y) * dt / m1\n\n        v2[0] += (F12x + F23x) * dt / m2\n        v2[1] += (F12y + F23y) * dt / m2\n\n        v3[0] += (F23x + F31x) * dt / m3\n        v3[1] += (F23y + F31y) * dt / m3\n\n        # Store trajectory\n        X.append(x1[0])\n        Y.append(x1[1])\n\n    return X, Y", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to simulate a 3 body orbital system in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef simulateSystem(x1, v1, x2, v2, x3, v3, time):\n    G = 6.67 * 10**-11\n    m1, m2, m3 = 10, 5, 15 # mass of each body (in kilograms)\n    dt = time / 500.0 # time step\n    X = []\n    Y = []\n\n    for t in range(time):\n        # Compute forces\n        r12 = np.sqrt( (x2[0]-x1[0])**2 + (x2[1]-x1[1])**2 )\n        r23 = np.sqrt( (x3[0]-x2[0])**2 + (x3[1]-x2[1])**2 )\n        r13 = np.sqrt( (x3[0]-x1[0])**2 + (x3[1]-x1[1])**2 )\n\n        F12x = G * m1 * m2 * (x2[0] - x1[0]) / r12**3\n        F12y = G * m1 * m2 * (x2[1] - x1[1]) / r12**3\n\n        F23x = G * m2 * m3 * (x3[0] - x2[0]) / r23**3\n        F23y = G * m2 * m3 * (x3[1] - x2[1]) / r23**3\n\n        F31x = G * m3 * m1 * (x3[0] - x1[0]) / r13**3\n        F31y = G * m3 * m1 * (x3[1] - x1[1]) / r13**3\n\n        # Update position\n        x1[0] += v1[0] * dt\n        x1[1] += v1[1] * dt\n\n        x2[0] += v2[0] * dt\n        x2[1] += v2[1] * dt\n\n        x3[0] += v3[0] * dt\n        x3[1] += v3[1] * dt\n\n        # Update velocity\n        v1[0] += (F12x + F31x) * dt / m1\n        v1[1] += (F12y + F31y) * dt / m1\n\n        v2[0] += (F12x + F23x) * dt / m2\n        v2[1] += (F12y + F23y) * dt / m2\n\n        v3[0] += (F23x + F31x) * dt / m3\n        v3[1] += (F23y + F31y) * dt / m3\n\n        # Store trajectory\n        X.append(x1[0])\n        Y.append(x1[1])\n\n    return X, Y"}
{"instruction": "Write code to generate a random 3x3 tic-tac-toe board in Python.", "input": "", "output": "import random\n\n# our tic-tac-toe board\nboard = []\n\n# function to generate a random 3x3 tic-tac-toe board\ndef generate_board():\n  # create a 3x3 board\n  board = [[0 for i in range(3)] for j in range(3)]\n\n  # populate the board randomly\n  for row in range(3):\n    for col in range(3):\n      board[row][col] = random.choice(['X','O'])\n\n  return board\n\n# print the generated board\nboard = generate_board()\nfor row in board:\n  print(row)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to generate a random 3x3 tic-tac-toe board in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# our tic-tac-toe board\nboard = []\n\n# function to generate a random 3x3 tic-tac-toe board\ndef generate_board():\n  # create a 3x3 board\n  board = [[0 for i in range(3)] for j in range(3)]\n\n  # populate the board randomly\n  for row in range(3):\n    for col in range(3):\n      board[row][col] = random.choice(['X','O'])\n\n  return board\n\n# print the generated board\nboard = generate_board()\nfor row in board:\n  print(row)"}
{"instruction": "Write a python program to verify that an email address is valid.", "input": "", "output": "import re \n  \n# function to validate an Email \ndef validate_email(email): \n      \n    # make a regular expression \n    # for validating an Email \n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if (re.search(regex, email)): \n        print(\"Valid Email\")  \n    else: \n        print(\"Invalid Email\")  \n  \nif __name__ == \"__main__\":      \n    # enter the email  \n    email = \"test@example.com\"\n      \n    validate_email(email)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to verify that an email address is valid.\n\n### Input:\n\n\n### Output:\nimport re \n  \n# function to validate an Email \ndef validate_email(email): \n      \n    # make a regular expression \n    # for validating an Email \n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if (re.search(regex, email)): \n        print(\"Valid Email\")  \n    else: \n        print(\"Invalid Email\")  \n  \nif __name__ == \"__main__\":      \n    # enter the email  \n    email = \"test@example.com\"\n      \n    validate_email(email)"}
{"instruction": "Develop an algorithm in Python to remove duplicates from a list.", "input": "", "output": "# remove_duplicates function takes a list as a parameter\n# and returns a list with all the duplicates removed\ndef remove_duplicates(input_list):\n  # Create an empty list to store the result\n  result = []\n \n  # Iterate through the given list\n  for element in input_list:\n  \n    # Check if the element is already in the result list\n    # and if not, add it to the result\n    if element not in result:\n      result.append(element)\n  \n  # Return the result\n  return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to remove duplicates from a list.\n\n### Input:\n\n\n### Output:\n# remove_duplicates function takes a list as a parameter\n# and returns a list with all the duplicates removed\ndef remove_duplicates(input_list):\n  # Create an empty list to store the result\n  result = []\n \n  # Iterate through the given list\n  for element in input_list:\n  \n    # Check if the element is already in the result list\n    # and if not, add it to the result\n    if element not in result:\n      result.append(element)\n  \n  # Return the result\n  return result"}
{"instruction": "Write a Python program to create a good quality random password.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    # Generate a random password\n    password = \"\"\n    char_sets = [string.ascii_lowercase, string.ascii_uppercase, string.digits, string.punctuation]\n    char_set_length = len(char_sets)\n    for _ in range(16):\n        char_set_index = random.randint(0, char_set_length - 1)\n        char_set = char_sets[char_set_index]\n        password += random.choice(char_set)\n    # Return the generated password\n    return password", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a good quality random password.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    # Generate a random password\n    password = \"\"\n    char_sets = [string.ascii_lowercase, string.ascii_uppercase, string.digits, string.punctuation]\n    char_set_length = len(char_sets)\n    for _ in range(16):\n        char_set_index = random.randint(0, char_set_length - 1)\n        char_set = char_sets[char_set_index]\n        password += random.choice(char_set)\n    # Return the generated password\n    return password"}
{"instruction": "Can you explain how object-oriented programming works in Python?", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm in Python that focuses on creating reusable code through the use of classes and objects. Classes are a template for creating objects, which are instances of a class and contain properties and methods that are specific to that object. In OOP, objects interact with one another to perform tasks, as opposed to procedural programming, which calls a list of instructions and may have different functions manipulating the same data.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you explain how object-oriented programming works in Python?\n\n### Input:\n\n\n### Output:\nObject-oriented programming (OOP) is a programming paradigm in Python that focuses on creating reusable code through the use of classes and objects. Classes are a template for creating objects, which are instances of a class and contain properties and methods that are specific to that object. In OOP, objects interact with one another to perform tasks, as opposed to procedural programming, which calls a list of instructions and may have different functions manipulating the same data."}
{"instruction": "Create a class in Python to manage the expiry dates of products.", "input": "", "output": "class ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to manage the expiry dates of products.\n\n### Input:\n\n\n### Output:\nclass ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left"}
{"instruction": "Explain how to perform a k-means clustering algorithm in Python.", "input": "", "output": "K-means clustering is an unsupervised machine learning algorithm for clustering data points into distinct groups. The goal is to partition the given data points into k distinct clusters. To perform k-means clustering in Python, you need to import the KMeans class from the scikit-learn library and initialize it with the number of clusters (k) you want to generate. Then, you need to fit the data points to the model and predict their labels. Finally, you can use the labels to group the data points into their respective clusters.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain how to perform a k-means clustering algorithm in Python.\n\n### Input:\n\n\n### Output:\nK-means clustering is an unsupervised machine learning algorithm for clustering data points into distinct groups. The goal is to partition the given data points into k distinct clusters. To perform k-means clustering in Python, you need to import the KMeans class from the scikit-learn library and initialize it with the number of clusters (k) you want to generate. Then, you need to fit the data points to the model and predict their labels. Finally, you can use the labels to group the data points into their respective clusters."}
{"instruction": "Design a Python function to define a set of rules to send emails", "input": "", "output": "\"\"\"\nDesign a Python function to define a set of rules to send emails\n\nThis function will take a conditional statement as an argument, and will return a function that will return a Boolean value depending on whether the condition is satisfied. The function will return true if the given condition is satisfied, and false otherwise.\n\n\"\"\"\n\ndef email_rule(condition):\n    def rule(data):\n        return eval(condition)\n    return rule\n\n# example\nsatisfied = email_rule(\"data['name'] == 'John'\")\nprint(satisfied({'name': 'John'})) # True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to define a set of rules to send emails\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python function to define a set of rules to send emails\n\nThis function will take a conditional statement as an argument, and will return a function that will return a Boolean value depending on whether the condition is satisfied. The function will return true if the given condition is satisfied, and false otherwise.\n\n\"\"\"\n\ndef email_rule(condition):\n    def rule(data):\n        return eval(condition)\n    return rule\n\n# example\nsatisfied = email_rule(\"data['name'] == 'John'\")\nprint(satisfied({'name': 'John'})) # True"}
{"instruction": "What are the advantages of using a set data structure in Python?", "input": "", "output": "The main advantages of using a set data structure in Python are that it is unordered, meaning that the elements in a set are not stored in a particular order, and that it is unindexed, meaning that each element must be referenced based on its value. Additionally, because sets do not contain duplicate elements, they are useful for performing various operations on a dataset such as searching, filtering, and removing duplicate elements. Finally, using sets can improve the speed of the overall code since different operations may have O(1) time complexity.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the advantages of using a set data structure in Python?\n\n### Input:\n\n\n### Output:\nThe main advantages of using a set data structure in Python are that it is unordered, meaning that the elements in a set are not stored in a particular order, and that it is unindexed, meaning that each element must be referenced based on its value. Additionally, because sets do not contain duplicate elements, they are useful for performing various operations on a dataset such as searching, filtering, and removing duplicate elements. Finally, using sets can improve the speed of the overall code since different operations may have O(1) time complexity."}
{"instruction": "Write a Python class to serialize and deserialize a binary tree.", "input": "", "output": "class Codec:\n    def serialize(self, root):\n        def _serialize(node):\n            if not node:\n                return '#'\n            return str(node.val) + ',' + _serialize(node.left) + ',' + _serialize(node.right)\n        return _serialize(root)\n    \n    def deserialize(self, data):\n        def _deserialize(nums):\n            val = nums.pop(0)\n            if val == '#':\n                return None\n            node = TreeNode(val)\n            node.left = _deserialize(nums)\n            node.right = _deserialize(nums)\n            return node\n        return _deserialize(data.split(','))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to serialize and deserialize a binary tree.\n\n### Input:\n\n\n### Output:\nclass Codec:\n    def serialize(self, root):\n        def _serialize(node):\n            if not node:\n                return '#'\n            return str(node.val) + ',' + _serialize(node.left) + ',' + _serialize(node.right)\n        return _serialize(root)\n    \n    def deserialize(self, data):\n        def _deserialize(nums):\n            val = nums.pop(0)\n            if val == '#':\n                return None\n            node = TreeNode(val)\n            node.left = _deserialize(nums)\n            node.right = _deserialize(nums)\n            return node\n        return _deserialize(data.split(','))"}
{"instruction": "Develop a class in Python to store information about a customer.", "input": "", "output": "class Customer:\n    '''\n    A class used to store information about a Customer. \n    Attributes:\n    name (str): the customer's name\n    address (str): the customer's address\n    phone_number (str): the customer's phone number\n    email (str): the customer's email\n    '''\n    \n    def __init__(self, name, address, phone_number, email):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email = email\n\n    def display_info(self):\n        print('Name: {}\\nAddress: {}\\nPhone Number: {}\\nEmail: {}'.format(self.name, self.address, self.phone_number, self.email))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to store information about a customer.\n\n### Input:\n\n\n### Output:\nclass Customer:\n    '''\n    A class used to store information about a Customer. \n    Attributes:\n    name (str): the customer's name\n    address (str): the customer's address\n    phone_number (str): the customer's phone number\n    email (str): the customer's email\n    '''\n    \n    def __init__(self, name, address, phone_number, email):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email = email\n\n    def display_info(self):\n        print('Name: {}\\nAddress: {}\\nPhone Number: {}\\nEmail: {}'.format(self.name, self.address, self.phone_number, self.email))"}
{"instruction": "Generate a Python code to detect Outliers from a given data set.", "input": "", "output": "import numpy as np\n\n# Set the threshold value to determine what is an outlier\nthreshold = 3\n\ndef detectOutliers(data):\n    # calculate the median\n    median = np.median(data)\n    # calculate the absolute deviations from the median\n    abs_devs = [abs(val - median) for val in data]\n    # calculate the median of the absolute deviations\n    med_abs_dev = np.median(abs_devs)\n    # calculate the scaled absolute deviations\n    scaled_abs_dev = [abs_dev/med_abs_dev for abs_dev in abs_devs]\n    outliers = [val for val in scaled_abs_dev if val > threshold]\n    return outliers\n\ndata = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\noutliers = detectOutliers(data)\nprint(\"Outliers: \", outliers)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to detect Outliers from a given data set.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Set the threshold value to determine what is an outlier\nthreshold = 3\n\ndef detectOutliers(data):\n    # calculate the median\n    median = np.median(data)\n    # calculate the absolute deviations from the median\n    abs_devs = [abs(val - median) for val in data]\n    # calculate the median of the absolute deviations\n    med_abs_dev = np.median(abs_devs)\n    # calculate the scaled absolute deviations\n    scaled_abs_dev = [abs_dev/med_abs_dev for abs_dev in abs_devs]\n    outliers = [val for val in scaled_abs_dev if val > threshold]\n    return outliers\n\ndata = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\noutliers = detectOutliers(data)\nprint(\"Outliers: \", outliers)"}
{"instruction": "Develop a principle component analysis (PCA) algorithm in Python", "input": "", "output": "def pca(data):\n    # center data\n    data = data - np.mean(data, axis=0)\n \n    # calculate covariance matrix of the data\n    cov = np.cov(data, rowvar=False)\n \n    # calculate eigenvectors & eigenvalues of the covariance matrix\n    eig_vals, eig_vecs = np.linalg.eig(cov)\n \n    # sort eigenvalue in decreasing order\n    idx = np.argsort(eig_vals)[::-1]\n \n    eig_vals = eig_vals[idx]\n    eig_vecs = eig_vecs[:,idx]\n \n    # select the first n eigenvectors (n is desired dimension of rescaled data array, or dims_rescaled_data)\n    n_eig_vecs = eig_vecs[:, :dims_rescaled_data]\n                      \n    # transform data in new subspace\n    rescaled_data = np.dot(data, n_eig_vecs)\n \n    return rescaled_data", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a principle component analysis (PCA) algorithm in Python\n\n### Input:\n\n\n### Output:\ndef pca(data):\n    # center data\n    data = data - np.mean(data, axis=0)\n \n    # calculate covariance matrix of the data\n    cov = np.cov(data, rowvar=False)\n \n    # calculate eigenvectors & eigenvalues of the covariance matrix\n    eig_vals, eig_vecs = np.linalg.eig(cov)\n \n    # sort eigenvalue in decreasing order\n    idx = np.argsort(eig_vals)[::-1]\n \n    eig_vals = eig_vals[idx]\n    eig_vecs = eig_vecs[:,idx]\n \n    # select the first n eigenvectors (n is desired dimension of rescaled data array, or dims_rescaled_data)\n    n_eig_vecs = eig_vecs[:, :dims_rescaled_data]\n                      \n    # transform data in new subspace\n    rescaled_data = np.dot(data, n_eig_vecs)\n \n    return rescaled_data"}
{"instruction": "Write a Python program to perform a merge sort on given numbers.", "input": "", "output": "def merge_sort(nums):\n    if len(nums) > 1:\n        mid_index = len(nums) // 2\n        left_half = nums[:mid_index]\n        right_half = nums[mid_index:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                nums[k] = left_half[i]\n                i += 1\n            else:\n                nums[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            nums[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            nums[k] = right_half[j]\n            j += 1\n            k += 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform a merge sort on given numbers.\n\n### Input:\n\n\n### Output:\ndef merge_sort(nums):\n    if len(nums) > 1:\n        mid_index = len(nums) // 2\n        left_half = nums[:mid_index]\n        right_half = nums[mid_index:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                nums[k] = left_half[i]\n                i += 1\n            else:\n                nums[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            nums[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            nums[k] = right_half[j]\n            j += 1\n            k += 1"}
{"instruction": "Explain the concept of tail recursion with an example in Python.", "input": "", "output": "A tail call is a kind of call in which the calling function does not perform any further computation after calling the function. A function is said to be tail recursive if the recursive call is in the tail position of the function. \n\nConsider the following example of a tail recursive function to calculate the nth Fibonacci number using Python:\n\ndef Fibonacci(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2) \n\nIn this example, no computation is performed after the recursive call and the recursive call is present at the end of the function which makes this function a tail recursive function and optimization of tail recursion is possible.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the concept of tail recursion with an example in Python.\n\n### Input:\n\n\n### Output:\nA tail call is a kind of call in which the calling function does not perform any further computation after calling the function. A function is said to be tail recursive if the recursive call is in the tail position of the function. \n\nConsider the following example of a tail recursive function to calculate the nth Fibonacci number using Python:\n\ndef Fibonacci(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2) \n\nIn this example, no computation is performed after the recursive call and the recursive call is present at the end of the function which makes this function a tail recursive function and optimization of tail recursion is possible."}
{"instruction": "Create a Bloom filter in Python to store a list of common words.", "input": "", "output": "from pybloom_live import BloomFilter\n\n# Common words to store in bloom filter\nwords = [\"the\", \"be\", \"and\", \"of\", \"a\", \"in\", \"to\", \"have\", \"to\", \"it\",\n         \"I\", \"that\", \"for\", \"you\", \"he\", \"with\", \"on\", \"do\", \"say\", \"this\",\n         \"they\", \"is\", \"an\", \"at\", \"but\", \"we\", \"his\", \"from\", \"that\", \"not\",\n         \"by\", \"she\", \"or\", \"as\", \"what\", \"go\", \"their\", \"can\", \"who\", \"get\",\n         \"if\", \"would\", \"her\", \"all\", \"my\", \"make\", \"about\", \"know\"]\n\n# Create a bloom filter with a capacity of 100 words and 0.1% error rate\nbf = BloomFilter(100, 0.1)\n\n# Add the words to the bloom filter\nfor word in words:\n    bf.add(word)\n\n# Check if some words are in the list or not\nprint(\"the\" in bf)\nprint(\"the \" in bf)\nprint(\"hello\" in bf)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Bloom filter in Python to store a list of common words.\n\n### Input:\n\n\n### Output:\nfrom pybloom_live import BloomFilter\n\n# Common words to store in bloom filter\nwords = [\"the\", \"be\", \"and\", \"of\", \"a\", \"in\", \"to\", \"have\", \"to\", \"it\",\n         \"I\", \"that\", \"for\", \"you\", \"he\", \"with\", \"on\", \"do\", \"say\", \"this\",\n         \"they\", \"is\", \"an\", \"at\", \"but\", \"we\", \"his\", \"from\", \"that\", \"not\",\n         \"by\", \"she\", \"or\", \"as\", \"what\", \"go\", \"their\", \"can\", \"who\", \"get\",\n         \"if\", \"would\", \"her\", \"all\", \"my\", \"make\", \"about\", \"know\"]\n\n# Create a bloom filter with a capacity of 100 words and 0.1% error rate\nbf = BloomFilter(100, 0.1)\n\n# Add the words to the bloom filter\nfor word in words:\n    bf.add(word)\n\n# Check if some words are in the list or not\nprint(\"the\" in bf)\nprint(\"the \" in bf)\nprint(\"hello\" in bf)"}
{"instruction": "Optimize the code for the travelling salesman problem in Python.", "input": "", "output": "import itertools\n\n# Define the travelling salesman problem (TSP)\ndef calc_dist(a, b):\n    # calculate Euclidean distance between points 'a' and 'b'\n    dist =  # your code\n    return dist\n\ndef travelling_salesman(points):\n    # \"points\" is a list of tuples [(x1, y1), (x2, y2), ...]\n    best_solution = None\n    min_dist = float('inf')\n    solutions = itertools.permutations(points) \n    for solution in solutions:\n        # calculate the total distance of the route\n        dist = 0\n        for i in range(len(solution) - 1):\n            dist += calc_dist(solution[i], solution[i+1])\n        # check if it is the shortest route \n        if dist < min_dist:\n            min_dist = dist\n            best_solution = solution\n    return best_solution\n\nsolution = travelling_salesman([(0, 0), (2, 2), (3, 1), (1, 3)])\nprint(solution)  # [(0, 0), (2, 2), (3, 1), (1, 3)]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the code for the travelling salesman problem in Python.\n\n### Input:\n\n\n### Output:\nimport itertools\n\n# Define the travelling salesman problem (TSP)\ndef calc_dist(a, b):\n    # calculate Euclidean distance between points 'a' and 'b'\n    dist =  # your code\n    return dist\n\ndef travelling_salesman(points):\n    # \"points\" is a list of tuples [(x1, y1), (x2, y2), ...]\n    best_solution = None\n    min_dist = float('inf')\n    solutions = itertools.permutations(points) \n    for solution in solutions:\n        # calculate the total distance of the route\n        dist = 0\n        for i in range(len(solution) - 1):\n            dist += calc_dist(solution[i], solution[i+1])\n        # check if it is the shortest route \n        if dist < min_dist:\n            min_dist = dist\n            best_solution = solution\n    return best_solution\n\nsolution = travelling_salesman([(0, 0), (2, 2), (3, 1), (1, 3)])\nprint(solution)  # [(0, 0), (2, 2), (3, 1), (1, 3)]"}
{"instruction": "Write a python code to generate a sentence from a given grammar.", "input": "", "output": "import random\n\ngrammar = { \n    \"_S\"  : [\"_NP _VP\"],\n    \"_NP\" : [\"I\", \"you\", \"she\"],\n    \"_VP\" : [\"love _NP\", \"hate _NP\"]\n}\n\ndef generate_sentence(grammar):\n    # Select random start symbol\n    symbol = random.choice(list(grammar.keys()))\n    # Generate a new sentence\n    sentence = [symbol]\n    while symbol in grammar.keys():\n        # Choose a random alternative \n        # of the current symbol\n        alternatives = grammar[symbol]\n        alternative = random.choice(alternatives)\n        # Create a list of symbols from \n        # the chosen alternative\n        alternative_symbols = alternative.split()\n        # Add the symbols to the sentence\n        sentence.extend(alternative_symbols)\n        # Get the next symbol\n        symbol = sentence[-1]\n    \n    # Add a fullstop and return the sentence\n    sentence[0] = sentence[0].capitalize()\n    sentence.append(\".\")\n    return \" \".join(sentence)\n\nif __name__ == '__main__':\n    output = generate_sentence(grammar)\n    print(output)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to generate a sentence from a given grammar.\n\n### Input:\n\n\n### Output:\nimport random\n\ngrammar = { \n    \"_S\"  : [\"_NP _VP\"],\n    \"_NP\" : [\"I\", \"you\", \"she\"],\n    \"_VP\" : [\"love _NP\", \"hate _NP\"]\n}\n\ndef generate_sentence(grammar):\n    # Select random start symbol\n    symbol = random.choice(list(grammar.keys()))\n    # Generate a new sentence\n    sentence = [symbol]\n    while symbol in grammar.keys():\n        # Choose a random alternative \n        # of the current symbol\n        alternatives = grammar[symbol]\n        alternative = random.choice(alternatives)\n        # Create a list of symbols from \n        # the chosen alternative\n        alternative_symbols = alternative.split()\n        # Add the symbols to the sentence\n        sentence.extend(alternative_symbols)\n        # Get the next symbol\n        symbol = sentence[-1]\n    \n    # Add a fullstop and return the sentence\n    sentence[0] = sentence[0].capitalize()\n    sentence.append(\".\")\n    return \" \".join(sentence)\n\nif __name__ == '__main__':\n    output = generate_sentence(grammar)\n    print(output)"}
{"instruction": "Create a Deep Learning Program in Python to Predict Stock Price.", "input": "", "output": "from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Deep Learning Program in Python to Predict Stock Price.\n\n### Input:\n\n\n### Output:\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))"}
{"instruction": "Create a Python class that implements a max heap data structure.", "input": "", "output": "class MaxHeap:\n    def __init__(self, array):\n        self.heap = self.build_heap(array)\n\n    def build_heap(self, array):\n        n = len(array)\n        for i in reversed(range(n // 2)):\n            self.heapify(i, array, n)\n        return array\n\n    def heapsort(self, array):\n        n = len(array)\n        for i in reversed(range(n)):\n            array[i], array[0] = array[0], array[i]\n            self.heapify(0, array, i)\n        return array\n\n    def heapify(self, current_index, array, heap_size):\n        largest = current_index\n        left_child = 2 * current_index + 1\n        right_child = 2 * current_index + 2\n        if (left_child < heap_size and\n           array[left_child] > array[largest]):\n            largest = left_child\n        if (right_child < heap_size and\n                array[right_child] > array[largest]):\n            largest = right_child\n        if largest != current_index:\n            array[largest], array[current_index] = (\n                array[current_index], array[largest]\n            )\n            self.heapify(largest, array, heap_size)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that implements a max heap data structure.\n\n### Input:\n\n\n### Output:\nclass MaxHeap:\n    def __init__(self, array):\n        self.heap = self.build_heap(array)\n\n    def build_heap(self, array):\n        n = len(array)\n        for i in reversed(range(n // 2)):\n            self.heapify(i, array, n)\n        return array\n\n    def heapsort(self, array):\n        n = len(array)\n        for i in reversed(range(n)):\n            array[i], array[0] = array[0], array[i]\n            self.heapify(0, array, i)\n        return array\n\n    def heapify(self, current_index, array, heap_size):\n        largest = current_index\n        left_child = 2 * current_index + 1\n        right_child = 2 * current_index + 2\n        if (left_child < heap_size and\n           array[left_child] > array[largest]):\n            largest = left_child\n        if (right_child < heap_size and\n                array[right_child] > array[largest]):\n            largest = right_child\n        if largest != current_index:\n            array[largest], array[current_index] = (\n                array[current_index], array[largest]\n            )\n            self.heapify(largest, array, heap_size)"}
{"instruction": "Write an algorithm to implement a trie data structure in Python.", "input": "", "output": "\"\"\"\nWrite an algorithm to implement a trie data structure in Python\n\"\"\"\n\nclass TrieNode(object):\n    \"\"\"Trie node class\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for trie node\"\"\"\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie(object):\n    \"\"\"Trie class\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for Trie\"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word):\n        \"\"\"Inserts the given word into the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n\n        node.end_of_word = True\n\n    def search(self, word):\n        \"\"\"Searches if the given word is present in the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.end_of_word\n\n# Test code\ntrie = Trie() \nwords = [\"apple\", \"application\", \"hi\"]\n\n# Insert words into the trie\nfor word in words:\n    trie.insert(word)\n\n# Test search\nif trie.search(\"apple\"):\n    print(\"Word Found\")\nelse:\n    print(\"Word Not Found\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to implement a trie data structure in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite an algorithm to implement a trie data structure in Python\n\"\"\"\n\nclass TrieNode(object):\n    \"\"\"Trie node class\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for trie node\"\"\"\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie(object):\n    \"\"\"Trie class\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for Trie\"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word):\n        \"\"\"Inserts the given word into the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n\n        node.end_of_word = True\n\n    def search(self, word):\n        \"\"\"Searches if the given word is present in the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.end_of_word\n\n# Test code\ntrie = Trie() \nwords = [\"apple\", \"application\", \"hi\"]\n\n# Insert words into the trie\nfor word in words:\n    trie.insert(word)\n\n# Test search\nif trie.search(\"apple\"):\n    print(\"Word Found\")\nelse:\n    print(\"Word Not Found\")"}
{"instruction": "Create a SocketServer that can serve multiple clients in Python.", "input": "", "output": "import socket\nimport threading\n\nclass SocketServer:\n    # constructor\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n        # create socket\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        # bind socket\n        self.sock.bind((self.host, self.port))\n\n    # accept incoming connections\n    def start(self):\n        self.sock.listen(5)\n        print(\"Server is listening...\")\n\n        while True:\n            conn, addr = self.sock.accept()\n            threading.Thread(target=self.handle_clients, args=(conn, addr)).start()\n\n    # handlerClient method to handle multiple clients\n    def handle_clients(self, conn, addr):\n        print(\"Connection established with:\" + str(addr))\n        conn.send(\"Welcome to SocketServer\".encode())\n        \n        while True:\n            data = conn.recv(4096).decode()\n            # Do something with received data\n            if not data:\n                break\n            conn.send(data.encode())\n        \n        conn.close()\n        print(\"Connection closed with:\" + str(addr))\n\nhost, port = \"localhost\", 8080 \nSocketServer(host, port).start()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a SocketServer that can serve multiple clients in Python.\n\n### Input:\n\n\n### Output:\nimport socket\nimport threading\n\nclass SocketServer:\n    # constructor\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n        # create socket\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        # bind socket\n        self.sock.bind((self.host, self.port))\n\n    # accept incoming connections\n    def start(self):\n        self.sock.listen(5)\n        print(\"Server is listening...\")\n\n        while True:\n            conn, addr = self.sock.accept()\n            threading.Thread(target=self.handle_clients, args=(conn, addr)).start()\n\n    # handlerClient method to handle multiple clients\n    def handle_clients(self, conn, addr):\n        print(\"Connection established with:\" + str(addr))\n        conn.send(\"Welcome to SocketServer\".encode())\n        \n        while True:\n            data = conn.recv(4096).decode()\n            # Do something with received data\n            if not data:\n                break\n            conn.send(data.encode())\n        \n        conn.close()\n        print(\"Connection closed with:\" + str(addr))\n\nhost, port = \"localhost\", 8080 \nSocketServer(host, port).start()"}
{"instruction": "Develop a web service to process text in a REST API using Python.", "input": "", "output": "#import libraries\nfrom flask import Flask, jsonify, request\nimport re\n\n#initialize flask \napp = Flask(__name__)\n\n#define the endpoint\n@app.route('/process_text')\ndef process_text():\n    #get text from the request\n    text = request.args.get('text')\n    #process the text\n    processed_text = re.sub('[^a-zA-Z0-9]', '', text)\n    #return the result\n    return jsonify({\"result\" : processed_text})\n\n#run the server\napp.run(host='0.0.0.0')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web service to process text in a REST API using Python.\n\n### Input:\n\n\n### Output:\n#import libraries\nfrom flask import Flask, jsonify, request\nimport re\n\n#initialize flask \napp = Flask(__name__)\n\n#define the endpoint\n@app.route('/process_text')\ndef process_text():\n    #get text from the request\n    text = request.args.get('text')\n    #process the text\n    processed_text = re.sub('[^a-zA-Z0-9]', '', text)\n    #return the result\n    return jsonify({\"result\" : processed_text})\n\n#run the server\napp.run(host='0.0.0.0')"}
{"instruction": "Create a class in Python that checks if a given integer is prime.", "input": "", "output": "class PrimeChecker:\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        for i in range(2, self.number // 2):\n            if self.number % i == 0:\n                return False\n\n        return True\n\n# Create an instance of PrimeChecker\nprime_checker = PrimeChecker(7)\n\n# Check if the number is prime\nis_prime = prime_checker.is_prime()\n\nif is_prime:\n    print('The number is prime')\nelse:\n    print('The number is not prime')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that checks if a given integer is prime.\n\n### Input:\n\n\n### Output:\nclass PrimeChecker:\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        for i in range(2, self.number // 2):\n            if self.number % i == 0:\n                return False\n\n        return True\n\n# Create an instance of PrimeChecker\nprime_checker = PrimeChecker(7)\n\n# Check if the number is prime\nis_prime = prime_checker.is_prime()\n\nif is_prime:\n    print('The number is prime')\nelse:\n    print('The number is not prime')"}
{"instruction": "Construct an object-oriented Python model for a student database.", "input": "", "output": "class Student:\n def __init__(self, name, student_id, courses):\n self.name = name\n self.student_id = student_id\n self.courses = courses\n\nclass Course:\n def __init__(self, title, course_id, credits):\n self.title = title\n self.course_id = course_id\n self.credits = credits\n\nclass Database:\n def __init__(self):\n self.students = []\n self.courses = []\n \n def add_student(self, student):\n self.students.append(student)\n \n def add_course(self, course):\n self.courses.append(course)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an object-oriented Python model for a student database.\n\n### Input:\n\n\n### Output:\nclass Student:\n def __init__(self, name, student_id, courses):\n self.name = name\n self.student_id = student_id\n self.courses = courses\n\nclass Course:\n def __init__(self, title, course_id, credits):\n self.title = title\n self.course_id = course_id\n self.credits = credits\n\nclass Database:\n def __init__(self):\n self.students = []\n self.courses = []\n \n def add_student(self, student):\n self.students.append(student)\n \n def add_course(self, course):\n self.courses.append(course)"}
{"instruction": "What is the difference between a list and a dictionary in Python?", "input": "", "output": "In Python, a list is an ordered sequence of elements, while a dictionary (or \"dict\") is an unordered collection of key-value pairs. A list stores elements sequentially and has no associated key with each element. A dictionary stores elements in key-value pairs, and each element is associated with a unique key. Additionally, a list is mutable, meaning the elements inside the list can be changed, while a dictionary is immutable, meaning the key-value pairs cannot be changed.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the difference between a list and a dictionary in Python?\n\n### Input:\n\n\n### Output:\nIn Python, a list is an ordered sequence of elements, while a dictionary (or \"dict\") is an unordered collection of key-value pairs. A list stores elements sequentially and has no associated key with each element. A dictionary stores elements in key-value pairs, and each element is associated with a unique key. Additionally, a list is mutable, meaning the elements inside the list can be changed, while a dictionary is immutable, meaning the key-value pairs cannot be changed."}
{"instruction": "Create a class in Python to store data on employees in a company.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary, job_title):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.job_title = job_title\n        self.bonus = 0\n    \n    def get_full_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_salary(self):\n        return self.salary\n\n    def get_job_title(self):\n        return self.job_title\n\n    def set_bonus(self, bonus):\n        self.bonus = bonus", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to store data on employees in a company.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age, salary, job_title):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.job_title = job_title\n        self.bonus = 0\n    \n    def get_full_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_salary(self):\n        return self.salary\n\n    def get_job_title(self):\n        return self.job_title\n\n    def set_bonus(self, bonus):\n        self.bonus = bonus"}
{"instruction": "Develop a Python program to prepare a presentation in PDF format.", "input": "", "output": "from reportlab.lib.pagesizes import A4\nfrom reportlab.pdfgen import canvas\n\ndef prepare_presentation(content):\n    \"\"\"\n    Develop a Python program to prepare a presentation in PDF format.\n    \n    :param content: presentation slides\n    :return: PDF file of the presentation\n    \"\"\"\n    # create a pdf object\n    pdf_obj = canvas.Canvas('presentation.pdf', pagesize=A4)\n    \n    # add contents to the pdf\n    for slide in content:\n        pdf_obj.drawImage(slide)\n    \n    # save pdf\n    pdf_obj.save()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to prepare a presentation in PDF format.\n\n### Input:\n\n\n### Output:\nfrom reportlab.lib.pagesizes import A4\nfrom reportlab.pdfgen import canvas\n\ndef prepare_presentation(content):\n    \"\"\"\n    Develop a Python program to prepare a presentation in PDF format.\n    \n    :param content: presentation slides\n    :return: PDF file of the presentation\n    \"\"\"\n    # create a pdf object\n    pdf_obj = canvas.Canvas('presentation.pdf', pagesize=A4)\n    \n    # add contents to the pdf\n    for slide in content:\n        pdf_obj.drawImage(slide)\n    \n    # save pdf\n    pdf_obj.save()"}
{"instruction": "Design a chatbot in Python that can respond to certain questions.", "input": "", "output": "class Chatbot:\n    def __init__(self):\n        self.response_dict = {}\n        self.default_response = \"\"\n  \n    def add_response(self, user_input, bot_response):\n        self.response_dict[user_input] = bot_response\n  \n    def set_default_response(self, default_response):\n        self.default_response = default_response\n  \n    def response(self, user_input):\n        if user_input in self.response_dict:\n            return self.response_dict[user_input]\n        else:\n            return self.default_response", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chatbot in Python that can respond to certain questions.\n\n### Input:\n\n\n### Output:\nclass Chatbot:\n    def __init__(self):\n        self.response_dict = {}\n        self.default_response = \"\"\n  \n    def add_response(self, user_input, bot_response):\n        self.response_dict[user_input] = bot_response\n  \n    def set_default_response(self, default_response):\n        self.default_response = default_response\n  \n    def response(self, user_input):\n        if user_input in self.response_dict:\n            return self.response_dict[user_input]\n        else:\n            return self.default_response"}
{"instruction": "Develop a prototype of a geographic information system in Python.", "input": "", "output": "import geopandas\nimport matplotlib.pyplot as plt\n\n# Read in the shapefile of nations\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n# Set up the base figure\nfig, ax = plt.subplots(figsize=(12, 8))\n# Set up the title of the map as a subplot\nax.set_title(\"Geographic Information System\", fontdict={'fontsize': 20}, loc='left')\n\n# Display the world map\nworld.plot(ax=ax, color='white', edgecolor='black')\n\n# Display a legend\nax.legend(loc='upper right')\n\n# Show the map\nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a prototype of a geographic information system in Python.\n\n### Input:\n\n\n### Output:\nimport geopandas\nimport matplotlib.pyplot as plt\n\n# Read in the shapefile of nations\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n# Set up the base figure\nfig, ax = plt.subplots(figsize=(12, 8))\n# Set up the title of the map as a subplot\nax.set_title(\"Geographic Information System\", fontdict={'fontsize': 20}, loc='left')\n\n# Display the world map\nworld.plot(ax=ax, color='white', edgecolor='black')\n\n# Display a legend\nax.legend(loc='upper right')\n\n# Show the map\nplt.show()"}
{"instruction": "Generate a code in Python to convert a number into binary format.", "input": "", "output": "\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to convert a number into binary format.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010"}
{"instruction": "Implement a storage API in Python that supports the CRUD methods.", "input": "", "output": "class StorageAPI:\n    def __init__(self):\n        self._data = {}\n    \n    def create(self, key, data):\n        \"\"\"Creates a new entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def read(self, key):\n        \"\"\"Reads a entry from the storage API\"\"\"\n        return self._data.get(key, None)\n    \n    def update(self, key, data):\n        \"\"\"Updates a entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def delete(self, key):\n        \"\"\"Deletes a entry from the storage API\"\"\"\n        del self._data[key]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a storage API in Python that supports the CRUD methods.\n\n### Input:\n\n\n### Output:\nclass StorageAPI:\n    def __init__(self):\n        self._data = {}\n    \n    def create(self, key, data):\n        \"\"\"Creates a new entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def read(self, key):\n        \"\"\"Reads a entry from the storage API\"\"\"\n        return self._data.get(key, None)\n    \n    def update(self, key, data):\n        \"\"\"Updates a entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def delete(self, key):\n        \"\"\"Deletes a entry from the storage API\"\"\"\n        del self._data[key]"}
{"instruction": "Design a neural network in python to recognize handwritten digits", "input": "", "output": "import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in python to recognize handwritten digits\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)"}
{"instruction": "Design a Python program to reduce a fraction to its lowest terms.", "input": "", "output": "def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n      \ndef reduceFraction(numerator, denominator): \n    common_divisor = gcd(numerator, denominator) \n      \n    reduced_numerator = numerator // common_divisor \n    reduced_denominator = denominator // common_divisor \n    return reduced_numerator, reduced_denominator \n\nnumerator = 12\ndenominator = 20\n\nreduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) \nprint(f\"{numerator}/{denominator} is equivalent to {reduced_numerator}/{reduced_denominator}\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to reduce a fraction to its lowest terms.\n\n### Input:\n\n\n### Output:\ndef gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n      \ndef reduceFraction(numerator, denominator): \n    common_divisor = gcd(numerator, denominator) \n      \n    reduced_numerator = numerator // common_divisor \n    reduced_denominator = denominator // common_divisor \n    return reduced_numerator, reduced_denominator \n\nnumerator = 12\ndenominator = 20\n\nreduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) \nprint(f\"{numerator}/{denominator} is equivalent to {reduced_numerator}/{reduced_denominator}\")"}
{"instruction": "How can you implement a breadth-first search algorithm in Python?", "input": "", "output": "# Python program to implement breadth-first search\n\ngraph = {\n    \"A\": [\"B\", \"C\"],\n    \"B\": [\"A\", \"D\", \"E\"],\n    \"C\": [\"A\", \"F\"],\n    \"D\": [\"B\"],\n    \"E\": [\"B\", \"F\"],\n    \"F\": [\"C\", \"E\"]\n}\n\nvisited = set()\n\ndef bfs(graph, vertex):\n    \n    queue = []\n    queue.append(vertex)\n    visited.add(vertex)\n    \n    while queue:\n        node = queue.pop(0)\n        print(node)\n        \n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\nvertex = \"A\"\nbfs(graph, vertex)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you implement a breadth-first search algorithm in Python?\n\n### Input:\n\n\n### Output:\n# Python program to implement breadth-first search\n\ngraph = {\n    \"A\": [\"B\", \"C\"],\n    \"B\": [\"A\", \"D\", \"E\"],\n    \"C\": [\"A\", \"F\"],\n    \"D\": [\"B\"],\n    \"E\": [\"B\", \"F\"],\n    \"F\": [\"C\", \"E\"]\n}\n\nvisited = set()\n\ndef bfs(graph, vertex):\n    \n    queue = []\n    queue.append(vertex)\n    visited.add(vertex)\n    \n    while queue:\n        node = queue.pop(0)\n        print(node)\n        \n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\nvertex = \"A\"\nbfs(graph, vertex)"}
{"instruction": "Design a system in Python to order items based on its popularity.", "input": "", "output": "def order_items_by_popularity(items):\n    \"\"\"Function to order items by their popularity.\"\"\"\n    items_dict = {}\n \n    # Create a dictionary of item and its count\n    for item in items:\n        if item in items_dict:\n            items_dict[item] += 1\n        else:\n            items_dict[item] = 1\n \n    # Sort the items by their count in descending order\n    sorted_items = sorted(items_dict.items(), key=lambda i: i[1], reverse=True)\n \n    # Store the sorted items in a list\n    sorted_items_list = [item[0] for item in sorted_items]\n \n    return sorted_items_list", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a system in Python to order items based on its popularity.\n\n### Input:\n\n\n### Output:\ndef order_items_by_popularity(items):\n    \"\"\"Function to order items by their popularity.\"\"\"\n    items_dict = {}\n \n    # Create a dictionary of item and its count\n    for item in items:\n        if item in items_dict:\n            items_dict[item] += 1\n        else:\n            items_dict[item] = 1\n \n    # Sort the items by their count in descending order\n    sorted_items = sorted(items_dict.items(), key=lambda i: i[1], reverse=True)\n \n    # Store the sorted items in a list\n    sorted_items_list = [item[0] for item in sorted_items]\n \n    return sorted_items_list"}
{"instruction": "Create a Python algorithm that implements the Bubble Sort method.", "input": "", "output": "# Python program for implementation of Bubble Sort\ndef bubble_sort(list):\n    # Traverse through all array elements\n    for i in range(len(list)):\n \n        # Last i elements are already in place\n        for j in range(0, len(list)-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if list[j] > list[j+1] :\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n \n# Main Program \nlist = [30, 10, 15, 5, 25]\n\nsorted_list = bubble_sort(list)\n\nprint(\"Sorted list: \", sorted_list)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm that implements the Bubble Sort method.\n\n### Input:\n\n\n### Output:\n# Python program for implementation of Bubble Sort\ndef bubble_sort(list):\n    # Traverse through all array elements\n    for i in range(len(list)):\n \n        # Last i elements are already in place\n        for j in range(0, len(list)-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if list[j] > list[j+1] :\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n \n# Main Program \nlist = [30, 10, 15, 5, 25]\n\nsorted_list = bubble_sort(list)\n\nprint(\"Sorted list: \", sorted_list)"}
{"instruction": "Devise a Python program to check if two strings are a palindrome.", "input": "", "output": "def palindrome_checker(string1, string2): \n    m = len(string1) \n    n = len(string2) \n  \n    if m != n: \n        return False    \n  \n    string1 = string1.lower() \n    string2 = string2.lower() \n      \n    # create empty 2-D matrix \n    C = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # palindromic substring of length 0 \n    for i in range(m + 1): \n        C[i][0] = 0\n  \n    # palindromic substring of length 1 \n    for j in range(n + 1): \n        C[0][j] = 0\n  \n    # fill the matrix in bottom-up manner \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if string1[i - 1] == string2[j - 1]: \n                C[i][j] = C[i - 1][j - 1] + 1\n    return m == n == C[m][n]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a Python program to check if two strings are a palindrome.\n\n### Input:\n\n\n### Output:\ndef palindrome_checker(string1, string2): \n    m = len(string1) \n    n = len(string2) \n  \n    if m != n: \n        return False    \n  \n    string1 = string1.lower() \n    string2 = string2.lower() \n      \n    # create empty 2-D matrix \n    C = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # palindromic substring of length 0 \n    for i in range(m + 1): \n        C[i][0] = 0\n  \n    # palindromic substring of length 1 \n    for j in range(n + 1): \n        C[0][j] = 0\n  \n    # fill the matrix in bottom-up manner \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if string1[i - 1] == string2[j - 1]: \n                C[i][j] = C[i - 1][j - 1] + 1\n    return m == n == C[m][n]"}
{"instruction": "Create a custom vector class in Python with overloaded operators.", "input": "", "output": "class Vector:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __add__(self, other): \n    x = self.x + other.x \n    y = self.y + other.y \n    z = self.z + other.z \n    return Vector(x, y, z) \n \n  def __sub__(self, other): \n    x = self.x - other.x \n    y = self.y - other.y \n    z = self.z - other.z \n    return Vector(x, y, z) \n  \n  def __mul__(self, other): \n    x = self.x * other.x \n    y = self.y * other.y \n    z = self.z * other.z \n    return Vector(x, y, z) \n  \n  def __div__(self, other): \n    x = self.x / other.x \n    y = self.y / other.y \n    z = self.z / other.z \n    return Vector(x, y, z) \n  \n  def __str__(self): \n    return \"Vector({}, {}, {})\".format(self.x, self.y, self.z)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a custom vector class in Python with overloaded operators.\n\n### Input:\n\n\n### Output:\nclass Vector:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __add__(self, other): \n    x = self.x + other.x \n    y = self.y + other.y \n    z = self.z + other.z \n    return Vector(x, y, z) \n \n  def __sub__(self, other): \n    x = self.x - other.x \n    y = self.y - other.y \n    z = self.z - other.z \n    return Vector(x, y, z) \n  \n  def __mul__(self, other): \n    x = self.x * other.x \n    y = self.y * other.y \n    z = self.z * other.z \n    return Vector(x, y, z) \n  \n  def __div__(self, other): \n    x = self.x / other.x \n    y = self.y / other.y \n    z = self.z / other.z \n    return Vector(x, y, z) \n  \n  def __str__(self): \n    return \"Vector({}, {}, {})\".format(self.x, self.y, self.z)"}
{"instruction": "Write a python program that prints the number of days in a month.", "input": "", "output": "# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that prints the number of days in a month.\n\n### Input:\n\n\n### Output:\n# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31"}
{"instruction": "Explain how the fast Fourier transform algorithm works in Python.", "input": "", "output": "The Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain how the fast Fourier transform algorithm works in Python.\n\n### Input:\n\n\n### Output:\nThe Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs."}
{"instruction": "Come up with a solution to optimize a classifier model in Python.", "input": "", "output": "# Importing necessary libraries \nimport numpy as np \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\n# Defining the function which takes the classifier object and optimizes it\ndef optimize_model(classifier, parameters):\n    # Create a GridSearchCV object, which will use 5-fold cross validation \n    clf = GridSearchCV(classifier, parameters, scoring = 'accuracy', cv = 5)\n\n    # Fit the model on the training data \n    clf.fit(X_train, y_train)\n\n    # Predict the values on the test dataset\n    y_pred = clf.predict(X_test)\n\n    # Calculate the accuracy score\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    # Print the accuracy\n    print('Accuracy: {:.2f}%'.format(accuracy*100)) \n\n    # Return the best parameters and the classifier\n    return clf.best_params_, clf", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution to optimize a classifier model in Python.\n\n### Input:\n\n\n### Output:\n# Importing necessary libraries \nimport numpy as np \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\n# Defining the function which takes the classifier object and optimizes it\ndef optimize_model(classifier, parameters):\n    # Create a GridSearchCV object, which will use 5-fold cross validation \n    clf = GridSearchCV(classifier, parameters, scoring = 'accuracy', cv = 5)\n\n    # Fit the model on the training data \n    clf.fit(X_train, y_train)\n\n    # Predict the values on the test dataset\n    y_pred = clf.predict(X_test)\n\n    # Calculate the accuracy score\n    accuracy = accuracy_score(y_test, y_pred)\n    \n    # Print the accuracy\n    print('Accuracy: {:.2f}%'.format(accuracy*100)) \n\n    # Return the best parameters and the classifier\n    return clf.best_params_, clf"}
{"instruction": "Generate a python program to find the longest common subsequence.", "input": "", "output": "def find_longest_common_subsequence(s1, s2):\n    # Create a two dimensional array \n    arr = [[0 for i in range(len(s2) + 1)]  \n           for j in range(len(s1) + 1)] \n    \n    # Iterate over the strings \n    for i in range(1, len(s1) + 1): \n        for j in range(1, len(s2) + 1): \n    \n        # if the characters are same, update the \n        # value at current index by adding 1 to \n        # value at the diagonal left \n            if s1[i - 1] == s2[j - 1]: \n                arr[i][j] = arr[i - 1][j - 1] + 1\n            else: \n        # If not same, take the maximum \n        # value of the cell to the left \n        # and cell above \n                arr[i][j] = max(arr[i - 1][j], \n                                arr[i][j - 1])\n\n    # return the last element of the \n    # table which is our result \n    return arr[len(s1)][len(s2)]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to find the longest common subsequence.\n\n### Input:\n\n\n### Output:\ndef find_longest_common_subsequence(s1, s2):\n    # Create a two dimensional array \n    arr = [[0 for i in range(len(s2) + 1)]  \n           for j in range(len(s1) + 1)] \n    \n    # Iterate over the strings \n    for i in range(1, len(s1) + 1): \n        for j in range(1, len(s2) + 1): \n    \n        # if the characters are same, update the \n        # value at current index by adding 1 to \n        # value at the diagonal left \n            if s1[i - 1] == s2[j - 1]: \n                arr[i][j] = arr[i - 1][j - 1] + 1\n            else: \n        # If not same, take the maximum \n        # value of the cell to the left \n        # and cell above \n                arr[i][j] = max(arr[i - 1][j], \n                                arr[i][j - 1])\n\n    # return the last element of the \n    # table which is our result \n    return arr[len(s1)][len(s2)]"}
{"instruction": "Generate a Python script that classifies dogs into breed classes.", "input": "", "output": "import cv2\n \n# Classifies a given image into one of the breed classes\ndef classify(image):\n    \n    # Retrieve the breed classes from the database\n    breeds = get_breeds()\n    closest_distance = float('inf')\n    closest_breed = None\n \n    # Create a feature descriptor for the image\n    feature_descriptor = cv2.xfeatures2d.SIFT_create()\n    (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None)\n \n    # For each breed in the database\n    for breed in breeds:\n        # Compute the Euclidean distance between the descriptors\n        distance = 0\n \n        for i in range(len(descriptors)):\n            distance += np.linalg.norm(descriptors[i] - breed[i])\n \n        # If it is smaller than the current distance, set it as the new closest distance\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_breed = breed\n \n    # Return the closest breed\n    return closest_breed", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that classifies dogs into breed classes.\n\n### Input:\n\n\n### Output:\nimport cv2\n \n# Classifies a given image into one of the breed classes\ndef classify(image):\n    \n    # Retrieve the breed classes from the database\n    breeds = get_breeds()\n    closest_distance = float('inf')\n    closest_breed = None\n \n    # Create a feature descriptor for the image\n    feature_descriptor = cv2.xfeatures2d.SIFT_create()\n    (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None)\n \n    # For each breed in the database\n    for breed in breeds:\n        # Compute the Euclidean distance between the descriptors\n        distance = 0\n \n        for i in range(len(descriptors)):\n            distance += np.linalg.norm(descriptors[i] - breed[i])\n \n        # If it is smaller than the current distance, set it as the new closest distance\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_breed = breed\n \n    # Return the closest breed\n    return closest_breed"}
{"instruction": "Create a Django project that allows users to register and log in.", "input": "", "output": "# To create a Django project, run the following command:\n$ django-admin startproject projectname\n\n# To create an app inside the project (e.g. accounts app):\n$ python manage.py startapp accounts\n```\n# In accounts/views.py\nfrom django.shortcuts import render\nfrom django.contrib.auth import authenticate, login\nfrom .forms import RegisterForm\n\ndef register_view(request):\n    if request.method == 'POST':\n        forms = RegisterForm(request.POST)\n        if forms.is_valid():\n            user = forms.save()\n            user.refresh_from_db()  # load the profile instance created by the signal\n            user.save()\n            raw_password = forms.cleaned_data.get('password1')\n            user = authenticate(username=user.username, password=raw_password)\n            login(request, user)\n            return redirect('index')\n    else:\n        forms = RegisterForm()\n    return render(request, 'accounts/register.html', {'forms': forms})\n```", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django project that allows users to register and log in.\n\n### Input:\n\n\n### Output:\n# To create a Django project, run the following command:\n$ django-admin startproject projectname\n\n# To create an app inside the project (e.g. accounts app):\n$ python manage.py startapp accounts\n```\n# In accounts/views.py\nfrom django.shortcuts import render\nfrom django.contrib.auth import authenticate, login\nfrom .forms import RegisterForm\n\ndef register_view(request):\n    if request.method == 'POST':\n        forms = RegisterForm(request.POST)\n        if forms.is_valid():\n            user = forms.save()\n            user.refresh_from_db()  # load the profile instance created by the signal\n            user.save()\n            raw_password = forms.cleaned_data.get('password1')\n            user = authenticate(username=user.username, password=raw_password)\n            login(request, user)\n            return redirect('index')\n    else:\n        forms = RegisterForm()\n    return render(request, 'accounts/register.html', {'forms': forms})\n```"}
{"instruction": "Write an open-ended Python program to create a text mining model.", "input": "", "output": "import nltk\nimport sklearn\n\n# load the data \ndata = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))\n\n# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it\nprocessed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] \nprocessed_data = [nltk.pos_tag(sentence) for sentence in processed_data]\n\n# create the features for the model \nfeaturesets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]\n\n# split the data into training and testing sets\ntraining_set = featuresets[:int(len(featuresets)*0.8)]\ntesting_set = featuresets[int(len(featuresets)*0.8):]\n\n# create the text mining model using Naive Bayes \ntext_classifier = SklearnClassifier(naive_bayes.MultinomialNB())\n \n# Train the model \ntext_classifier.train(training_set)\n\n# Test the accuracy of the model \nprint('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an open-ended Python program to create a text mining model.\n\n### Input:\n\n\n### Output:\nimport nltk\nimport sklearn\n\n# load the data \ndata = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))\n\n# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it\nprocessed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] \nprocessed_data = [nltk.pos_tag(sentence) for sentence in processed_data]\n\n# create the features for the model \nfeaturesets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]\n\n# split the data into training and testing sets\ntraining_set = featuresets[:int(len(featuresets)*0.8)]\ntesting_set = featuresets[int(len(featuresets)*0.8):]\n\n# create the text mining model using Naive Bayes \ntext_classifier = SklearnClassifier(naive_bayes.MultinomialNB())\n \n# Train the model \ntext_classifier.train(training_set)\n\n# Test the accuracy of the model \nprint('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set))"}
{"instruction": "Construct a decision tree classifier in Python with dummy values.", "input": "", "output": "class DecisionTreeClassifier:\n    def __init__(self):\n        self.tree = None\n    \n    def fit(self, X, y):\n        # Create empty Decision Tree\n        self.tree = {'feats': [], 'thresholds': [], 'left': None, 'right': None}\n\n        # Find the best feature to split data\n        bestFeature, bestThreshold = self.findBestSplit(X, y)\n\n        # Split data into two subsets\n        leftMask = X[:, bestFeature] < bestThreshold\n        rightMask = ~leftMask\n\n        # Add the feature and threshold to the tree\n        self.tree['feats'].append(bestFeature)\n        self.tree['thresholds'].append(bestThreshold)\n\n        # Split data into subsets\n        XLeft, yLeft = X[leftMask], y[leftMask]\n        XRight, yRight = X[rightMask], y[rightMask]\n        \n        # Recursively build decision tree\n        self.tree['left'] = self.fit(XLeft, yLeft)\n        self.tree['right'] = self.fit(XRight, yRight)\n        \n        return self.tree\n      \n    def predict(self, X):\n        pass", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a decision tree classifier in Python with dummy values.\n\n### Input:\n\n\n### Output:\nclass DecisionTreeClassifier:\n    def __init__(self):\n        self.tree = None\n    \n    def fit(self, X, y):\n        # Create empty Decision Tree\n        self.tree = {'feats': [], 'thresholds': [], 'left': None, 'right': None}\n\n        # Find the best feature to split data\n        bestFeature, bestThreshold = self.findBestSplit(X, y)\n\n        # Split data into two subsets\n        leftMask = X[:, bestFeature] < bestThreshold\n        rightMask = ~leftMask\n\n        # Add the feature and threshold to the tree\n        self.tree['feats'].append(bestFeature)\n        self.tree['thresholds'].append(bestThreshold)\n\n        # Split data into subsets\n        XLeft, yLeft = X[leftMask], y[leftMask]\n        XRight, yRight = X[rightMask], y[rightMask]\n        \n        # Recursively build decision tree\n        self.tree['left'] = self.fit(XLeft, yLeft)\n        self.tree['right'] = self.fit(XRight, yRight)\n        \n        return self.tree\n      \n    def predict(self, X):\n        pass"}
{"instruction": "Implement a function in Python to implement Merge Sort algorithm.", "input": "", "output": "def merge_sort(arr): \n    # Base case \n    if len(arr) <= 1:\n        return arr\n    else: \n        # Split array into two halves \n        mid = len(arr)//2\n        left = arr[:mid] \n        right = arr[mid:] \n\n        # Call merge_sort recursively with each half \n        left = merge_sort(left) \n        right = merge_sort(right)\n    \n        # Merge each half \n        return merge(left, right) \n \ndef merge(left, right): \n  \n    # Initialize variables \n    result = [] \n    left_index = 0\n    right_index = 0\n   \n    # result will be a sorted array\n    while left_index < len(left) and right_index < len(right): \n        if left[left_index] < right[right_index]: \n            result.append(left[left_index]) \n            left_index += 1\n        else: \n            result.append(right[right_index]) \n            right_index += 1\n    \n     # If left is longer, add remaining elements\n    result += left[left_index:] \n\n    # If right is longer, add remaining elements\n    result += right[right_index:] \n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to implement Merge Sort algorithm.\n\n### Input:\n\n\n### Output:\ndef merge_sort(arr): \n    # Base case \n    if len(arr) <= 1:\n        return arr\n    else: \n        # Split array into two halves \n        mid = len(arr)//2\n        left = arr[:mid] \n        right = arr[mid:] \n\n        # Call merge_sort recursively with each half \n        left = merge_sort(left) \n        right = merge_sort(right)\n    \n        # Merge each half \n        return merge(left, right) \n \ndef merge(left, right): \n  \n    # Initialize variables \n    result = [] \n    left_index = 0\n    right_index = 0\n   \n    # result will be a sorted array\n    while left_index < len(left) and right_index < len(right): \n        if left[left_index] < right[right_index]: \n            result.append(left[left_index]) \n            left_index += 1\n        else: \n            result.append(right[right_index]) \n            right_index += 1\n    \n     # If left is longer, add remaining elements\n    result += left[left_index:] \n\n    # If right is longer, add remaining elements\n    result += right[right_index:] \n    return result"}
{"instruction": "Write code to implement a basic calculator application in Python.", "input": "", "output": "def calculator():\n    while True:\n        operation = input('''\n        Please type in the math operation you would like to complete:\n        + for addition\n        - for subtraction\n        * for multiplication\n        / for division\n        ''')\n\n        number_1 = int(input('Please enter the first number: '))\n        number_2 = int(input('Please enter the second number: '))\n\n        if operation == '+':\n            print('{} + {} = '.format(number_1, number_2))\n            print(number_1 + number_2)\n\n        elif operation == '-':\n            print('{} - {} = '.format(number_1, number_2))\n            print(number_1 - number_2)\n\n        elif operation == '*':\n            print('{} * {} = '.format(number_1, number_2))\n            print(number_1 * number_2)\n\n        elif operation == '/':\n            print('{} / {} = '.format(number_1, number_2))\n            print(number_1 / number_2)\n\n        else:\n            print('You have not typed a valid operator, please run the program again.')\n            break\n\ncalculator()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to implement a basic calculator application in Python.\n\n### Input:\n\n\n### Output:\ndef calculator():\n    while True:\n        operation = input('''\n        Please type in the math operation you would like to complete:\n        + for addition\n        - for subtraction\n        * for multiplication\n        / for division\n        ''')\n\n        number_1 = int(input('Please enter the first number: '))\n        number_2 = int(input('Please enter the second number: '))\n\n        if operation == '+':\n            print('{} + {} = '.format(number_1, number_2))\n            print(number_1 + number_2)\n\n        elif operation == '-':\n            print('{} - {} = '.format(number_1, number_2))\n            print(number_1 - number_2)\n\n        elif operation == '*':\n            print('{} * {} = '.format(number_1, number_2))\n            print(number_1 * number_2)\n\n        elif operation == '/':\n            print('{} / {} = '.format(number_1, number_2))\n            print(number_1 / number_2)\n\n        else:\n            print('You have not typed a valid operator, please run the program again.')\n            break\n\ncalculator()"}
{"instruction": "How would you create a content management system (CMS) in Python?", "input": "", "output": "import flask\nfrom flask import request, redirect, url_for, render_template\nfrom functools import wraps\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if \"username\" not in flask.session:\n            return redirect(url_for(\"login\", next=flask.request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n\n@app.route(\"/\")\n@login_required\ndef home():\n    pages = [\n        {\"title\": \"Python\", \"slug\": \"python\"},\n        {\"title\": \"JavaScript\", \"slug\": \"javascript\"},\n        {\"title\": \"HTML/CSS\", \"slug\": \"html-css\"}\n    ]\n\n    return render_template(\"cms.html\", pages=pages)\n\n@app.route(\"/login/\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        flask.session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"home\"))\n\n    return render_template(\"login.html\")\n\n@app.route(\"/logout/\")\ndef logout():\n    flask.session.pop(\"username\", None)\n    return redirect(url_for(\"login\"))\n\napp.run()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you create a content management system (CMS) in Python?\n\n### Input:\n\n\n### Output:\nimport flask\nfrom flask import request, redirect, url_for, render_template\nfrom functools import wraps\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if \"username\" not in flask.session:\n            return redirect(url_for(\"login\", next=flask.request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n\n@app.route(\"/\")\n@login_required\ndef home():\n    pages = [\n        {\"title\": \"Python\", \"slug\": \"python\"},\n        {\"title\": \"JavaScript\", \"slug\": \"javascript\"},\n        {\"title\": \"HTML/CSS\", \"slug\": \"html-css\"}\n    ]\n\n    return render_template(\"cms.html\", pages=pages)\n\n@app.route(\"/login/\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        flask.session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"home\"))\n\n    return render_template(\"login.html\")\n\n@app.route(\"/logout/\")\ndef logout():\n    flask.session.pop(\"username\", None)\n    return redirect(url_for(\"login\"))\n\napp.run()"}
{"instruction": "Create an animation in Python that displays your favorite animal.", "input": "", "output": "# import necessary libraries\nimport pygame\nimport sys\n\n# initialize pygame\npygame.init()\n\n# display width and height\ndisplay_height = 500\ndisplay_width = 500\n\n# define the colors\nblack = (0, 0, 0)\nwhite = (255, 255, 255)\n\n# Create the screen\ngame_display = pygame.display.set_mode((display_width, display_height))\npygame.display.set_caption('My Favorite Animal')\n\n# set the clock\nclock = pygame.time.Clock()\n\n# load the images of the cat\ncat_list = [pygame.image.load('cat1.png'),pygame.image.load('cat2.png'),pygame.image.load('cat3.png'),\n            pygame.image.load('cat4.png'),pygame.image.load('cat5.png')]\n\nx = 0 # x position of the cat\ny = 0 # y position of the cat\nchange_x = 0 # change in x position of the cat\nchange_y = 5 # change in y position of the cat\nframe = 0 # current frame of the cat\n\n# run the game loop\nwhile True:\n    # change the background color\n    game_display.fill(white)\n    # draw the cat\n    game_display.blit(cat_list[frame], (x, y))\n    # update the x and y positions of the cat\n    x += change_x\n    y += change_y\n    # update the next frame\n    frame += 1\n    # reset the frame if it is out of bounds\n    if frame == 5:\n        frame = 0\n    # update the window\n    pygame.display.flip()\n    # set the frames per second\n    clock.tick(30)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an animation in Python that displays your favorite animal.\n\n### Input:\n\n\n### Output:\n# import necessary libraries\nimport pygame\nimport sys\n\n# initialize pygame\npygame.init()\n\n# display width and height\ndisplay_height = 500\ndisplay_width = 500\n\n# define the colors\nblack = (0, 0, 0)\nwhite = (255, 255, 255)\n\n# Create the screen\ngame_display = pygame.display.set_mode((display_width, display_height))\npygame.display.set_caption('My Favorite Animal')\n\n# set the clock\nclock = pygame.time.Clock()\n\n# load the images of the cat\ncat_list = [pygame.image.load('cat1.png'),pygame.image.load('cat2.png'),pygame.image.load('cat3.png'),\n            pygame.image.load('cat4.png'),pygame.image.load('cat5.png')]\n\nx = 0 # x position of the cat\ny = 0 # y position of the cat\nchange_x = 0 # change in x position of the cat\nchange_y = 5 # change in y position of the cat\nframe = 0 # current frame of the cat\n\n# run the game loop\nwhile True:\n    # change the background color\n    game_display.fill(white)\n    # draw the cat\n    game_display.blit(cat_list[frame], (x, y))\n    # update the x and y positions of the cat\n    x += change_x\n    y += change_y\n    # update the next frame\n    frame += 1\n    # reset the frame if it is out of bounds\n    if frame == 5:\n        frame = 0\n    # update the window\n    pygame.display.flip()\n    # set the frames per second\n    clock.tick(30)"}
{"instruction": "Create a code that runs an orbital dynamics simulation in Python.", "input": "", "output": "import numpy as np\nimport matplotlib.pyplot as plt\n \n# Define some constants \nG = 1\n \n# Define some parameters\nm1 = 1\nm2 = 1\n \n# Initial conditions\nx1_0 = 0 # initial position of the first mass\ny1_0 = 0 \nvx1_0 = 1 # initial velocity of the first mass (along the x-axis)\nvy1_0 = 0\n \nx2_0 = 3    # initial position of the second mass\ny2_0 = 0\nvx2_0 = 0 # initial velocity of the second mass (along the x-axis)\nvy2_0 = 0.5 \n \n# Simulation parameters\nN = 1000 # number of steps\ndt = 1e-3 # time step\n \n# Create arrays to hold the x,y positions of the masses\nx1 = np.zeros(N)\ny1 = np.zeros(N)\nx2 = np.zeros(N)\ny2 = np.zeros(N)\n \n# Initial conditions\nx1[0] = x1_0\ny1[0] = y1_0\nx2[0] = x2_0\ny2[0] = y2_0\n \n# Simulation loop\nfor i in range(N-1):\n    # Calculate the force for the first mass \n    dx = x2[i] - x1[i]\n    dy = y2[i] - y1[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx1 = G*m2/r**3 * dx\n    Fy1 = G*m2/r**3 * dy\n    \n    # Calculate the force for the second mass \n    dx = x1[i] - x2[i]\n    dy = y1[i] - y2[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx2 = G*m1/r**3 * dx \n    Fy2 = G*m1/r**3 * dy\n    \n    # Update the positions \n    x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 / 2 \n    y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 / 2 \n    x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 / 2 \n    y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 / 2 \n \n# Plot the results\nplt.plot(x1, y1, label=\"Mass 1\")\nplt.plot(x2, y2, label=\"Mass 2\")\nplt.xlabel(\"x-position\")\nplt.ylabel(\"y-position\")\nplt.legend(loc=\"lower right\")\nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code that runs an orbital dynamics simulation in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# Define some constants \nG = 1\n \n# Define some parameters\nm1 = 1\nm2 = 1\n \n# Initial conditions\nx1_0 = 0 # initial position of the first mass\ny1_0 = 0 \nvx1_0 = 1 # initial velocity of the first mass (along the x-axis)\nvy1_0 = 0\n \nx2_0 = 3    # initial position of the second mass\ny2_0 = 0\nvx2_0 = 0 # initial velocity of the second mass (along the x-axis)\nvy2_0 = 0.5 \n \n# Simulation parameters\nN = 1000 # number of steps\ndt = 1e-3 # time step\n \n# Create arrays to hold the x,y positions of the masses\nx1 = np.zeros(N)\ny1 = np.zeros(N)\nx2 = np.zeros(N)\ny2 = np.zeros(N)\n \n# Initial conditions\nx1[0] = x1_0\ny1[0] = y1_0\nx2[0] = x2_0\ny2[0] = y2_0\n \n# Simulation loop\nfor i in range(N-1):\n    # Calculate the force for the first mass \n    dx = x2[i] - x1[i]\n    dy = y2[i] - y1[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx1 = G*m2/r**3 * dx\n    Fy1 = G*m2/r**3 * dy\n    \n    # Calculate the force for the second mass \n    dx = x1[i] - x2[i]\n    dy = y1[i] - y2[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx2 = G*m1/r**3 * dx \n    Fy2 = G*m1/r**3 * dy\n    \n    # Update the positions \n    x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 / 2 \n    y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 / 2 \n    x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 / 2 \n    y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 / 2 \n \n# Plot the results\nplt.plot(x1, y1, label=\"Mass 1\")\nplt.plot(x2, y2, label=\"Mass 2\")\nplt.xlabel(\"x-position\")\nplt.ylabel(\"y-position\")\nplt.legend(loc=\"lower right\")\nplt.show()"}
{"instruction": "Construct a code in Python to generate the first 10 prime numbers.", "input": "", "output": "# Python program to print first 10 prime numbers\n\n# Method 1 \ndef first10PrimeNumbers():   \t\t\n    for num in range(2, 12): \n  \n           # if number is divisible by any number  \n           # between 2 and one less than it, it is not prime\n        for i in range(2, num): \n            if num % i == 0: \n                break\n        else: \n            print(num) \n\n# Driver Code\nif __name__ == \"__main__\":\n    first10PrimeNumbers()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code in Python to generate the first 10 prime numbers.\n\n### Input:\n\n\n### Output:\n# Python program to print first 10 prime numbers\n\n# Method 1 \ndef first10PrimeNumbers():   \t\t\n    for num in range(2, 12): \n  \n           # if number is divisible by any number  \n           # between 2 and one less than it, it is not prime\n        for i in range(2, num): \n            if num % i == 0: \n                break\n        else: \n            print(num) \n\n# Driver Code\nif __name__ == \"__main__\":\n    first10PrimeNumbers()"}
{"instruction": "Create a class in Python that implements the Queue data structure.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, data):\n        self.queue.append(data)\n\n    def dequeue(self):\n        if len(self.queue) == 0:\n            print(\"Queue empty\")\n        else:\n            element = self.queue[0]\n            del self.queue[0]\n            return element\n    \n    def peek(self):\n        return self.queue[0]\n    \n    def size(self):\n        return len(self.queue)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that implements the Queue data structure.\n\n### Input:\n\n\n### Output:\nclass Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, data):\n        self.queue.append(data)\n\n    def dequeue(self):\n        if len(self.queue) == 0:\n            print(\"Queue empty\")\n        else:\n            element = self.queue[0]\n            del self.queue[0]\n            return element\n    \n    def peek(self):\n        return self.queue[0]\n    \n    def size(self):\n        return len(self.queue)"}
{"instruction": "Write a python script to print the prime numbers between 1 to 100.", "input": "", "output": "def prime_numbers(start, end):\n    for number in range(start, end + 1):\n        # if the number is divisible by any of the numbers from 2 to one less than the number itself, then it is not prime.\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                print(number)\n \n# To print all prime numbers from 1 to 100       \nprime_numbers(1, 100)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to print the prime numbers between 1 to 100.\n\n### Input:\n\n\n### Output:\ndef prime_numbers(start, end):\n    for number in range(start, end + 1):\n        # if the number is divisible by any of the numbers from 2 to one less than the number itself, then it is not prime.\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                print(number)\n \n# To print all prime numbers from 1 to 100       \nprime_numbers(1, 100)"}
{"instruction": "Create a Python program that stores user data into a SQL database.", "input": "", "output": "import sqlite3\n\n# create database connection\nconn = sqlite3.connect('user_data.db')\nc = conn.cursor()\n\n# create database table\nc.execute('''CREATE TABLE users\n       (name TEXT, age INTEGER, city TEXT)''')\n\n# add user data\nc.execute(\"INSERT INTO users VALUES ('John', 24, 'New York')\")\nc.execute(\"INSERT INTO users VALUES ('Thomas', 28, 'Chicago')\")\nc.execute(\"INSERT INTO users VALUES ('Emily', 32, 'Los Angeles')\")\n\n# save and close database connection\nconn.commit()\nconn.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that stores user data into a SQL database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\n# create database connection\nconn = sqlite3.connect('user_data.db')\nc = conn.cursor()\n\n# create database table\nc.execute('''CREATE TABLE users\n       (name TEXT, age INTEGER, city TEXT)''')\n\n# add user data\nc.execute(\"INSERT INTO users VALUES ('John', 24, 'New York')\")\nc.execute(\"INSERT INTO users VALUES ('Thomas', 28, 'Chicago')\")\nc.execute(\"INSERT INTO users VALUES ('Emily', 32, 'Los Angeles')\")\n\n# save and close database connection\nconn.commit()\nconn.close()"}
{"instruction": "Design a python program to implement the selection sort algorithm.", "input": "", "output": "\"\"\"\nDesign a python program to implement the selection sort algorithm\n\"\"\"\n\ndef selection_sort(array):\n    for i in range(len(array)-1):\n        min_idx = i\n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]:\n                min_idx = j\n        # swap elements\n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\n\nif __name__ == '__main__':\n    arr = [10, 4, 6, 7, 2, 1]\n    sorted_arr = selection_sort(arr)\n    print(sorted_arr)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to implement the selection sort algorithm.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a python program to implement the selection sort algorithm\n\"\"\"\n\ndef selection_sort(array):\n    for i in range(len(array)-1):\n        min_idx = i\n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]:\n                min_idx = j\n        # swap elements\n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\n\nif __name__ == '__main__':\n    arr = [10, 4, 6, 7, 2, 1]\n    sorted_arr = selection_sort(arr)\n    print(sorted_arr)"}
{"instruction": "Generate a neural network in Python to solve a regression problem.", "input": "", "output": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#Defines the model\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=5, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#Compiles the model\nmodel.compile(optimizer='rmsprop',\n              loss='mean_squared_error',\n              metrics=['mse'])\n\n#Fits the model to the training data\nmodel.fit(X_train, y_train, \n          batch_size=32, epochs=10, verbose=1)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network in Python to solve a regression problem.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#Defines the model\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=5, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#Compiles the model\nmodel.compile(optimizer='rmsprop',\n              loss='mean_squared_error',\n              metrics=['mse'])\n\n#Fits the model to the training data\nmodel.fit(X_train, y_train, \n          batch_size=32, epochs=10, verbose=1)"}
{"instruction": "Can you write a Python script to print the first 20 prime numbers?", "input": "", "output": "# Program to print the first 20 prime numbers\n\ndef is_prime(num):\n\n    # Base case\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n\n    # Iterate from 3 to the sqrt of number\n    i = 3\n    while(i * i <= num):\n        \n        if num % i == 0:\n            return False\n        i = i + 2\n\n    return True\n\n# Print the first 20 prime numbers\nn = 2\ncount = 0\n\nwhile count < 20:\n\n    if is_prime(n):\n        print(n, end=' ', flush=True)\n        count += 1\n    n += 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python script to print the first 20 prime numbers?\n\n### Input:\n\n\n### Output:\n# Program to print the first 20 prime numbers\n\ndef is_prime(num):\n\n    # Base case\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n\n    # Iterate from 3 to the sqrt of number\n    i = 3\n    while(i * i <= num):\n        \n        if num % i == 0:\n            return False\n        i = i + 2\n\n    return True\n\n# Print the first 20 prime numbers\nn = 2\ncount = 0\n\nwhile count < 20:\n\n    if is_prime(n):\n        print(n, end=' ', flush=True)\n        count += 1\n    n += 1"}
{"instruction": "Write a Python code that would solve a sudoku puzzle using Python.", "input": "", "output": "def sudoku(board): \n \n    # Check if the board is full \n    if not any(None in sublist for sublist in board): \n        return True\n  \n    # Find empty cells \n    for i in range(len(board)): \n        for j in range(len(board[0])): \n            if board[i][j]==None: \n                for k in range(1,10): \n                    board[i][j]=k \n                    # Try to solve the board \n                    if sudoku(board): \n                        return True\n                    # Backtrack and try with different  \n                    # values \n                    board[i][j]=None \n    return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that would solve a sudoku puzzle using Python.\n\n### Input:\n\n\n### Output:\ndef sudoku(board): \n \n    # Check if the board is full \n    if not any(None in sublist for sublist in board): \n        return True\n  \n    # Find empty cells \n    for i in range(len(board)): \n        for j in range(len(board[0])): \n            if board[i][j]==None: \n                for k in range(1,10): \n                    board[i][j]=k \n                    # Try to solve the board \n                    if sudoku(board): \n                        return True\n                    # Backtrack and try with different  \n                    # values \n                    board[i][j]=None \n    return False"}
{"instruction": "Create a program in Python to convert a given string to pig latin.", "input": "", "output": "def pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to convert a given string to pig latin.\n\n### Input:\n\n\n### Output:\ndef pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words)"}
{"instruction": "Create a chatbot using Python which can respond to a user's query.", "input": "", "output": "import random\n\ndef chatbot_response(user_response):\n  \n  bot_response = ''\n \n  if user_response == 'hello':\n    bot_response = random.choice(['Hello!', 'Hi.', 'Hey there!'])\n  elif user_response == 'how are you?':\n    bot_response = 'I am doing well. How about you?'\n  elif user_response == 'bye':\n    bot_response = 'Bye! It was nice talking to you.'\n \n  return bot_response\n\n# Main Program\n\nuser_response = input(\"User: \")\n\nwhile user_response != 'bye':\n  print(\"Chatbot: \" + chatbot_response(user_response))\n  user_response = input(\"User: \")\n\nif user_response == 'bye':\n  print(\"Chatbot: \" + chatbot_response(user_response))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a chatbot using Python which can respond to a user's query.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef chatbot_response(user_response):\n  \n  bot_response = ''\n \n  if user_response == 'hello':\n    bot_response = random.choice(['Hello!', 'Hi.', 'Hey there!'])\n  elif user_response == 'how are you?':\n    bot_response = 'I am doing well. How about you?'\n  elif user_response == 'bye':\n    bot_response = 'Bye! It was nice talking to you.'\n \n  return bot_response\n\n# Main Program\n\nuser_response = input(\"User: \")\n\nwhile user_response != 'bye':\n  print(\"Chatbot: \" + chatbot_response(user_response))\n  user_response = input(\"User: \")\n\nif user_response == 'bye':\n  print(\"Chatbot: \" + chatbot_response(user_response))"}
{"instruction": "Write an algorithm in Python for detecting an anagram in a string.", "input": "", "output": "def is_anagram(s1, s2):\n    # Remove whitespace and make strings lowercase\n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n\n    # Check lengths. If lengths differ, strings cannot be anagrams\n    if len(s1) != len(s2):\n        return False\n \n    # Check each letter. Strings are anagrams when there is a one-to-one mapping of characters.\n    count = [0] * 26\n    for i in range(len(s1)):\n        index1 = ord(s1[i]) - ord('a')\n        index2 = ord(s2[i]) - ord('a')\n\n        count[index1] += 1\n        count[index2] -= 1\n \n    for i in range(26):\n        if count[i] != 0:\n            return False\n \n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python for detecting an anagram in a string.\n\n### Input:\n\n\n### Output:\ndef is_anagram(s1, s2):\n    # Remove whitespace and make strings lowercase\n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n\n    # Check lengths. If lengths differ, strings cannot be anagrams\n    if len(s1) != len(s2):\n        return False\n \n    # Check each letter. Strings are anagrams when there is a one-to-one mapping of characters.\n    count = [0] * 26\n    for i in range(len(s1)):\n        index1 = ord(s1[i]) - ord('a')\n        index2 = ord(s2[i]) - ord('a')\n\n        count[index1] += 1\n        count[index2] -= 1\n \n    for i in range(26):\n        if count[i] != 0:\n            return False\n \n    return True"}
{"instruction": "Create a python code to optimize an equation for its maximum value", "input": "", "output": "\"\"\"\nCreate a python code to optimize an equation for its maximum value.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    # Objective function\n    return -(2*x[0] + 5*x[1] + 3*x[2] + 6*x[3])\n\nif __name__ == '__main__':\n    # Initial guess\n    x0 = [2,4,1,3]\n\n    # Show initial objective\n    print('Initial Objective: ' + str(objective(x0)))\n\n    #Optimize\n    res = minimize(objective, x0, method='nelder-mead',\n            options={'xtol': 1e-8, 'disp': True})\n\n    #Show final objective\n    print('Final Objective: ' + str(res.fun))\n\n    #Print Optimized values\n    print('Optimized values: ' + str(res.x))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to optimize an equation for its maximum value\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a python code to optimize an equation for its maximum value.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    # Objective function\n    return -(2*x[0] + 5*x[1] + 3*x[2] + 6*x[3])\n\nif __name__ == '__main__':\n    # Initial guess\n    x0 = [2,4,1,3]\n\n    # Show initial objective\n    print('Initial Objective: ' + str(objective(x0)))\n\n    #Optimize\n    res = minimize(objective, x0, method='nelder-mead',\n            options={'xtol': 1e-8, 'disp': True})\n\n    #Show final objective\n    print('Final Objective: ' + str(res.fun))\n\n    #Print Optimized values\n    print('Optimized values: ' + str(res.x))"}
{"instruction": "Fluently and completely document a quick sort algorithm in Python.", "input": "", "output": "def quick_sort(arr):\n    \"\"\"\n    Quick sort is a sorting algorithm that uses the divide-and-conquer approach to sort a given array.\n    \n    Parameters\n    ----------\n    arr: List[int]\n        list of integers to be sorted\n    \n    Returns\n    -------\n    List[int]\n        sorted list of integers\n   \n    \"\"\"\n    if arr is None or len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left_arr, right_arr = [], []\n    for i in range(len(arr)):\n        if arr[i] < pivot:\n            left_arr.append(arr[i])\n        elif arr[i] > pivot:\n            right_arr.append(arr[i])\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFluently and completely document a quick sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quick_sort(arr):\n    \"\"\"\n    Quick sort is a sorting algorithm that uses the divide-and-conquer approach to sort a given array.\n    \n    Parameters\n    ----------\n    arr: List[int]\n        list of integers to be sorted\n    \n    Returns\n    -------\n    List[int]\n        sorted list of integers\n   \n    \"\"\"\n    if arr is None or len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left_arr, right_arr = [], []\n    for i in range(len(arr)):\n        if arr[i] < pivot:\n            left_arr.append(arr[i])\n        elif arr[i] > pivot:\n            right_arr.append(arr[i])\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"}
{"instruction": "Write a Python program to detect and remove loop in a linked list.", "input": "", "output": "class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n  fast_ptr = head\n  slow_ptr = head\n\n  while (slow_ptr and fast_ptr and fast_ptr.next):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next.next\n      if slow_ptr == fast_ptr:\n          return slow_ptr\n\n  return None\n\ndef remove_loop(head, loop_ptr):\n  slow_ptr = head\n  fast_ptr = loop_ptr\n\n  while (slow_ptr != fast_ptr):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next\n\n  prev_slow_ptr = None\n  while (slow_ptr != fast_ptr):\n    prev_slow_ptr = slow_ptr\n    slow_ptr = slow_ptr.next\n    fast_ptr = fast_ptr.next\n\n  prev_slow_ptr.next = None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect and remove loop in a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n  fast_ptr = head\n  slow_ptr = head\n\n  while (slow_ptr and fast_ptr and fast_ptr.next):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next.next\n      if slow_ptr == fast_ptr:\n          return slow_ptr\n\n  return None\n\ndef remove_loop(head, loop_ptr):\n  slow_ptr = head\n  fast_ptr = loop_ptr\n\n  while (slow_ptr != fast_ptr):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next\n\n  prev_slow_ptr = None\n  while (slow_ptr != fast_ptr):\n    prev_slow_ptr = slow_ptr\n    slow_ptr = slow_ptr.next\n    fast_ptr = fast_ptr.next\n\n  prev_slow_ptr.next = None"}
{"instruction": "Design an algorithm in Python to efficiently reverse a linked list", "input": "", "output": "# Node class \nclass Node: \n \n    # Function to initialise the node object\n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # This function should reverse linked list and return \n    # head of the modified linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n          \n        return self.head", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to efficiently reverse a linked list\n\n### Input:\n\n\n### Output:\n# Node class \nclass Node: \n \n    # Function to initialise the node object\n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # This function should reverse linked list and return \n    # head of the modified linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n          \n        return self.head"}
{"instruction": "Write a Python program that simulates a text-based adventure game.", "input": "", "output": "# This is a text-based adventure game written in Python \n# You will have to explore the world, find items, and complete quests\ndef main():\n    print(\"Welcome to the world of adventure! \\n\")\n\n    # Initialize the world \n    rooms, items, quests = initialize_world()\n    \n    while True:\n        # Print the current room description \n        print(rooms[current_room]['description'])\n\n        # Print the current items and quests that are available\n        print_items(current_room)\n        print_quests(current_room)\n\n        # Get user input \n        command = input(\"What would you like to do? \\n\")\n        \n        # Call the appropriate action based on the user input. \n        process_command(command, rooms, items, quests)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that simulates a text-based adventure game.\n\n### Input:\n\n\n### Output:\n# This is a text-based adventure game written in Python \n# You will have to explore the world, find items, and complete quests\ndef main():\n    print(\"Welcome to the world of adventure! \\n\")\n\n    # Initialize the world \n    rooms, items, quests = initialize_world()\n    \n    while True:\n        # Print the current room description \n        print(rooms[current_room]['description'])\n\n        # Print the current items and quests that are available\n        print_items(current_room)\n        print_quests(current_room)\n\n        # Get user input \n        command = input(\"What would you like to do? \\n\")\n        \n        # Call the appropriate action based on the user input. \n        process_command(command, rooms, items, quests)"}
{"instruction": "Develop a program in Python for implementing Merge Sort algorithm.", "input": "", "output": "def merge_sort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n  \n        merge_sort(L)\n        merge_sort(R)\n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nif __name__ == '__main__':\n    arr = [0, 4, 1, 3, 6, 5, 8, 7]\n    print(\"Given array is\", arr)\n    merge_sort(arr) \n    print(\"Sorted array is: \", arr)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for implementing Merge Sort algorithm.\n\n### Input:\n\n\n### Output:\ndef merge_sort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n  \n        merge_sort(L)\n        merge_sort(R)\n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nif __name__ == '__main__':\n    arr = [0, 4, 1, 3, 6, 5, 8, 7]\n    print(\"Given array is\", arr)\n    merge_sort(arr) \n    print(\"Sorted array is: \", arr)"}
{"instruction": "Create a menu-based interface in Python to interact with the user.", "input": "", "output": "import os\n\ndef print_menu():\n    os.system('clear')\n    print('')\n    print('    ========== MENU ==========    ')\n    print('=================================')\n    print('1. Enter Customer Data')\n    print('2. Update Customer Data')\n    print('3. Delete Customer Data')\n    print('4. Exit')\n    print('')\n\ndef get_input():\n    choice = int(input('Enter your choice [1-4] : '))\n    return  choice\n\nif __name__ == '__main__':\n    # Initialize menu\n    print_menu()\n    \n    # Get user input\n    choice = get_input()\n    \n    # Run User Choice\n    if choice == 1:\n        print('Option 1 Selected!')\n    elif choice == 2:\n        print('Option 2 Selected!')\n    elif choice == 3:\n        print('Option 3 Selected!')\n    elif choice == 4:\n        print('Exiting...')\n    else:\n        print('Invalid Choice!')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a menu-based interface in Python to interact with the user.\n\n### Input:\n\n\n### Output:\nimport os\n\ndef print_menu():\n    os.system('clear')\n    print('')\n    print('    ========== MENU ==========    ')\n    print('=================================')\n    print('1. Enter Customer Data')\n    print('2. Update Customer Data')\n    print('3. Delete Customer Data')\n    print('4. Exit')\n    print('')\n\ndef get_input():\n    choice = int(input('Enter your choice [1-4] : '))\n    return  choice\n\nif __name__ == '__main__':\n    # Initialize menu\n    print_menu()\n    \n    # Get user input\n    choice = get_input()\n    \n    # Run User Choice\n    if choice == 1:\n        print('Option 1 Selected!')\n    elif choice == 2:\n        print('Option 2 Selected!')\n    elif choice == 3:\n        print('Option 3 Selected!')\n    elif choice == 4:\n        print('Exiting...')\n    else:\n        print('Invalid Choice!')"}
{"instruction": "Create a Python code generator for drawing a 3D cube using Pyglet.", "input": "", "output": "import pyglet\n#cube window\nwindow = pyglet.window.Window()\n\norigin_x = window.width/2\norigin_y = window.height/2\n\n#cube sides \nwidth = 400\nheight = 400\ndepth = 400\n\n#vertices\nx1,y1,z1 = origin_x - width/2, origin_y - height/2, 0\nx2,y2,z2 = origin_x + width/2, origin_y - height/2, 0\nx3,y3,z3 = origin_x - width/2, origin_y + height/2, 0\nx4,y4,z4 = origin_x + width/2, origin_y + height/2, 0\nx5,y5,z5 = origin_x - width/2, origin_y - height/2, depth\nx6,y6,z6 = origin_x + width/2, origin_y - height/2, depth\nx7,y7,z7 = origin_x - width/2, origin_y + height/2, depth\nx8,y8,z8 = origin_x + width/2, origin_y + height/2, depth\n\n# defining the vertices\nvertices = [x1,y1,z1, x2,y2,z2, x3,y3,z3, x4,y4,z4, x5,y5,z5, x6,y6,z6, x7,y7,z7, x8,y8,z8]\n\n#drawing the cube\npolygon=pyglet.graphics.vertex_list(36,\n    ('v3f/static',vertices)\n)\n\n#clear the window\n@window.event\ndef on_draw():\n    window.clear()\n    polygon.draw(pyglet.gl.GL_QUADS)\n\npyglet.app.run()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code generator for drawing a 3D cube using Pyglet.\n\n### Input:\n\n\n### Output:\nimport pyglet\n#cube window\nwindow = pyglet.window.Window()\n\norigin_x = window.width/2\norigin_y = window.height/2\n\n#cube sides \nwidth = 400\nheight = 400\ndepth = 400\n\n#vertices\nx1,y1,z1 = origin_x - width/2, origin_y - height/2, 0\nx2,y2,z2 = origin_x + width/2, origin_y - height/2, 0\nx3,y3,z3 = origin_x - width/2, origin_y + height/2, 0\nx4,y4,z4 = origin_x + width/2, origin_y + height/2, 0\nx5,y5,z5 = origin_x - width/2, origin_y - height/2, depth\nx6,y6,z6 = origin_x + width/2, origin_y - height/2, depth\nx7,y7,z7 = origin_x - width/2, origin_y + height/2, depth\nx8,y8,z8 = origin_x + width/2, origin_y + height/2, depth\n\n# defining the vertices\nvertices = [x1,y1,z1, x2,y2,z2, x3,y3,z3, x4,y4,z4, x5,y5,z5, x6,y6,z6, x7,y7,z7, x8,y8,z8]\n\n#drawing the cube\npolygon=pyglet.graphics.vertex_list(36,\n    ('v3f/static',vertices)\n)\n\n#clear the window\n@window.event\ndef on_draw():\n    window.clear()\n    polygon.draw(pyglet.gl.GL_QUADS)\n\npyglet.app.run()"}
{"instruction": "Design and implement a custom hashmap data structure using python.", "input": "", "output": "class HashMap:\n \n    def __init__(self, size): \n        self.size = size \n        self.map = [None] * size\n \n    def _get_hash(self, key):\n        hashCode = 0\n        for char in key:\n            hashCode += ord(char)\n        return hashCode % self.size\n \n    def add(self, key, value):\n        keyHash = self._get_hash(key)\n \n        keyValue = [key, value]\n        if self.map[keyHash] is None:\n            self.map[keyHash] = list([keyValue])\n            return True\n        else:\n            for pair in self.map[keyHash]:\n                if pair[0] == key:\n                    pair[1] = value\n                    return True\n            self.map[keyHash].append(keyValue)\n            return True\n \n    def get(self, key):\n        keyHash = self._get_hash(key)\n        if self.map[keyHash] is None:\n            return None\n        else:\n            for pair in self.map[keyHash]:\n                if pair[0] == key:\n                    return pair[1]\n        return None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a custom hashmap data structure using python.\n\n### Input:\n\n\n### Output:\nclass HashMap:\n \n    def __init__(self, size): \n        self.size = size \n        self.map = [None] * size\n \n    def _get_hash(self, key):\n        hashCode = 0\n        for char in key:\n            hashCode += ord(char)\n        return hashCode % self.size\n \n    def add(self, key, value):\n        keyHash = self._get_hash(key)\n \n        keyValue = [key, value]\n        if self.map[keyHash] is None:\n            self.map[keyHash] = list([keyValue])\n            return True\n        else:\n            for pair in self.map[keyHash]:\n                if pair[0] == key:\n                    pair[1] = value\n                    return True\n            self.map[keyHash].append(keyValue)\n            return True\n \n    def get(self, key):\n        keyHash = self._get_hash(key)\n        if self.map[keyHash] is None:\n            return None\n        else:\n            for pair in self.map[keyHash]:\n                if pair[0] == key:\n                    return pair[1]\n        return None"}
{"instruction": "Create a neural network in Python for predicting the stock market.", "input": "", "output": "import numpy as np\nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\n\n# define the data\ninputs = np.loadtxt('inputs.csv', delimiter=',') \ntargets = np.loadtxt('targets.csv', delimiter=',')\n\n# Scale the data\nsc = StandardScaler() \ninputs = sc.fit_transform(inputs) \ntargets = sc.fit_transform(targets)\n\n# define the model\ndef create_model():\n    model = Sequential()\n    model.add(Dense(64, activation='relu', input_dim=4))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(1))\n    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n    return model \n\n# create the model and evaluate it\nmodel = KerasRegressor(create_model, epochs=50, batch_size=32, verbose=0) \nresults = cross_val_score(model, inputs, targets, cv=5)\n\n# print the results\nprint(\"Mean: \", results.mean())\nprint(\"Standard Deviation: \", results.std())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python for predicting the stock market.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\n\n# define the data\ninputs = np.loadtxt('inputs.csv', delimiter=',') \ntargets = np.loadtxt('targets.csv', delimiter=',')\n\n# Scale the data\nsc = StandardScaler() \ninputs = sc.fit_transform(inputs) \ntargets = sc.fit_transform(targets)\n\n# define the model\ndef create_model():\n    model = Sequential()\n    model.add(Dense(64, activation='relu', input_dim=4))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(1))\n    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n    return model \n\n# create the model and evaluate it\nmodel = KerasRegressor(create_model, epochs=50, batch_size=32, verbose=0) \nresults = cross_val_score(model, inputs, targets, cv=5)\n\n# print the results\nprint(\"Mean: \", results.mean())\nprint(\"Standard Deviation: \", results.std())"}
{"instruction": "Build a recommendation system in Python for finding similar items.", "input": "", "output": "# import libraries \nimport numpy as np\nimport scipy \nfrom nltk.stem.porter import * \nimport pandas as pd \nfrom scipy.spatial.distance import cosine, correlation \nfrom sklearn import metrics \n  \n# Read the metadata \nmetadata = pd.read_csv('movies_metadata.csv') \n  \n# select the required columns \nmetadata = metadata[['title', 'genres']] \n  \n# calculate the genre of the movie by using any tokenizer like \n# RegexpTokenizer or PorterStemmer tokenizer \nstemmer = PorterStemmer() \n\n# Function to get genre \ndef get_genre(x): \n    genre1 = [] \n    try: \n        mylist = x['genres'].split('|') \n        for i in mylist:\n            # print(stemmer.stem(i))\n            genre1.append(stemmer.stem(i)) \n    except: \n        pass\n    return genre1\n  \n# create a new column having all the genres \nmetadata['genre_new'] = metadata.apply(get_genre, axis = 1) \n\n# Function to calculate the similarity between moviess \n# based on their genres \ndef genre_similarity(x):     \n    sim = [] \n    for i in x['genre_new']:       \n        indx = metadata[metadata['genre_new'].map(lambda d: i in d)].index           \n        sim.extend(list(metadata['title'][indx])) \n          \n    return sim[:20] \n  \n# create a new column having the similar movies to each movie \nmetadata['sim_movies'] = metadata.apply(genre_similarity, axis = 1)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a recommendation system in Python for finding similar items.\n\n### Input:\n\n\n### Output:\n# import libraries \nimport numpy as np\nimport scipy \nfrom nltk.stem.porter import * \nimport pandas as pd \nfrom scipy.spatial.distance import cosine, correlation \nfrom sklearn import metrics \n  \n# Read the metadata \nmetadata = pd.read_csv('movies_metadata.csv') \n  \n# select the required columns \nmetadata = metadata[['title', 'genres']] \n  \n# calculate the genre of the movie by using any tokenizer like \n# RegexpTokenizer or PorterStemmer tokenizer \nstemmer = PorterStemmer() \n\n# Function to get genre \ndef get_genre(x): \n    genre1 = [] \n    try: \n        mylist = x['genres'].split('|') \n        for i in mylist:\n            # print(stemmer.stem(i))\n            genre1.append(stemmer.stem(i)) \n    except: \n        pass\n    return genre1\n  \n# create a new column having all the genres \nmetadata['genre_new'] = metadata.apply(get_genre, axis = 1) \n\n# Function to calculate the similarity between moviess \n# based on their genres \ndef genre_similarity(x):     \n    sim = [] \n    for i in x['genre_new']:       \n        indx = metadata[metadata['genre_new'].map(lambda d: i in d)].index           \n        sim.extend(list(metadata['title'][indx])) \n          \n    return sim[:20] \n  \n# create a new column having the similar movies to each movie \nmetadata['sim_movies'] = metadata.apply(genre_similarity, axis = 1)"}
{"instruction": "Design a full stack application for user authentication in Python.", "input": "", "output": "# Imports and Setup\nimport flask\nfrom flask import Flask, request, redirect, render_template\nfrom flask_login import LoginManager, login_user, login_required\nimport os\nimport sqlite3\n\n# Configure application\napp = Flask(__name__)\napp.secret_key = os.urandom(24)\n\n# Configure database\ndb_file = './data.db'\nconn = sqlite3.connect(db_file)\ncursor = conn.cursor()\n\n# User authentication\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n\n@login_manager.user_loader\ndef load_user(user_id):\n    cursor.execute(f\"SELECT * FROM users WHERE id = {user_id}\")\n    user = cursor.fetchone()\n    return User(*user)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'GET':\n        return render_template('login.html')\n    elif request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        \n        cursor.execute(f\"SELECT * FROM users WHERE username = ?\" , (username,))\n        user = cursor.fetchone()\n        if user is not None and check_password_hash(user[3], password):\n            login_user(User(*user))\n            return redirect(url_for('index'))\n        else:\n            return redirect(url_for('login'))\n            \n# Application routes\n@app.route('/')\n@login_required\ndef index():\n    return 'Welcome to the application!'\n\nif __name__ == '__main__':\n    app.run()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a full stack application for user authentication in Python.\n\n### Input:\n\n\n### Output:\n# Imports and Setup\nimport flask\nfrom flask import Flask, request, redirect, render_template\nfrom flask_login import LoginManager, login_user, login_required\nimport os\nimport sqlite3\n\n# Configure application\napp = Flask(__name__)\napp.secret_key = os.urandom(24)\n\n# Configure database\ndb_file = './data.db'\nconn = sqlite3.connect(db_file)\ncursor = conn.cursor()\n\n# User authentication\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n\n@login_manager.user_loader\ndef load_user(user_id):\n    cursor.execute(f\"SELECT * FROM users WHERE id = {user_id}\")\n    user = cursor.fetchone()\n    return User(*user)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'GET':\n        return render_template('login.html')\n    elif request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        \n        cursor.execute(f\"SELECT * FROM users WHERE username = ?\" , (username,))\n        user = cursor.fetchone()\n        if user is not None and check_password_hash(user[3], password):\n            login_user(User(*user))\n            return redirect(url_for('index'))\n        else:\n            return redirect(url_for('login'))\n            \n# Application routes\n@app.route('/')\n@login_required\ndef index():\n    return 'Welcome to the application!'\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction": "Build a deep learning model in Python that predicts the stock price", "input": "", "output": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM\n\ndef create_model(input_shape):\n    model = Sequential()\n    model.add(LSTM(128, input_shape=input_shape))\n    model.add(Dropout(0.3))\n    model.add(Dense(1))\n    model.compile(loss='mse', optimizer='rmsprop')\n    return model\n\ninput_shape = (X_train.shape[1],1)\nmodel = create_model(input_shape)\nmodel.fit(X_train, y_train, batch_size=32, epochs=30)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a deep learning model in Python that predicts the stock price\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM\n\ndef create_model(input_shape):\n    model = Sequential()\n    model.add(LSTM(128, input_shape=input_shape))\n    model.add(Dropout(0.3))\n    model.add(Dense(1))\n    model.compile(loss='mse', optimizer='rmsprop')\n    return model\n\ninput_shape = (X_train.shape[1],1)\nmodel = create_model(input_shape)\nmodel.fit(X_train, y_train, batch_size=32, epochs=30)"}
{"instruction": "Generate Python code to find the third largest element in an array.", "input": "", "output": "def third_largest(arr): \n    first = arr[0] \n    second = -float(\"inf\") \n    third = -float(\"inf\") \n  \n    for num in arr[1:]: \n        if (num > first): \n            third = second \n            second = first \n            first = num\n  \n        elif (num > second):              \n            third = second \n            second = num \n  \n        elif (num > third):               \n            third = num \n                               \n    return third", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to find the third largest element in an array.\n\n### Input:\n\n\n### Output:\ndef third_largest(arr): \n    first = arr[0] \n    second = -float(\"inf\") \n    third = -float(\"inf\") \n  \n    for num in arr[1:]: \n        if (num > first): \n            third = second \n            second = first \n            first = num\n  \n        elif (num > second):              \n            third = second \n            second = num \n  \n        elif (num > third):               \n            third = num \n                               \n    return third"}
{"instruction": "Build a web scraper in Python to extract data from a given website.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Define a function to fetch the webpage and extract data\ndef data_extraction(url):\n    # Fetch the webpage and parse it\n    page = requests.get(url)\n    page_parse = BeautifulSoup(page.content, 'html.parser')\n    \n    # Extract data\n    data = page_parse.find_all('div', class_='data-item')\n    \n    return data\n\n# Provide the URL of the website\nurl = 'https://example.com'\n\n# Fetch the webpage and extract data\ndata = data_extraction(url)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web scraper in Python to extract data from a given website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Define a function to fetch the webpage and extract data\ndef data_extraction(url):\n    # Fetch the webpage and parse it\n    page = requests.get(url)\n    page_parse = BeautifulSoup(page.content, 'html.parser')\n    \n    # Extract data\n    data = page_parse.find_all('div', class_='data-item')\n    \n    return data\n\n# Provide the URL of the website\nurl = 'https://example.com'\n\n# Fetch the webpage and extract data\ndata = data_extraction(url)"}
{"instruction": "Design a Python program that prints out the first 10 prime numbers.", "input": "", "output": "\"\"\"\nDesign a Python program to print out the first 10 prime numbers\n\"\"\"\n\ndef get_prime_numbers(n):\n    prime_numbers = []\n    x = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        for num in prime_numbers:\n            if x % num == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            prime_numbers.append(x)\n\n        x += 1\n\n    return prime_numbers\n\nif __name__ == '__main__':\n    result = get_prime_numbers(10)\n    print(result)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that prints out the first 10 prime numbers.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python program to print out the first 10 prime numbers\n\"\"\"\n\ndef get_prime_numbers(n):\n    prime_numbers = []\n    x = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        for num in prime_numbers:\n            if x % num == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            prime_numbers.append(x)\n\n        x += 1\n\n    return prime_numbers\n\nif __name__ == '__main__':\n    result = get_prime_numbers(10)\n    print(result)"}
{"instruction": "Using a Python dictionary implement a function to reverse a string.", "input": "", "output": "def reverseString(s):\n    # define a dictionary \n    revDict = {}\n    # Iterate through the characters in the string\n    for i in range(len(s)):\n      # store the character as the key and its index as the associated value\n      revDict[s[i]] = i\n    # sort the dictionary by the values\n    revDict = sorted(revDict.items(), key = \n             lambda kv:(kv[1], kv[0])) \n    # Join the elements to form a reversed string\n    reversedString =  \"\".join(item[0] for item in revDict) \n\n    return reversedString", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a Python dictionary implement a function to reverse a string.\n\n### Input:\n\n\n### Output:\ndef reverseString(s):\n    # define a dictionary \n    revDict = {}\n    # Iterate through the characters in the string\n    for i in range(len(s)):\n      # store the character as the key and its index as the associated value\n      revDict[s[i]] = i\n    # sort the dictionary by the values\n    revDict = sorted(revDict.items(), key = \n             lambda kv:(kv[1], kv[0])) \n    # Join the elements to form a reversed string\n    reversedString =  \"\".join(item[0] for item in revDict) \n\n    return reversedString"}
{"instruction": "Write a Python program to automatically generate English sentences.", "input": "", "output": "\"\"\"\nGenerate English sentences\n\"\"\"\n\nimport random\n\narticle_list = [\"the\", \"a\", \"an\"]\nsubject_list = [\"boy\", \"girl\"]\nverb_list = [\"ate\", \"ran\", \"jumped\"]\nnoun_list = [\"fish\", \"ice cream\", \"cat\"]\n\ndef generate_sentence():\n    article = random.choice(article_list)\n    subject = random.choice(subject_list)\n    verb = random.choice(verb_list)\n    noun = random.choice(noun_list)\n    sentence = article + \" \" + subject + \" \" + verb + \" \" + noun\n    return sentence\n\nif __name__ == '__main__':\n    print(generate_sentence())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to automatically generate English sentences.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate English sentences\n\"\"\"\n\nimport random\n\narticle_list = [\"the\", \"a\", \"an\"]\nsubject_list = [\"boy\", \"girl\"]\nverb_list = [\"ate\", \"ran\", \"jumped\"]\nnoun_list = [\"fish\", \"ice cream\", \"cat\"]\n\ndef generate_sentence():\n    article = random.choice(article_list)\n    subject = random.choice(subject_list)\n    verb = random.choice(verb_list)\n    noun = random.choice(noun_list)\n    sentence = article + \" \" + subject + \" \" + verb + \" \" + noun\n    return sentence\n\nif __name__ == '__main__':\n    print(generate_sentence())"}
{"instruction": "Create a Python function to classify Tweets as positive or negative", "input": "", "output": "def classify_tweet(tweet):\n    # Create bag of words\n    bag_of_words = tweet.split()\n    # Filter out words in bag of words that are not in the classifier words\n    filtered_bag_of_words = [word for word in bag_of_words if word in classifier_words]\n    # Calculate the score\n    score = sum(classifier_values[word] for word in filtered_bag_of_words)\n    # Classify the tweet as positive or negative base on the score\n    if score > 0:\n        return 'positive'\n    elif score < 0:\n        return 'negative'\n    else:\n        return 'neutral'", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to classify Tweets as positive or negative\n\n### Input:\n\n\n### Output:\ndef classify_tweet(tweet):\n    # Create bag of words\n    bag_of_words = tweet.split()\n    # Filter out words in bag of words that are not in the classifier words\n    filtered_bag_of_words = [word for word in bag_of_words if word in classifier_words]\n    # Calculate the score\n    score = sum(classifier_values[word] for word in filtered_bag_of_words)\n    # Classify the tweet as positive or negative base on the score\n    if score > 0:\n        return 'positive'\n    elif score < 0:\n        return 'negative'\n    else:\n        return 'neutral'"}
{"instruction": "Write a Python function to reproduce a single neural network layer.", "input": "", "output": "import numpy as np\n\ndef get_layer(input_dim, output_dim, activation='relu'):\n    \"\"\"\n    This function creates a single layer neural network in a form of numpy array with given\n    input and output dimensions and activation (default relu).\n    \"\"\"\n    layer = np.random.rand(input_dim, output_dim)\n    if activation == 'relu':\n        layer = np.maximum(layer, 0)\n    elif activation == 'softmax':\n        layer = np.exp(layer) / np.sum(np.exp(layer))\n    elif activation == 'sigmoid':\n        layer = 1 / (1 + np.exp(-layer))\n    return layer", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to reproduce a single neural network layer.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef get_layer(input_dim, output_dim, activation='relu'):\n    \"\"\"\n    This function creates a single layer neural network in a form of numpy array with given\n    input and output dimensions and activation (default relu).\n    \"\"\"\n    layer = np.random.rand(input_dim, output_dim)\n    if activation == 'relu':\n        layer = np.maximum(layer, 0)\n    elif activation == 'softmax':\n        layer = np.exp(layer) / np.sum(np.exp(layer))\n    elif activation == 'sigmoid':\n        layer = 1 / (1 + np.exp(-layer))\n    return layer"}
{"instruction": "Design a basic ticket reservation system using Python dictionaries.", "input": "", "output": "# Create a dictionary to store ticket information\ntickets = {}\n\n# Function to book ticket\ndef book_ticket(name, ticket_type, ticket_price):\n\t# Check if the ticket exists\n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] -= 1\n        tickets[ticket_type]['ticket_holders'].append(name)\n    else:\n        tickets[ticket_type] = {\n            'availability': 10 - 1,\n            'price': ticket_price,\n            'ticket_holders': [name]\n        }\n\n# Function to cancel ticket\ndef cancel_ticket(name, ticket_type): \n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] += 1\n        tickets[ticket_type]['ticket_holders'].remove(name)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic ticket reservation system using Python dictionaries.\n\n### Input:\n\n\n### Output:\n# Create a dictionary to store ticket information\ntickets = {}\n\n# Function to book ticket\ndef book_ticket(name, ticket_type, ticket_price):\n\t# Check if the ticket exists\n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] -= 1\n        tickets[ticket_type]['ticket_holders'].append(name)\n    else:\n        tickets[ticket_type] = {\n            'availability': 10 - 1,\n            'price': ticket_price,\n            'ticket_holders': [name]\n        }\n\n# Function to cancel ticket\ndef cancel_ticket(name, ticket_type): \n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] += 1\n        tickets[ticket_type]['ticket_holders'].remove(name)"}
{"instruction": "Design and implement a Binary Search Tree data structure in Python.", "input": "", "output": "class Node():\n    def __init__(self, val):\n        self.left = None \n        self.right = None\n        self.val = val \n\nclass BinaryTree:\n    def __init__(self): \n        self.root = None\n  \n    def addNode(self, val):\n        if self.root == None:\n            self.root = Node(val)\n        else: \n            self._add(val, self.root)\n  \n    def _add(self, val, node): \n        if val < node.val: \n            if node.left is not None: \n                self._add(val, node.left) \n            else: \n                node.left = Node(val) \n        else: \n            if node.right is not None: \n                self._add(val, node.right) \n            else:\n                node.right = Node(val)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a Binary Search Tree data structure in Python.\n\n### Input:\n\n\n### Output:\nclass Node():\n    def __init__(self, val):\n        self.left = None \n        self.right = None\n        self.val = val \n\nclass BinaryTree:\n    def __init__(self): \n        self.root = None\n  \n    def addNode(self, val):\n        if self.root == None:\n            self.root = Node(val)\n        else: \n            self._add(val, self.root)\n  \n    def _add(self, val, node): \n        if val < node.val: \n            if node.left is not None: \n                self._add(val, node.left) \n            else: \n                node.left = Node(val) \n        else: \n            if node.right is not None: \n                self._add(val, node.right) \n            else:\n                node.right = Node(val)"}
{"instruction": "Automate a task using a python script to create a git pull request.", "input": "", "output": "# Import necessary libraries\nimport requests\nimport json\n\n# Set authentication credentials\nusername = 'username'\npassword = 'password'\ntoken = 'token'\n\n# Set request headers\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'token %s' % token\n}\n\n# Set the data for the request\ndata = {\n    'title': 'My pull request',\n    'head': 'master',\n    'base': 'develop',\n    'body': 'This is the body of my pull request'\n}\n\n# Make the request\nresponse = requests.post('https://api.github.com/repos/username/repo/pulls', data=json.dumps(data),\n                         auth=(username, password), headers=headers)\n\n# Check the response\nif response.status_code == 201:\n    print('Pull request created!')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate a task using a python script to create a git pull request.\n\n### Input:\n\n\n### Output:\n# Import necessary libraries\nimport requests\nimport json\n\n# Set authentication credentials\nusername = 'username'\npassword = 'password'\ntoken = 'token'\n\n# Set request headers\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'token %s' % token\n}\n\n# Set the data for the request\ndata = {\n    'title': 'My pull request',\n    'head': 'master',\n    'base': 'develop',\n    'body': 'This is the body of my pull request'\n}\n\n# Make the request\nresponse = requests.post('https://api.github.com/repos/username/repo/pulls', data=json.dumps(data),\n                         auth=(username, password), headers=headers)\n\n# Check the response\nif response.status_code == 201:\n    print('Pull request created!')"}
{"instruction": "Develop a classification model in Python to predict customer churn.", "input": "", "output": "# Import the necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\ndata = pd.read_csv('CustomerChurn.csv')\n\n# Split the dataset into training and testing set.\nX = data.drop('Churn', axis=1)\ny = data['Churn']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 0)\n\n# Apply feature scaling \nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Train the model \nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Test the model\ny_pred = classifier.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classification model in Python to predict customer churn.\n\n### Input:\n\n\n### Output:\n# Import the necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\ndata = pd.read_csv('CustomerChurn.csv')\n\n# Split the dataset into training and testing set.\nX = data.drop('Churn', axis=1)\ny = data['Churn']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 0)\n\n# Apply feature scaling \nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Train the model \nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Test the model\ny_pred = classifier.predict(X_test)"}
{"instruction": "Develop a Python script to automate the web application UI testing.", "input": "", "output": "import unittest\nfrom selenium import webdriver\n\nclass LoginForm(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get('http://example.com/login')\n\n    def test_login_form(self):\n        username_field = self.driver.find_element_by_name('user[username]')\n        username_field.send_keys('bob')\n        password_field = self.driver.find_element_by_name('user[password]')\n        password_field.send_keys('s3cr3t')\n        password_field.submit()\n\n        # Check that we are now logged in\n        welcome_message = self.driver.find_element_by_xpath('//*[contains(text(), \"Welcome, bob\")]')\n        self.assertTrue(welcome_message)\n\n    def tearDown(self):\n        self.driver.quit\n\nif __name__ == '__main__':\n    unittest.main()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to automate the web application UI testing.\n\n### Input:\n\n\n### Output:\nimport unittest\nfrom selenium import webdriver\n\nclass LoginForm(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get('http://example.com/login')\n\n    def test_login_form(self):\n        username_field = self.driver.find_element_by_name('user[username]')\n        username_field.send_keys('bob')\n        password_field = self.driver.find_element_by_name('user[password]')\n        password_field.send_keys('s3cr3t')\n        password_field.submit()\n\n        # Check that we are now logged in\n        welcome_message = self.driver.find_element_by_xpath('//*[contains(text(), \"Welcome, bob\")]')\n        self.assertTrue(welcome_message)\n\n    def tearDown(self):\n        self.driver.quit\n\nif __name__ == '__main__':\n    unittest.main()"}
{"instruction": "Construct a Python program to classify a set of emails as spam/ham.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('emails.csv')\n\ndata['label'] = data['label'].map({'ham': 0, 'spam': 1})\n\nX_train, X_test, y_train, y_test = train_test_split(data['email'],\n                                                    data['label'],\n                                                    test_size = 0.33,\n                                                    random_state = 42)\n\ncount_vector = CountVectorizer()\n\ntraining_data = count_vector.fit_transform(X_train.values)\ntesting_data = count_vector.transform(X_test.values)\n\nnaive_bayes = MultinomialNB()\nnaive_bayes.fit(training_data, y_train)\n\npredictions = naive_bayes.predict(testing_data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to classify a set of emails as spam/ham.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('emails.csv')\n\ndata['label'] = data['label'].map({'ham': 0, 'spam': 1})\n\nX_train, X_test, y_train, y_test = train_test_split(data['email'],\n                                                    data['label'],\n                                                    test_size = 0.33,\n                                                    random_state = 42)\n\ncount_vector = CountVectorizer()\n\ntraining_data = count_vector.fit_transform(X_train.values)\ntesting_data = count_vector.transform(X_test.values)\n\nnaive_bayes = MultinomialNB()\nnaive_bayes.fit(training_data, y_train)\n\npredictions = naive_bayes.predict(testing_data)"}
{"instruction": "Write a Python class to implement the Binary Search Tree structure.", "input": "", "output": "class Node:\n    def __init__ (self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n    def __init__ (self):\n        self.root = None\n\n    def insert (self, data):\n        if self.root == None:\n            self.root = Node(data)\n        else:\n            self._insert(data, self.root)\n    \n    def _insert(self, data, cur_node):\n        if data < cur_node.data:\n            if cur_node.left == None:\n                cur_node.left = Node(data)\n            else:\n                self._insert(data, cur_node.left)\n        elif data > cur_node.data:\n            if cur_node.right == None:\n                cur_node.right = Node(data)\n            else:\n                self._insert(data, cur_node.right)\n        else:\n            print(\"Value already in tree\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to implement the Binary Search Tree structure.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__ (self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n    def __init__ (self):\n        self.root = None\n\n    def insert (self, data):\n        if self.root == None:\n            self.root = Node(data)\n        else:\n            self._insert(data, self.root)\n    \n    def _insert(self, data, cur_node):\n        if data < cur_node.data:\n            if cur_node.left == None:\n                cur_node.left = Node(data)\n            else:\n                self._insert(data, cur_node.left)\n        elif data > cur_node.data:\n            if cur_node.right == None:\n                cur_node.right = Node(data)\n            else:\n                self._insert(data, cur_node.right)\n        else:\n            print(\"Value already in tree\")"}
{"instruction": "Generate a python program to create a game of Rock, Paper, Scissors", "input": "", "output": "\"\"\"\nCreate a game of Rock, Paper, Scissors\n\"\"\"\nimport random\n\ndef game(): \n    choices = [\"Rock\", \"Paper\", \"Scissors\"] \n    # randomly select a choice  \n    user = random.choice(choices)  \n    # randomly select a choice \n    computer = random.choice(choices) \n    print(\"User chooses: \", user) \n    print(\"Computer chooses: \", computer) \n    if user == computer:\n        print(\"It is a tie\") \n    if user == \"Rock\": \n        if computer == \"Paper\": \n            print(\"Computer wins!\", computer, \"covers\", user)\n        else: \n            print(\"User wins!\", user, \"smashes\", computer)\n    elif user == \"Paper\": \n        if computer == \"Scissors\": \n            print(\"Computer wins!\", computer, \"cut\", user)\n        else: \n            print(\"User wins!\", user, \"covers\", computer)\n\nif __name__ == '__main__': \n    game()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to create a game of Rock, Paper, Scissors\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a game of Rock, Paper, Scissors\n\"\"\"\nimport random\n\ndef game(): \n    choices = [\"Rock\", \"Paper\", \"Scissors\"] \n    # randomly select a choice  \n    user = random.choice(choices)  \n    # randomly select a choice \n    computer = random.choice(choices) \n    print(\"User chooses: \", user) \n    print(\"Computer chooses: \", computer) \n    if user == computer:\n        print(\"It is a tie\") \n    if user == \"Rock\": \n        if computer == \"Paper\": \n            print(\"Computer wins!\", computer, \"covers\", user)\n        else: \n            print(\"User wins!\", user, \"smashes\", computer)\n    elif user == \"Paper\": \n        if computer == \"Scissors\": \n            print(\"Computer wins!\", computer, \"cut\", user)\n        else: \n            print(\"User wins!\", user, \"covers\", computer)\n\nif __name__ == '__main__': \n    game()"}
{"instruction": "Create a class to generate an invoice from a given order in Python.", "input": "", "output": "\"\"\"\nCreate a class to generate an invoice from a given order in Python. \n\"\"\"\n\nclass Invoice:\n    def __init__(self, order):\n        self.order = order\n    \n    def generate_invoice(self):\n        invoice = dict()\n        order_item_amounts = [order.price * order.quantity for order in self.order]\n        invoice['subtotal'] = sum(order_item_amounts)\n        invoice['tax_rate'] = 0.15\n        invoice['tax_amount'] = invoice['subtotal'] * invoice['tax_rate']\n        invoice['total_amount'] = invoice['subtotal'] + invoice['tax_amount']\n    \n        return invoice\n    \n    def print_invoice(self):\n        invoice = self.generate_invoice()\n        print('subtotal: {}\\ntax rate: {}\\ntax amount:{}\\ntotal amount: {}'.format(\n            invoice['subtotal'], \n            invoice['tax_rate'], \n            invoice['tax_amount'], \n            invoice['total_amount']\n            ))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to generate an invoice from a given order in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a class to generate an invoice from a given order in Python. \n\"\"\"\n\nclass Invoice:\n    def __init__(self, order):\n        self.order = order\n    \n    def generate_invoice(self):\n        invoice = dict()\n        order_item_amounts = [order.price * order.quantity for order in self.order]\n        invoice['subtotal'] = sum(order_item_amounts)\n        invoice['tax_rate'] = 0.15\n        invoice['tax_amount'] = invoice['subtotal'] * invoice['tax_rate']\n        invoice['total_amount'] = invoice['subtotal'] + invoice['tax_amount']\n    \n        return invoice\n    \n    def print_invoice(self):\n        invoice = self.generate_invoice()\n        print('subtotal: {}\\ntax rate: {}\\ntax amount:{}\\ntotal amount: {}'.format(\n            invoice['subtotal'], \n            invoice['tax_rate'], \n            invoice['tax_amount'], \n            invoice['total_amount']\n            ))"}
{"instruction": "Develop a machine learning model in Python to predict wine quality.", "input": "", "output": "#importing the libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\n#loading the dataset\ndf = pd.read_csv('wine_data.csv')\n\n#defining independent and dependent variables\nX = df.iloc[:,:11]\ny = df.iloc[:,11]\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#scaling the data\nscaler = StandardScaler()\nscaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.fit_transform(X_test)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(scaled_X_train, y_train)\n\n#prediciting the test data\ny_pred = model.predict(scaled_X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to predict wine quality.\n\n### Input:\n\n\n### Output:\n#importing the libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\n#loading the dataset\ndf = pd.read_csv('wine_data.csv')\n\n#defining independent and dependent variables\nX = df.iloc[:,:11]\ny = df.iloc[:,11]\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#scaling the data\nscaler = StandardScaler()\nscaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.fit_transform(X_test)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(scaled_X_train, y_train)\n\n#prediciting the test data\ny_pred = model.predict(scaled_X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)"}
{"instruction": "Generate a neural network in Python to classify handwritten digits.", "input": "", "output": "import keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Activation,Dropout,Flatten\n\n#load dataset\n(x_train,y_train),(x_test,y_test) = mnist.load_data()\n\n#reshape data\nx_train = x_train.reshape(60000,784)\nx_test  = x_test.reshape(10000,784)\n\n#normalize data\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train/= 255\nx_test/= 255\n\n#convert labels to one-hot vectors\ny_train = keras.utils.to_categorical(y_train,10)\ny_test = keras.utils.to_categorical(y_test, 10)\n\n#Create model\nmodel = Sequential()\n\n#Add layers\nmodel.add(Dense(64, input_shape=(784,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n\n#compile model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network in Python to classify handwritten digits.\n\n### Input:\n\n\n### Output:\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Activation,Dropout,Flatten\n\n#load dataset\n(x_train,y_train),(x_test,y_test) = mnist.load_data()\n\n#reshape data\nx_train = x_train.reshape(60000,784)\nx_test  = x_test.reshape(10000,784)\n\n#normalize data\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train/= 255\nx_test/= 255\n\n#convert labels to one-hot vectors\ny_train = keras.utils.to_categorical(y_train,10)\ny_test = keras.utils.to_categorical(y_test, 10)\n\n#Create model\nmodel = Sequential()\n\n#Add layers\nmodel.add(Dense(64, input_shape=(784,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n\n#compile model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"}
{"instruction": "Create a chatbot in Python to answer questions about a given topic.", "input": "", "output": "# importing required libraries \nimport random \nimport string \nimport spacy \nimport nltk \n\n# Function to generate response \ndef chatbot_response(user_input): \n    # Preprocessing user input \n    user_input = user_input.lower() \n    user_input = user_input.translate(str.maketrans('', '', string.punctuation)) \n\n    # Loading spacy model to parse and understand user input \n    nlp = spacy.load('en_core_web_sm') \n    doc = nlp(user_input) \n\n    # Initializing nltk for Stopwords removal \n    nltk.download('stopwords') \n    from nltk.corpus import stopwords \n    stopwords = stopwords.words('english') \n\n    # Extracting keyword from user input \n    key_word = [word for word in doc if word.text not in stopwords] \n\n    # Generating response \n    response = ''\n    if key_word:\n        # Generate a random response if keyword is recognized by chatbot \n        response = random.choice(['That is an interesting topic.', 'I see. Tell me more.', \n                            'I am happy to help.']) \n    else:\n        response = \"Sorry, I didn't quite understand what you said.\"\n\n    return response", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a chatbot in Python to answer questions about a given topic.\n\n### Input:\n\n\n### Output:\n# importing required libraries \nimport random \nimport string \nimport spacy \nimport nltk \n\n# Function to generate response \ndef chatbot_response(user_input): \n    # Preprocessing user input \n    user_input = user_input.lower() \n    user_input = user_input.translate(str.maketrans('', '', string.punctuation)) \n\n    # Loading spacy model to parse and understand user input \n    nlp = spacy.load('en_core_web_sm') \n    doc = nlp(user_input) \n\n    # Initializing nltk for Stopwords removal \n    nltk.download('stopwords') \n    from nltk.corpus import stopwords \n    stopwords = stopwords.words('english') \n\n    # Extracting keyword from user input \n    key_word = [word for word in doc if word.text not in stopwords] \n\n    # Generating response \n    response = ''\n    if key_word:\n        # Generate a random response if keyword is recognized by chatbot \n        response = random.choice(['That is an interesting topic.', 'I see. Tell me more.', \n                            'I am happy to help.']) \n    else:\n        response = \"Sorry, I didn't quite understand what you said.\"\n\n    return response"}
{"instruction": "Build an AI assistant in Python for playing the game \"Tic-Tac-Toe\".", "input": "", "output": "# Define the board size \nBOARD_SIZE = 3 \n\n# Define the player moves \nPLAYER_X = 'X' \nPLAYER_O = 'O'\n\n# Define the empty cell \nEMPTY = ' '\n\n# Create a list to represent the board \nboard = [] \nfor i in range(BOARD_SIZE): \n    row = [EMPTY] * BOARD_SIZE \n    board.append(row)\n\n# Function to check the game status \ndef check_game_status(): \n    # Check if the player has won \n    if check_win(PLAYER_X): \n        return \"X won!\" \n    elif check_win(PLAYER_O): \n        return \"O won!\" \n    # Check if the game is a draw \n    elif check_draw(): \n        return \"Draw!\"\n    # If the game is not over yet \n    else:\n        return \"Game in progress...\"\n\n# Function to check the winning condition \ndef check_win(player): \n    # Check if the player has won in a row \n    for row in board: \n        if row.count(player) == BOARD_SIZE: \n            return True\n    # Check if the player has won in a column \n    for col in range(BOARD_SIZE): \n        if board[0][col] == board[1][col] == board[2][col] == player: \n            return True \n    # Check if the player has won in a diagonal \n    if board[0][0] == board[1][1] == board[2][2] == player: \n        return True \n    if board[0][2] == board[1][1] == board[2][0] == player: \n        return True\n    # Return false if the player did not win \n    return False \n\n# Function to check if the game is a draw \ndef check_draw(): \n    for row in board: \n        for cell in row: \n            if cell == EMPTY: \n                return False \n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an AI assistant in Python for playing the game \"Tic-Tac-Toe\".\n\n### Input:\n\n\n### Output:\n# Define the board size \nBOARD_SIZE = 3 \n\n# Define the player moves \nPLAYER_X = 'X' \nPLAYER_O = 'O'\n\n# Define the empty cell \nEMPTY = ' '\n\n# Create a list to represent the board \nboard = [] \nfor i in range(BOARD_SIZE): \n    row = [EMPTY] * BOARD_SIZE \n    board.append(row)\n\n# Function to check the game status \ndef check_game_status(): \n    # Check if the player has won \n    if check_win(PLAYER_X): \n        return \"X won!\" \n    elif check_win(PLAYER_O): \n        return \"O won!\" \n    # Check if the game is a draw \n    elif check_draw(): \n        return \"Draw!\"\n    # If the game is not over yet \n    else:\n        return \"Game in progress...\"\n\n# Function to check the winning condition \ndef check_win(player): \n    # Check if the player has won in a row \n    for row in board: \n        if row.count(player) == BOARD_SIZE: \n            return True\n    # Check if the player has won in a column \n    for col in range(BOARD_SIZE): \n        if board[0][col] == board[1][col] == board[2][col] == player: \n            return True \n    # Check if the player has won in a diagonal \n    if board[0][0] == board[1][1] == board[2][2] == player: \n        return True \n    if board[0][2] == board[1][1] == board[2][0] == player: \n        return True\n    # Return false if the player did not win \n    return False \n\n# Function to check if the game is a draw \ndef check_draw(): \n    for row in board: \n        for cell in row: \n            if cell == EMPTY: \n                return False \n    return True"}
{"instruction": "Develop a Python Class that retrieves and displays web page content.", "input": "", "output": "import requests\n\nclass WebPageContent:\n    def __init__(self, url):\n        self.url = url\n\n    def get_content(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.text\n    \n    def display_content(self):\n        content = self.get_content()\n        if content is not None:\n            print(content)\n\n# Usage\nurl = \"https://www.example.com\"\nweb_page = WebPageContent(url)\nweb_page.display_content()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Class that retrieves and displays web page content.\n\n### Input:\n\n\n### Output:\nimport requests\n\nclass WebPageContent:\n    def __init__(self, url):\n        self.url = url\n\n    def get_content(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.text\n    \n    def display_content(self):\n        content = self.get_content()\n        if content is not None:\n            print(content)\n\n# Usage\nurl = \"https://www.example.com\"\nweb_page = WebPageContent(url)\nweb_page.display_content()"}
{"instruction": "Implement a web server in Python that responds to incoming requests.", "input": "", "output": "import http.server\n\ndef respond(handler):\n    handler.send_response(200)\n    handler.send_header('Content-type','text/html')\n    handler.end_headers()\n    handler.wfile.write(b'Hello World')\n\nclass MyWebRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        respond(self)\n\nif __name__=='__main__':\n    server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler)\n    print('Starting server at port 8001...')\n    server.serve_forever()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web server in Python that responds to incoming requests.\n\n### Input:\n\n\n### Output:\nimport http.server\n\ndef respond(handler):\n    handler.send_response(200)\n    handler.send_header('Content-type','text/html')\n    handler.end_headers()\n    handler.wfile.write(b'Hello World')\n\nclass MyWebRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        respond(self)\n\nif __name__=='__main__':\n    server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler)\n    print('Starting server at port 8001...')\n    server.serve_forever()"}
{"instruction": "Write a Python program that takes a URL and checks for broken links.", "input": "", "output": "import requests\n\ndef check_for_broken_links(url):\n    # Request webpage\n    response = requests.get(url)\n\n    # Parse webpage for all links\n    links = response.html.find_all('a')\n    \n    # Check response code of each link\n    for link in links:\n        link_url = link['href']\n        response = requests.get(link_url)\n        if not response.ok:\n            # Link is broken\n            print('Broken link found:', link_url)\n\ncheck_for_broken_links('http://example.com')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a URL and checks for broken links.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef check_for_broken_links(url):\n    # Request webpage\n    response = requests.get(url)\n\n    # Parse webpage for all links\n    links = response.html.find_all('a')\n    \n    # Check response code of each link\n    for link in links:\n        link_url = link['href']\n        response = requests.get(link_url)\n        if not response.ok:\n            # Link is broken\n            print('Broken link found:', link_url)\n\ncheck_for_broken_links('http://example.com')"}
{"instruction": "Design a program in Python which uses the class inheritance concept.", "input": "", "output": "# Parent class \nclass Person:\n    # Initialize the class \n    def __init__(self, name, age): \n        self.name = name \n        self.age = age\n  \n# Child class \nclass Student(Person):\n    # Initialize the class \n    def __init__(self, name, age, grade): \n        Person.__init__(self, name, age) \n        self.grade = grade \n  \n# Create an object of the Child class \ns = Student(\"John\", 10, \"A\") \n  \n# Print the object attribute \nprint(s.name) \nprint(s.age) \nprint(s.grade)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python which uses the class inheritance concept.\n\n### Input:\n\n\n### Output:\n# Parent class \nclass Person:\n    # Initialize the class \n    def __init__(self, name, age): \n        self.name = name \n        self.age = age\n  \n# Child class \nclass Student(Person):\n    # Initialize the class \n    def __init__(self, name, age, grade): \n        Person.__init__(self, name, age) \n        self.grade = grade \n  \n# Create an object of the Child class \ns = Student(\"John\", 10, \"A\") \n  \n# Print the object attribute \nprint(s.name) \nprint(s.age) \nprint(s.grade)"}
{"instruction": "Design a web application from scratch to manage a restaurant's menu.", "input": "", "output": "The web application will be built using HTML, CSS, JavaScript, and a server-side language such as PHP, Node.js, or Python. The primary function of this application will be to manage a restaurant's menu. This will include creating menu items, setting prices, managing ingredients, taking orders and more. The application will be easy to use and will be able to store large amounts of data. Additionally, the application should be able to generate reports on sales and profit.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application from scratch to manage a restaurant's menu.\n\n### Input:\n\n\n### Output:\nThe web application will be built using HTML, CSS, JavaScript, and a server-side language such as PHP, Node.js, or Python. The primary function of this application will be to manage a restaurant's menu. This will include creating menu items, setting prices, managing ingredients, taking orders and more. The application will be easy to use and will be able to store large amounts of data. Additionally, the application should be able to generate reports on sales and profit."}
{"instruction": "Describe a data structure for efficient retrieval of data in Python.", "input": "", "output": "In Python, a dictionary is an ideal data structure for efficient retrieval of data as it provides constant time complexity for lookup operations. This is because a dictionary is a data structure which creates a mapping between a key and its associated value, allowing access to its value by simply providing the key. Moreover, Python dictionary allows the user to add, modify, delete and retrieve data entries in constant time and thus provides an efficient retrieval of data.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe a data structure for efficient retrieval of data in Python.\n\n### Input:\n\n\n### Output:\nIn Python, a dictionary is an ideal data structure for efficient retrieval of data as it provides constant time complexity for lookup operations. This is because a dictionary is a data structure which creates a mapping between a key and its associated value, allowing access to its value by simply providing the key. Moreover, Python dictionary allows the user to add, modify, delete and retrieve data entries in constant time and thus provides an efficient retrieval of data."}
{"instruction": "Implement the A* search algorithm with minimum cost first in Python.", "input": "", "output": "def minimum_cost_first(start, end): \n  fringe = [[start, 0]]\n  visited = set()\n  cost = {}\n  while fringe:\n    node = fringe.pop(0)\n    visited.add(node[0])\n    if node[0] == end:\n      return cost[node[0]]\n    edges = graph[node[0]]\n    for edge in edges:\n      edge_cost = node[1] + edge[1]\n      if edge[0] not in visited and (edge[0] not in cost or edge_cost < cost[edge[0]]):\n        cost[edge[0]] = edge_cost\n        fringe.append([edge[0], edge_cost])\n    fringe.sort(key=lambda x:x[1])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the A* search algorithm with minimum cost first in Python.\n\n### Input:\n\n\n### Output:\ndef minimum_cost_first(start, end): \n  fringe = [[start, 0]]\n  visited = set()\n  cost = {}\n  while fringe:\n    node = fringe.pop(0)\n    visited.add(node[0])\n    if node[0] == end:\n      return cost[node[0]]\n    edges = graph[node[0]]\n    for edge in edges:\n      edge_cost = node[1] + edge[1]\n      if edge[0] not in visited and (edge[0] not in cost or edge_cost < cost[edge[0]]):\n        cost[edge[0]] = edge_cost\n        fringe.append([edge[0], edge_cost])\n    fringe.sort(key=lambda x:x[1])"}
{"instruction": "Create a Python script for linear regression using gradient descent.", "input": "", "output": "import numpy as np\n\ndef gradient_descent(x, y, alpha=1e-4, tol=1e-4):\n    n,m = x.shape\n    weights = np.zeros(m)\n    y_pred = np.matmul(x, weights)\n    SSE = np.sum((y - y_pred)**2)\n    prev_SSE = 0.\n    weights_list=[]\n    while np.abs(SSE - prev_SSE) > tol:        \n        prev_SSE = SSE\n        gradient = np.matmul(x.T,(y - y_pred))\n        weights += alpha * gradient\n        weights_list.append(weights)\n        y_pred = np.matmul(x, weights)\n        SSE = np.sum((y - y_pred)**2)\n\n    return weights_list, SSE", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for linear regression using gradient descent.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef gradient_descent(x, y, alpha=1e-4, tol=1e-4):\n    n,m = x.shape\n    weights = np.zeros(m)\n    y_pred = np.matmul(x, weights)\n    SSE = np.sum((y - y_pred)**2)\n    prev_SSE = 0.\n    weights_list=[]\n    while np.abs(SSE - prev_SSE) > tol:        \n        prev_SSE = SSE\n        gradient = np.matmul(x.T,(y - y_pred))\n        weights += alpha * gradient\n        weights_list.append(weights)\n        y_pred = np.matmul(x, weights)\n        SSE = np.sum((y - y_pred)**2)\n\n    return weights_list, SSE"}
{"instruction": "Write a Python program to detect if two strings are anagrams or not.", "input": "", "output": "def is_anagram(word1, word2):\n    word1 = word1.replace(' ', '').lower()\n    word2 = word2.replace(' ', '').lower()\n\n    if len(word1) != len(word2):\n        return False\n\n    count = {}\n    for letter in word1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    for letter in word2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect if two strings are anagrams or not.\n\n### Input:\n\n\n### Output:\ndef is_anagram(word1, word2):\n    word1 = word1.replace(' ', '').lower()\n    word2 = word2.replace(' ', '').lower()\n\n    if len(word1) != len(word2):\n        return False\n\n    count = {}\n    for letter in word1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    for letter in word2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True"}
{"instruction": "Develop a python program to find the maximum depth of a binary tree.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        leftDepth = maxDepth(node.left)\n        rightDepth = maxDepth(node.right)\n \n        if leftDepth > rightDepth:\n            return leftDepth+1\n        else:\n            return rightDepth+1\n \nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    print(maxDepth(root))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to find the maximum depth of a binary tree.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        leftDepth = maxDepth(node.left)\n        rightDepth = maxDepth(node.right)\n \n        if leftDepth > rightDepth:\n            return leftDepth+1\n        else:\n            return rightDepth+1\n \nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    print(maxDepth(root))"}
{"instruction": "Generate a Python class that overides the default methods of a list.", "input": "", "output": "class MyList(list):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def append(self, element):\n        super().append(element)\n        print('Element {} is added to the list'.format(element))\n\n    def insert(self, index, element):\n        super().insert(index, element)\n        print('Element {} is inserted at index {}'.format(element, index))\n\n    def pop(self, index=-1):\n        element = super().pop(index)\n        print('Element {} is removed from the list'.format(element))\n        return element", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class that overides the default methods of a list.\n\n### Input:\n\n\n### Output:\nclass MyList(list):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def append(self, element):\n        super().append(element)\n        print('Element {} is added to the list'.format(element))\n\n    def insert(self, index, element):\n        super().insert(index, element)\n        print('Element {} is inserted at index {}'.format(element, index))\n\n    def pop(self, index=-1):\n        element = super().pop(index)\n        print('Element {} is removed from the list'.format(element))\n        return element"}
{"instruction": "Write a Python script to simulate the behavior of a vending machine.", "input": "", "output": "class VendingMachine:\n    def __init__(self):\n        self.items = []\n        self.balance = 0\n\n    def insert_coin(self, amount):\n        self.balance += amount\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        self.items.remove(item)\n\n    def purchase_item(self, item):\n        if self.balance >= item.price:\n            self.items.remove(item)\n            self.balance -= item.price\n\n    def return_change(self):\n        change = self.balance\n        self.balance = 0\n        return change", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to simulate the behavior of a vending machine.\n\n### Input:\n\n\n### Output:\nclass VendingMachine:\n    def __init__(self):\n        self.items = []\n        self.balance = 0\n\n    def insert_coin(self, amount):\n        self.balance += amount\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        self.items.remove(item)\n\n    def purchase_item(self, item):\n        if self.balance >= item.price:\n            self.items.remove(item)\n            self.balance -= item.price\n\n    def return_change(self):\n        change = self.balance\n        self.balance = 0\n        return change"}
{"instruction": "Develop an AI program in Python which can play the game tic-tac-toe.", "input": "", "output": "def tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI program in Python which can play the game tic-tac-toe.\n\n### Input:\n\n\n### Output:\ndef tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False"}
{"instruction": "Design a basic chatbot in Python for responding to casual inquiries.", "input": "", "output": "import random\n\n#list of possible answers \nanswers = [\"That's a great question!\", \n    \"I'm not sure, but I'll try to find out!\", \n    \"That sounds interesting, tell me more!\", \n    \"I have no idea, sorry!\"]\n\ndef chatbot_response(user_input): \n    # get a random response from answers\n    response = random.choice(answers)\n    return response\n\n# simple loop to keep the conversation going\nwhile True:\n    user_input = input('You: ')\n    if user_input == 'Goodbye':\n        print('Chatbot: Goodbye!')\n        break\n    else:\n        print('Chatbot: ', chatbot_response(user_input))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic chatbot in Python for responding to casual inquiries.\n\n### Input:\n\n\n### Output:\nimport random\n\n#list of possible answers \nanswers = [\"That's a great question!\", \n    \"I'm not sure, but I'll try to find out!\", \n    \"That sounds interesting, tell me more!\", \n    \"I have no idea, sorry!\"]\n\ndef chatbot_response(user_input): \n    # get a random response from answers\n    response = random.choice(answers)\n    return response\n\n# simple loop to keep the conversation going\nwhile True:\n    user_input = input('You: ')\n    if user_input == 'Goodbye':\n        print('Chatbot: Goodbye!')\n        break\n    else:\n        print('Chatbot: ', chatbot_response(user_input))"}
{"instruction": "Generate a Python class to represent a deck of cards in a card game.", "input": "", "output": "class Deck:\n    \n    #constructor\n    def __init__(self):\n        self.cards = []\n\n    #function to create a deck of playing cards\n    def create_deck(self):\n        suits = [\"C\", \"S\", \"H\", \"D\"]\n        ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n\n        for suit in suits:\n            for rank in ranks:\n                card = (rank, suit)\n                self.cards.append(card)\n\n     #function to draw a card from the deck\n    def draw_card(self):\n        if self.cards:\n            return self.cards.pop()\n        else:\n            return None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a deck of cards in a card game.\n\n### Input:\n\n\n### Output:\nclass Deck:\n    \n    #constructor\n    def __init__(self):\n        self.cards = []\n\n    #function to create a deck of playing cards\n    def create_deck(self):\n        suits = [\"C\", \"S\", \"H\", \"D\"]\n        ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n\n        for suit in suits:\n            for rank in ranks:\n                card = (rank, suit)\n                self.cards.append(card)\n\n     #function to draw a card from the deck\n    def draw_card(self):\n        if self.cards:\n            return self.cards.pop()\n        else:\n            return None"}
{"instruction": "Write a code to implement a priority queue data structure in Python.", "input": "", "output": "\"\"\"\nImplement a priority queue data structure in Python.\n\"\"\"\n\nclass PriorityQueue:\n    def __init__(self):\n        self.items = []\n\n    def insert(self, data, priority):\n        # Insert item data with priority p in the priority queue.\n        item = (data, priority)\n        self.items.append(item)\n        self.items = sorted(self.items, key = lambda item: item[1])\n\n    def pop(self):\n        # Remove the highest priority item from the queue.\n        return self.items.pop(0)[0]\n\n    def peek(self):\n        # Get the highest priority item without removing it.\n        return self.items[0][0]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement a priority queue data structure in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplement a priority queue data structure in Python.\n\"\"\"\n\nclass PriorityQueue:\n    def __init__(self):\n        self.items = []\n\n    def insert(self, data, priority):\n        # Insert item data with priority p in the priority queue.\n        item = (data, priority)\n        self.items.append(item)\n        self.items = sorted(self.items, key = lambda item: item[1])\n\n    def pop(self):\n        # Remove the highest priority item from the queue.\n        return self.items.pop(0)[0]\n\n    def peek(self):\n        # Get the highest priority item without removing it.\n        return self.items[0][0]"}
{"instruction": "Suggest a way to generate summaries from long articles using Python.", "input": "", "output": "The most common way of generating summaries from long articles using Python is to use Natural Language Processing (NLP) to identify the most important sentences in the text. We can use existing libraries such as summa and NLTK to identify the most important sentences in the text. The main steps involved in generating summaries are: \n\n1. Preprocessing the raw text by removing punctuation marks, HTML tags, special characters and stop words and tokenizing the text into sentences.\n\n2. Using TextRank Algorithm to determine the most important sentences in the text.\n\n3. Generating the summary by selecting the most important sentences and combining them into a cohesive statement or narrative.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a way to generate summaries from long articles using Python.\n\n### Input:\n\n\n### Output:\nThe most common way of generating summaries from long articles using Python is to use Natural Language Processing (NLP) to identify the most important sentences in the text. We can use existing libraries such as summa and NLTK to identify the most important sentences in the text. The main steps involved in generating summaries are: \n\n1. Preprocessing the raw text by removing punctuation marks, HTML tags, special characters and stop words and tokenizing the text into sentences.\n\n2. Using TextRank Algorithm to determine the most important sentences in the text.\n\n3. Generating the summary by selecting the most important sentences and combining them into a cohesive statement or narrative."}
{"instruction": "Write a Python program to create a class for managing a linked list.", "input": "", "output": "\"\"\"\nWrite a Python program to create a class for managing a linked list.\n\"\"\"\n\n# Create the Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# Create the LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def addNode(self, data):\n        node = Node(data)\n        if self.head == None:\n            self.head = node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = node\n            \n    def printList(self):\n        curr = self.head\n        while curr != None:\n            print(curr.data)\n            curr = curr.next", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a class for managing a linked list.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a Python program to create a class for managing a linked list.\n\"\"\"\n\n# Create the Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# Create the LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def addNode(self, data):\n        node = Node(data)\n        if self.head == None:\n            self.head = node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = node\n            \n    def printList(self):\n        curr = self.head\n        while curr != None:\n            print(curr.data)\n            curr = curr.next"}
{"instruction": "Create a cross-platform application in Python to schedule reminders.", "input": "", "output": "import datetime \nimport time \nimport os \n\ndef setReminder(reminder_time, reminder_message): \n  # Get the current time\n  current_time = datetime.datetime.now() \n  \n  # Calculate the amount of time until the reminder is due\n  wait_time = (reminder_time - current_time).total_seconds() \n  \n  # Sleep for the amount of time until the reminder\n  time.sleep(wait_time) \n\n  # Print the reminder message\n  print(\"\\nReminder: %s\" % reminder_message) \n\n  # Play a sound to alert the user\n  os.system(\"start reminder_sound.wav\") \n\n# Set a reminder for 5 minutes from now\nreminder_time = datetime.datetime.now() + datetime.timedelta(minutes=5) \nreminder_message = \"Time to take a break!\" \nsetReminder(reminder_time, reminder_message)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a cross-platform application in Python to schedule reminders.\n\n### Input:\n\n\n### Output:\nimport datetime \nimport time \nimport os \n\ndef setReminder(reminder_time, reminder_message): \n  # Get the current time\n  current_time = datetime.datetime.now() \n  \n  # Calculate the amount of time until the reminder is due\n  wait_time = (reminder_time - current_time).total_seconds() \n  \n  # Sleep for the amount of time until the reminder\n  time.sleep(wait_time) \n\n  # Print the reminder message\n  print(\"\\nReminder: %s\" % reminder_message) \n\n  # Play a sound to alert the user\n  os.system(\"start reminder_sound.wav\") \n\n# Set a reminder for 5 minutes from now\nreminder_time = datetime.datetime.now() + datetime.timedelta(minutes=5) \nreminder_message = \"Time to take a break!\" \nsetReminder(reminder_time, reminder_message)"}
{"instruction": "Create a basic memory game using Python as the programming language.", "input": "", "output": "import random\n\n#create cards list\ncards = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]*2\n\n#shuffle cards\nrandom.shuffle(cards)\n\n#create a shuffled cards instance\ncards_hand = set(cards)\n\n#while loop \nwhile len(cards_hand) > 0:\n    #my hand\n    my_hand = set(random.sample(cards_hand, 2))\n    #computer hand \n    comp_hand = set(random.sample(cards_hand, 2))\n\n    #check if my hand and computer had matched \n    if my_hand == comp_hand:\n        print(f\"congratulation!!! you matched the cards..\")\n    else:\n        #break\n        break\n\n    #remove all cards from hand \n    cards_hand -= my_hand\n    cards_hand -= comp_hand\n\n#if the loop run out\nif len(cards_hand) == 0:\n    #print the result \n    print(\"you won the game\")\nelse:\n    print(\"you lost the game\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic memory game using Python as the programming language.\n\n### Input:\n\n\n### Output:\nimport random\n\n#create cards list\ncards = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]*2\n\n#shuffle cards\nrandom.shuffle(cards)\n\n#create a shuffled cards instance\ncards_hand = set(cards)\n\n#while loop \nwhile len(cards_hand) > 0:\n    #my hand\n    my_hand = set(random.sample(cards_hand, 2))\n    #computer hand \n    comp_hand = set(random.sample(cards_hand, 2))\n\n    #check if my hand and computer had matched \n    if my_hand == comp_hand:\n        print(f\"congratulation!!! you matched the cards..\")\n    else:\n        #break\n        break\n\n    #remove all cards from hand \n    cards_hand -= my_hand\n    cards_hand -= comp_hand\n\n#if the loop run out\nif len(cards_hand) == 0:\n    #print the result \n    print(\"you won the game\")\nelse:\n    print(\"you lost the game\")"}
{"instruction": "Interpret the result of the given linear regression model in Python.", "input": "", "output": "# import libraries \nimport numpy as np \nimport statsmodels.api as sm \n\n# predictors \nx = np.array([4.26, 6.16, 5.74, 6.52, 4.02, 5.35, 5.75, 5.77, 5.26, 6.30]) \n\n# target \ny = np.array([13.44, 10.62, 6.78, 10.93, 8.58, 8.03, 7.39, 8.50, 9.72, 11.95]) \n\n# add a column of ones to the predictors \nX = sm.add_constant(x) \n\n# fit the linear regression model \nmodel = sm.OLS(y, X).fit() \n\n# print the result of linear regression model \nprint(model.summary())\n\n# interpretation \n# The coefficient for x is -1.209, this means that for each unit increase in x, there is a corresponding reduction of 1.209 units in the target y. \n# The intercept is 8.719, which means that even when x is 0, the target value is 8.719. \n# The R-squared value of 0.895 indicates that 89.5 % of variation in target is explained by the linear regression model.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nInterpret the result of the given linear regression model in Python.\n\n### Input:\n\n\n### Output:\n# import libraries \nimport numpy as np \nimport statsmodels.api as sm \n\n# predictors \nx = np.array([4.26, 6.16, 5.74, 6.52, 4.02, 5.35, 5.75, 5.77, 5.26, 6.30]) \n\n# target \ny = np.array([13.44, 10.62, 6.78, 10.93, 8.58, 8.03, 7.39, 8.50, 9.72, 11.95]) \n\n# add a column of ones to the predictors \nX = sm.add_constant(x) \n\n# fit the linear regression model \nmodel = sm.OLS(y, X).fit() \n\n# print the result of linear regression model \nprint(model.summary())\n\n# interpretation \n# The coefficient for x is -1.209, this means that for each unit increase in x, there is a corresponding reduction of 1.209 units in the target y. \n# The intercept is 8.719, which means that even when x is 0, the target value is 8.719. \n# The R-squared value of 0.895 indicates that 89.5 % of variation in target is explained by the linear regression model."}
{"instruction": "Create an algorithm in Python to sort a given array using Heap sort.", "input": "", "output": "def heapSort(arr):\n    n = len(arr)\n  \n    # Build heap (rearrange array)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n  \n    # One by one extract an element from heap\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0] # swap\n        heapify(arr, i, 0)\n  \n# To heapify subtree rooted at index i\ndef heapify(arr, n, i):\n    largest = i # Initialize largest as root\n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is\n    # greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n  \n    # See if right child of root exists and is\n    # greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n  \n    # Change root, if needed\n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n  \n        # Heapify the root.\n        heapify(arr, n, largest)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to sort a given array using Heap sort.\n\n### Input:\n\n\n### Output:\ndef heapSort(arr):\n    n = len(arr)\n  \n    # Build heap (rearrange array)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n  \n    # One by one extract an element from heap\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0] # swap\n        heapify(arr, i, 0)\n  \n# To heapify subtree rooted at index i\ndef heapify(arr, n, i):\n    largest = i # Initialize largest as root\n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is\n    # greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n  \n    # See if right child of root exists and is\n    # greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n  \n    # Change root, if needed\n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]\n  \n        # Heapify the root.\n        heapify(arr, n, largest)"}
{"instruction": "Write an optimization algorithm in Python for a given set of points.", "input": "", "output": "def optimize(arr): \n    # Get the length of the list \n    n = len(arr) \n  \n    # Initialize index variables \n    max_len = 1\n    ending_index = 0\n  \n    # Initialize temp index \n    temp_index = 0\n  \n    # If array of length is more than 1 \n    if (n > 1): \n  \n        # Create a loop to find the longest sub sequence \n        for i in range(1, n): \n  \n            # If previous value is less then the current value \n            if (arr[temp_index] < arr[i]): \n\n                # increment the max_len and temp_index \n                max_len += 1\n                temp_index = i\n  \n            else: \n  \n                # If max_len is greater then previous max_len \n                if (max_len > (i - ending_index)): \n  \n                    # assign the ending_index and temp_index \n                    ending_index = temp_index \n                    temp_index = i \n  \n                # else assiging the max_len to its minimum value \n                max_len = 1\n                  \n    return max_len", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an optimization algorithm in Python for a given set of points.\n\n### Input:\n\n\n### Output:\ndef optimize(arr): \n    # Get the length of the list \n    n = len(arr) \n  \n    # Initialize index variables \n    max_len = 1\n    ending_index = 0\n  \n    # Initialize temp index \n    temp_index = 0\n  \n    # If array of length is more than 1 \n    if (n > 1): \n  \n        # Create a loop to find the longest sub sequence \n        for i in range(1, n): \n  \n            # If previous value is less then the current value \n            if (arr[temp_index] < arr[i]): \n\n                # increment the max_len and temp_index \n                max_len += 1\n                temp_index = i\n  \n            else: \n  \n                # If max_len is greater then previous max_len \n                if (max_len > (i - ending_index)): \n  \n                    # assign the ending_index and temp_index \n                    ending_index = temp_index \n                    temp_index = i \n  \n                # else assiging the max_len to its minimum value \n                max_len = 1\n                  \n    return max_len"}
{"instruction": "Create a linked-list in Python that can traverse in both directions.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoubleLinkedList:\n    def __init__(self): \n        self.head = None\n \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None:\n            self.head =  new_node\n        else: \n            curr_node = self.head\n            while curr_node.next != None:\n                curr_node = curr_node.next\n            curr_node.next = new_node\n            new_node.prev = curr_node\n \n    def prepend(self, new_data):\n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head.prev = new_node \n        self.head = new_node\n\n    def reverse(self):\n        curr_node = self.head\n        while curr_node:\n            temp = curr_node.next\n            curr_node.next = curr_node.prev\n            curr_node.prev = temp\n            curr_node = curr_node.prev\n        if temp:\n            self.head = temp.prev", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linked-list in Python that can traverse in both directions.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoubleLinkedList:\n    def __init__(self): \n        self.head = None\n \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None:\n            self.head =  new_node\n        else: \n            curr_node = self.head\n            while curr_node.next != None:\n                curr_node = curr_node.next\n            curr_node.next = new_node\n            new_node.prev = curr_node\n \n    def prepend(self, new_data):\n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head.prev = new_node \n        self.head = new_node\n\n    def reverse(self):\n        curr_node = self.head\n        while curr_node:\n            temp = curr_node.next\n            curr_node.next = curr_node.prev\n            curr_node.prev = temp\n            curr_node = curr_node.prev\n        if temp:\n            self.head = temp.prev"}
{"instruction": "Find all solutions to the rubik's cube using an algorithm in Python.", "input": "", "output": "from collections import deque\n\n# A state is represented as a dictionary\n# Keys are upper-case letters R, L, U, etc.\n# Values are 3-tuples of length, position, orientation\n# Each 3-tuple corresponds to a row of length length,\n#   which is positioned at position and oriented to orientation \ndef gen_solve(state):\n    # Generates a list of steps to solve the Rubiks Cube\n    solve_steps = []\n \n    # Search the tree to solve the Rubiks Cube\n    search_queue = deque([state])\n    while search_queue:\n        cur_state = search_queue.popleft()\n        # Generate the neighbors of the current state\n        neighbors = generate_neighbors(cur_state)\n        # Check each neighbor\n        for neighbor in neighbors:\n            # If the neighbor is the solved state,\n            # add all the neighbor's parent steps to the result\n            if is_solved(neighbor):\n                solve_steps += get_parent_steps(neighbor)\n            # Otherwise, add the neighbor's parent steps\n            # and the neighbor to the queue\n            else:\n                search_queue.append(neighbor)\n    return solve_steps", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all solutions to the rubik's cube using an algorithm in Python.\n\n### Input:\n\n\n### Output:\nfrom collections import deque\n\n# A state is represented as a dictionary\n# Keys are upper-case letters R, L, U, etc.\n# Values are 3-tuples of length, position, orientation\n# Each 3-tuple corresponds to a row of length length,\n#   which is positioned at position and oriented to orientation \ndef gen_solve(state):\n    # Generates a list of steps to solve the Rubiks Cube\n    solve_steps = []\n \n    # Search the tree to solve the Rubiks Cube\n    search_queue = deque([state])\n    while search_queue:\n        cur_state = search_queue.popleft()\n        # Generate the neighbors of the current state\n        neighbors = generate_neighbors(cur_state)\n        # Check each neighbor\n        for neighbor in neighbors:\n            # If the neighbor is the solved state,\n            # add all the neighbor's parent steps to the result\n            if is_solved(neighbor):\n                solve_steps += get_parent_steps(neighbor)\n            # Otherwise, add the neighbor's parent steps\n            # and the neighbor to the queue\n            else:\n                search_queue.append(neighbor)\n    return solve_steps"}
{"instruction": "Code a function in Python to search for an element in a linked list.", "input": "", "output": "# Node class \nclass Node: \n \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked list class \nclass LinkedList: \n \n    # Function to initialize the Linked List object \n    def __init__(self):  \n        self.head = None\n \n    # This function returns true if a value x is present in linked list \n    def search(self, x):     \n        temp = self.head \n        while temp.next != None: \n            if temp.data == x: \n                return True  # data found \n            temp = temp.next\n \n        if temp.data == x: \n            return True # data found \n        return False # data not found \n\n# Code execution\nif __name__=='__main__': \n \n    # Start with the empty list \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n\n# Link first node with second \n    llist.head.next = second  \n     \n# Link second node with third  \n    second.next = third \n\n# Search value 3 \n    if llist.search(3): \n        print(\"Value found\")\n    else:\n        print(\"Value not found\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python to search for an element in a linked list.\n\n### Input:\n\n\n### Output:\n# Node class \nclass Node: \n \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked list class \nclass LinkedList: \n \n    # Function to initialize the Linked List object \n    def __init__(self):  \n        self.head = None\n \n    # This function returns true if a value x is present in linked list \n    def search(self, x):     \n        temp = self.head \n        while temp.next != None: \n            if temp.data == x: \n                return True  # data found \n            temp = temp.next\n \n        if temp.data == x: \n            return True # data found \n        return False # data not found \n\n# Code execution\nif __name__=='__main__': \n \n    # Start with the empty list \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n\n# Link first node with second \n    llist.head.next = second  \n     \n# Link second node with third  \n    second.next = third \n\n# Search value 3 \n    if llist.search(3): \n        print(\"Value found\")\n    else:\n        print(\"Value not found\")"}
{"instruction": "Design a Python class to represent a matrix and its basic operations", "input": "", "output": "class Matrix:\n    def __init__(self, data):\n        self.data = data\n\n    def __repr__(self):\n        return str(self.data)\n\n    def shape(self):\n        \"\"\"\n        Shape of matrix\n        \"\"\"\n        return (len(self.data), len(self.data[0]))\n\n    def add_scalar(self, scalar):\n        \"\"\"\n        Scalar addition\n        \"\"\"\n        return [[v + scalar for v in row] for row in self.data]\n\n    def add_matrix(self, other):\n        \"\"\"\n        Matrix addition\n        \"\"\"\n        return [[v1 + v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)]\n\n    def subtract_scalar(self, scalar):\n        \"\"\"\n        Scalar subtraction\n        \"\"\"\n        return [[v - scalar for v in row] for row in self.data]\n\n    def subtract_matrix(self, other):\n        \"\"\"\n        Matrix subtraction\n        \"\"\"\n        return [[v1 - v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)]\n\n    def multiply_scalar(self, scalar):\n        \"\"\"\n        Scalar multiplication\n        \"\"\"\n        return [[v*scalar for v in row] for row in self.data]\n\n    def transpose(self):\n        \"\"\"\n        Matrix transposition\n        \"\"\"\n        return [list(v) for v in list(zip(*self.data))]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a matrix and its basic operations\n\n### Input:\n\n\n### Output:\nclass Matrix:\n    def __init__(self, data):\n        self.data = data\n\n    def __repr__(self):\n        return str(self.data)\n\n    def shape(self):\n        \"\"\"\n        Shape of matrix\n        \"\"\"\n        return (len(self.data), len(self.data[0]))\n\n    def add_scalar(self, scalar):\n        \"\"\"\n        Scalar addition\n        \"\"\"\n        return [[v + scalar for v in row] for row in self.data]\n\n    def add_matrix(self, other):\n        \"\"\"\n        Matrix addition\n        \"\"\"\n        return [[v1 + v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)]\n\n    def subtract_scalar(self, scalar):\n        \"\"\"\n        Scalar subtraction\n        \"\"\"\n        return [[v - scalar for v in row] for row in self.data]\n\n    def subtract_matrix(self, other):\n        \"\"\"\n        Matrix subtraction\n        \"\"\"\n        return [[v1 - v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)]\n\n    def multiply_scalar(self, scalar):\n        \"\"\"\n        Scalar multiplication\n        \"\"\"\n        return [[v*scalar for v in row] for row in self.data]\n\n    def transpose(self):\n        \"\"\"\n        Matrix transposition\n        \"\"\"\n        return [list(v) for v in list(zip(*self.data))]"}
{"instruction": "Create an object-oriented structure to solve a maze by using python.", "input": "", "output": "import collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented structure to solve a maze by using python.\n\n### Input:\n\n\n### Output:\nimport collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1"}
{"instruction": "Design a class to represent a car in the Python programming language.", "input": "", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year\n\n    def set_make(self, make):\n        self.make = make\n\n    def set_model(self, model):\n        self.model = model\n\n    def set_year(self, year):\n        self.year = year", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to represent a car in the Python programming language.\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year\n\n    def set_make(self, make):\n        self.make = make\n\n    def set_model(self, model):\n        self.model = model\n\n    def set_year(self, year):\n        self.year = year"}
{"instruction": "Design a python program to calculate the sum of digits of an integer.", "input": "", "output": "def sumDigits(num): \n  \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    strNum = str(num) \n    digits = [int(x) for x in strNum] \n  \n    # return sum using sum() function \n    return sum(digits) \n  \n# Driver program \nnum = 12345\nprint(\"Sum of digits in num is:\", \n        sumDigits(num))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to calculate the sum of digits of an integer.\n\n### Input:\n\n\n### Output:\ndef sumDigits(num): \n  \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    strNum = str(num) \n    digits = [int(x) for x in strNum] \n  \n    # return sum using sum() function \n    return sum(digits) \n  \n# Driver program \nnum = 12345\nprint(\"Sum of digits in num is:\", \n        sumDigits(num))"}
{"instruction": "Write a code block to merge two given dictionaries into a single one.", "input": "", "output": "def mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code block to merge two given dictionaries into a single one.\n\n### Input:\n\n\n### Output:\ndef mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict"}
{"instruction": "Construct a Python script to generate permutations of a given string.", "input": "", "output": "def generate_permutations(string):\n    # if string is of length 0 or 1\n    if len(string) == 0 or len(string) == 1:\n        return [string]\n\n    res = list()\n    # traverse the string\n    for i in range(len(string)):\n        # remove the character at that index\n        char = string[i]\n        remaining_string = string[:i] + string[i+1:]\n        \n        # recursive call for generating permutations of string\n        for p in generate_permutations(remaining_string):\n            res.append(char + p)\n\n    # return the generated permutations\n    return res", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script to generate permutations of a given string.\n\n### Input:\n\n\n### Output:\ndef generate_permutations(string):\n    # if string is of length 0 or 1\n    if len(string) == 0 or len(string) == 1:\n        return [string]\n\n    res = list()\n    # traverse the string\n    for i in range(len(string)):\n        # remove the character at that index\n        char = string[i]\n        remaining_string = string[:i] + string[i+1:]\n        \n        # recursive call for generating permutations of string\n        for p in generate_permutations(remaining_string):\n            res.append(char + p)\n\n    # return the generated permutations\n    return res"}
{"instruction": "Generate a Python program to print all prime numbers between 1 and n.", "input": "", "output": "def prime_numbers(n):\n    # Create an empty list to store prime numbers\n    prime_list = []\n    # Iterate over the numbers from 2 to n\n    for num in range(2,n+1):\n        prime = True\n        # Iterate over the numbers from 2 to the square root of n\n        for i in range(2, round(n**0.5)+1):\n            # Check if num is divisible by any number\n            if num % i == 0:\n                prime = False\n        if prime:\n            prime_list.append(num)\n    return prime_list\n\nn = int(input(\"Enter a number: \"))\nprint(\"The prime numbers between 1 and\", n, \"are\", prime_numbers(n))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print all prime numbers between 1 and n.\n\n### Input:\n\n\n### Output:\ndef prime_numbers(n):\n    # Create an empty list to store prime numbers\n    prime_list = []\n    # Iterate over the numbers from 2 to n\n    for num in range(2,n+1):\n        prime = True\n        # Iterate over the numbers from 2 to the square root of n\n        for i in range(2, round(n**0.5)+1):\n            # Check if num is divisible by any number\n            if num % i == 0:\n                prime = False\n        if prime:\n            prime_list.append(num)\n    return prime_list\n\nn = int(input(\"Enter a number: \"))\nprint(\"The prime numbers between 1 and\", n, \"are\", prime_numbers(n))"}
{"instruction": "Write a Python code to perform a cross-validation on a KNN classifier", "input": "", "output": "import numpy as np\nfrom sklearn.model_selection import KFold\n \n# Define the 5 fold cross-validation\nkfold = KFold(n_splits=5, shuffle=True, random_state=1)\n \n# Generate the k-folds\nsplits = kfold.split(X)\n \nfor train_idx, val_idx in splits:\n    # Generate training and validation sets\n    X_train, y_train = X[train_idx], y[train_idx]\n    X_val, y_val = X[val_idx], y[val_idx]\n \n    # Initialize the model\n    model = KNeighborsClassifier()\n \n    # Fit the model on the training set\n    model.fit(X_train, y_train)\n    \n    # Score the model on the validation set\n    score = model.score(X_val, y_val)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to perform a cross-validation on a KNN classifier\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import KFold\n \n# Define the 5 fold cross-validation\nkfold = KFold(n_splits=5, shuffle=True, random_state=1)\n \n# Generate the k-folds\nsplits = kfold.split(X)\n \nfor train_idx, val_idx in splits:\n    # Generate training and validation sets\n    X_train, y_train = X[train_idx], y[train_idx]\n    X_val, y_val = X[val_idx], y[val_idx]\n \n    # Initialize the model\n    model = KNeighborsClassifier()\n \n    # Fit the model on the training set\n    model.fit(X_train, y_train)\n    \n    # Score the model on the validation set\n    score = model.score(X_val, y_val)"}
{"instruction": "Develop a classifier in python to differentiate between cats and dogs", "input": "", "output": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# create model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classifier in python to differentiate between cats and dogs\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# create model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"}
{"instruction": "Implement a predictive text using a machine learning model in Python.", "input": "", "output": "#importing the libraries\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#loading the dataset\ndata = np.load('text_data.npy')\nlabels = np.load('text_labels.npy')\n\n# vectorizing the data\nvectorizer = CountVectorizer()\nvectorized_data = vectorizer.fit_transform(data)\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(vectorized_data, labels, test_size=0.2, random_state=0)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n#predicting the test data\ny_pred = model.predict(X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a predictive text using a machine learning model in Python.\n\n### Input:\n\n\n### Output:\n#importing the libraries\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#loading the dataset\ndata = np.load('text_data.npy')\nlabels = np.load('text_labels.npy')\n\n# vectorizing the data\nvectorizer = CountVectorizer()\nvectorized_data = vectorizer.fit_transform(data)\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(vectorized_data, labels, test_size=0.2, random_state=0)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n#predicting the test data\ny_pred = model.predict(X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)"}
{"instruction": "Create a neural network in Python for recognizing handwritten digits.", "input": "", "output": "# import the necessary packages\nfrom keras.models import Sequential\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dense\n\n# Construct the model \nmodel = Sequential()\nmodel.add(Conv2D(20, (5, 5), padding=\"same\",\ninput_shape=(28, 28, 1)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(units=500))                 # Number of nodes in the hidden layer\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(units=10))                  # Output layer with 10 classes\nmodel.add(Activation(\"softmax\"))\n\n# Compile the model\nmodel.compile(loss=\"categorical_crossentropy\",\n   optimizer=\"adam\", metrics=[\"accuracy\"])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python for recognizing handwritten digits.\n\n### Input:\n\n\n### Output:\n# import the necessary packages\nfrom keras.models import Sequential\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dense\n\n# Construct the model \nmodel = Sequential()\nmodel.add(Conv2D(20, (5, 5), padding=\"same\",\ninput_shape=(28, 28, 1)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(units=500))                 # Number of nodes in the hidden layer\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(units=10))                  # Output layer with 10 classes\nmodel.add(Activation(\"softmax\"))\n\n# Compile the model\nmodel.compile(loss=\"categorical_crossentropy\",\n   optimizer=\"adam\", metrics=[\"accuracy\"])"}
{"instruction": "Generate a Python script to classify emails into spam/ham categories.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\ndf = pd.read_csv('data.csv')\n\n# Split the data into features and labels\nfeatures = df['text']\nlabels = df['label']\n\n# Extract features\nvectorizer = TfidfVectorizer()\nfeatures_transformed = vectorizer.fit_transform(features)\n\n# Split into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(features_transformed, labels, test_size = 0.2)\n\n# Build the classification model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Calculate the accuracy\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy\nprint(\"Model accuracy: {}%\".format(accuracy*100))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to classify emails into spam/ham categories.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\ndf = pd.read_csv('data.csv')\n\n# Split the data into features and labels\nfeatures = df['text']\nlabels = df['label']\n\n# Extract features\nvectorizer = TfidfVectorizer()\nfeatures_transformed = vectorizer.fit_transform(features)\n\n# Split into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(features_transformed, labels, test_size = 0.2)\n\n# Build the classification model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Calculate the accuracy\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy\nprint(\"Model accuracy: {}%\".format(accuracy*100))"}
{"instruction": "Create a neural network to analyse the sentiment of a tweet in Python", "input": "", "output": "import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Load the data \ndf = pd.read_csv('path/to/data')\n\n# Tokenize the data \ntokenizer = Tokenizer(num_words = 5000, oov_token = \"<OOV>\")\ntokenizer.fit_on_texts(df['text'])\nX = tokenizer.texts_to_sequences(df['text'])\nX = pad_sequences(X, padding = \"post\")\n\n# Set up the classification task \ny = pd.get_dummies(df['sentiment']).values\n\n# Split the data into training and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n\n# Build the model \nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim = 5000, output_dim = 16),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation = 'relu'),\n    tf.keras.layers.Dense(2, activation = 'softmax')\n])\n\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy']) \nmodel.fit(X_train, y_train, epochs = 15, validation_data = (X_test, y_test), verbose = 2)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network to analyse the sentiment of a tweet in Python\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Load the data \ndf = pd.read_csv('path/to/data')\n\n# Tokenize the data \ntokenizer = Tokenizer(num_words = 5000, oov_token = \"<OOV>\")\ntokenizer.fit_on_texts(df['text'])\nX = tokenizer.texts_to_sequences(df['text'])\nX = pad_sequences(X, padding = \"post\")\n\n# Set up the classification task \ny = pd.get_dummies(df['sentiment']).values\n\n# Split the data into training and test sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n\n# Build the model \nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim = 5000, output_dim = 16),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation = 'relu'),\n    tf.keras.layers.Dense(2, activation = 'softmax')\n])\n\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy']) \nmodel.fit(X_train, y_train, epochs = 15, validation_data = (X_test, y_test), verbose = 2)"}
{"instruction": "Write a code to implement a priority queue using a max heap in Python", "input": "", "output": "class MaxHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n\n    def perc_up(self, i):\n        while i // 2 > 0:\n            if self.heap_list[i] > self.heap_list[i // 2]:\n               self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2]\n            i = i // 2\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self.current_size = self.current_size + 1\n        self.perc_up(self.current_size)\n\n    def perc_down(self, i):\n        while (i * 2) <= self.current_size:\n            mc = self.max_child(i)\n            if self.heap_list[i] < self.heap_list[mc]:\n                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]\n            i = mc\n\n    def max_child(self, i):\n        if i * 2 + 1 > self.current_size:\n            return i * 2\n        else:\n            if self.heap_list[i*2] > self.heap_list[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delete_max(self):\n        retval = self.heap_list[1]\n        self.heap_list[1] = self.heap_list[self.current_size]\n        self.current_size = self.current_size - 1\n        self.heap_list.pop()\n        self.perc_down(1)\n        return retval\n\n    def build_heap(self, alist):\n        i = len(alist) // 2\n        self.current_size = len(alist)\n        self.heap_list = [0] + alist[:]\n        while (i > 0):\n            self.perc_down(i)\n            i = i - 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement a priority queue using a max heap in Python\n\n### Input:\n\n\n### Output:\nclass MaxHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n\n    def perc_up(self, i):\n        while i // 2 > 0:\n            if self.heap_list[i] > self.heap_list[i // 2]:\n               self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2]\n            i = i // 2\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self.current_size = self.current_size + 1\n        self.perc_up(self.current_size)\n\n    def perc_down(self, i):\n        while (i * 2) <= self.current_size:\n            mc = self.max_child(i)\n            if self.heap_list[i] < self.heap_list[mc]:\n                self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i]\n            i = mc\n\n    def max_child(self, i):\n        if i * 2 + 1 > self.current_size:\n            return i * 2\n        else:\n            if self.heap_list[i*2] > self.heap_list[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delete_max(self):\n        retval = self.heap_list[1]\n        self.heap_list[1] = self.heap_list[self.current_size]\n        self.current_size = self.current_size - 1\n        self.heap_list.pop()\n        self.perc_down(1)\n        return retval\n\n    def build_heap(self, alist):\n        i = len(alist) // 2\n        self.current_size = len(alist)\n        self.heap_list = [0] + alist[:]\n        while (i > 0):\n            self.perc_down(i)\n            i = i - 1"}
{"instruction": "Build a decison tree in Python to classify emails as spam or not spam.", "input": "", "output": "import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Create dataframe\ndf = pd.DataFrame({'content': ['This is a great deal!', 'Buy now!'], 'spam': [0, 1]})\n\n# Create features and labels\nX = df['content'] \ny = df['spam']\n\n# Create decision tree\ndtree_model = DecisionTreeClassifier(max_depth = 2).fit(X, y) \ndtree_predictions = dtree_model.predict(X) \n\n# Print accuracy\nprint(\"Accuracy:\", dtree_model.score(X, y))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a decison tree in Python to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Create dataframe\ndf = pd.DataFrame({'content': ['This is a great deal!', 'Buy now!'], 'spam': [0, 1]})\n\n# Create features and labels\nX = df['content'] \ny = df['spam']\n\n# Create decision tree\ndtree_model = DecisionTreeClassifier(max_depth = 2).fit(X, y) \ndtree_predictions = dtree_model.predict(X) \n\n# Print accuracy\nprint(\"Accuracy:\", dtree_model.score(X, y))"}
{"instruction": "Create a method in Python to find the probability of rolling two dice.", "input": "", "output": "def roll_2dice():\n    die_1 = random.randint(1, 6)\n    die_2 = random.randint(1, 6)\n    return die_1 + die_2\n \ndef find_probability():\n    total_combinations = 36\n    total_sum = 0\n    for i in range(2, 13):\n        sum_count = 0\n        for j in range(1, 7):\n            for k in range(1, 7):\n                if (j + k == i):\n                    sum_count += 1\n        total_sum += sum_count\n    return (total_sum/total_combinations)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to find the probability of rolling two dice.\n\n### Input:\n\n\n### Output:\ndef roll_2dice():\n    die_1 = random.randint(1, 6)\n    die_2 = random.randint(1, 6)\n    return die_1 + die_2\n \ndef find_probability():\n    total_combinations = 36\n    total_sum = 0\n    for i in range(2, 13):\n        sum_count = 0\n        for j in range(1, 7):\n            for k in range(1, 7):\n                if (j + k == i):\n                    sum_count += 1\n        total_sum += sum_count\n    return (total_sum/total_combinations)"}
{"instruction": "Write a python program to generate all prime numbers between 1 and 10.", "input": "", "output": "# Python program to generate all prime numbers between two given numbers \n  \ndef generate_prime_numbers(low,high): \n    if low == 1: \n        low += 1\n    for num in range(low,high + 1):    # Iterating over the range \n        if num > 1: \n            for i in range(2,num): \n                if (num % i) == 0: \n                    break \n            else: \n                print(num) \n  \nlow = 1\nhigh = 10\n\ngenerate_prime_numbers(low,high)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate all prime numbers between 1 and 10.\n\n### Input:\n\n\n### Output:\n# Python program to generate all prime numbers between two given numbers \n  \ndef generate_prime_numbers(low,high): \n    if low == 1: \n        low += 1\n    for num in range(low,high + 1):    # Iterating over the range \n        if num > 1: \n            for i in range(2,num): \n                if (num % i) == 0: \n                    break \n            else: \n                print(num) \n  \nlow = 1\nhigh = 10\n\ngenerate_prime_numbers(low,high)"}
{"instruction": "Build a collection of functions in python that can help analyze a text", "input": "", "output": "def find_words(text):\n    \"\"\"Find all the words in the given text.\"\"\"\n    return text.split()\n\ndef find_word_count(text):\n    \"\"\"Find the number of words in the given text.\"\"\"\n    words = find_words(text)\n    return len(words)\n\ndef find_average_word_length(text):\n    \"\"\"Find the average word length in the given text.\"\"\"\n    words = find_words(text)\n    total_len = 0\n    for word in words:\n        total_len += len(word)\n        \n    return total_len/len(words)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a collection of functions in python that can help analyze a text\n\n### Input:\n\n\n### Output:\ndef find_words(text):\n    \"\"\"Find all the words in the given text.\"\"\"\n    return text.split()\n\ndef find_word_count(text):\n    \"\"\"Find the number of words in the given text.\"\"\"\n    words = find_words(text)\n    return len(words)\n\ndef find_average_word_length(text):\n    \"\"\"Find the average word length in the given text.\"\"\"\n    words = find_words(text)\n    total_len = 0\n    for word in words:\n        total_len += len(word)\n        \n    return total_len/len(words)"}
{"instruction": "Develop a program in Python to delete a directory and all its content.", "input": "", "output": "import os, shutil\n\ndef delete_directory(path_to_dir):\n    # check if the path is a directory\n    if os.path.isdir(path_to_dir):\n        # delete the directory and all its content\n        shutil.rmtree(path_to_dir)\n        # print a message\n        print('The directory and all its content successfully deleted!')\n    else:\n        # if path is not a directory\n        print('ERROR: The path ' + path_to_dir + ' does not exist')\n\npath_to_dir = 'test_dir'\ndelete_directory(path_to_dir)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to delete a directory and all its content.\n\n### Input:\n\n\n### Output:\nimport os, shutil\n\ndef delete_directory(path_to_dir):\n    # check if the path is a directory\n    if os.path.isdir(path_to_dir):\n        # delete the directory and all its content\n        shutil.rmtree(path_to_dir)\n        # print a message\n        print('The directory and all its content successfully deleted!')\n    else:\n        # if path is not a directory\n        print('ERROR: The path ' + path_to_dir + ' does not exist')\n\npath_to_dir = 'test_dir'\ndelete_directory(path_to_dir)"}
{"instruction": "Develop a Python module that provides an interface to Cloudflare's API", "input": "", "output": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nclass CloudflareApi:\n    def __init__(self, username, api_key):\n        self.username = username\n        self.api_key = api_key\n        self.api_url = 'https://api.cloudflare.com/client/v4/{endpoint}'\n\n    def get_zone_list(self):\n        endpoint = 'zones'\n        url = self.api_url.format(endpoint=endpoint)\n        response = requests.get(url, auth=HTTPBasicAuth(self.username, self.api_key))\n        return response.json()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python module that provides an interface to Cloudflare's API\n\n### Input:\n\n\n### Output:\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nclass CloudflareApi:\n    def __init__(self, username, api_key):\n        self.username = username\n        self.api_key = api_key\n        self.api_url = 'https://api.cloudflare.com/client/v4/{endpoint}'\n\n    def get_zone_list(self):\n        endpoint = 'zones'\n        url = self.api_url.format(endpoint=endpoint)\n        response = requests.get(url, auth=HTTPBasicAuth(self.username, self.api_key))\n        return response.json()"}
{"instruction": "Generate an algorithm in Python that merges two unsorted linked lists.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef merge(head1, head2): \n    # Base cases \n    if head1 is None: \n        return head2  \n    if head2 is None: \n        return head1 \n  \n    mergedHead = None\n    if head1.data <= head2.data: \n        mergedHead = head1 \n        mergedHead.next = merge(head1.next, head2) \n    else: \n        mergedHead = head2\n        mergedHead.next = merge(head1, head2.next) \n  \n    return mergedHead", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python that merges two unsorted linked lists.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef merge(head1, head2): \n    # Base cases \n    if head1 is None: \n        return head2  \n    if head2 is None: \n        return head1 \n  \n    mergedHead = None\n    if head1.data <= head2.data: \n        mergedHead = head1 \n        mergedHead.next = merge(head1.next, head2) \n    else: \n        mergedHead = head2\n        mergedHead.next = merge(head1, head2.next) \n  \n    return mergedHead"}
{"instruction": "Write a Python program to generate a cube mesh with a given parameter.", "input": "", "output": "import bpy\n\ndef generate_cube_mesh(parameter):\n    verts = [(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, parameter), (1, 0, parameter), (1, 1, parameter), (0, 1, parameter)] \n    edges = [(0, 1), (1, 2), (2, 3), (3, 0), (4, 5), (5, 6), (6, 7), (7, 4), (0, 4), (1, 5), (2, 6), (3, 7)] \n    mesh = bpy.data.meshes.new('Cube') \n    mesh.from_pydata(verts, edges, []) \n    mesh.update() \n    cube_obj = bpy.data.objects.new('MyCube', mesh) \n    bpy.context.scene.objects.link(cube_obj)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a cube mesh with a given parameter.\n\n### Input:\n\n\n### Output:\nimport bpy\n\ndef generate_cube_mesh(parameter):\n    verts = [(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, parameter), (1, 0, parameter), (1, 1, parameter), (0, 1, parameter)] \n    edges = [(0, 1), (1, 2), (2, 3), (3, 0), (4, 5), (5, 6), (6, 7), (7, 4), (0, 4), (1, 5), (2, 6), (3, 7)] \n    mesh = bpy.data.meshes.new('Cube') \n    mesh.from_pydata(verts, edges, []) \n    mesh.update() \n    cube_obj = bpy.data.objects.new('MyCube', mesh) \n    bpy.context.scene.objects.link(cube_obj)"}
{"instruction": "Write a Python function to find all possible permutations of a string.", "input": "", "output": "def find_permutations(input_string):\n    \"\"\"Return all possible permutations of a given string.\"\"\"\n\n    permutations = []\n    if len(input_string) == 1:\n        permutations.append(input_string)\n    else:\n        for i in range(len(input_string)):\n            current_char = input_string[i]\n            remaining_string = input_string[:i] + input_string[i+1:]\n            for permutation in find_permutations(remaining_string):\n                permutations.append(current_char + permutation)\n    return permutations", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find all possible permutations of a string.\n\n### Input:\n\n\n### Output:\ndef find_permutations(input_string):\n    \"\"\"Return all possible permutations of a given string.\"\"\"\n\n    permutations = []\n    if len(input_string) == 1:\n        permutations.append(input_string)\n    else:\n        for i in range(len(input_string)):\n            current_char = input_string[i]\n            remaining_string = input_string[:i] + input_string[i+1:]\n            for permutation in find_permutations(remaining_string):\n                permutations.append(current_char + permutation)\n    return permutations"}
{"instruction": "Write a Python program to demonstrate inheritance between two classes.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def show_info(self):\n        print(\"Name of Person is: \", self.name)\n        print(\"Age of Person is: \", self.age)\n    \nclass Employee(Person):\n    def __init__(self, name, age, emp_id):\n        super().__init__(name, age)\n        self.emp_id = emp_id\n    \n    def show_info(self):\n        super().show_info()\n        print(\"ID of Employee is: \", self.emp_id)\n \nemp = Employee(\"John Doe\", 30, \"E1001\")\nemp.show_info()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to demonstrate inheritance between two classes.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def show_info(self):\n        print(\"Name of Person is: \", self.name)\n        print(\"Age of Person is: \", self.age)\n    \nclass Employee(Person):\n    def __init__(self, name, age, emp_id):\n        super().__init__(name, age)\n        self.emp_id = emp_id\n    \n    def show_info(self):\n        super().show_info()\n        print(\"ID of Employee is: \", self.emp_id)\n \nemp = Employee(\"John Doe\", 30, \"E1001\")\nemp.show_info()"}
{"instruction": "Develop a Python script to scrape a website for name and phone number.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape(url):\n    \"\"\"scrapes a website for name and phone number\"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    data = {}\n    names = soup.find_all('h2', attrs={'class': 'name'})\n    phones = soup.find_all('span', attrs={'class': 'phone'})\n    for name, phone in zip(names, phones):\n        data[name.text] = phone.text\n    return data\n\nif __name__ == '__main__':\n    url = \"http://www.example.com\"\n    data = scrape(url)\n    print(data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to scrape a website for name and phone number.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape(url):\n    \"\"\"scrapes a website for name and phone number\"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    data = {}\n    names = soup.find_all('h2', attrs={'class': 'name'})\n    phones = soup.find_all('span', attrs={'class': 'phone'})\n    for name, phone in zip(names, phones):\n        data[name.text] = phone.text\n    return data\n\nif __name__ == '__main__':\n    url = \"http://www.example.com\"\n    data = scrape(url)\n    print(data)"}
{"instruction": "Write a Python program to webscrape the most popular movies from IMDB.", "input": "", "output": "import requests \nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/moviemeter'\n\n# Make a request to the url\nr = requests.get(url)\n\n# Parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all the movies listed\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Loop over each movie\nfor movie in movies:\n    # Get the movie title\n    title = movie.a.text\n    # Get the release year\n    year = movie.span.text[1:-1]\n    # Print the title and year\n    print(title + ' ('+year + ')')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to webscrape the most popular movies from IMDB.\n\n### Input:\n\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/moviemeter'\n\n# Make a request to the url\nr = requests.get(url)\n\n# Parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all the movies listed\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Loop over each movie\nfor movie in movies:\n    # Get the movie title\n    title = movie.a.text\n    # Get the release year\n    year = movie.span.text[1:-1]\n    # Print the title and year\n    print(title + ' ('+year + ')')"}
{"instruction": "Create a machine learning model in Python to predict the stock market.", "input": "", "output": "#import libraries \nimport pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\n\n#import dataset \ndf = pd.read_csv('stock_data.csv')\n\n#divide the data into independent and dependent variables \nX = df.drop('target_stock', axis=1).values\ny = df['target_stock'].values\n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = SVR() \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the stock market.\n\n### Input:\n\n\n### Output:\n#import libraries \nimport pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\n\n#import dataset \ndf = pd.read_csv('stock_data.csv')\n\n#divide the data into independent and dependent variables \nX = df.drop('target_stock', axis=1).values\ny = df['target_stock'].values\n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = SVR() \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)"}
{"instruction": "Design a Python program to decipher text encoded with a Caesar Cipher.", "input": "", "output": "def decipher_caesar(text, shift):\n    lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    deciphered_text = ''\n\n    for i in range(len(text)):\n        if text[i] in lower_alphabet:\n            index = (lower_alphabet.index(text[i]) - shift) % 26\n            deciphered_text += lower_alphabet[index]\n        elif text[i] in upper_alphabet:\n            index = (upper_alphabet.index(text[i]) - shift) % 26\n            deciphered_text += upper_alphabet[index]\n        else:\n            deciphered_text += text[i]\n\n    return deciphered_text", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to decipher text encoded with a Caesar Cipher.\n\n### Input:\n\n\n### Output:\ndef decipher_caesar(text, shift):\n    lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    deciphered_text = ''\n\n    for i in range(len(text)):\n        if text[i] in lower_alphabet:\n            index = (lower_alphabet.index(text[i]) - shift) % 26\n            deciphered_text += lower_alphabet[index]\n        elif text[i] in upper_alphabet:\n            index = (upper_alphabet.index(text[i]) - shift) % 26\n            deciphered_text += upper_alphabet[index]\n        else:\n            deciphered_text += text[i]\n\n    return deciphered_text"}
{"instruction": "Create a function in Python that implements the bubble sort algorithm.", "input": "", "output": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # Traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that implements the bubble sort algorithm.\n\n### Input:\n\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # Traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction": "Create a class in Python to convert raw text into a structured format.", "input": "", "output": "class TextParser: \n    \"\"\"A class in Python to convert raw text into a structured format\"\"\"\n    \n    def __init__(self, text):\n        self.text = text\n\n    def parse(self):\n        \"\"\"This method will parse the given text and return it in a structured format\"\"\"\n        # initialize an empty output array\n        output = []\n        # loop over the lines in the text\n        for line in self.text.split('\\n'):\n            # split each line into it’s individual words separated by spaces\n            words = line.split(' ')\n            # add each line to the output array\n            output.append(words)\n\n        return output", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to convert raw text into a structured format.\n\n### Input:\n\n\n### Output:\nclass TextParser: \n    \"\"\"A class in Python to convert raw text into a structured format\"\"\"\n    \n    def __init__(self, text):\n        self.text = text\n\n    def parse(self):\n        \"\"\"This method will parse the given text and return it in a structured format\"\"\"\n        # initialize an empty output array\n        output = []\n        # loop over the lines in the text\n        for line in self.text.split('\\n'):\n            # split each line into it’s individual words separated by spaces\n            words = line.split(' ')\n            # add each line to the output array\n            output.append(words)\n\n        return output"}
{"instruction": "Create a web scraper that extracts specific data from a given website.", "input": "", "output": "The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper that extracts specific data from a given website.\n\n### Input:\n\n\n### Output:\nThe web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))"}
{"instruction": "Compose an algorithm to check if two strings are an anagram in Python.", "input": "", "output": "def is_anagram(s1, s2):\n    # Remove whitespace and covert strings to lowercase\n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n\n    if len(s1) != len(s2):\n        # An anagram should have the same length\n        return False\n\n    # Create dictionaries containing characters of each string\n    char_count1 = {}\n    char_count2 = {}\n\n    # Fill the dictionaries\n    for char in s1:\n        if char in char_count1:\n            char_count1[char] += 1\n        else:\n            char_count1[char] = 1\n\n    for char in s2:\n        if char in char_count2:\n            char_count2[char] += 1\n        else:\n            char_count2[char] = 1\n\n    # If dictionaries are equal, then both string are anagrams\n    return char_count1 == char_count2", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose an algorithm to check if two strings are an anagram in Python.\n\n### Input:\n\n\n### Output:\ndef is_anagram(s1, s2):\n    # Remove whitespace and covert strings to lowercase\n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n\n    if len(s1) != len(s2):\n        # An anagram should have the same length\n        return False\n\n    # Create dictionaries containing characters of each string\n    char_count1 = {}\n    char_count2 = {}\n\n    # Fill the dictionaries\n    for char in s1:\n        if char in char_count1:\n            char_count1[char] += 1\n        else:\n            char_count1[char] = 1\n\n    for char in s2:\n        if char in char_count2:\n            char_count2[char] += 1\n        else:\n            char_count2[char] = 1\n\n    # If dictionaries are equal, then both string are anagrams\n    return char_count1 == char_count2"}
{"instruction": "Develop a bot in Python to simulate a conversation between two people.", "input": "", "output": "# Importing the necessary libraries\nimport random\n\n# Defining the responses for the bot\nquestions = [\"What is your favorite movie?\", \"What is your favorite color?\"]\nresponses = [\"My favorite movie is 'The Godfather'. I love the classic vibe of the movie.\", \n             \"My favorite color is blue. It's soothing and calming to me.\"]\n\n# Function to respond to the questions\ndef respond(user_input):\n    if user_input in questions:\n        return random.choice(responses)\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n# Driver code\nprint(\"Bot: Hi! What can I help you with?\")\nuser_input = input(\"User: \")\n\nwhile user_input != \"bye\":\n    print(\"Bot: \" + respond(user_input))\n    user_input = input(\"User: \")\n\nprint(\"Bot: Bye! It was nice talking to you!\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a bot in Python to simulate a conversation between two people.\n\n### Input:\n\n\n### Output:\n# Importing the necessary libraries\nimport random\n\n# Defining the responses for the bot\nquestions = [\"What is your favorite movie?\", \"What is your favorite color?\"]\nresponses = [\"My favorite movie is 'The Godfather'. I love the classic vibe of the movie.\", \n             \"My favorite color is blue. It's soothing and calming to me.\"]\n\n# Function to respond to the questions\ndef respond(user_input):\n    if user_input in questions:\n        return random.choice(responses)\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n# Driver code\nprint(\"Bot: Hi! What can I help you with?\")\nuser_input = input(\"User: \")\n\nwhile user_input != \"bye\":\n    print(\"Bot: \" + respond(user_input))\n    user_input = input(\"User: \")\n\nprint(\"Bot: Bye! It was nice talking to you!\")"}
{"instruction": "Create a Python program to display the prime numbers between 1 and 10.", "input": "", "output": "\"\"\"\nCreate a Python program to display the prime numbers between 1 and 10\n\"\"\"\n#Function to check if a number is prime\ndef is_prime(n):  \n    for i in range(2, n): #Check the number between 2 and n\n        if n % i == 0: #If the number is divisible by any other number in that range\n            return False \n    return True \n\n#Function to return the list of prime numbers\ndef find_prime_numbers(num): \n    #List to store the prime numbers\n    prime_list = [] \n  \n    for i in range(2, num+1): #Loop through the numbers between 2 and(including) 10\n        if is_prime(i): #Check if the number is a prime number\n            prime_list.append(i) #Append the prime number to the list\n    \n    return prime_list\n\nif __name__ == '__main__':\n    print(find_prime_numbers(10))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to display the prime numbers between 1 and 10.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python program to display the prime numbers between 1 and 10\n\"\"\"\n#Function to check if a number is prime\ndef is_prime(n):  \n    for i in range(2, n): #Check the number between 2 and n\n        if n % i == 0: #If the number is divisible by any other number in that range\n            return False \n    return True \n\n#Function to return the list of prime numbers\ndef find_prime_numbers(num): \n    #List to store the prime numbers\n    prime_list = [] \n  \n    for i in range(2, num+1): #Loop through the numbers between 2 and(including) 10\n        if is_prime(i): #Check if the number is a prime number\n            prime_list.append(i) #Append the prime number to the list\n    \n    return prime_list\n\nif __name__ == '__main__':\n    print(find_prime_numbers(10))"}
{"instruction": "Construct a function in Python to determine if a tree is a BST or not.", "input": "", "output": "def isBST(root): \n  \n    # An empty tree is BST \n    if root is None: \n        return True\n  \n    # Check recursively that  \n    # all the nodes follow BST property \n    inOrder = isBSTUtil(root, float(\"-inf\"),  \n                                float(\"inf\")) \n                  \n    # Return result \n    return inOrder \n  \n# Retusn True if the given tree is BST. Else return False \ndef isBSTUtil(root, mini, maxi): \n      \n    # Base case \n    if root is None: \n        return True\n  \n    # False if this node violates the min/max constraint \n    if root.data < mini or root.data > maxi: \n        return False\n  \n    # Otherwise check the subtrees recursively  \n    # tightening the min or max constraint \n    return (isBSTUtil(root.left, mini, root.data-1) and\n          isBSTUtil(root.right, root.data+1, maxi))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to determine if a tree is a BST or not.\n\n### Input:\n\n\n### Output:\ndef isBST(root): \n  \n    # An empty tree is BST \n    if root is None: \n        return True\n  \n    # Check recursively that  \n    # all the nodes follow BST property \n    inOrder = isBSTUtil(root, float(\"-inf\"),  \n                                float(\"inf\")) \n                  \n    # Return result \n    return inOrder \n  \n# Retusn True if the given tree is BST. Else return False \ndef isBSTUtil(root, mini, maxi): \n      \n    # Base case \n    if root is None: \n        return True\n  \n    # False if this node violates the min/max constraint \n    if root.data < mini or root.data > maxi: \n        return False\n  \n    # Otherwise check the subtrees recursively  \n    # tightening the min or max constraint \n    return (isBSTUtil(root.left, mini, root.data-1) and\n          isBSTUtil(root.right, root.data+1, maxi))"}
{"instruction": "Create an AI model in Python to predict the sentiment of a given text.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\n# import the necessary libraries\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# define the labels and features\nlabels = ['positive','negative','neutral']\ntexts = [\"I'm feeling happy today\", \"I'm feeling very frustrated\", \"I'm not sure how to feel right now\"]\nlabels = [1,0,2]\n\n# vectorise the texts\nvectorizer = TfidfVectorizer()\nfeatures = vectorizer.fit_transform(texts)\n\n# split the data into train and test\nX = features.toarray()\nY = labels\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8, random_state = 0)\n\n# Create the model and fit it\nmodel = LogisticRegression()\nmodel.fit(X_train,Y_train)\n\n# Make predictions\npredictions = model.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python to predict the sentiment of a given text.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# import the necessary libraries\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# define the labels and features\nlabels = ['positive','negative','neutral']\ntexts = [\"I'm feeling happy today\", \"I'm feeling very frustrated\", \"I'm not sure how to feel right now\"]\nlabels = [1,0,2]\n\n# vectorise the texts\nvectorizer = TfidfVectorizer()\nfeatures = vectorizer.fit_transform(texts)\n\n# split the data into train and test\nX = features.toarray()\nY = labels\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8, random_state = 0)\n\n# Create the model and fit it\nmodel = LogisticRegression()\nmodel.fit(X_train,Y_train)\n\n# Make predictions\npredictions = model.predict(X_test)"}
{"instruction": "Design an algorithm in Python to solve the traveling salesman problem.", "input": "", "output": "def tsp(graph): \n  \n    # Set initial values: \n    best_path = [] \n    best_path_cost = float('Inf') \n  \n    # Iterate through all the possible paths: \n    for i in range(1 << len(graph[0])): \n  \n        # Generate the binary string: \n        path = [] \n        for j in range(len(graph[0])): \n            if (i & (1 << j)) > 0: \n                path.append(j) \n  \n        # Calculate the cost of the path: \n        cost = 0\n        k = 0\n        for j in range(len(path)): \n            if j+1 < len(path): \n                cost += graph[path[j]][path[j+1]] \n            else: \n                cost += graph[path[j]][path[0]] \n  \n        # Check if the cost of the path is less than the \n        # current best path cost: \n        if cost < best_path_cost: \n            best_path_cost = cost \n            best_path = path \n  \n    return best_path, best_path_cost", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to solve the traveling salesman problem.\n\n### Input:\n\n\n### Output:\ndef tsp(graph): \n  \n    # Set initial values: \n    best_path = [] \n    best_path_cost = float('Inf') \n  \n    # Iterate through all the possible paths: \n    for i in range(1 << len(graph[0])): \n  \n        # Generate the binary string: \n        path = [] \n        for j in range(len(graph[0])): \n            if (i & (1 << j)) > 0: \n                path.append(j) \n  \n        # Calculate the cost of the path: \n        cost = 0\n        k = 0\n        for j in range(len(path)): \n            if j+1 < len(path): \n                cost += graph[path[j]][path[j+1]] \n            else: \n                cost += graph[path[j]][path[0]] \n  \n        # Check if the cost of the path is less than the \n        # current best path cost: \n        if cost < best_path_cost: \n            best_path_cost = cost \n            best_path = path \n  \n    return best_path, best_path_cost"}
{"instruction": "Create a Neural Network model in Python that classifies MNIST numbers.", "input": "", "output": "import keras\nfrom keras.datasets import mnist\nfrom keras.layers import Dense, Activation\nfrom keras.models import Sequential\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Initializing the model\nmodel = Sequential()\n\n# Input and hidden Layer\nmodel.add(Dense(units=32, input_shape=(784, )))\nmodel.add(Activation('relu'))\n\n# Output Layer\nmodel.add(Dense(units=10))\nmodel.add(Activation('softmax'))\n\n# Compiling the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(x_train, \n                    y_train, \n                    epochs=25, \n                    batch_size=200, \n                    validation_data=(x_test ,y_test ))\n\n# Evaluate the model\nscores = model.evaluate(x_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Neural Network model in Python that classifies MNIST numbers.\n\n### Input:\n\n\n### Output:\nimport keras\nfrom keras.datasets import mnist\nfrom keras.layers import Dense, Activation\nfrom keras.models import Sequential\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Initializing the model\nmodel = Sequential()\n\n# Input and hidden Layer\nmodel.add(Dense(units=32, input_shape=(784, )))\nmodel.add(Activation('relu'))\n\n# Output Layer\nmodel.add(Dense(units=10))\nmodel.add(Activation('softmax'))\n\n# Compiling the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(x_train, \n                    y_train, \n                    epochs=25, \n                    batch_size=200, \n                    validation_data=(x_test ,y_test ))\n\n# Evaluate the model\nscores = model.evaluate(x_test, y_test)"}
{"instruction": "Could you provide an implementation of a binary search tree in Python?", "input": "", "output": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def add(self, val):\n        new_node = Node(val)\n        if not self.root:\n            self.root = new_node\n        else:\n            curr = self.root\n            while True:\n                if val < curr.val:\n                    if not curr.left:\n                        curr.left = new_node\n                        break\n                    curr = curr.left\n                else:\n                    if not curr.right:\n                        curr.right = new_node\n                        break\n                    curr = curr.right\n        return self.root\n \n    def search(self, val):\n        curr = self.root\n        while curr:\n            if val < curr.val:\n                curr = curr.left\n            elif val > curr.val:\n                curr = curr.right\n            else:\n                return curr\n        return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCould you provide an implementation of a binary search tree in Python?\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def add(self, val):\n        new_node = Node(val)\n        if not self.root:\n            self.root = new_node\n        else:\n            curr = self.root\n            while True:\n                if val < curr.val:\n                    if not curr.left:\n                        curr.left = new_node\n                        break\n                    curr = curr.left\n                else:\n                    if not curr.right:\n                        curr.right = new_node\n                        break\n                    curr = curr.right\n        return self.root\n \n    def search(self, val):\n        curr = self.root\n        while curr:\n            if val < curr.val:\n                curr = curr.left\n            elif val > curr.val:\n                curr = curr.right\n            else:\n                return curr\n        return False"}
{"instruction": "Design and implement an API in Python for an online store application.", "input": "", "output": "from flask import Flask, jsonify, request\n \napp = Flask(__name__)\n\n@app.route('/products', methods=['GET'])\ndef get_all_products():\n    # query database\n    products = []\n    # format result\n    return jsonify(products)\n\n@app.route('/products/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    # query database\n    product = {}\n    # format result\n    return jsonify(product)\n\n@app.route('/products', methods=['POST'])\ndef create_product():\n    # get data from request\n    data = request.get_json()\n    # save to database\n    # format result\n    return jsonify({'message': 'Product added successfully.'}), 201\n\n@app.route('/products/<int:product_id>', methods=['PUT'])\ndef update_product(product_id):\n    # get data from the request\n    data = request.get_json()\n    # update data in the database\n    # format the result\n    return jsonify({'message': 'Product successfully updated.'})\n\n@app.route('/products/<int:product_id>', methods=['DELETE'])\ndef delete_product(product_id):\n    # delete data from the database\n    # format the result\n    return jsonify({'message': 'Product successfully deleted.'})", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement an API in Python for an online store application.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, jsonify, request\n \napp = Flask(__name__)\n\n@app.route('/products', methods=['GET'])\ndef get_all_products():\n    # query database\n    products = []\n    # format result\n    return jsonify(products)\n\n@app.route('/products/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    # query database\n    product = {}\n    # format result\n    return jsonify(product)\n\n@app.route('/products', methods=['POST'])\ndef create_product():\n    # get data from request\n    data = request.get_json()\n    # save to database\n    # format result\n    return jsonify({'message': 'Product added successfully.'}), 201\n\n@app.route('/products/<int:product_id>', methods=['PUT'])\ndef update_product(product_id):\n    # get data from the request\n    data = request.get_json()\n    # update data in the database\n    # format the result\n    return jsonify({'message': 'Product successfully updated.'})\n\n@app.route('/products/<int:product_id>', methods=['DELETE'])\ndef delete_product(product_id):\n    # delete data from the database\n    # format the result\n    return jsonify({'message': 'Product successfully deleted.'})"}
{"instruction": "Create a program in Python using pygame library to build a simple game", "input": "", "output": "import pygame\n \n# Define some colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\n \n# Call this function so the Pygame library can initialize itself\npygame.init()\n \n# Create an 800x600 sized screen\nscreen = pygame.display.set_mode([800, 600])\n \n# Set the title of the window\npygame.display.set_caption('My Game')\n \nclock = pygame.time.Clock()\n \n# Set positions of graphics\nbackground_position = [0, 0]\n \n# Load and set up graphics.\nbackground_image = pygame.image.load(\"image.jpg\").convert()\n \n# Set positions of graphics\nplayer_image = pygame.image.load(\"player.jpg\").convert()\nplayer_position = [100,100]\n \n#Iterate through the loop until the user clicks the close button.\ndone = False\n \nwhile not done:\n    # --- Event Processing\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n \n        # --- Drawing Code    \n    # First, clear the screen to white. \n    screen.fill(WHITE)\n \n    #Draw the background\n    screen.blit(background_image, background_position)\n \n    #Draw the character\n    screen.blit(player_image, player_position)\n \n    # Go ahead and update the screen with what we've drawn.\n    pygame.display.flip()\n \n    # Limit frames per second\n    clock.tick(60)\n \n# Be IDLE friendly\npygame.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python using pygame library to build a simple game\n\n### Input:\n\n\n### Output:\nimport pygame\n \n# Define some colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\n \n# Call this function so the Pygame library can initialize itself\npygame.init()\n \n# Create an 800x600 sized screen\nscreen = pygame.display.set_mode([800, 600])\n \n# Set the title of the window\npygame.display.set_caption('My Game')\n \nclock = pygame.time.Clock()\n \n# Set positions of graphics\nbackground_position = [0, 0]\n \n# Load and set up graphics.\nbackground_image = pygame.image.load(\"image.jpg\").convert()\n \n# Set positions of graphics\nplayer_image = pygame.image.load(\"player.jpg\").convert()\nplayer_position = [100,100]\n \n#Iterate through the loop until the user clicks the close button.\ndone = False\n \nwhile not done:\n    # --- Event Processing\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n \n        # --- Drawing Code    \n    # First, clear the screen to white. \n    screen.fill(WHITE)\n \n    #Draw the background\n    screen.blit(background_image, background_position)\n \n    #Draw the character\n    screen.blit(player_image, player_position)\n \n    # Go ahead and update the screen with what we've drawn.\n    pygame.display.flip()\n \n    # Limit frames per second\n    clock.tick(60)\n \n# Be IDLE friendly\npygame.quit()"}
{"instruction": "Design a Python script to check if a given value is an alphabet or not.", "input": "", "output": "\"\"\"\nDesign a Python script to check if a given value is an alphabet or not \n\"\"\"\n\n# function to check if the given value is an alphabet or not\ndef is_alphabet(value):\n    # check if the value is empty\n    if value == '':\n        return False\n\n    # check if the given value is an alphabet\n    if value.isalpha():\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    value = input('Enter a value: ')\n    print(is_alphabet(value))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to check if a given value is an alphabet or not.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python script to check if a given value is an alphabet or not \n\"\"\"\n\n# function to check if the given value is an alphabet or not\ndef is_alphabet(value):\n    # check if the value is empty\n    if value == '':\n        return False\n\n    # check if the given value is an alphabet\n    if value.isalpha():\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    value = input('Enter a value: ')\n    print(is_alphabet(value))"}
{"instruction": "Write a Python program to perform linear regression on a given dataset.", "input": "", "output": "import numpy as np\n\n# Define the data\nx_vals = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\ny_vals = np.array([1.0, 2.9, 3.2, 4.2, 5.3, 6.3])\n\n# Estimate the linear regression weights\nA = np.array([x_vals, np.ones(len(x_vals))])\nweights = np.linalg.lstsq(A.T, y_vals)[0] # obtaining the weights\n\n# Calculate the best fit line\nbest_fit_line = np.dot(x_vals, weights[0]) + weights[1]\n\n# Calculate the squared error\nsquared_error = np.sum((y_vals - best_fit_line)**2)\nprint(squared_error)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform linear regression on a given dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Define the data\nx_vals = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\ny_vals = np.array([1.0, 2.9, 3.2, 4.2, 5.3, 6.3])\n\n# Estimate the linear regression weights\nA = np.array([x_vals, np.ones(len(x_vals))])\nweights = np.linalg.lstsq(A.T, y_vals)[0] # obtaining the weights\n\n# Calculate the best fit line\nbest_fit_line = np.dot(x_vals, weights[0]) + weights[1]\n\n# Calculate the squared error\nsquared_error = np.sum((y_vals - best_fit_line)**2)\nprint(squared_error)"}
{"instruction": "Create a Python script to check the validity of a given password string", "input": "", "output": "def is_valid_password(password): \n    if len(password) < 8: \n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for i in range(len(password)): \n        ch = password[i] \n        if ch.isupper(): \n            has_uppercase = True\n        elif ch.islower():\n            has_lowercase = True \n        elif ch.isdigit(): \n            has_digit = True\n\n    if has_uppercase and has_lowercase and has_digit:  \n        return True\n\n    return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to check the validity of a given password string\n\n### Input:\n\n\n### Output:\ndef is_valid_password(password): \n    if len(password) < 8: \n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for i in range(len(password)): \n        ch = password[i] \n        if ch.isupper(): \n            has_uppercase = True\n        elif ch.islower():\n            has_lowercase = True \n        elif ch.isdigit(): \n            has_digit = True\n\n    if has_uppercase and has_lowercase and has_digit:  \n        return True\n\n    return False"}
{"instruction": "Develop a Python program to print the Fibonacci series between 0 to 50.", "input": "", "output": "def Fibonacci_Series(num):\n\n  i = 0\n  First_Value = 0\n  Second_Value = 1\n   \n  if num < 0:\n   print(\"Incorrect input\")\n  elif num == 0:\n   print(First_Value)\n  elif num == 1:\n   print(First_Value,\",\",Second_Value,end=\" , \")\n  else:\n   print(First_Value,\",\",Second_Value,end=\" , \")\n   while i < num-2:\n       next_Value = First_Value + Second_Value\n       print(next_Value,end=\" , \")\n       First_Value = Second_Value\n       Second_Value = next_Value\n       i = i + 1\n\nnum = 50\nFibonacci_Series(num)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to print the Fibonacci series between 0 to 50.\n\n### Input:\n\n\n### Output:\ndef Fibonacci_Series(num):\n\n  i = 0\n  First_Value = 0\n  Second_Value = 1\n   \n  if num < 0:\n   print(\"Incorrect input\")\n  elif num == 0:\n   print(First_Value)\n  elif num == 1:\n   print(First_Value,\",\",Second_Value,end=\" , \")\n  else:\n   print(First_Value,\",\",Second_Value,end=\" , \")\n   while i < num-2:\n       next_Value = First_Value + Second_Value\n       print(next_Value,end=\" , \")\n       First_Value = Second_Value\n       Second_Value = next_Value\n       i = i + 1\n\nnum = 50\nFibonacci_Series(num)"}
{"instruction": "Write a Python program to implement the Levenshtein Distance algorithm.", "input": "", "output": "def levenshtein_distance(s1, s2):\n    n = len(s1)\n    m = len(s2)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            cost = 0 if s1[i - 1] == s2[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, \n                            dp[i][j - 1] + 1, \n                            dp[i - 1][j - 1] + cost)\n    return dp[-1][-1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement the Levenshtein Distance algorithm.\n\n### Input:\n\n\n### Output:\ndef levenshtein_distance(s1, s2):\n    n = len(s1)\n    m = len(s2)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            cost = 0 if s1[i - 1] == s2[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, \n                            dp[i][j - 1] + 1, \n                            dp[i - 1][j - 1] + cost)\n    return dp[-1][-1]"}
{"instruction": "Create a Python program to demonstrate inheritance between two classes.", "input": "", "output": "class Person: \n    def __init__(self, name): \n        self.name = name \n  \n    def show_name(self): \n        print(\"Name : \", self.name) \n       \n    def greeting(self):\n        print(\"Hello, my name is {}\".format(self.name))\n\nclass Student(Person):\n    def __init__(self, name, rollnum):\n        Person.__init__(self, name)\n        self.rollnum = rollnum \n\n    def show_rollnum(self):\n        print(\"Roll Number: \", self.rollnum)\n\n\ns = Student(\"Jill\", \"15\")\ns.show_name()\ns.show_rollnum()\ns.greeting()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to demonstrate inheritance between two classes.\n\n### Input:\n\n\n### Output:\nclass Person: \n    def __init__(self, name): \n        self.name = name \n  \n    def show_name(self): \n        print(\"Name : \", self.name) \n       \n    def greeting(self):\n        print(\"Hello, my name is {}\".format(self.name))\n\nclass Student(Person):\n    def __init__(self, name, rollnum):\n        Person.__init__(self, name)\n        self.rollnum = rollnum \n\n    def show_rollnum(self):\n        print(\"Roll Number: \", self.rollnum)\n\n\ns = Student(\"Jill\", \"15\")\ns.show_name()\ns.show_rollnum()\ns.greeting()"}
{"instruction": "Write a data structure class in Python to store an array of characters.", "input": "", "output": "class Array(object):\n    def __init__(self, capacity = 10):\n        self.capacity = capacity\n        self.items = [None] * self.capacity\n\n    def add(self, item):\n        if len(self.items) >= self.capacity:\n            self.resize()\n\n        self.items[len(self.items)] = item\n        self.size += 1\n\n    def resize(self):\n        self.capacity *= 2\n        new_items = [None] * self.capacity\n        for i in range(len(self.items)):\n            new_items[i] = self.items[i]\n        self.items = new_items", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a data structure class in Python to store an array of characters.\n\n### Input:\n\n\n### Output:\nclass Array(object):\n    def __init__(self, capacity = 10):\n        self.capacity = capacity\n        self.items = [None] * self.capacity\n\n    def add(self, item):\n        if len(self.items) >= self.capacity:\n            self.resize()\n\n        self.items[len(self.items)] = item\n        self.size += 1\n\n    def resize(self):\n        self.capacity *= 2\n        new_items = [None] * self.capacity\n        for i in range(len(self.items)):\n            new_items[i] = self.items[i]\n        self.items = new_items"}
{"instruction": "Write a Python program to find the most frequent item of an input list.", "input": "", "output": "def most_frequent(input_list):\n    # Create a dictionary to store frequency of each item\n    frequency_dict = {}\n    for item in input_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    # Find the most frequent item\n    most_frequent_item = max(frequency_dict, key=frequency_dict.get)\n\n    return most_frequent_item\n\ninput_list = [1, 2, 3, 4, 1, 2, 5, 2, 4]\nmost_frequent_item = most_frequent(input_list)\n\nprint(most_frequent_item)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the most frequent item of an input list.\n\n### Input:\n\n\n### Output:\ndef most_frequent(input_list):\n    # Create a dictionary to store frequency of each item\n    frequency_dict = {}\n    for item in input_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    # Find the most frequent item\n    most_frequent_item = max(frequency_dict, key=frequency_dict.get)\n\n    return most_frequent_item\n\ninput_list = [1, 2, 3, 4, 1, 2, 5, 2, 4]\nmost_frequent_item = most_frequent(input_list)\n\nprint(most_frequent_item)"}
{"instruction": "Create an API endpoint to delete a record from a database using Python.", "input": "", "output": "# Import the necessary modules\nfrom flask import Flask, request\nimport sqlite3\n\n# Create the Flask application\napp = Flask(__name__)\n\n# Establish a connection to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create a function to delete a record\n@app.route('/delete_record/<int:id>', methods=['DELETE'])\ndef delete_record(id):\n    c.execute(\"DELETE FROM records WHERE rowid = ?\", (id,))\n    conn.commit()\n    return \"Record deleted successfully\"\n\nif __name__ == '__main__':\n    app.run(debug=True)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint to delete a record from a database using Python.\n\n### Input:\n\n\n### Output:\n# Import the necessary modules\nfrom flask import Flask, request\nimport sqlite3\n\n# Create the Flask application\napp = Flask(__name__)\n\n# Establish a connection to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create a function to delete a record\n@app.route('/delete_record/<int:id>', methods=['DELETE'])\ndef delete_record(id):\n    c.execute(\"DELETE FROM records WHERE rowid = ?\", (id,))\n    conn.commit()\n    return \"Record deleted successfully\"\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction": "Create a class in Python which implements a linked list data structure.", "input": "", "output": "# Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def is_empty(self):\n        return self.head == None\n    \n    def add(self, data):\n        node = Node(data)\n        node.next = self.head\n        self.head = node\n\n    def remove(self):\n        if self.is_empty():\n            return None\n        data = self.head.data\n        self.head = self.head.next\n        return data", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which implements a linked list data structure.\n\n### Input:\n\n\n### Output:\n# Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def is_empty(self):\n        return self.head == None\n    \n    def add(self, data):\n        node = Node(data)\n        node.next = self.head\n        self.head = node\n\n    def remove(self):\n        if self.is_empty():\n            return None\n        data = self.head.data\n        self.head = self.head.next\n        return data"}
{"instruction": "Build a series of steps to implement a Bubble Sort algorithm in Python.", "input": "", "output": "# Steps to implement Bubble Sort Algorithm: \n# 1. Loop through the list with two indices, the current element and the NEXT element \n# 2. Compare current element with the NEXT element \n# 3. If current element is greater than NEXT element, swap them \n# 4. Repeat this till the list is sorted \n\ndef bubble_sort(list): \n    # Traverse through all elements of list \n    for i in range(0, len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1]: \n                list[j], list[j+1] = list[j+1], list[j]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a series of steps to implement a Bubble Sort algorithm in Python.\n\n### Input:\n\n\n### Output:\n# Steps to implement Bubble Sort Algorithm: \n# 1. Loop through the list with two indices, the current element and the NEXT element \n# 2. Compare current element with the NEXT element \n# 3. If current element is greater than NEXT element, swap them \n# 4. Repeat this till the list is sorted \n\ndef bubble_sort(list): \n    # Traverse through all elements of list \n    for i in range(0, len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1]: \n                list[j], list[j+1] = list[j+1], list[j]"}
{"instruction": "Write a Python program to optimize a given code and make it run faster.", "input": "", "output": "def optimize_code(code):\n    optimized_code = \"\"\n    lines = code.splitlines()\n    indentation_level = 0\n\n    for line in lines:\n        # Remove redundant white space and apply proper indentation\n        optimized_code += \" \" * indentation_level + line.strip() + \"\\n\"\n\n        # Increment/Decrement indentation level \n        if line.endswith(\":\"):\n            indentation_level += 4\n        else:\n            if line[0] not in [\"#\", \"\"]:\n                indentation_level -= 4\n        indentation_level = max(indentation_level, 0) # prevent it going below 0\n\n    return optimized_code", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given code and make it run faster.\n\n### Input:\n\n\n### Output:\ndef optimize_code(code):\n    optimized_code = \"\"\n    lines = code.splitlines()\n    indentation_level = 0\n\n    for line in lines:\n        # Remove redundant white space and apply proper indentation\n        optimized_code += \" \" * indentation_level + line.strip() + \"\\n\"\n\n        # Increment/Decrement indentation level \n        if line.endswith(\":\"):\n            indentation_level += 4\n        else:\n            if line[0] not in [\"#\", \"\"]:\n                indentation_level -= 4\n        indentation_level = max(indentation_level, 0) # prevent it going below 0\n\n    return optimized_code"}
{"instruction": "Develop a neural network in Python to classify items into 3 categories.", "input": "", "output": "# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define the neural network\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(3, activation='softmax')\n])\n\n# compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# fit the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# evaluate the model\nloss, accuracy = model.evaluate(x_test, y_test)\nprint(\"Loss: {}, Accuracy: {}\".format(loss, accuracy))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a neural network in Python to classify items into 3 categories.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define the neural network\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(3, activation='softmax')\n])\n\n# compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# fit the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# evaluate the model\nloss, accuracy = model.evaluate(x_test, y_test)\nprint(\"Loss: {}, Accuracy: {}\".format(loss, accuracy))"}
{"instruction": "Utilize an existing ML algorithm in Python to classify a given dataset.", "input": "", "output": "#Import necessary packages\nfrom sklearn.svm import SVC \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#Split data into X and y\nX = dataset[:,:-1] \ny = dataset[:,-1]\n\n#Split data into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n#Initiate and fit the algorithm\nclf = SVC(kernel=\"linear\")\nclf.fit(X_train, y_train)\n\n#Make predictions with the trained model\ny_pred = clf.predict(X_test)\n\n#Calculate accuracy of the algorithm\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: {}\".format(accuracy))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilize an existing ML algorithm in Python to classify a given dataset.\n\n### Input:\n\n\n### Output:\n#Import necessary packages\nfrom sklearn.svm import SVC \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#Split data into X and y\nX = dataset[:,:-1] \ny = dataset[:,-1]\n\n#Split data into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n#Initiate and fit the algorithm\nclf = SVC(kernel=\"linear\")\nclf.fit(X_train, y_train)\n\n#Make predictions with the trained model\ny_pred = clf.predict(X_test)\n\n#Calculate accuracy of the algorithm\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: {}\".format(accuracy))"}
{"instruction": "Generate a fullstack web application using Python, JavaScript, and CSS.", "input": "", "output": "# Backend\n\n# Flask application\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret'\n\n# Database\ndb = SQLAlchemy(app)\n\n# Frontend\n# HTML template\n<html>\n    <head>\n        <title>My App</title>\n    </head>\n    <body>\n        <h1>Welcome to My App</h1>\n        <div>\n            <p>Content here...</p>\n        </div>\n    </body>\n</html>\n\n# JavaScript\n// Initialize the page\nwindow.onload = function() {\n    // Run any set up code here...\n}\n\n// Add event listeners\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Event listener code here...\n});\n\n# CSS\nbody {\n    background-color: #fefefe;\n    font-family: sans-serif;\n    font-size: 1.2rem;\n    line-height: 1.5;\n}", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a fullstack web application using Python, JavaScript, and CSS.\n\n### Input:\n\n\n### Output:\n# Backend\n\n# Flask application\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret'\n\n# Database\ndb = SQLAlchemy(app)\n\n# Frontend\n# HTML template\n<html>\n    <head>\n        <title>My App</title>\n    </head>\n    <body>\n        <h1>Welcome to My App</h1>\n        <div>\n            <p>Content here...</p>\n        </div>\n    </body>\n</html>\n\n# JavaScript\n// Initialize the page\nwindow.onload = function() {\n    // Run any set up code here...\n}\n\n// Add event listeners\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Event listener code here...\n});\n\n# CSS\nbody {\n    background-color: #fefefe;\n    font-family: sans-serif;\n    font-size: 1.2rem;\n    line-height: 1.5;\n}"}
{"instruction": "Develop a classifier in Python to distinguish between different sounds.", "input": "", "output": "import librosa\nfrom tensorflow.keras.layers import Input, Dense\nfrom tensorflow.keras.models import Model\n\n# Get the data\nx_data, y_data = librosa.load('mySound.wav', sr=44100)\n\n# Preprocess the data\nx_data = librosa.util.normalize(x_data)\n\n# Reshape the data (optional)\nx_data = x_data.reshape((1, -1))\n\n# Create a model\ninputs = Input(shape=(x_data.shape[1], ))\nx = Dense(512, activation='relu')(inputs)\nx = Dense(256, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)\n\nmodel = Model(inputs=inputs, outputs=predictions)\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_data, y_data, epochs=10)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classifier in Python to distinguish between different sounds.\n\n### Input:\n\n\n### Output:\nimport librosa\nfrom tensorflow.keras.layers import Input, Dense\nfrom tensorflow.keras.models import Model\n\n# Get the data\nx_data, y_data = librosa.load('mySound.wav', sr=44100)\n\n# Preprocess the data\nx_data = librosa.util.normalize(x_data)\n\n# Reshape the data (optional)\nx_data = x_data.reshape((1, -1))\n\n# Create a model\ninputs = Input(shape=(x_data.shape[1], ))\nx = Dense(512, activation='relu')(inputs)\nx = Dense(256, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)\n\nmodel = Model(inputs=inputs, outputs=predictions)\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_data, y_data, epochs=10)"}
{"instruction": "Given a linked list, write a python program to reverse the linked list.", "input": "", "output": "# A Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A function to reverse the linked list \n    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        self.head = prev\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a linked list, write a python program to reverse the linked list.\n\n### Input:\n\n\n### Output:\n# A Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A function to reverse the linked list \n    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        self.head = prev\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node"}
{"instruction": "Generate a Python script to scrub a list of emails for invalid entries.", "input": "", "output": "\"\"\"\nGenerate a Python script to scrub a list of emails for invalid entries\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n    # Create the regex\n    email_regex = re.compile(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+')\n    # Check whether the email is valid\n    is_valid = email_regex.match(email)\n    # Return the result\n    return is_valid\n    \ndef scrub_emails(emails):\n    # Initialize a list for valid emails\n    valid_emails = []\n    # Loop over the emails and validate them\n    for email in emails:\n        # Check if the email is valid\n        is_valid = validate_email(email)\n        # If valid, append to the list\n        if is_valid:\n            valid_emails.append(email)\n    # Return the list of valid emails\n    return valid_emails", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to scrub a list of emails for invalid entries.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a Python script to scrub a list of emails for invalid entries\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n    # Create the regex\n    email_regex = re.compile(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+')\n    # Check whether the email is valid\n    is_valid = email_regex.match(email)\n    # Return the result\n    return is_valid\n    \ndef scrub_emails(emails):\n    # Initialize a list for valid emails\n    valid_emails = []\n    # Loop over the emails and validate them\n    for email in emails:\n        # Check if the email is valid\n        is_valid = validate_email(email)\n        # If valid, append to the list\n        if is_valid:\n            valid_emails.append(email)\n    # Return the list of valid emails\n    return valid_emails"}
{"instruction": "Create a Python class called Point that represents a point in 2D space.", "input": "", "output": "class Point:\n    \"\"\"Class representing a Point in 2D space\"\"\"\n    def __init__(self, x, y):\n        \"\"\"Initialize the point with given x and y co-ordinates\"\"\"\n        self.x = x\n        self.y = y\n    \n    def get_x(self):\n        \"\"\"Return the x co-ordinate of the point\"\"\"\n        return self.x\n    \n    def get_y(self):\n        \"\"\"Return the y co-ordinate of the point\"\"\"\n        return self.y\n    \n    def move_to(self, x, y):\n        \"\"\"Move the point to a new position x,y\"\"\"\n        self.x = x\n        self.y = y\n        \n    def distance_to(self, point):\n        \"\"\"Calculate the distance to the other point\"\"\"\n        dx = self.x - point.get_x()\n        dy = self.y - point.get_y()\n        return (dx**2 + dy**2) ** 0.5", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Point that represents a point in 2D space.\n\n### Input:\n\n\n### Output:\nclass Point:\n    \"\"\"Class representing a Point in 2D space\"\"\"\n    def __init__(self, x, y):\n        \"\"\"Initialize the point with given x and y co-ordinates\"\"\"\n        self.x = x\n        self.y = y\n    \n    def get_x(self):\n        \"\"\"Return the x co-ordinate of the point\"\"\"\n        return self.x\n    \n    def get_y(self):\n        \"\"\"Return the y co-ordinate of the point\"\"\"\n        return self.y\n    \n    def move_to(self, x, y):\n        \"\"\"Move the point to a new position x,y\"\"\"\n        self.x = x\n        self.y = y\n        \n    def distance_to(self, point):\n        \"\"\"Calculate the distance to the other point\"\"\"\n        dx = self.x - point.get_x()\n        dy = self.y - point.get_y()\n        return (dx**2 + dy**2) ** 0.5"}
{"instruction": "Write a Python program to simulate the game of \"Rock, Paper, Scissors\".", "input": "", "output": "import random\n\ndef rock_paper_scissors():\n  \n    choices = ['rock', 'paper', 'scissors']\n    while True:\n        player_choice = input(\"Choose rock, paper, or scissors: \")\n        if player_choice not in choices:\n            print(\"Invalid choice! Please choose again.\")\n            continue\n\n        computer_choice = random.choice(choices)\n        print(\"The computer chose\", computer_choice)\n\n        if player_choice == computer_choice:\n            print(\"It's a draw!\")\n        elif (player_choice == 'rock' and computer_choice == 'scissors') or (player_choice == 'paper' and computer_choice == 'rock') or (player_choice == 'scissors' and computer_choice == 'paper'):\n            print(\"You win!\")\n        else:\n            print(\"You lose!\")\n        break", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate the game of \"Rock, Paper, Scissors\".\n\n### Input:\n\n\n### Output:\nimport random\n\ndef rock_paper_scissors():\n  \n    choices = ['rock', 'paper', 'scissors']\n    while True:\n        player_choice = input(\"Choose rock, paper, or scissors: \")\n        if player_choice not in choices:\n            print(\"Invalid choice! Please choose again.\")\n            continue\n\n        computer_choice = random.choice(choices)\n        print(\"The computer chose\", computer_choice)\n\n        if player_choice == computer_choice:\n            print(\"It's a draw!\")\n        elif (player_choice == 'rock' and computer_choice == 'scissors') or (player_choice == 'paper' and computer_choice == 'rock') or (player_choice == 'scissors' and computer_choice == 'paper'):\n            print(\"You win!\")\n        else:\n            print(\"You lose!\")\n        break"}
{"instruction": "Design an algorithm in Python to solve the travelling salesman problem.", "input": "", "output": "def tsp(graph, start, end): \n    # Create an unvisited list \n    unvisited = {vertex: None for vertex in graph} \n    current = start \n    unvisited[current] = current \n    visited = dict() \n    route = list() \n  \n    while True: \n        visited[current] = current \n        route.append(current) \n        unvisited.pop(current, None) \n        if current == end: \n            break\n  \n        min_dist = float('inf')\n        for neighbour in graph[current].keys(): \n            if neighbour not in unvisited: \n                continue\n            dist = graph[current][neighbour]\n            if dist < min_dist: \n                min_dist = dist \n                next_vertex = neighbour \n  \n        current = next_vertex \n  \n    route.append(end) \n    return route", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to solve the travelling salesman problem.\n\n### Input:\n\n\n### Output:\ndef tsp(graph, start, end): \n    # Create an unvisited list \n    unvisited = {vertex: None for vertex in graph} \n    current = start \n    unvisited[current] = current \n    visited = dict() \n    route = list() \n  \n    while True: \n        visited[current] = current \n        route.append(current) \n        unvisited.pop(current, None) \n        if current == end: \n            break\n  \n        min_dist = float('inf')\n        for neighbour in graph[current].keys(): \n            if neighbour not in unvisited: \n                continue\n            dist = graph[current][neighbour]\n            if dist < min_dist: \n                min_dist = dist \n                next_vertex = neighbour \n  \n        current = next_vertex \n  \n    route.append(end) \n    return route"}
{"instruction": "Design a neural network in Python to distinguish between cats and dogs.", "input": "", "output": "import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of classes and the shape of image input\nnum_classes = 2\nimage_shape = (64, 64, 3)\n\n# Create input and output layers\ninputs = tf.keras.Input(shape=image_shape)\nx = tf.keras.layers.Conv2D(32, (3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPooling2D((2, 2))(x)\nx = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPooling2D((2, 2))(x)\nx = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x)\nx = tf.keras.layers.Flatten()(x)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x)\n\n# Build the model\nmodel = tf.keras.Model(inputs, outputs)\n\n# Compile the model\nmodel.compile(optimizer='rmsprop',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nmodel.summary()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to distinguish between cats and dogs.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of classes and the shape of image input\nnum_classes = 2\nimage_shape = (64, 64, 3)\n\n# Create input and output layers\ninputs = tf.keras.Input(shape=image_shape)\nx = tf.keras.layers.Conv2D(32, (3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPooling2D((2, 2))(x)\nx = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPooling2D((2, 2))(x)\nx = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x)\nx = tf.keras.layers.Flatten()(x)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x)\n\n# Build the model\nmodel = tf.keras.Model(inputs, outputs)\n\n# Compile the model\nmodel.compile(optimizer='rmsprop',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nmodel.summary()"}
{"instruction": "Create a generative model in Python with Keras to generate new recipes.", "input": "", "output": "import numpy as np\nimport pandas as pd\nimport string\nimport keras\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Dropout, Embedding, LSTM, Input, Flatten\nfrom keras.models import Sequential\n\ndata = pd.read_csv('recipes.csv')\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(data['recipe'])\nsequence =  tokenizer.texts_to_sequences(data['recipe'])\nx_train = pad_sequences(sequence, maxlen=50, padding='post')\ny_train = to_categorical(np.asarray(data['cuisine']))\n\nmodel = Sequential()\nmodel.add(Embedding(input_dim=x_train.shape[1], output_dim=100, input_length=50))\nmodel.add(LSTM(64, activation='relu'))\nmodel.add(Dense(y_train.shape[1], activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5, batch_size=128)\n\n# Save trained model\nmodel.save('recipe_generator.h5')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a generative model in Python with Keras to generate new recipes.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nimport string\nimport keras\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Dropout, Embedding, LSTM, Input, Flatten\nfrom keras.models import Sequential\n\ndata = pd.read_csv('recipes.csv')\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(data['recipe'])\nsequence =  tokenizer.texts_to_sequences(data['recipe'])\nx_train = pad_sequences(sequence, maxlen=50, padding='post')\ny_train = to_categorical(np.asarray(data['cuisine']))\n\nmodel = Sequential()\nmodel.add(Embedding(input_dim=x_train.shape[1], output_dim=100, input_length=50))\nmodel.add(LSTM(64, activation='relu'))\nmodel.add(Dense(y_train.shape[1], activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5, batch_size=128)\n\n# Save trained model\nmodel.save('recipe_generator.h5')"}
{"instruction": "Write a python program to print the elements of a matrix in spiral form", "input": "", "output": "def spiralPrint(m, n, a) :\n    k = 0; l = 0\n\n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n        \n    while (k < m and l < n) : \n    \n        # Print the first row from  the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n    \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n    \n        # Print the last row from the remaining rows  \n        if ( k < m) : \n              \n            for i in range(n - 1, (l - 1), -1) : \n                print(a[m - 1][i], end = \" \") \n              \n            m -= 1\n          \n        # Print the first column from the remaining columns  \n        if (l < n) : \n            for i in range(m - 1, k - 1, -1) : \n                print(a[i][l], end = \" \") \n              \n            l += 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print the elements of a matrix in spiral form\n\n### Input:\n\n\n### Output:\ndef spiralPrint(m, n, a) :\n    k = 0; l = 0\n\n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n        \n    while (k < m and l < n) : \n    \n        # Print the first row from  the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n    \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n    \n        # Print the last row from the remaining rows  \n        if ( k < m) : \n              \n            for i in range(n - 1, (l - 1), -1) : \n                print(a[m - 1][i], end = \" \") \n              \n            m -= 1\n          \n        # Print the first column from the remaining columns  \n        if (l < n) : \n            for i in range(m - 1, k - 1, -1) : \n                print(a[i][l], end = \" \") \n              \n            l += 1"}
{"instruction": "Design a genetic algorithm for a travelling salesman problem in Python.", "input": "", "output": "import numpy as np\ndef geneticAlgorithm(population, iter):\n    for i in range(iter):\n        new_population = []\n        \n        for chromosome in population:\n            cost = getCost(chromosome)\n            fitness = 1/cost\n            parent1, parent2 = selectParents(population)\n            offspring = crossover(parent1, parent2)\n            offspring = mutation(offspring)\n            new_population.append(offspring)\n            \n        population = new_population\n    return population\n    \ndef selectParents(population):\n    parent1, parent2 = getRandomParents(population)\n    fitness1 = getCost(parent1)\n    fitness2 = getCost(parent2)\n    if (fitness1 < fitness2):\n        return parent1, parent2\n    else:\n        return parent2, parent1\n        \ndef getRandomParents(population):\n    parent1 = population[np.random.randint(0, len(population))]\n    parent2 = population[np.random.randint(0, len(population))]\n    while (parent1 == parent2):\n        parent2 = population[np.random.randint(0, len(population))]\n    return parent1, parent2\n    \ndef crossover(parent1, parent2):\n    '''\n    Insert code to perform crossover here\n    '''\n    return offspring\n    \ndef mutation(offspring):\n    '''\n    Insert code to perform mutation here\n    '''\n    return offspring\n    \ndef getCost(chromosome):\n    '''\n    Insert code to compute the cost for a chromosome here\n    '''\n    return cost", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a genetic algorithm for a travelling salesman problem in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\ndef geneticAlgorithm(population, iter):\n    for i in range(iter):\n        new_population = []\n        \n        for chromosome in population:\n            cost = getCost(chromosome)\n            fitness = 1/cost\n            parent1, parent2 = selectParents(population)\n            offspring = crossover(parent1, parent2)\n            offspring = mutation(offspring)\n            new_population.append(offspring)\n            \n        population = new_population\n    return population\n    \ndef selectParents(population):\n    parent1, parent2 = getRandomParents(population)\n    fitness1 = getCost(parent1)\n    fitness2 = getCost(parent2)\n    if (fitness1 < fitness2):\n        return parent1, parent2\n    else:\n        return parent2, parent1\n        \ndef getRandomParents(population):\n    parent1 = population[np.random.randint(0, len(population))]\n    parent2 = population[np.random.randint(0, len(population))]\n    while (parent1 == parent2):\n        parent2 = population[np.random.randint(0, len(population))]\n    return parent1, parent2\n    \ndef crossover(parent1, parent2):\n    '''\n    Insert code to perform crossover here\n    '''\n    return offspring\n    \ndef mutation(offspring):\n    '''\n    Insert code to perform mutation here\n    '''\n    return offspring\n    \ndef getCost(chromosome):\n    '''\n    Insert code to compute the cost for a chromosome here\n    '''\n    return cost"}
{"instruction": "Create a Python script that generate prime numbers up to a given number.", "input": "", "output": "def primeNumberGenerator(n):\n    prime = [True for _ in range(n+1)]\n    prime[0] = False\n    prime[1] = False\n    for p in range(2, n+1):\n        if prime[p] == True:\n            for i in range(2*p, n+1, p):\n                prime[i] = False\n\n    prime_nums = []\n    for i in range(n+1):\n        if prime[i] == True:\n            prime_nums.append(i)\n\n    return prime_nums\n\nprime_nums = primeNumberGenerator(100);\nconsole.log(prime_nums);", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that generate prime numbers up to a given number.\n\n### Input:\n\n\n### Output:\ndef primeNumberGenerator(n):\n    prime = [True for _ in range(n+1)]\n    prime[0] = False\n    prime[1] = False\n    for p in range(2, n+1):\n        if prime[p] == True:\n            for i in range(2*p, n+1, p):\n                prime[i] = False\n\n    prime_nums = []\n    for i in range(n+1):\n        if prime[i] == True:\n            prime_nums.append(i)\n\n    return prime_nums\n\nprime_nums = primeNumberGenerator(100);\nconsole.log(prime_nums);"}
{"instruction": "Write a function to find the sum of the prime numbers below n in Python.", "input": "", "output": "def sum_of_primes(n):\n    '''This function returns the sum of prime numbers below n.'''\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i**2, n, i):\n                primes[j] = False\n    return sum(i for i in range(2, n) if primes[i])\n\nif __name__ == '__main__':\n    n = 10\n    print(sum_of_primes(n))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the sum of the prime numbers below n in Python.\n\n### Input:\n\n\n### Output:\ndef sum_of_primes(n):\n    '''This function returns the sum of prime numbers below n.'''\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i**2, n, i):\n                primes[j] = False\n    return sum(i for i in range(2, n) if primes[i])\n\nif __name__ == '__main__':\n    n = 10\n    print(sum_of_primes(n))"}
{"instruction": "Write a python program to find the angle between two planes in 3D space.", "input": "", "output": "from math import acos, degrees\n\ndef angle_planar_3d(normal1, normal2):\n    length1 = math.sqrt((normal1[0]**2) + (normal1[1]**2) + (normal1[2]**2))\n    length2 = math.sqrt((normal2[0]**2) + (normal2[1]**2) + (normal2[2]**2))\n    dotProduct = normal1[0]*normal2[0] + normal1[1]*normal2[1] + normal1[2]*normal2[2]\n    cosAngle = dotProduct / (length1 * length2)\n    return degrees(acos(cosAngle))\n\nnormal1=[1,0,0]\nnormal2=[0,1,0]\n\nprint(angle_planar_3d(normal1, normal2))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the angle between two planes in 3D space.\n\n### Input:\n\n\n### Output:\nfrom math import acos, degrees\n\ndef angle_planar_3d(normal1, normal2):\n    length1 = math.sqrt((normal1[0]**2) + (normal1[1]**2) + (normal1[2]**2))\n    length2 = math.sqrt((normal2[0]**2) + (normal2[1]**2) + (normal2[2]**2))\n    dotProduct = normal1[0]*normal2[0] + normal1[1]*normal2[1] + normal1[2]*normal2[2]\n    cosAngle = dotProduct / (length1 * length2)\n    return degrees(acos(cosAngle))\n\nnormal1=[1,0,0]\nnormal2=[0,1,0]\n\nprint(angle_planar_3d(normal1, normal2))"}
{"instruction": "Design an online voting system in Python that supports multiple choices.", "input": "", "output": "import datetime\n\n# Voting_System class\nclass Voting_System:\n\n    # voting_options instance variable\n    def __init__(self, voting_options):\n        self.voting_options = voting_options\n\n    # Vote function\n    def vote(self, user_id, option_id):\n        if user_id not in self.voting_options.keys():\n            self.voting_options[user_id] = option_id\n            return True\n        else:\n            return False\n\n    # get_all_votes function\n    def get_all_votes(self):\n        return self.voting_options", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an online voting system in Python that supports multiple choices.\n\n### Input:\n\n\n### Output:\nimport datetime\n\n# Voting_System class\nclass Voting_System:\n\n    # voting_options instance variable\n    def __init__(self, voting_options):\n        self.voting_options = voting_options\n\n    # Vote function\n    def vote(self, user_id, option_id):\n        if user_id not in self.voting_options.keys():\n            self.voting_options[user_id] = option_id\n            return True\n        else:\n            return False\n\n    # get_all_votes function\n    def get_all_votes(self):\n        return self.voting_options"}
{"instruction": "Design a user interface in Python to capture a personal profile details.", "input": "", "output": "def get_profile_details():\n    \n    name = input(\"Please enter your name: \")\n    age = int(input(\"Please enter your age: \"))\n    city = input(\"Please enter your city: \")\n    country = input(\"Please enter your country: \")\n    occupation = input(\"Please enter your occupation (if any): \")\n    \n    profile_details = {\n        'name': name,\n        'age': age,\n        'city': city,\n        'country': country,\n        'occupation': occupation\n    }\n    \n    return profile_details\n\n# Driver code\nprint(get_profile_details())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a user interface in Python to capture a personal profile details.\n\n### Input:\n\n\n### Output:\ndef get_profile_details():\n    \n    name = input(\"Please enter your name: \")\n    age = int(input(\"Please enter your age: \"))\n    city = input(\"Please enter your city: \")\n    country = input(\"Please enter your country: \")\n    occupation = input(\"Please enter your occupation (if any): \")\n    \n    profile_details = {\n        'name': name,\n        'age': age,\n        'city': city,\n        'country': country,\n        'occupation': occupation\n    }\n    \n    return profile_details\n\n# Driver code\nprint(get_profile_details())"}
{"instruction": "Design a structure in Python to store data related to airport schedules.", "input": "", "output": "class FlightSchedule:\n    def __init__(self):\n    self.airport_info ={}\n    \n    def add_flight(self,flight_name,source,destination,departure_time,arrival_time):\n    self.airport_info[flight_name] = {\n        'source': source,\n        'destination': destination,\n        'departure_time': departure_time,\n        'arrival_time': arrival_time\n    }\n    \n    def get_flight_info(self,flight_name):\n    if flight_name in self.airport_info:\n        return self.airport_info[flight_name]\n    else:\n        return 'Flight does not exist.'", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a structure in Python to store data related to airport schedules.\n\n### Input:\n\n\n### Output:\nclass FlightSchedule:\n    def __init__(self):\n    self.airport_info ={}\n    \n    def add_flight(self,flight_name,source,destination,departure_time,arrival_time):\n    self.airport_info[flight_name] = {\n        'source': source,\n        'destination': destination,\n        'departure_time': departure_time,\n        'arrival_time': arrival_time\n    }\n    \n    def get_flight_info(self,flight_name):\n    if flight_name in self.airport_info:\n        return self.airport_info[flight_name]\n    else:\n        return 'Flight does not exist.'"}
{"instruction": "Use the machine learning model XGBoost to create a classifier in Python.", "input": "", "output": "import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n \n# Load the data\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n \n# Split the data into training and testing sets  \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n \n# Instantiate the XGBoost model  \nxg_cls = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10, seed=123)\n \n# Fit the model\nxg_cls.fit(X_train, y_train)\n \n# Predict the labels of the test set\nprediction = xg_cls.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the machine learning model XGBoost to create a classifier in Python.\n\n### Input:\n\n\n### Output:\nimport xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n \n# Load the data\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n \n# Split the data into training and testing sets  \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n \n# Instantiate the XGBoost model  \nxg_cls = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10, seed=123)\n \n# Fit the model\nxg_cls.fit(X_train, y_train)\n \n# Predict the labels of the test set\nprediction = xg_cls.predict(X_test)"}
{"instruction": "Design an algorithm in Python to simulate a game of rock paper scissors.", "input": "", "output": "# We define the possible winning combination of the game\nWINNING_COMBINATION = {\n  \"rock\": \"scissors\",\n  \"paper\": \"rock\",\n  \"scissors\": \"paper\"\n}\n\ndef playRockPaperScissors():\n  # Player 1's turn\n  player1_choice = input(\"Player 1: Choose rock, paper or scissors: \")\n  # Player 2's turn\n  player2_choice = input(\"Player 2: Choose rock, paper or scissors: \")\n\n  # Find the winner\n  if WINNING_COMBINATION[player1_choice] == player2_choice:\n    print(\"Player 1 has won.\")\n  elif WINNING_COMBINATION[player2_choice] == player1_choice:\n    print(\"Player 2 has won.\")\n  else:\n    print(\"It's a tie!\")\n\nplayRockPaperScissors()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to simulate a game of rock paper scissors.\n\n### Input:\n\n\n### Output:\n# We define the possible winning combination of the game\nWINNING_COMBINATION = {\n  \"rock\": \"scissors\",\n  \"paper\": \"rock\",\n  \"scissors\": \"paper\"\n}\n\ndef playRockPaperScissors():\n  # Player 1's turn\n  player1_choice = input(\"Player 1: Choose rock, paper or scissors: \")\n  # Player 2's turn\n  player2_choice = input(\"Player 2: Choose rock, paper or scissors: \")\n\n  # Find the winner\n  if WINNING_COMBINATION[player1_choice] == player2_choice:\n    print(\"Player 1 has won.\")\n  elif WINNING_COMBINATION[player2_choice] == player1_choice:\n    print(\"Player 2 has won.\")\n  else:\n    print(\"It's a tie!\")\n\nplayRockPaperScissors()"}
{"instruction": "Write a Python program to find the maximum and minimum of three numbers.", "input": "", "output": "def findMinMax(num1, num2, num3):\n    if num1 >= num2 and num1 >= num3:\n        maximum = num1\n        minimum = num3 if num3 <= num2 else num2\n    elif num2 >= num1 and num2 >= num3:\n        maximum = num2\n        minimum = num1 if num1 <= num3 else num3\n    else:\n        maximum = num3\n        minimum = num1 if num1 <= num2 else num2\n    return (maximum, minimum)\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nnum3 = int(input(\"Enter third number: \"))\n\nmaximum, minimum = findMinMax(num1, num2, num3)\n\nprint(\"Maximum of three numbers is:\", maximum)\nprint(\"Minimum of three numbers is:\", minimum)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the maximum and minimum of three numbers.\n\n### Input:\n\n\n### Output:\ndef findMinMax(num1, num2, num3):\n    if num1 >= num2 and num1 >= num3:\n        maximum = num1\n        minimum = num3 if num3 <= num2 else num2\n    elif num2 >= num1 and num2 >= num3:\n        maximum = num2\n        minimum = num1 if num1 <= num3 else num3\n    else:\n        maximum = num3\n        minimum = num1 if num1 <= num2 else num2\n    return (maximum, minimum)\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nnum3 = int(input(\"Enter third number: \"))\n\nmaximum, minimum = findMinMax(num1, num2, num3)\n\nprint(\"Maximum of three numbers is:\", maximum)\nprint(\"Minimum of three numbers is:\", minimum)"}
{"instruction": "Create a Python script to log the amount of time spent in a web browser.", "input": "", "output": "import time\nimport os\n\nlog_path = 'time_spent.log'\n\ndef log_time(time):\n    if not os.path.exists(log_path):\n        with open(log_path, 'w') as f:\n          f.write('Time spent in browser log\\n\\n')\n    \n    with open(log_path, 'a') as f:\n        f.write('Time spent in browser at {} : {} \\n'.format(get_date(), time))\n\ndef get_date():\n    return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())\n\ntry:\n    start_time = time.time()\n    while True:\n        time.sleep(30)\n        current_time = time.time()\n        log_time(current_time - start_time)\n        start_time = current_time\n\nexcept KeyboardInterrupt:\n    print('Stopped logging browser time')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to log the amount of time spent in a web browser.\n\n### Input:\n\n\n### Output:\nimport time\nimport os\n\nlog_path = 'time_spent.log'\n\ndef log_time(time):\n    if not os.path.exists(log_path):\n        with open(log_path, 'w') as f:\n          f.write('Time spent in browser log\\n\\n')\n    \n    with open(log_path, 'a') as f:\n        f.write('Time spent in browser at {} : {} \\n'.format(get_date(), time))\n\ndef get_date():\n    return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())\n\ntry:\n    start_time = time.time()\n    while True:\n        time.sleep(30)\n        current_time = time.time()\n        log_time(current_time - start_time)\n        start_time = current_time\n\nexcept KeyboardInterrupt:\n    print('Stopped logging browser time')"}
{"instruction": "Create a GUI application in Python that shows the current date and time.", "input": "", "output": "import tkinter as tk\nfrom tkinter import font\nimport datetime\n \nwindow = tk.Tk()\n \nwindow.title(\"Current Date and Time\")\n \nhelv36 = font.Font(family='Helvetica', size=36, weight='bold')\n \ntime = datetime.datetime.now().strftime(\"%H:%M:%S\")\ndate = datetime.datetime.now().strftime(\"%d/%m/%Y\")\n \nclock_frame = tk.Frame(\n    master = window,\n    relief = tk.RAISED,\n    borderwidth = 1)\nclock_frame.pack(fill = tk.BOTH)\n \ndate_label = tk.Label(\n    master = clock_frame,\n    text = date,\n    font = helv36)\ndate_label.pack(side = tk.TOP, expand = True)\n \ntime_label = tk.Label(\n    master = clock_frame,\n    text = time,\n    font = helv36)\ntime_label.pack(side = tk.BOTTOM, expand = True)\n \nwindow.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI application in Python that shows the current date and time.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\nfrom tkinter import font\nimport datetime\n \nwindow = tk.Tk()\n \nwindow.title(\"Current Date and Time\")\n \nhelv36 = font.Font(family='Helvetica', size=36, weight='bold')\n \ntime = datetime.datetime.now().strftime(\"%H:%M:%S\")\ndate = datetime.datetime.now().strftime(\"%d/%m/%Y\")\n \nclock_frame = tk.Frame(\n    master = window,\n    relief = tk.RAISED,\n    borderwidth = 1)\nclock_frame.pack(fill = tk.BOTH)\n \ndate_label = tk.Label(\n    master = clock_frame,\n    text = date,\n    font = helv36)\ndate_label.pack(side = tk.TOP, expand = True)\n \ntime_label = tk.Label(\n    master = clock_frame,\n    text = time,\n    font = helv36)\ntime_label.pack(side = tk.BOTTOM, expand = True)\n \nwindow.mainloop()"}
{"instruction": "Create a Sorting Algorithm in Python that is optimized for memory usage.", "input": "", "output": "# Function to implement an optimized memory sorting algorithm \ndef memory_optimized_sort(items):\n    # Find the length of the list\n    n = len(items) \n    # Initialize the sorted list to the same size\n    sorted_items = [None] * n \n    # Set the counter for even and odd\n    even_count = 0\n    odd_count = 0\n\n    # Iterate over the items in the list\n    for item in items:\n        # If item is even, add it to the end of the list\n        if item % 2 == 0:\n            sorted_items[n - 1 - even_count] = item\n            even_count += 1\n        else:\n            # If item is odd, add it to the beginning of the list\n            sorted_items[odd_count] = item\n            odd_count += 1\n\n    return sorted_items", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Sorting Algorithm in Python that is optimized for memory usage.\n\n### Input:\n\n\n### Output:\n# Function to implement an optimized memory sorting algorithm \ndef memory_optimized_sort(items):\n    # Find the length of the list\n    n = len(items) \n    # Initialize the sorted list to the same size\n    sorted_items = [None] * n \n    # Set the counter for even and odd\n    even_count = 0\n    odd_count = 0\n\n    # Iterate over the items in the list\n    for item in items:\n        # If item is even, add it to the end of the list\n        if item % 2 == 0:\n            sorted_items[n - 1 - even_count] = item\n            even_count += 1\n        else:\n            # If item is odd, add it to the beginning of the list\n            sorted_items[odd_count] = item\n            odd_count += 1\n\n    return sorted_items"}
{"instruction": "Create classes and methods to represent a game of Tic-Tac-Toe in Python.", "input": "", "output": "class TicTacToe:\n    def __init__(self):\n        self.board = [[None] * 3 for _ in range(3)]\n    \n    def player_move(self, row, col, move):\n        self.board[row][col] = move\n        return self.check_for_win(row, col, move)\n    \n    def check_for_win(self, row, col, move):\n        # Check row and column\n        row_win = all(move == self.board[row][i] for i in range(3))\n        col_win = all(move == self.board[i][col] for i in range(3))\n\n        # Check diagonal\n        diag_win = row == col and all(move == self.board[i][i] for i in range(3))\n        diag_win_2 = (row + col) == 2 and all(move == self.board[2-i][i] for i in range(3))\n\n        if row_win or col_win or diag_win or diag_win_2:\n            return True\n        else:\n            return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate classes and methods to represent a game of Tic-Tac-Toe in Python.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n    def __init__(self):\n        self.board = [[None] * 3 for _ in range(3)]\n    \n    def player_move(self, row, col, move):\n        self.board[row][col] = move\n        return self.check_for_win(row, col, move)\n    \n    def check_for_win(self, row, col, move):\n        # Check row and column\n        row_win = all(move == self.board[row][i] for i in range(3))\n        col_win = all(move == self.board[i][col] for i in range(3))\n\n        # Check diagonal\n        diag_win = row == col and all(move == self.board[i][i] for i in range(3))\n        diag_win_2 = (row + col) == 2 and all(move == self.board[2-i][i] for i in range(3))\n\n        if row_win or col_win or diag_win or diag_win_2:\n            return True\n        else:\n            return False"}
{"instruction": "Optimize the python program created in task 4 to make it more efficient.", "input": "", "output": "import csv \n\n# initialize dict to store categories\ncategory_totals = {} \n\n# open and process the csv file\nwith open('sales.csv', 'r') as csv_file:\n\n    # create a csv reader object\n    csv_reader = csv.reader(csv_file) \n\n    # skip the headers\n    next(csv_reader) \n    \n    # iterate over each row\n    for row in csv_reader: \n    \n        # pre-calculate product of quantity and price\n        sales_total += int(row[0]) * int(row[1])\n        \n        # record the category totals\n        if row[2] in category_totals.keys(): \n            category_totals[row[2]] += int(row[1])\n        else: \n            category_totals[row[2]] = int(row[1])\n\n# print the results\nprint(\"Total sales:\", sales_total)\nprint(\"Category totals:\")\nfor key in category_totals.keys():\n    print(key, \":\", category_totals[key])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the python program created in task 4 to make it more efficient.\n\n### Input:\n\n\n### Output:\nimport csv \n\n# initialize dict to store categories\ncategory_totals = {} \n\n# open and process the csv file\nwith open('sales.csv', 'r') as csv_file:\n\n    # create a csv reader object\n    csv_reader = csv.reader(csv_file) \n\n    # skip the headers\n    next(csv_reader) \n    \n    # iterate over each row\n    for row in csv_reader: \n    \n        # pre-calculate product of quantity and price\n        sales_total += int(row[0]) * int(row[1])\n        \n        # record the category totals\n        if row[2] in category_totals.keys(): \n            category_totals[row[2]] += int(row[1])\n        else: \n            category_totals[row[2]] = int(row[1])\n\n# print the results\nprint(\"Total sales:\", sales_total)\nprint(\"Category totals:\")\nfor key in category_totals.keys():\n    print(key, \":\", category_totals[key])"}
{"instruction": "Compute the best single stock portfolio for a given dataset with Python.", "input": "", "output": "import pandas as pd\nfrom scipy.optimize import minimize\n\n# read in data\ndf = pd.read_csv('data.csv')\n\n# objective function\ndef obj_func(weights, mean_returns, covariance_matrix):\n    # compute portfolio mean return\n    portfolio_mean_return = np.dot(mean_returns, weights)\n    \n    # compute portfolio variance\n    portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights)))\n    \n    # return the negative of the Sharpe ratio\n    return -(portfolio_mean_return / portfolio_variance)\n\n# minimize function\ndef minimize_func(mean_returns, covariance_matrix):     \n    # define initial weights\n    init_weights = np.array([1/len(mean_returns)] * len(mean_returns))\n    \n    # define constraints\n    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1},\n                   {'type': 'ineq', 'fun': lambda x: x})\n    \n    # minimize the objective function\n    results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix),\n                       method='SLSQP', constraints=constraints)\n    \n    return results.x\n\n# optimize and get optimal weights\nweights = minimize_func(df.mean(), df.cov())\nprint(weights)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the best single stock portfolio for a given dataset with Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom scipy.optimize import minimize\n\n# read in data\ndf = pd.read_csv('data.csv')\n\n# objective function\ndef obj_func(weights, mean_returns, covariance_matrix):\n    # compute portfolio mean return\n    portfolio_mean_return = np.dot(mean_returns, weights)\n    \n    # compute portfolio variance\n    portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights)))\n    \n    # return the negative of the Sharpe ratio\n    return -(portfolio_mean_return / portfolio_variance)\n\n# minimize function\ndef minimize_func(mean_returns, covariance_matrix):     \n    # define initial weights\n    init_weights = np.array([1/len(mean_returns)] * len(mean_returns))\n    \n    # define constraints\n    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1},\n                   {'type': 'ineq', 'fun': lambda x: x})\n    \n    # minimize the objective function\n    results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix),\n                       method='SLSQP', constraints=constraints)\n    \n    return results.x\n\n# optimize and get optimal weights\nweights = minimize_func(df.mean(), df.cov())\nprint(weights)"}
{"instruction": "Generate a Python script that can classify emails based on their content", "input": "", "output": "import re\n\ndef classify_email(subject, body):\n    # Check the subject line for keywords\n    flags = check_subject(subject)\n\n    # Check the body for keywords\n    if not flags:\n        flags = check_body(body)\n\n    # return flags\n    return flags\n\ndef check_subject(subject):\n    flags = []\n    # Check for spam\n    spam_keywords = ['***SPAM***', '***ADV***']\n    for keyword in spam_keywords:\n        if re.search(keyword, subject):\n            flags.append('SPAM')\n            break\n\n    # Check for purchases\n    purchase_keywords = ['order', 'purchase', 'shipping', 'payment']\n    for keyword in purchase_keywords:\n        if re.search(keyword, subject):\n            flags.append('PURCHASE')\n            break\n\n    return flags\n\ndef check_body(body):\n    flags = []\n    # Check for offensive language\n    offensive_words = ['crap', 'stupid', 'idiot', 'shut up']\n    for word in offensive_words:\n        if re.search(word, body):\n            flags.append('OFFENSIVE')\n            break\n\n    # Check for marketing content\n    marketing_keywords = ['buy now', 'limited time', 'special offer', 'free']\n    for keyword in marketing_keywords:\n        if re.search(keyword, body):\n            flags.append('MARKETING')\n            break\n\n    return flags", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that can classify emails based on their content\n\n### Input:\n\n\n### Output:\nimport re\n\ndef classify_email(subject, body):\n    # Check the subject line for keywords\n    flags = check_subject(subject)\n\n    # Check the body for keywords\n    if not flags:\n        flags = check_body(body)\n\n    # return flags\n    return flags\n\ndef check_subject(subject):\n    flags = []\n    # Check for spam\n    spam_keywords = ['***SPAM***', '***ADV***']\n    for keyword in spam_keywords:\n        if re.search(keyword, subject):\n            flags.append('SPAM')\n            break\n\n    # Check for purchases\n    purchase_keywords = ['order', 'purchase', 'shipping', 'payment']\n    for keyword in purchase_keywords:\n        if re.search(keyword, subject):\n            flags.append('PURCHASE')\n            break\n\n    return flags\n\ndef check_body(body):\n    flags = []\n    # Check for offensive language\n    offensive_words = ['crap', 'stupid', 'idiot', 'shut up']\n    for word in offensive_words:\n        if re.search(word, body):\n            flags.append('OFFENSIVE')\n            break\n\n    # Check for marketing content\n    marketing_keywords = ['buy now', 'limited time', 'special offer', 'free']\n    for keyword in marketing_keywords:\n        if re.search(keyword, body):\n            flags.append('MARKETING')\n            break\n\n    return flags"}
{"instruction": "Develop a script in Python to check if a number is divisible by 9 or not.", "input": "", "output": "def isDivisibleBy9(num):\n    # Base case \n    if(num == 0 or num == 9): \n        return True\n   \n    if(num < 9): \n        return False\n  \n    # Recursive case\n    return isDivisibleBy9(sum(map(int,str(num)))) \n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n    if isDivisibleBy9(num):\n        print('Yes, {} is divisible by 9.'.format(num))\n    else:\n        print('No, {} is not divisible by 9.'.format(num))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a script in Python to check if a number is divisible by 9 or not.\n\n### Input:\n\n\n### Output:\ndef isDivisibleBy9(num):\n    # Base case \n    if(num == 0 or num == 9): \n        return True\n   \n    if(num < 9): \n        return False\n  \n    # Recursive case\n    return isDivisibleBy9(sum(map(int,str(num)))) \n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n    if isDivisibleBy9(num):\n        print('Yes, {} is divisible by 9.'.format(num))\n    else:\n        print('No, {} is not divisible by 9.'.format(num))"}
{"instruction": "How would you create a web scrapper to extract data from a given website?", "input": "", "output": "The first step is to identify the data that needs to be extracted. Once the data to be extracted is determined, the specific elements containing the data need to be identified. This can be done by manually inspecting the HTML of the website. After the elements containing the data are identified, a scraper can be built with a programming language such as Python, which will locate the elements and extract the data. The scraper should be coded in such a way that it can be automated and repeated.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you create a web scrapper to extract data from a given website?\n\n### Input:\n\n\n### Output:\nThe first step is to identify the data that needs to be extracted. Once the data to be extracted is determined, the specific elements containing the data need to be identified. This can be done by manually inspecting the HTML of the website. After the elements containing the data are identified, a scraper can be built with a programming language such as Python, which will locate the elements and extract the data. The scraper should be coded in such a way that it can be automated and repeated."}
{"instruction": "Create an object-oriented Python program to display an employee's details", "input": "", "output": "class Employee:\n\n    def __init__(self, name, address, salary):\n        self.name = name\n        self.address = address\n        self.salary = salary\n    \n    def displayEmployeeDetails(self):\n        # This method prints employee details\n\n        print(\"Employee Details -\")\n        print(\"Name: {}\".format(self.name))\n        print(\"Address: {}\".format(self.address))\n        print(\"Salary: {}\".format(self.salary))\n\nemployee = Employee(\"John Doe\", \"NYC\", \"10000\")\nemployee.displayEmployeeDetails()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented Python program to display an employee's details\n\n### Input:\n\n\n### Output:\nclass Employee:\n\n    def __init__(self, name, address, salary):\n        self.name = name\n        self.address = address\n        self.salary = salary\n    \n    def displayEmployeeDetails(self):\n        # This method prints employee details\n\n        print(\"Employee Details -\")\n        print(\"Name: {}\".format(self.name))\n        print(\"Address: {}\".format(self.address))\n        print(\"Salary: {}\".format(self.salary))\n\nemployee = Employee(\"John Doe\", \"NYC\", \"10000\")\nemployee.displayEmployeeDetails()"}
{"instruction": "Create an optimizer in Python to maximize the output of a given function.", "input": "", "output": "import numpy as np\n\ndef optimize(func, initial_params):\n    params = initial_params\n    best_params = None\n    best_score = -np.inf\n    while True:\n        # Update current parameters\n        params = update(params)\n        # Calculate score\n        score = func(params)\n        # Check if improved result\n        if score > best_score:\n            best_params = params\n            best_score = score\n        # If result does not improve, exit loop\n        else:\n            break\n    return best_params", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimizer in Python to maximize the output of a given function.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef optimize(func, initial_params):\n    params = initial_params\n    best_params = None\n    best_score = -np.inf\n    while True:\n        # Update current parameters\n        params = update(params)\n        # Calculate score\n        score = func(params)\n        # Check if improved result\n        if score > best_score:\n            best_params = params\n            best_score = score\n        # If result does not improve, exit loop\n        else:\n            break\n    return best_params"}
{"instruction": "Create a Python program to create a fibonacci sequence of the length of n", "input": "", "output": "def create_fibonacci(n):\n    fibonacci_sequence = [0]\n    if n == 0:\n        return fibonacci_sequence\n    elif n == 1:\n        fibonacci_sequence.append(1)\n        return fibonacci_sequence\n    else:\n        fibonacci_sequence.append(1)\n        current_num = 1\n        while len(fibonacci_sequence) < n:\n            previous_num = fibonacci_sequence[-2]\n            current_num = previous_num + fibonacci_sequence[-1]\n            fibonacci_sequence.append(current_num)\n\n        return fibonacci_sequence", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a fibonacci sequence of the length of n\n\n### Input:\n\n\n### Output:\ndef create_fibonacci(n):\n    fibonacci_sequence = [0]\n    if n == 0:\n        return fibonacci_sequence\n    elif n == 1:\n        fibonacci_sequence.append(1)\n        return fibonacci_sequence\n    else:\n        fibonacci_sequence.append(1)\n        current_num = 1\n        while len(fibonacci_sequence) < n:\n            previous_num = fibonacci_sequence[-2]\n            current_num = previous_num + fibonacci_sequence[-1]\n            fibonacci_sequence.append(current_num)\n\n        return fibonacci_sequence"}
{"instruction": "Develop a Python class that implements a least recently used (LRU) cache.", "input": "", "output": "class LRUCache:\n def __init__(self, capacity):\n self.capacity = capacity\n self.cache = {}\n self.lru_list = []\n\n def get(self, key):\n if key in self.cache:\n  self.lru_list.remove(key)\n  self.lru_list.append(key)\n  return self.cache[key]\n else:\n  return None\n\n def put(self, key, value):\n self.cache[key] = value\n if key in self.lru_list:\n  self.lru_list.remove(key)\n self.lru_list.append(key)\n if len(self.lru_list) > self.capacity:\n  elementToRemove = self.lru_list.pop(0)\n  del self.cache[elementToRemove]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python class that implements a least recently used (LRU) cache.\n\n### Input:\n\n\n### Output:\nclass LRUCache:\n def __init__(self, capacity):\n self.capacity = capacity\n self.cache = {}\n self.lru_list = []\n\n def get(self, key):\n if key in self.cache:\n  self.lru_list.remove(key)\n  self.lru_list.append(key)\n  return self.cache[key]\n else:\n  return None\n\n def put(self, key, value):\n self.cache[key] = value\n if key in self.lru_list:\n  self.lru_list.remove(key)\n self.lru_list.append(key)\n if len(self.lru_list) > self.capacity:\n  elementToRemove = self.lru_list.pop(0)\n  del self.cache[elementToRemove]"}
{"instruction": "Create a python program to convert a time from 12-hour to 24-hour format.", "input": "", "output": "def time24(a): \n\n    if len(a) == 4: \n        ampm = 'AM'\n        time = a \n    elif len(a) == 7: \n        ampm = a[5:7] \n        time = a[0:5]\n    time_split = time.split(':') \n\n    if ampm == 'PM': \n        if time_split[0] != '12': \n            time_split[0] = str(int(time_split[0])+ 12) \n  \n    elif ampm == 'AM': \n        if time_split[0] == '12': \n            time_split[0] = '00' \n          \n    time24 = ':'.join(time_split) \n  \n    return time24 \n  \n# Driver Code \na = '2:30:00PM'\nprint(time24(a)) \n  \n# Output: \n# 14:30:00", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert a time from 12-hour to 24-hour format.\n\n### Input:\n\n\n### Output:\ndef time24(a): \n\n    if len(a) == 4: \n        ampm = 'AM'\n        time = a \n    elif len(a) == 7: \n        ampm = a[5:7] \n        time = a[0:5]\n    time_split = time.split(':') \n\n    if ampm == 'PM': \n        if time_split[0] != '12': \n            time_split[0] = str(int(time_split[0])+ 12) \n  \n    elif ampm == 'AM': \n        if time_split[0] == '12': \n            time_split[0] = '00' \n          \n    time24 = ':'.join(time_split) \n  \n    return time24 \n  \n# Driver Code \na = '2:30:00PM'\nprint(time24(a)) \n  \n# Output: \n# 14:30:00"}
{"instruction": "Generate a Python program to determine if a given binary tree is balanced", "input": "", "output": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to determine if a given binary tree is balanced\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))"}
{"instruction": "Generate a HTML page with 3 clickable buttons that calls a Python script.", "input": "", "output": "<html>\n<head>\n  <title>Python Script Page</title>\n</head>\n<body>\n  <h1>Click the buttons below to call a Python Script:</h1>\n  <form name=\"form1\">\n    <button type=\"button\" onclick=\"myFunction('script1.py')\">Script 1</button>\n    <button type=\"button\" onclick=\"myFunction('script2.py')\">Script 2</button>\n    <button type=\"button\" onclick=\"myFunction('script3.py')\">Script 3</button>\n  </form>\n\n  <script type=\"text/javascript\">\n    function myFunction(scriptName) {\n      // Call Python Script\n      alert('Calling Python Script: ' + scriptName);\n    }\n  </script>\n</body>\n</html>", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a HTML page with 3 clickable buttons that calls a Python script.\n\n### Input:\n\n\n### Output:\n<html>\n<head>\n  <title>Python Script Page</title>\n</head>\n<body>\n  <h1>Click the buttons below to call a Python Script:</h1>\n  <form name=\"form1\">\n    <button type=\"button\" onclick=\"myFunction('script1.py')\">Script 1</button>\n    <button type=\"button\" onclick=\"myFunction('script2.py')\">Script 2</button>\n    <button type=\"button\" onclick=\"myFunction('script3.py')\">Script 3</button>\n  </form>\n\n  <script type=\"text/javascript\">\n    function myFunction(scriptName) {\n      // Call Python Script\n      alert('Calling Python Script: ' + scriptName);\n    }\n  </script>\n</body>\n</html>"}
{"instruction": "Create a Python module that implements functions for classes and objects.", "input": "", "output": "# Python module for classes and objects\n\n\nclass MyClass:\n    \"\"\"A basic example to demonstrate classes and objects\"\"\"\n\n    # Class attributes\n    color = 'red'\n    shape = 'circle'\n\n    # Initializer\n    def __init__(self, radius):\n        self.radius = radius\n\n    # Methods\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n\n# Create an object\nobj = MyClass(radius = 15)\n\n# Access object attributes\nprint(\"The color of the object is:\", obj.color)\nprint(\"The shape of the object is:\", obj.shape)\n\n# Access object methods\nprint(\"The area of the object is:\", obj.area())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that implements functions for classes and objects.\n\n### Input:\n\n\n### Output:\n# Python module for classes and objects\n\n\nclass MyClass:\n    \"\"\"A basic example to demonstrate classes and objects\"\"\"\n\n    # Class attributes\n    color = 'red'\n    shape = 'circle'\n\n    # Initializer\n    def __init__(self, radius):\n        self.radius = radius\n\n    # Methods\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n\n# Create an object\nobj = MyClass(radius = 15)\n\n# Access object attributes\nprint(\"The color of the object is:\", obj.color)\nprint(\"The shape of the object is:\", obj.shape)\n\n# Access object methods\nprint(\"The area of the object is:\", obj.area())"}
{"instruction": "Write a python program to remove duplicates from an unsorted linked list.", "input": "", "output": "class LinkedListNode:\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef remove_duplicates(node):\n    if node is None:\n        return node\n\n    seen_data = {node.data: True}\n\n    curr_node = node.next\n    prev_node = node\n\n    while curr_node is not None:\n        if curr_node.data in seen_data:\n            # remove the node\n            prev_node.next = curr_node.next\n            curr_node = prev_node.next\n        else:\n            seen_data[curr_node.data] = True\n            curr_node = curr_node.next\n            prev_node = prev_node.next\n\n    return node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to remove duplicates from an unsorted linked list.\n\n### Input:\n\n\n### Output:\nclass LinkedListNode:\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef remove_duplicates(node):\n    if node is None:\n        return node\n\n    seen_data = {node.data: True}\n\n    curr_node = node.next\n    prev_node = node\n\n    while curr_node is not None:\n        if curr_node.data in seen_data:\n            # remove the node\n            prev_node.next = curr_node.next\n            curr_node = prev_node.next\n        else:\n            seen_data[curr_node.data] = True\n            curr_node = curr_node.next\n            prev_node = prev_node.next\n\n    return node"}
{"instruction": "Design a program in Python to search a tree using a Breadth-First Search.", "input": "", "output": "def BFS(tree, item):\n    # Create an empty queue for BFS\n    queue = []\n \n    # Enqueue the root of tree\n    queue.append(tree)\n \n    # Do till the queue is empty\n    while(len(queue) > 0):\n        # Dequeue an item from queue\n        item = queue.pop(0)\n \n        # If the dequeued item is the item we are looking for then return\n        if item == item:\n            return item\n \n        # Enqueue the left node\n        if item.left is not None:\n            queue.append(item.left)\n \n        # Right node enqueue\n        if item.right is not None:\n            queue.append(item.right)\n    \n    # Item not found\n    return None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to search a tree using a Breadth-First Search.\n\n### Input:\n\n\n### Output:\ndef BFS(tree, item):\n    # Create an empty queue for BFS\n    queue = []\n \n    # Enqueue the root of tree\n    queue.append(tree)\n \n    # Do till the queue is empty\n    while(len(queue) > 0):\n        # Dequeue an item from queue\n        item = queue.pop(0)\n \n        # If the dequeued item is the item we are looking for then return\n        if item == item:\n            return item\n \n        # Enqueue the left node\n        if item.left is not None:\n            queue.append(item.left)\n \n        # Right node enqueue\n        if item.right is not None:\n            queue.append(item.right)\n    \n    # Item not found\n    return None"}
{"instruction": "Write an object-oriented program in python to represent a booking system.", "input": "", "output": "#Class to represent a booking system\nclass Booking:\n    def __init__(self, name, date, time):\n        self.name = name\n        self.date = date\n        self.time = time\n    \n    def view_details(self):\n        print(\"Name: \", self.name)\n        print(\"Date: \", self.date)\n        print(\"Time: \", self.time)\n    \n    def edit_details(self):\n        self.name = input(\"Enter new name: \")\n        self.date = input(\"Enter new date: \")\n        self.time = input(\"Enter new time: \")\n    \n    def cancel_booking(self):\n        self.name = None\n        self.date = None\n        self.time = None\n        print(\"Booking cancelled successfully.\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an object-oriented program in python to represent a booking system.\n\n### Input:\n\n\n### Output:\n#Class to represent a booking system\nclass Booking:\n    def __init__(self, name, date, time):\n        self.name = name\n        self.date = date\n        self.time = time\n    \n    def view_details(self):\n        print(\"Name: \", self.name)\n        print(\"Date: \", self.date)\n        print(\"Time: \", self.time)\n    \n    def edit_details(self):\n        self.name = input(\"Enter new name: \")\n        self.date = input(\"Enter new date: \")\n        self.time = input(\"Enter new time: \")\n    \n    def cancel_booking(self):\n        self.name = None\n        self.date = None\n        self.time = None\n        print(\"Booking cancelled successfully.\")"}
{"instruction": "Write a Python script to retrieve a list of tweets using a given hashtag.", "input": "", "output": "import tweepy\nfrom tweepy import OAuthHandler\n\nconsumer_key = '<your-consumer-key-here>'\nconsumer_secret = '<your-consumer-secret-here>'\naccess_token = '<your-access-token-here>'\naccess_token_secret = '<your-access-token-secret-here>'\n\nauth = OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token,access_token_secret)\n\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n\ndef get_tweets(hashtag):\n    tweets = []\n    for tweet in tweepy.Cursor(api.search, q=hashtag, lang='en').items():\n        tweets.append(tweet.text)\n    return tweets\n\ntweets = get_tweets(\"#python\")\nprint(tweets)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to retrieve a list of tweets using a given hashtag.\n\n### Input:\n\n\n### Output:\nimport tweepy\nfrom tweepy import OAuthHandler\n\nconsumer_key = '<your-consumer-key-here>'\nconsumer_secret = '<your-consumer-secret-here>'\naccess_token = '<your-access-token-here>'\naccess_token_secret = '<your-access-token-secret-here>'\n\nauth = OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token,access_token_secret)\n\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n\ndef get_tweets(hashtag):\n    tweets = []\n    for tweet in tweepy.Cursor(api.search, q=hashtag, lang='en').items():\n        tweets.append(tweet.text)\n    return tweets\n\ntweets = get_tweets(\"#python\")\nprint(tweets)"}
{"instruction": "Develop a dynamic programming approach to solve the 0/1 knapsack problem.", "input": "", "output": "# A Dynamic Programming based Python Program for 0-1 Knapsack problem \n# Returns the maximum value that can be put in a knapsack of capacity W\ndef knapsack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more than Knapsack of capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapsack(W, wt, val, n-1) \n  \n    # Return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapsack(W-wt[n-1], wt, val, n-1), \n                   knapsack(W, wt, val, n-1))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a dynamic programming approach to solve the 0/1 knapsack problem.\n\n### Input:\n\n\n### Output:\n# A Dynamic Programming based Python Program for 0-1 Knapsack problem \n# Returns the maximum value that can be put in a knapsack of capacity W\ndef knapsack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more than Knapsack of capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapsack(W, wt, val, n-1) \n  \n    # Return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapsack(W-wt[n-1], wt, val, n-1), \n                   knapsack(W, wt, val, n-1))"}
{"instruction": "Make a prediction model in Python to classify the class of a credit score", "input": "", "output": "# Import the necessary packages\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the dataset\ndata = pd.read_csv('credit_score_data.csv')\nX = data.drop('credit_class', axis=1)\ny = data['credit_class']\n\n# Encode labels\ny = LabelEncoder().fit_transform(y)\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Create and train the model\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model with the test set\ny_preds = model.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_preds))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a prediction model in Python to classify the class of a credit score\n\n### Input:\n\n\n### Output:\n# Import the necessary packages\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the dataset\ndata = pd.read_csv('credit_score_data.csv')\nX = data.drop('credit_class', axis=1)\ny = data['credit_class']\n\n# Encode labels\ny = LabelEncoder().fit_transform(y)\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Create and train the model\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model with the test set\ny_preds = model.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_preds))"}
{"instruction": "Develop a Python AI model that can predict the stock prices of a company.", "input": "", "output": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import MinMaxScaler\n\n#import the data\ndata = pd.read_csv('stock-data.csv')\n\n#split the data\nX = data[['open', 'high', 'low', 'close']]\ny = data['Adj Close']\n\n#scaling the data\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\n\n#fitting the model\nmodel = SVR(kernel='rbf', gamma='scale')\nmodel.fit(X_scaled, y)\n\n#make prediction\nprediction = model.predict(X_scaled)\n\n#plotting the results\nplt.scatter(prediction, y)\nplt.xlabel('Predicted Stock Prices')\nplt.ylabel('Actual Stock Prices')\nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python AI model that can predict the stock prices of a company.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import MinMaxScaler\n\n#import the data\ndata = pd.read_csv('stock-data.csv')\n\n#split the data\nX = data[['open', 'high', 'low', 'close']]\ny = data['Adj Close']\n\n#scaling the data\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\n\n#fitting the model\nmodel = SVR(kernel='rbf', gamma='scale')\nmodel.fit(X_scaled, y)\n\n#make prediction\nprediction = model.predict(X_scaled)\n\n#plotting the results\nplt.scatter(prediction, y)\nplt.xlabel('Predicted Stock Prices')\nplt.ylabel('Actual Stock Prices')\nplt.show()"}
{"instruction": "Generate a function in Python to find all permutations of a given string.", "input": "", "output": "def permutations(str):\n    \"\"\"\n    This function returns a list of all possible \n    permutations of a given string\n    \"\"\"\n\n    # Base case\n    if not str:\n        return ['']\n    \n    # Create a result list to store the permutations\n    result = []\n    \n    # Iterate through all characters \n    for i in range(len(str)):\n        # Create a list of all characters except the current one\n        rest = str[:i] + str[i+1:]\n        # Generate all permutations of the remaining characters\n        sub_permutes = permutations(rest)\n        \n        # Put the current character in each permutation and add it to the result \n        # list\n        for perm in sub_permutes:\n            result.append(str[i] + perm)\n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to find all permutations of a given string.\n\n### Input:\n\n\n### Output:\ndef permutations(str):\n    \"\"\"\n    This function returns a list of all possible \n    permutations of a given string\n    \"\"\"\n\n    # Base case\n    if not str:\n        return ['']\n    \n    # Create a result list to store the permutations\n    result = []\n    \n    # Iterate through all characters \n    for i in range(len(str)):\n        # Create a list of all characters except the current one\n        rest = str[:i] + str[i+1:]\n        # Generate all permutations of the remaining characters\n        sub_permutes = permutations(rest)\n        \n        # Put the current character in each permutation and add it to the result \n        # list\n        for perm in sub_permutes:\n            result.append(str[i] + perm)\n    return result"}
{"instruction": "Create a neural network in Python that can recognize handwritten numbers.", "input": "", "output": "import tensorflow as tf\n\n# Build the model\nmodel = tf.keras.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\n\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python that can recognize handwritten numbers.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\n\n# Build the model\nmodel = tf.keras.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\n\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])"}
{"instruction": "Generate a script to establish a secure connection between two computers.", "input": "", "output": "# Use Python\nimport socket\n\n# Create socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to an address and port\ns.bind((‘127.0.0.1’, 8888))\n\n# Listen for incomming connections\ns.listen()\n\n# Perform handshake to establish a secure connection\nwhile True:\n    # Accept connection\n    conn, addr = s.accept()\n    with conn:\n        print('Connected by', addr)\n        # Generate handshake messages\n        handshake_msg = generate_handshake_msg()\n        # Send handshake message\n        conn.send(handshake_msg)\n        # Receive message\n        received_msg = conn.recv(1024)\n        # Validate handshake message\n        if validate_handshake_msg(received_msg):\n            # Establish connection\n            print('Secure connection established!')\n            break", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script to establish a secure connection between two computers.\n\n### Input:\n\n\n### Output:\n# Use Python\nimport socket\n\n# Create socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to an address and port\ns.bind((‘127.0.0.1’, 8888))\n\n# Listen for incomming connections\ns.listen()\n\n# Perform handshake to establish a secure connection\nwhile True:\n    # Accept connection\n    conn, addr = s.accept()\n    with conn:\n        print('Connected by', addr)\n        # Generate handshake messages\n        handshake_msg = generate_handshake_msg()\n        # Send handshake message\n        conn.send(handshake_msg)\n        # Receive message\n        received_msg = conn.recv(1024)\n        # Validate handshake message\n        if validate_handshake_msg(received_msg):\n            # Establish connection\n            print('Secure connection established!')\n            break"}
{"instruction": "Construct a Python program that implements a game of Rock-Paper-Scissors.", "input": "", "output": "import random\n# define the possible inputs\npossible_inputs = ['rock', 'paper', 'scissors']\n\n# print intro message\nprint('Welcome to Rock, Paper, Scissors!')\n\n# get input from user\nuser_input = input('Choose Rock, Paper, or Scissors: ').lower()\n\n# check the input\nif user_input not in possible_inputs:\n    print('Error: Invalid input. Please choose either Rock, Paper, or Scissors.')\n    exit()\n\n# generate computer's input\ncomputer_input = random.choice(possible_inputs)\n\n# print results\nprint('You chose {} and the computer chose {}.'.format(user_input, computer_input))\n\n# determine winner\nif user_input == computer_input:\n    print('It\\'s a tie!')\nelif (user_input == 'rock' and computer_input == 'scissors') or \\\n     (user_input == 'paper' and computer_input == 'rock') or \\\n     (user_input == 'scissors' and computer_input == 'paper'):\n    print('You win!')\nelse:\n    print('You lose!')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that implements a game of Rock-Paper-Scissors.\n\n### Input:\n\n\n### Output:\nimport random\n# define the possible inputs\npossible_inputs = ['rock', 'paper', 'scissors']\n\n# print intro message\nprint('Welcome to Rock, Paper, Scissors!')\n\n# get input from user\nuser_input = input('Choose Rock, Paper, or Scissors: ').lower()\n\n# check the input\nif user_input not in possible_inputs:\n    print('Error: Invalid input. Please choose either Rock, Paper, or Scissors.')\n    exit()\n\n# generate computer's input\ncomputer_input = random.choice(possible_inputs)\n\n# print results\nprint('You chose {} and the computer chose {}.'.format(user_input, computer_input))\n\n# determine winner\nif user_input == computer_input:\n    print('It\\'s a tie!')\nelif (user_input == 'rock' and computer_input == 'scissors') or \\\n     (user_input == 'paper' and computer_input == 'rock') or \\\n     (user_input == 'scissors' and computer_input == 'paper'):\n    print('You win!')\nelse:\n    print('You lose!')"}
{"instruction": "Implement a Classifier using Python and Scikit-Learn on the Iris dataset.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n \n# Load the dataset\nirisdataset = pd.read_csv('Iris.csv')\n \n# Separate the dependent variables and independent variables\nX = irisdataset.iloc[:, [0, 1, 2, 3]].values\nY = irisdataset.iloc[:, 4].values\n \n# Split the dataset into training and testing\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n \n# Feature Scaling\nsc = StandardScaler()\nX_Train = sc.fit_transform(X_Train)\nX_Test = sc.transform(X_Test)\n \n# Fit and Train the Model\nclassifier = SVC(kernel = 'rbf')\nclassifier.fit(X_Train, Y_Train)\n \n# Make predictions on the test set\nY_Pred = classifier.predict(X_Test)\n \n# Calculate the accuracy\nprint(\"Accuracy Score : \", accuracy_score(Y_Test, Y_Pred))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Classifier using Python and Scikit-Learn on the Iris dataset.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n \n# Load the dataset\nirisdataset = pd.read_csv('Iris.csv')\n \n# Separate the dependent variables and independent variables\nX = irisdataset.iloc[:, [0, 1, 2, 3]].values\nY = irisdataset.iloc[:, 4].values\n \n# Split the dataset into training and testing\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n \n# Feature Scaling\nsc = StandardScaler()\nX_Train = sc.fit_transform(X_Train)\nX_Test = sc.transform(X_Test)\n \n# Fit and Train the Model\nclassifier = SVC(kernel = 'rbf')\nclassifier.fit(X_Train, Y_Train)\n \n# Make predictions on the test set\nY_Pred = classifier.predict(X_Test)\n \n# Calculate the accuracy\nprint(\"Accuracy Score : \", accuracy_score(Y_Test, Y_Pred))"}
{"instruction": "Generate a program in Python to optimize a given set of linear equations.", "input": "", "output": "def optimize_linear_equations(equations):\n \n    num_variables = len(equations[0]) - 1\n    system_of_equations = [0] * (num_variables + 1)\n \n    for equation in equations:\n        for i, coefficient in enumerate(equation):\n            system_of_equations[i] += coefficient\n \n    solution = [0] * num_variables\n \n    # solve the linear equations using Gaussian elimination\n    for i in range(num_variables):\n        divisor = system_of_equations[i][i]\n        for j in range(i, num_variables + 1):\n            system_of_equations[i][j] /= divisor\n        for j in range(i + 1, num_variables):\n            multiplier = system_of_equations[j][i]\n            for k in range(i, num_variables + 1):\n                system_of_equations[j][k] -= multiplier * system_of_equations[i][k]\n \n    for i in range(num_variables - 1, -1, -1):\n        solution[i] = system_of_equations[i][num_variables]\n        for j in range(num_variables - 1, i, -1):\n            solution[i] -= system_of_equations[i][j] * solution[j]\n \n    return solution", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to optimize a given set of linear equations.\n\n### Input:\n\n\n### Output:\ndef optimize_linear_equations(equations):\n \n    num_variables = len(equations[0]) - 1\n    system_of_equations = [0] * (num_variables + 1)\n \n    for equation in equations:\n        for i, coefficient in enumerate(equation):\n            system_of_equations[i] += coefficient\n \n    solution = [0] * num_variables\n \n    # solve the linear equations using Gaussian elimination\n    for i in range(num_variables):\n        divisor = system_of_equations[i][i]\n        for j in range(i, num_variables + 1):\n            system_of_equations[i][j] /= divisor\n        for j in range(i + 1, num_variables):\n            multiplier = system_of_equations[j][i]\n            for k in range(i, num_variables + 1):\n                system_of_equations[j][k] -= multiplier * system_of_equations[i][k]\n \n    for i in range(num_variables - 1, -1, -1):\n        solution[i] = system_of_equations[i][num_variables]\n        for j in range(num_variables - 1, i, -1):\n            solution[i] -= system_of_equations[i][j] * solution[j]\n \n    return solution"}
{"instruction": "Generate a program in Python to find the maximum element in a given array.", "input": "", "output": "# Generate a program in Python to find the maximum element in a given array\n\ndef maximum_element(arr):\n  \"\"\"\n  Find the maximum element in a given array.\n\n  Parameters\n  ----------\n  arr : array_like\n    The array of integers.\n\n  Returns\n  -------\n  int\n    The maximum value found in the array, or None if the array is empty.\n  \"\"\"\n  max_element = None\n  for n in arr:\n    if max_element is None or n > max_element:\n      max_element = n\n  return max_element", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to find the maximum element in a given array.\n\n### Input:\n\n\n### Output:\n# Generate a program in Python to find the maximum element in a given array\n\ndef maximum_element(arr):\n  \"\"\"\n  Find the maximum element in a given array.\n\n  Parameters\n  ----------\n  arr : array_like\n    The array of integers.\n\n  Returns\n  -------\n  int\n    The maximum value found in the array, or None if the array is empty.\n  \"\"\"\n  max_element = None\n  for n in arr:\n    if max_element is None or n > max_element:\n      max_element = n\n  return max_element"}
{"instruction": "Design a Python program to find out the Armstrong number in a given range.", "input": "", "output": "def is_armstrong(num):\n   # calculate the total of each digits power to the length of digits \n    temp = num\n    order = len(str(num))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n  \n    if (num == sum):\n        return True\n    else:\n        return False \n\ndef find_armstrong_numbers(start, end):\n    armstrong_numbers = []\n    for num in range(start, end + 1):\n        if is_armstrong(num):\n            armstrong_numbers.append(num)\n    return armstrong_numbers", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find out the Armstrong number in a given range.\n\n### Input:\n\n\n### Output:\ndef is_armstrong(num):\n   # calculate the total of each digits power to the length of digits \n    temp = num\n    order = len(str(num))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n  \n    if (num == sum):\n        return True\n    else:\n        return False \n\ndef find_armstrong_numbers(start, end):\n    armstrong_numbers = []\n    for num in range(start, end + 1):\n        if is_armstrong(num):\n            armstrong_numbers.append(num)\n    return armstrong_numbers"}
{"instruction": "Develop a Python script to scrape and store data from a specified website.", "input": "", "output": "\"\"\"\nDevelop a python script to scrape and store data from a specified website.\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# specify website URL\nurl = '<website url>'\n\n# get page content\npage = requests.get(url).text\n\n# parse the page for data\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find data element in page\ndata_elements = soup.find_all('<data>')\n\n# extract data from element and store in a list\ndata_list = []\nfor elem in data_elements:\n    data_list.append(elem.text)\n\n# create dataframe with data and store in csv file\ndf = pd.DataFrame(data_list)\ndf.to_csv('data.csv')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to scrape and store data from a specified website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDevelop a python script to scrape and store data from a specified website.\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# specify website URL\nurl = '<website url>'\n\n# get page content\npage = requests.get(url).text\n\n# parse the page for data\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find data element in page\ndata_elements = soup.find_all('<data>')\n\n# extract data from element and store in a list\ndata_list = []\nfor elem in data_elements:\n    data_list.append(elem.text)\n\n# create dataframe with data and store in csv file\ndf = pd.DataFrame(data_list)\ndf.to_csv('data.csv')"}
{"instruction": "What is the best way to optimize a k-means clustering algorithm in Python?", "input": "", "output": "Optimizing the performance of a k-means clustering algorithm in Python primarily involves choosing the right distance-measure to calculate the dissimilarity between data points, selecting an initial set of cluster centroids, avoiding local minima, and selecting an appropriate value of 'k'. Distance-measures such as the Euclidean distance, Manhattan distance, and Minkowski distance can be employed to accurately measure the dissimilarity between data points. The initial set of centroids can be selected randomly or through the 'k-means++' algorithm. Choosing an appropriate 'k' value is important because it affects the quality of the cluster.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the best way to optimize a k-means clustering algorithm in Python?\n\n### Input:\n\n\n### Output:\nOptimizing the performance of a k-means clustering algorithm in Python primarily involves choosing the right distance-measure to calculate the dissimilarity between data points, selecting an initial set of cluster centroids, avoiding local minima, and selecting an appropriate value of 'k'. Distance-measures such as the Euclidean distance, Manhattan distance, and Minkowski distance can be employed to accurately measure the dissimilarity between data points. The initial set of centroids can be selected randomly or through the 'k-means++' algorithm. Choosing an appropriate 'k' value is important because it affects the quality of the cluster."}
{"instruction": "Write a Python code to fetch recent twitter posts from a specific account.", "input": "", "output": "\"\"\"\nFetch recent twitter posts from a specific account\n\"\"\"\n\nimport tweepy\n\ndef get_posts(screen_name):\n    consumer_key = '...'\n    consumer_secret = '...'\n    access_key = '...'\n    access_secret = '...'\n\n    # Authenticate to Twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n\n    # Create API object\n    api = tweepy.API(auth)\n\n    # Get recent posts\n    posts = api.user_timeline(screen_name=screen_name, count=200)\n    return [post.text for post in posts]\n\nif __name__ == '__main__':\n    # Get recent posts from a sample account\n    posts = get_posts('example')\n    print(posts)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to fetch recent twitter posts from a specific account.\n\n### Input:\n\n\n### Output:\n\"\"\"\nFetch recent twitter posts from a specific account\n\"\"\"\n\nimport tweepy\n\ndef get_posts(screen_name):\n    consumer_key = '...'\n    consumer_secret = '...'\n    access_key = '...'\n    access_secret = '...'\n\n    # Authenticate to Twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n\n    # Create API object\n    api = tweepy.API(auth)\n\n    # Get recent posts\n    posts = api.user_timeline(screen_name=screen_name, count=200)\n    return [post.text for post in posts]\n\nif __name__ == '__main__':\n    # Get recent posts from a sample account\n    posts = get_posts('example')\n    print(posts)"}
{"instruction": "Design a Python class to store and manipulate data from a tabular dataset.", "input": "", "output": "class TableData:\n    def __init__(self, data):\n        self.data = data\n        self.column_names = list(data[0].keys())\n        self.row_count = len(data)\n\n    def get_rows(self):\n        rows = []\n        for row in self.data:\n            rows.append(list(row.values()))\n\n        return rows\n\n    def get_columns(self):\n        columns = []\n        for name in self.column_names:\n            column = []\n            for row in self.data:\n                column.append(row[name])\n            \n            columns.append(column)\n\n        return columns\n\n    def get_column_names(self):\n        return self.column_names\n\n    def get_row_count(self):\n        return self.row_count", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to store and manipulate data from a tabular dataset.\n\n### Input:\n\n\n### Output:\nclass TableData:\n    def __init__(self, data):\n        self.data = data\n        self.column_names = list(data[0].keys())\n        self.row_count = len(data)\n\n    def get_rows(self):\n        rows = []\n        for row in self.data:\n            rows.append(list(row.values()))\n\n        return rows\n\n    def get_columns(self):\n        columns = []\n        for name in self.column_names:\n            column = []\n            for row in self.data:\n                column.append(row[name])\n            \n            columns.append(column)\n\n        return columns\n\n    def get_column_names(self):\n        return self.column_names\n\n    def get_row_count(self):\n        return self.row_count"}
{"instruction": "Generate a script in Python that can make a given webpage mobile-friendly.", "input": "", "output": "import bs4\nfrom urllib.request import urlopen\n\ndef make_webpage_mobile_friendly(url):\n    html = urlopen(url)\n    soup = bs4.BeautifulSoup(html, 'html.parser')\n    head_html = soup.find('head')\n    meta_attribute = {'name': 'viewport', 'content': 'width=device-width, initial-scale=1'}\n    meta_tag = soup.new_tag('meta', attrs=meta_attribute)\n    head_html.append(meta_tag)\n    html_body = soup.find('body')\n    for element in html_body.find_all('div', {'class': 'large-wrapper'}):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n    for element in html_body.find_all('img'):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n\n    return soup.prettify()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script in Python that can make a given webpage mobile-friendly.\n\n### Input:\n\n\n### Output:\nimport bs4\nfrom urllib.request import urlopen\n\ndef make_webpage_mobile_friendly(url):\n    html = urlopen(url)\n    soup = bs4.BeautifulSoup(html, 'html.parser')\n    head_html = soup.find('head')\n    meta_attribute = {'name': 'viewport', 'content': 'width=device-width, initial-scale=1'}\n    meta_tag = soup.new_tag('meta', attrs=meta_attribute)\n    head_html.append(meta_tag)\n    html_body = soup.find('body')\n    for element in html_body.find_all('div', {'class': 'large-wrapper'}):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n    for element in html_body.find_all('img'):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n\n    return soup.prettify()"}
{"instruction": "Create a program in Python to find the edit distance of two given strings.", "input": "", "output": "def edit_distance(str1, str2): \n    \n    # Initialize the DP matrix \n    m = len(str1) + 1\n    n = len(str2) + 1\n    dp_matrix = [[0 for x in range(n)] for x in range(m)] \n  \n    for i in range(m): \n        for j in range(n): \n            if i == 0: \n                dp_matrix[i][j] = j    # Min. operations = j \n            elif j == 0: \n                dp_matrix[i][j] = i    # Min. operations = i \n  \n            # If characters match \n            elif str1[i-1] == str2[j-1]: \n                dp_matrix[i][j] = dp_matrix[i-1][j-1] \n  \n            # If characters don't match \n            else: \n                dp_matrix[i][j] = 1 + min(dp_matrix[i][j-1],        # Insert \n                                          dp_matrix[i-1][j],        # Remove \n                                          dp_matrix[i-1][j-1])    # Replace \n  \n    return dp_matrix[m-1][n-1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the edit distance of two given strings.\n\n### Input:\n\n\n### Output:\ndef edit_distance(str1, str2): \n    \n    # Initialize the DP matrix \n    m = len(str1) + 1\n    n = len(str2) + 1\n    dp_matrix = [[0 for x in range(n)] for x in range(m)] \n  \n    for i in range(m): \n        for j in range(n): \n            if i == 0: \n                dp_matrix[i][j] = j    # Min. operations = j \n            elif j == 0: \n                dp_matrix[i][j] = i    # Min. operations = i \n  \n            # If characters match \n            elif str1[i-1] == str2[j-1]: \n                dp_matrix[i][j] = dp_matrix[i-1][j-1] \n  \n            # If characters don't match \n            else: \n                dp_matrix[i][j] = 1 + min(dp_matrix[i][j-1],        # Insert \n                                          dp_matrix[i-1][j],        # Remove \n                                          dp_matrix[i-1][j-1])    # Replace \n  \n    return dp_matrix[m-1][n-1]"}
{"instruction": "Create a Python program to generate a hamming code for a given bit string.", "input": "", "output": "def generateHammingCode(bitString):\n    # Get length of the input bit string\n    n = len(bitString) \n  \n    # Calculate the number of parity bits\n    m = 0\n    while 2**m < n + m + 1: \n        m+= 1\n  \n    # Initialize 2 empty lists to store parity and encoded bits\n    parityBits = [] \n    encodedList = [] \n  \n    # Calculate parity bits\n    for i in range(m): \n        k = 2**i \n        parityBits.append(calculateParityBit(bitString, k)) \n  \n    # Generate hamming code\n    j = 0\n    for i in range (1, n + m + 1): \n        if i == 2**j: \n            encodedList.append(parityBits[j])\n            j += 1\n        else :\n            encodedList.append(int(bitString[i - j - 1]))\n          \n    return encodedList\n  \ndef calculateParityBit(bitString, k): \n    counter = 0\n    for i in range(len(bitString)): \n        if i & k == k :\n            counter += int(bitString[i]) \n    if counter % 2 == 0: \n        return '0'\n    else: \n        return '1'", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a hamming code for a given bit string.\n\n### Input:\n\n\n### Output:\ndef generateHammingCode(bitString):\n    # Get length of the input bit string\n    n = len(bitString) \n  \n    # Calculate the number of parity bits\n    m = 0\n    while 2**m < n + m + 1: \n        m+= 1\n  \n    # Initialize 2 empty lists to store parity and encoded bits\n    parityBits = [] \n    encodedList = [] \n  \n    # Calculate parity bits\n    for i in range(m): \n        k = 2**i \n        parityBits.append(calculateParityBit(bitString, k)) \n  \n    # Generate hamming code\n    j = 0\n    for i in range (1, n + m + 1): \n        if i == 2**j: \n            encodedList.append(parityBits[j])\n            j += 1\n        else :\n            encodedList.append(int(bitString[i - j - 1]))\n          \n    return encodedList\n  \ndef calculateParityBit(bitString, k): \n    counter = 0\n    for i in range(len(bitString)): \n        if i & k == k :\n            counter += int(bitString[i]) \n    if counter % 2 == 0: \n        return '0'\n    else: \n        return '1'"}
{"instruction": "Write a Python program to parse a given string and extract the domain name.", "input": "", "output": "\"\"\"\nWrite a Python program to parse a given string and extract the domain name\n\"\"\"\n\nimport re\n\ndef extract_domain_name(string):\n    domain_name = ''\n    matches = re.findall(r\"://([^/]+)/?\", string)\n    if len(matches) > 0:\n        domain_name = matches[0]\n    return domain_name\n\nstring = 'https://www.google.com/search?q=google+search'\ndomain_name = extract_domain_name(string)\n\nprint(\"The domain name extracted is:\", domain_name)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a given string and extract the domain name.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a Python program to parse a given string and extract the domain name\n\"\"\"\n\nimport re\n\ndef extract_domain_name(string):\n    domain_name = ''\n    matches = re.findall(r\"://([^/]+)/?\", string)\n    if len(matches) > 0:\n        domain_name = matches[0]\n    return domain_name\n\nstring = 'https://www.google.com/search?q=google+search'\ndomain_name = extract_domain_name(string)\n\nprint(\"The domain name extracted is:\", domain_name)"}
{"instruction": "Develop an ML model in Python to detect anomalies in a time series dataset.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Create training and test sets\nx_train, x_test = train_test_split(data, test_size=0.2)\n\n# Train the Isolation Forest\nisolation_forest = IsolationForest(random_state=0).fit(x_train)\n\n# Make predictions\npreds = isolation_forest.predict(x_test)\n\n# Detect and mark anomalies\nanomalies_index = np.where(preds == -1)[0]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an ML model in Python to detect anomalies in a time series dataset.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Create training and test sets\nx_train, x_test = train_test_split(data, test_size=0.2)\n\n# Train the Isolation Forest\nisolation_forest = IsolationForest(random_state=0).fit(x_train)\n\n# Make predictions\npreds = isolation_forest.predict(x_test)\n\n# Detect and mark anomalies\nanomalies_index = np.where(preds == -1)[0]"}
{"instruction": "Write an iterator class in Python which iterates over numbers from 1 to 10.", "input": "", "output": "class IteratorExample:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n    \n    def __iter__(self):\n        self.num = self.start\n        return self\n    \n    def __next__(self):\n        if self.num > self.end:\n            raise StopIteration\n        else:\n            current_num = self.num\n            self.num += 1\n            return current_num\n\niterator = IteratorExample(1, 10)\nfor num in iterator:\n    print(num)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an iterator class in Python which iterates over numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nclass IteratorExample:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n    \n    def __iter__(self):\n        self.num = self.start\n        return self\n    \n    def __next__(self):\n        if self.num > self.end:\n            raise StopIteration\n        else:\n            current_num = self.num\n            self.num += 1\n            return current_num\n\niterator = IteratorExample(1, 10)\nfor num in iterator:\n    print(num)"}
{"instruction": "How would you efficiently sort a list with 1 million integers using Python?", "input": "", "output": "The most efficient way to sort a list with 1 million integers using Python would be to use the Timsort algorithm. Timsort is an adaptive, stable sorting algorithm based on merge sort and insertion sort, which runs in O(n log n) time. To use Timsort to sort a Python list, we can use the built-in sorted() function, which utilizes Timsort under the hood. For example:\n\nsorted_list = sorted(list_of_integers)  # list_of_integers is the list with 1 million integers.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you efficiently sort a list with 1 million integers using Python?\n\n### Input:\n\n\n### Output:\nThe most efficient way to sort a list with 1 million integers using Python would be to use the Timsort algorithm. Timsort is an adaptive, stable sorting algorithm based on merge sort and insertion sort, which runs in O(n log n) time. To use Timsort to sort a Python list, we can use the built-in sorted() function, which utilizes Timsort under the hood. For example:\n\nsorted_list = sorted(list_of_integers)  # list_of_integers is the list with 1 million integers."}
{"instruction": "Create a method or function to determine if a string is a palindrome or not", "input": "", "output": "# Python\ndef is_palindrome(string):\n    # Create empty list to save characters\n    characters = []\n\n    # Loop through characters in the string\n    for char in string:\n        # Append each character to the list\n        characters.append(char)\n    \n    # Reverse the characters in the list\n    reversed_chars = characters[::-1]\n\n    # Compare the original string to reversed \n    if string == ''.join(reversed_chars):\n        return True\n    else:\n        return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method or function to determine if a string is a palindrome or not\n\n### Input:\n\n\n### Output:\n# Python\ndef is_palindrome(string):\n    # Create empty list to save characters\n    characters = []\n\n    # Loop through characters in the string\n    for char in string:\n        # Append each character to the list\n        characters.append(char)\n    \n    # Reverse the characters in the list\n    reversed_chars = characters[::-1]\n\n    # Compare the original string to reversed \n    if string == ''.join(reversed_chars):\n        return True\n    else:\n        return False"}
{"instruction": "Create a class in Python that has 3 private variables and 3 public methods.", "input": "", "output": "class MyClass:\n    def __init__(self):\n        self.__var1 = 0\n        self.__var2 = 0\n        self.__var3 = 0\n        \n    def set_var1(self, val):\n        self.__var1 = val\n        \n    def get_var1(self):\n        return self.__var1\n        \n    def incr_var2(self):\n        self.__var2 += 1\n        \n    def get_var2(self):\n        return self.__var2\n        \n    def decr_var3(self):\n        self.__var3 -= 1\n        \n    def get_var3(self):\n        return self.__var3", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that has 3 private variables and 3 public methods.\n\n### Input:\n\n\n### Output:\nclass MyClass:\n    def __init__(self):\n        self.__var1 = 0\n        self.__var2 = 0\n        self.__var3 = 0\n        \n    def set_var1(self, val):\n        self.__var1 = val\n        \n    def get_var1(self):\n        return self.__var1\n        \n    def incr_var2(self):\n        self.__var2 += 1\n        \n    def get_var2(self):\n        return self.__var2\n        \n    def decr_var3(self):\n        self.__var3 -= 1\n        \n    def get_var3(self):\n        return self.__var3"}
{"instruction": "Write a Python script to generate a list of prime numbers between 2 and 30.", "input": "", "output": "# Generate a list of prime numbers between 2 and 30\n\n# Generate a list of all numbers between 2 and 30\nnumbers = range(2, 31)\n\n# Loop over all numbers\nfor num in numbers:\n    prime_flag = True\n    # Check if the number is divisible by any other between 2 and itself\n    for i in range(2, num):\n        if (num % i == 0):\n            prime_flag = False\n            break\n \n    # If the number is not divisible by any other number, it is prime\n    if prime_flag:\n        print(num)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a list of prime numbers between 2 and 30.\n\n### Input:\n\n\n### Output:\n# Generate a list of prime numbers between 2 and 30\n\n# Generate a list of all numbers between 2 and 30\nnumbers = range(2, 31)\n\n# Loop over all numbers\nfor num in numbers:\n    prime_flag = True\n    # Check if the number is divisible by any other between 2 and itself\n    for i in range(2, num):\n        if (num % i == 0):\n            prime_flag = False\n            break\n \n    # If the number is not divisible by any other number, it is prime\n    if prime_flag:\n        print(num)"}
{"instruction": "Write a code in Python for computing the edit distance between two strings.", "input": "", "output": "def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    dp = [[ 0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return dp[m][n]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python for computing the edit distance between two strings.\n\n### Input:\n\n\n### Output:\ndef edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    dp = [[ 0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return dp[m][n]"}
{"instruction": "Create a machine learning classifier in Python for categorizing user input.", "input": "", "output": "from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning classifier in Python for categorizing user input.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction"}
{"instruction": "Modify the Python script to store the correlation coefficients in an array.", "input": "", "output": "import csv \nimport numpy as np \n  \ndef read_csv(filename): \n    data = [] \n    with open(filename, 'r') as csvfile: \n        csvreader = csv.reader(csvfile) \n        for row in csvreader: \n            data.append(row) \n    return np.array(data).astype(float) \n  \ndef compute_corrcoef(data): \n    corrcoefs = [] \n    for i in range(data.shape[1]): \n        for j in range(i + 1, data.shape[1]): \n            r = np.corrcoef(data[:,i], data[:, j])[0,1] \n            corrcoefs.append((i, j, r)) \n    return np.array(corrcoefs)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the Python script to store the correlation coefficients in an array.\n\n### Input:\n\n\n### Output:\nimport csv \nimport numpy as np \n  \ndef read_csv(filename): \n    data = [] \n    with open(filename, 'r') as csvfile: \n        csvreader = csv.reader(csvfile) \n        for row in csvreader: \n            data.append(row) \n    return np.array(data).astype(float) \n  \ndef compute_corrcoef(data): \n    corrcoefs = [] \n    for i in range(data.shape[1]): \n        for j in range(i + 1, data.shape[1]): \n            r = np.corrcoef(data[:,i], data[:, j])[0,1] \n            corrcoefs.append((i, j, r)) \n    return np.array(corrcoefs)"}
{"instruction": "Create a Python dictionary of 10 words and their corresponding definitions.", "input": "", "output": "words = {\n 'algorithm': 'a set of steps used to solve a specific problem',\n 'function': 'a set of instructions that when followed produces the desired output',\n 'string': 'a sequence of characters',\n 'variable': 'a named value that will store data',\n 'integer': 'a whole number',\n 'float': 'a number with a decimal point',\n 'boolean': 'true or false',\n 'array': 'a data structure containing multiple values',\n 'dictionary': 'a data structure containing key-value pairs',\n 'loop': 'a construct used to iterate over a set of items'\n}", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary of 10 words and their corresponding definitions.\n\n### Input:\n\n\n### Output:\nwords = {\n 'algorithm': 'a set of steps used to solve a specific problem',\n 'function': 'a set of instructions that when followed produces the desired output',\n 'string': 'a sequence of characters',\n 'variable': 'a named value that will store data',\n 'integer': 'a whole number',\n 'float': 'a number with a decimal point',\n 'boolean': 'true or false',\n 'array': 'a data structure containing multiple values',\n 'dictionary': 'a data structure containing key-value pairs',\n 'loop': 'a construct used to iterate over a set of items'\n}"}
{"instruction": "Write a Python class to convert an integer to its Roman numeral equivalent.", "input": "", "output": "class Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to convert an integer to its Roman numeral equivalent.\n\n### Input:\n\n\n### Output:\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num"}
{"instruction": "Generate a python program to find the shortest path between two given nodes", "input": "", "output": "def find_path(start, end, graph):\n    # Initialize an empty list to store path\n    path = []\n    # Initialize a queue with start node\n    q = [start]\n    # Initialize a visited list\n    visited = set()\n\n    # Iterate until we get to the end node\n    while q:\n        node = q.pop(0)\n        if node == end:\n            path.append(node)\n            return path\n        elif node not in visited:\n            visited.add(node)\n            for neighbour in graph[node]:\n                q.append(neighbour)\n                path.append(node)\n    return path", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to find the shortest path between two given nodes\n\n### Input:\n\n\n### Output:\ndef find_path(start, end, graph):\n    # Initialize an empty list to store path\n    path = []\n    # Initialize a queue with start node\n    q = [start]\n    # Initialize a visited list\n    visited = set()\n\n    # Iterate until we get to the end node\n    while q:\n        node = q.pop(0)\n        if node == end:\n            path.append(node)\n            return path\n        elif node not in visited:\n            visited.add(node)\n            for neighbour in graph[node]:\n                q.append(neighbour)\n                path.append(node)\n    return path"}
{"instruction": "Construct an algorithm for predicting the sentiment of a text using Python.", "input": "", "output": "import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef predict_sentiment(text):\n    #Download required NLTK data\n    nltk.download('vader_lexicon')\n    #Create sentiment analyzer object \n    sent_analyzer = SentimentIntensityAnalyzer()\n    #Predict sentiment \n    return sent_analyzer.polarity_scores(text)['compound']\n\n# Predict sentiment of a given text\ntext = \"This is an amazing movie!\"\nsentiment = predict_sentiment(text)\nif sentiment >= 0.5: \n   print('Positive') \nelif sentiment == 0.0: \n   print('Neutral')\nelse: \n   print('Negative')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm for predicting the sentiment of a text using Python.\n\n### Input:\n\n\n### Output:\nimport nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef predict_sentiment(text):\n    #Download required NLTK data\n    nltk.download('vader_lexicon')\n    #Create sentiment analyzer object \n    sent_analyzer = SentimentIntensityAnalyzer()\n    #Predict sentiment \n    return sent_analyzer.polarity_scores(text)['compound']\n\n# Predict sentiment of a given text\ntext = \"This is an amazing movie!\"\nsentiment = predict_sentiment(text)\nif sentiment >= 0.5: \n   print('Positive') \nelif sentiment == 0.0: \n   print('Neutral')\nelse: \n   print('Negative')"}
{"instruction": "Write a Python program to check if the input is an armstrong number or not.", "input": "", "output": "# Python program to check Armstrong numbers\n\n# Function to check armstrong numbers\ndef isArmstrong(n): \n    # Initialize sum\n    sum = 0 \n  \n    # Find the sum of the cube of each digit\n    temp = n \n    while temp > 0: \n        digit = temp % 10 \n        sum += digit ** 3 \n        temp //= 10 \n  \n    # Return True if n is equal to the sum\n    if n == sum: \n        return True \n    else: \n        return False \n  \n# Driver program \nn = int(input(\"Input a number to check if it is an Armstrong number: \")) \nif isArmstrong(n): \n    print(\"Yes\") \nelse: \n    print(\"No\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if the input is an armstrong number or not.\n\n### Input:\n\n\n### Output:\n# Python program to check Armstrong numbers\n\n# Function to check armstrong numbers\ndef isArmstrong(n): \n    # Initialize sum\n    sum = 0 \n  \n    # Find the sum of the cube of each digit\n    temp = n \n    while temp > 0: \n        digit = temp % 10 \n        sum += digit ** 3 \n        temp //= 10 \n  \n    # Return True if n is equal to the sum\n    if n == sum: \n        return True \n    else: \n        return False \n  \n# Driver program \nn = int(input(\"Input a number to check if it is an Armstrong number: \")) \nif isArmstrong(n): \n    print(\"Yes\") \nelse: \n    print(\"No\")"}
{"instruction": "Create a Python program that generates a crossword puzzle with random words", "input": "", "output": "\"\"\"\nCreate a Python program that generates a crossword puzzle with random words\n\"\"\"\nimport string\nimport random\n\ndef generate_crossword():\n    # Generate a 10x10 2D array\n    puzzle = [['_' for i in range(10)] for j in range(10)]\n    \n    characters = string.ascii_uppercase + string.ascii_lowercase\n    # Populate the array with random letters\n    for i in range(10):\n        for j in range(10):\n            puzzle[i][j] = random.choice(characters)\n    \n    # Check the random letters and replace them with words where possible\n    \n    \n    # Return the puzzle\n    return puzzle\n\nif __name__ == '__main__':\n    generate_crossword()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that generates a crossword puzzle with random words\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python program that generates a crossword puzzle with random words\n\"\"\"\nimport string\nimport random\n\ndef generate_crossword():\n    # Generate a 10x10 2D array\n    puzzle = [['_' for i in range(10)] for j in range(10)]\n    \n    characters = string.ascii_uppercase + string.ascii_lowercase\n    # Populate the array with random letters\n    for i in range(10):\n        for j in range(10):\n            puzzle[i][j] = random.choice(characters)\n    \n    # Check the random letters and replace them with words where possible\n    \n    \n    # Return the puzzle\n    return puzzle\n\nif __name__ == '__main__':\n    generate_crossword()"}
{"instruction": "Implement a gradient descent algorithm for a classification task in Python.", "input": "", "output": "def grad_descent_classifier(input_data, weights, learning_rate):\n \n    # finding the gradient of our weights w.r.t to cost function\n    N = len(input_data)\n    grad = np.zeros(weights.shape)\n \n    error = 0\n    # looping through each training datapoint\n    for i in range(N):\n        x = input_data[i]\n        y = input_data[i][-1]\n \n        # calculating the error\n        error += (np.dot(x, weights)-y)**2\n \n        # update grad\n        for j in range(len(x)):\n            grad[j] += -(2/N)*(y-np.dot(x,weights))*x[j]\n \n    # updating the weights\n    weights = weights - learning_rate*grad\n \n    # return the weights\n    return weights", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a gradient descent algorithm for a classification task in Python.\n\n### Input:\n\n\n### Output:\ndef grad_descent_classifier(input_data, weights, learning_rate):\n \n    # finding the gradient of our weights w.r.t to cost function\n    N = len(input_data)\n    grad = np.zeros(weights.shape)\n \n    error = 0\n    # looping through each training datapoint\n    for i in range(N):\n        x = input_data[i]\n        y = input_data[i][-1]\n \n        # calculating the error\n        error += (np.dot(x, weights)-y)**2\n \n        # update grad\n        for j in range(len(x)):\n            grad[j] += -(2/N)*(y-np.dot(x,weights))*x[j]\n \n    # updating the weights\n    weights = weights - learning_rate*grad\n \n    # return the weights\n    return weights"}
{"instruction": "Create a Python program to sort a given list using the merge sort algorithm", "input": "", "output": "def merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)//2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a given list using the merge sort algorithm\n\n### Input:\n\n\n### Output:\ndef merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)//2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1"}
{"instruction": "Design a class in Python to Implement Linked List using Doubly Linked List.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\ndef push(self, new_data):\n    new_node = Node(new_data)\n    new_node.next = self.head \n \n    if self.head is not None:\n        self.head.prev = new_node \n \n    self.head = new_node \n \ndef insertAfter(self, prev_node, new_data):\n \n    if prev_node is None:\n        print \"the given previous node must inLinked List.\"\n        return\n \n    new_node = Node(new_data)\n    new_node.next = prev_node.next\n    prev_node.next = new_node\n    new_node.prev = prev_node\n \n    if new_node.next is not None:\n        new_node.next.prev = new_node", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to Implement Linked List using Doubly Linked List.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\ndef push(self, new_data):\n    new_node = Node(new_data)\n    new_node.next = self.head \n \n    if self.head is not None:\n        self.head.prev = new_node \n \n    self.head = new_node \n \ndef insertAfter(self, prev_node, new_data):\n \n    if prev_node is None:\n        print \"the given previous node must inLinked List.\"\n        return\n \n    new_node = Node(new_data)\n    new_node.next = prev_node.next\n    prev_node.next = new_node\n    new_node.prev = prev_node\n \n    if new_node.next is not None:\n        new_node.next.prev = new_node"}
{"instruction": "Propose an algorithm to decrease execution time of a Python program by 20%.", "input": "", "output": "One of the best ways to decrease the execution time of a Python program is to use the following technique.\n\n1. Utilize the built-in functions instead of writing your own code.\n2. Eliminate loops that can be avoided by using the built-in functions.\n3. Utilize data structures and algorithms to optimize the program.\n4. Utilize asynchronous programming to reduce the execution time.\n5. Look into alternative libraries that provide better performance.\n6. Profile the code to identify inefficient parts and optimize them.\n7. Utilize caching and memoization techniques to speed up the computation.\n8. Reduce the latency of IO operations.\n9. Optimize network and database queries.\n10. Utilize multiprocessing or multithreading to fully utilize the available resources.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPropose an algorithm to decrease execution time of a Python program by 20%.\n\n### Input:\n\n\n### Output:\nOne of the best ways to decrease the execution time of a Python program is to use the following technique.\n\n1. Utilize the built-in functions instead of writing your own code.\n2. Eliminate loops that can be avoided by using the built-in functions.\n3. Utilize data structures and algorithms to optimize the program.\n4. Utilize asynchronous programming to reduce the execution time.\n5. Look into alternative libraries that provide better performance.\n6. Profile the code to identify inefficient parts and optimize them.\n7. Utilize caching and memoization techniques to speed up the computation.\n8. Reduce the latency of IO operations.\n9. Optimize network and database queries.\n10. Utilize multiprocessing or multithreading to fully utilize the available resources."}
{"instruction": "Implement an algorithm in Python to convert a binary tree to a linked list.", "input": "", "output": "def binary_tree_to_linked_list(root): \n    if root is None:\n        return None\n    \n    linked_list_head, linked_list_tail = None, None \n  \n    queue = [root] \n  \n    while queue: \n        node = queue.pop(0)\n    \n        #If linked_list_head element is None, insert node to it \n        if linked_list_head is None: \n            linked_list_head = node; \n            linked_list_tail = node \n  \n        # Insert all the child nodes to the queue \n        if node.left: \n            queue.append(node.left) \n        if node.right: \n            queue.append(node.right) \n\n        # Link the node with the previous  \n        # node created in linked list \n        if linked_list_tail: \n            linked_list_tail.next = node \n            linked_list_tail = node \n  \n    return linked_list_head", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to convert a binary tree to a linked list.\n\n### Input:\n\n\n### Output:\ndef binary_tree_to_linked_list(root): \n    if root is None:\n        return None\n    \n    linked_list_head, linked_list_tail = None, None \n  \n    queue = [root] \n  \n    while queue: \n        node = queue.pop(0)\n    \n        #If linked_list_head element is None, insert node to it \n        if linked_list_head is None: \n            linked_list_head = node; \n            linked_list_tail = node \n  \n        # Insert all the child nodes to the queue \n        if node.left: \n            queue.append(node.left) \n        if node.right: \n            queue.append(node.right) \n\n        # Link the node with the previous  \n        # node created in linked list \n        if linked_list_tail: \n            linked_list_tail.next = node \n            linked_list_tail = node \n  \n    return linked_list_head"}
{"instruction": "Write a Python program to illustrate an Object Oriented programming concept.", "input": "", "output": "# Example illustrating Object Oriented programming\n\nclass Employee:\n    def __init__(self, first_name, last_name, salary):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.salary = salary\n\n    def get_full_name(self):\n        return self.first_name + \" \" + self.last_name\n\nif __name__ == \"__main__\":\n    emp1 = Employee(\"John\", \"Doe\", 10000)\n    print(\"Full name:\", emp1.get_full_name())\n    print(\"Salary:\", emp1.salary)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to illustrate an Object Oriented programming concept.\n\n### Input:\n\n\n### Output:\n# Example illustrating Object Oriented programming\n\nclass Employee:\n    def __init__(self, first_name, last_name, salary):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.salary = salary\n\n    def get_full_name(self):\n        return self.first_name + \" \" + self.last_name\n\nif __name__ == \"__main__\":\n    emp1 = Employee(\"John\", \"Doe\", 10000)\n    print(\"Full name:\", emp1.get_full_name())\n    print(\"Salary:\", emp1.salary)"}
{"instruction": "Write a Python script which can print out all prime numbers between 0 and n.", "input": "", "output": "def print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script which can print out all prime numbers between 0 and n.\n\n### Input:\n\n\n### Output:\ndef print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True"}
{"instruction": "Build an artificial neural network in Python to predict the price of a house", "input": "", "output": "import numpy as np\nfrom tensorflow.keras import models, layers\n\n#create basic model\ndef create_model():\n    model = models.Sequential()\n    model.add(layers.Dense(128, activation = 'relu', input_dim = 18))\n    model.add(layers.Dense(64, activation = 'relu'))\n    model.add(layers.Dense(32, activation = 'relu'))\n    model.add(layers.Dense(1))\n    model.compile(optimizer = 'rmsprop', loss = 'mse', metrics=['mae'])\n    return model\n\n#train model\nmodel = create_model()\nmodel.fit(X_train, y_train, epochs = 100, batch_size = 32)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an artificial neural network in Python to predict the price of a house\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom tensorflow.keras import models, layers\n\n#create basic model\ndef create_model():\n    model = models.Sequential()\n    model.add(layers.Dense(128, activation = 'relu', input_dim = 18))\n    model.add(layers.Dense(64, activation = 'relu'))\n    model.add(layers.Dense(32, activation = 'relu'))\n    model.add(layers.Dense(1))\n    model.compile(optimizer = 'rmsprop', loss = 'mse', metrics=['mae'])\n    return model\n\n#train model\nmodel = create_model()\nmodel.fit(X_train, y_train, epochs = 100, batch_size = 32)"}
{"instruction": "Create an API endpoint in Python to delete a record from a MongoDB database.", "input": "", "output": "@app.route('/delete-record', methods=['DELETE'])\ndef delete_record():\n    db = client.your_database  # specify the correct database\n    collection = db.your_collection  # specify the correct collection\n\n    # get the required ID from the request\n    id = request.args.get('id')\n\n    # perform the deletion\n    result = collection.delete_one({'_id': ObjectId(id)})\n\n    if result.deleted_count == 0:\n        # return an error if the record was not found\n        return {'message': 'Record not found'}, 404\n    else:\n        return {'message': 'Record deleted'}, 200", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in Python to delete a record from a MongoDB database.\n\n### Input:\n\n\n### Output:\n@app.route('/delete-record', methods=['DELETE'])\ndef delete_record():\n    db = client.your_database  # specify the correct database\n    collection = db.your_collection  # specify the correct collection\n\n    # get the required ID from the request\n    id = request.args.get('id')\n\n    # perform the deletion\n    result = collection.delete_one({'_id': ObjectId(id)})\n\n    if result.deleted_count == 0:\n        # return an error if the record was not found\n        return {'message': 'Record not found'}, 404\n    else:\n        return {'message': 'Record deleted'}, 200"}
{"instruction": "Design a REST API in Python which will store and retrieve customer messages.", "input": "", "output": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nmessages = []  # list to store customer messages\n\n@app.route('/messages', methods=['POST', 'GET'])\ndef manage_messages():\n    '''API endpoint to store and retrieve customer messages'''\n    if request.method == 'POST':  # storing customer message\n        customer_message = request.get_json()\n        messages.append(customer_message)\n        return jsonify(message='Message successfully stored'), 200\n\n    elif request.method == 'GET':  # retrieving customer messages\n        return jsonify(messages=messages), 200", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a REST API in Python which will store and retrieve customer messages.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nmessages = []  # list to store customer messages\n\n@app.route('/messages', methods=['POST', 'GET'])\ndef manage_messages():\n    '''API endpoint to store and retrieve customer messages'''\n    if request.method == 'POST':  # storing customer message\n        customer_message = request.get_json()\n        messages.append(customer_message)\n        return jsonify(message='Message successfully stored'), 200\n\n    elif request.method == 'GET':  # retrieving customer messages\n        return jsonify(messages=messages), 200"}
{"instruction": "Write a Python program to generate a JSON string of five popular dog breeds.", "input": "", "output": "import json\n\ndog_breeds = {\n  \"Labrador Retriever\": {\n    \"Origin\": \"United Kingdom\",\n    \"Temperament\": \"Friendly\",\n    \"Life Expectancy\": \"12-13 years\"\n  },\n  \"French Bulldog\": {\n    \"Origin\": \"France\",\n    \"Temperament\": \"Adaptable\",\n    \"Life Expectancy\": \"10-12 years\"\n  },\n  \"Siberian Husky\": {\n    \"Origin\": \"Russia\",\n    \"Temperament\": \"Outgoing, Cheerful\",\n    \"Life Expectancy\": \"12-14 years\"\n  },\n  \"Pug\": {\n    \"Origin\": \"China\",\n    \"Temperament\": \"Playful, Charming\",\n    \"Life Expectancy\": \"12-15 years\"\n  },\n  \"Bulldog\": {\n    \"Origin\": \"England\",\n    \"Temperament\": \"Friendly\",\n    \"Life Expectancy\": \"10-12 years\"\n  }\n}\n\nprint(json.dumps(dog_breeds, indent=4))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a JSON string of five popular dog breeds.\n\n### Input:\n\n\n### Output:\nimport json\n\ndog_breeds = {\n  \"Labrador Retriever\": {\n    \"Origin\": \"United Kingdom\",\n    \"Temperament\": \"Friendly\",\n    \"Life Expectancy\": \"12-13 years\"\n  },\n  \"French Bulldog\": {\n    \"Origin\": \"France\",\n    \"Temperament\": \"Adaptable\",\n    \"Life Expectancy\": \"10-12 years\"\n  },\n  \"Siberian Husky\": {\n    \"Origin\": \"Russia\",\n    \"Temperament\": \"Outgoing, Cheerful\",\n    \"Life Expectancy\": \"12-14 years\"\n  },\n  \"Pug\": {\n    \"Origin\": \"China\",\n    \"Temperament\": \"Playful, Charming\",\n    \"Life Expectancy\": \"12-15 years\"\n  },\n  \"Bulldog\": {\n    \"Origin\": \"England\",\n    \"Temperament\": \"Friendly\",\n    \"Life Expectancy\": \"10-12 years\"\n  }\n}\n\nprint(json.dumps(dog_breeds, indent=4))"}
{"instruction": "Create an AI game in Python for the user to guess a number between 1 and 10.", "input": "", "output": "import random\n\n# set the maximum number of guess\nmax_guesses = 5\n\n# generate a random number\ntarget_num = random.randint(1, 10)\n\n# initialize number of guesses\nnum_guesses = 0\n\n# prompt user for a guess\nwhile num_guesses < max_guesses:\n    user_guess = int(input(\"Guess a number between 1 and 10: \"))\n    \n    # check if user guess is correct\n    if user_guess == target_num:\n        print(\"You have guessed the number correctly\")\n        break\n    # check if user guess is greater or lesser\n    elif user_guess > target_num:\n        print(\"Your guess is greater than the target number\")\n    else:\n        print(\"Your guess is lesser than the target number\")\n    num_guesses += 1\n\nif num_guesses == max_guesses:\n    print(\"You have reached your maximum number of guesses\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI game in Python for the user to guess a number between 1 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\n# set the maximum number of guess\nmax_guesses = 5\n\n# generate a random number\ntarget_num = random.randint(1, 10)\n\n# initialize number of guesses\nnum_guesses = 0\n\n# prompt user for a guess\nwhile num_guesses < max_guesses:\n    user_guess = int(input(\"Guess a number between 1 and 10: \"))\n    \n    # check if user guess is correct\n    if user_guess == target_num:\n        print(\"You have guessed the number correctly\")\n        break\n    # check if user guess is greater or lesser\n    elif user_guess > target_num:\n        print(\"Your guess is greater than the target number\")\n    else:\n        print(\"Your guess is lesser than the target number\")\n    num_guesses += 1\n\nif num_guesses == max_guesses:\n    print(\"You have reached your maximum number of guesses\")"}
{"instruction": "Generate a dynamic temperature conversion program with user input in Python.", "input": "", "output": "\"\"\"\nA dynamic temperature conversion program with user input in Python.\n\"\"\"\n\ndef convert_temperature():\n    # Prompt user for temperature to convert.\n    temp = int(input('Enter temperature to convert: '))\n\n    # Prompt for unit to convert from and to.\n    unit_from = input('Enter unit to convert from (Celsius or Fahrenheit): ')\n    unit_to = input('Enter unit to convert to (Celsius or Fahrenheit): ')\n\n    # Convert the temperature to specified unit.\n    if unit_from == 'Celsius' and unit_to == 'Fahrenheit':\n        converted_temp = (temp * 9/5) + 32\n    elif unit_from == 'Fahrenheit' and unit_to == 'Celsius':\n        converted_temp = (temp - 32) * 5/9\n    else:\n        converted_temp = temp\n\n    # Display the result.\n    print('The converted temperature is {} {}.'.format(converted_temp, unit_to))\n\nif __name__ == '__main__':\n    convert_temperature()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a dynamic temperature conversion program with user input in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nA dynamic temperature conversion program with user input in Python.\n\"\"\"\n\ndef convert_temperature():\n    # Prompt user for temperature to convert.\n    temp = int(input('Enter temperature to convert: '))\n\n    # Prompt for unit to convert from and to.\n    unit_from = input('Enter unit to convert from (Celsius or Fahrenheit): ')\n    unit_to = input('Enter unit to convert to (Celsius or Fahrenheit): ')\n\n    # Convert the temperature to specified unit.\n    if unit_from == 'Celsius' and unit_to == 'Fahrenheit':\n        converted_temp = (temp * 9/5) + 32\n    elif unit_from == 'Fahrenheit' and unit_to == 'Celsius':\n        converted_temp = (temp - 32) * 5/9\n    else:\n        converted_temp = temp\n\n    # Display the result.\n    print('The converted temperature is {} {}.'.format(converted_temp, unit_to))\n\nif __name__ == '__main__':\n    convert_temperature()"}
{"instruction": "Design a web application to  display the search results for sports listings.", "input": "", "output": "// Step 1: Design the database schema\n/*\nThe database schema would include tables such as Users, Sports, Venues, Events, etc and the fields would be chosen accordingly like user id, sports name, venue name, event start/end time, etc.\n*/\n\n// Step 2: Design and develop the application\n/*\nThe application would be a web application consisting of back-end and front-end components. The back-end would involve a server-side scripting language such as PHP or Python and the front-end would involve HTML/CSS and JavaScript. The application would interact with the database to retrieve the search results.\n*/\n\n// Step 3: Design the user interface\n/*\nThe user interface of the application would involve a search box for users to enter relevant search terms. The results would be displayed in a tabular format with details such as sport name, venue name, start/end times, etc.\n*/", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application to  display the search results for sports listings.\n\n### Input:\n\n\n### Output:\n// Step 1: Design the database schema\n/*\nThe database schema would include tables such as Users, Sports, Venues, Events, etc and the fields would be chosen accordingly like user id, sports name, venue name, event start/end time, etc.\n*/\n\n// Step 2: Design and develop the application\n/*\nThe application would be a web application consisting of back-end and front-end components. The back-end would involve a server-side scripting language such as PHP or Python and the front-end would involve HTML/CSS and JavaScript. The application would interact with the database to retrieve the search results.\n*/\n\n// Step 3: Design the user interface\n/*\nThe user interface of the application would involve a search box for users to enter relevant search terms. The results would be displayed in a tabular format with details such as sport name, venue name, start/end times, etc.\n*/"}
{"instruction": "Create a python — django application that allows user to register and login.", "input": "", "output": "#!/usr/bin/env python3\n\nimport os\n\nfrom django.contrib.auth.hashers import make_password\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Create your views here.\ndef register(request):\n    if request.method == 'POST':\n        user_name = request.POST['username']\n        password = request.POST['password']\n        confirm_password = request.POST['confirm_password']\n\n        if password != confirm_password:\n            return HttpResponse('Passwords do not match')\n\n        users = User.objects.all()\n        if user_name in users:\n            return HttpResponse('Username already taken')\n\n        # Store hashed password\n        password = make_password(password)\n        user = User.objects.create(username=user_name, password=password)\n        user.save()\n        return render(request, 'user_login.html')\n\n    else:\n        return render(request, 'user_registration.html')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python — django application that allows user to register and login.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python3\n\nimport os\n\nfrom django.contrib.auth.hashers import make_password\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Create your views here.\ndef register(request):\n    if request.method == 'POST':\n        user_name = request.POST['username']\n        password = request.POST['password']\n        confirm_password = request.POST['confirm_password']\n\n        if password != confirm_password:\n            return HttpResponse('Passwords do not match')\n\n        users = User.objects.all()\n        if user_name in users:\n            return HttpResponse('Username already taken')\n\n        # Store hashed password\n        password = make_password(password)\n        user = User.objects.create(username=user_name, password=password)\n        user.save()\n        return render(request, 'user_login.html')\n\n    else:\n        return render(request, 'user_registration.html')"}
{"instruction": "Develop a neural network model in Python to recognize a hand-written number.", "input": "", "output": "\"\"\"\nDevelop a neural network model in Python to recognize a hand-written number\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n#load the mnist dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n#discretize the images by flattening them\nx_train = x_train.reshape(-1, 784) \nx_test = x_test.reshape(-1, 784)\n\n#normalize the pixel values from 0 to 1\nx_train = x_train/255.0\nx_test = x_test/255.0\n\n#create a neural network model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(512, activation='relu', input_shape= (784,)))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n#compile and train the model\nmodel.compile(\n    loss='sparse_categorical_crossentropy', metrics=['accuracy']\n)\nmodel.fit(x_train, y_train,  epochs = 10)\n\n#evaluate the model\nmodel.evaluate(x_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a neural network model in Python to recognize a hand-written number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDevelop a neural network model in Python to recognize a hand-written number\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n#load the mnist dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n#discretize the images by flattening them\nx_train = x_train.reshape(-1, 784) \nx_test = x_test.reshape(-1, 784)\n\n#normalize the pixel values from 0 to 1\nx_train = x_train/255.0\nx_test = x_test/255.0\n\n#create a neural network model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(512, activation='relu', input_shape= (784,)))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n#compile and train the model\nmodel.compile(\n    loss='sparse_categorical_crossentropy', metrics=['accuracy']\n)\nmodel.fit(x_train, y_train,  epochs = 10)\n\n#evaluate the model\nmodel.evaluate(x_test, y_test)"}
{"instruction": "Write a neural network in Python to classify handwritten digits from 0 to 9.", "input": "", "output": "import keras \nfrom keras.datasets import mnist \nfrom keras.models import Model \nfrom keras.layers import Input, Dense, Dropout, Flatten \nfrom keras.layers import Conv2D, MaxPooling2D \n\ndef create_model():\n    # Define the input layer\n    inputs = Input(shape=(28, 28, 1))\n    \n    # 1st convolutional layer\n    conv = Conv2D(64, kernel_size=3, activation='relu')(inputs) \n    # 2nd convolutional layer \n    conv = Conv2D(32, kernel_size=3, activation='relu')(conv) \n    # Max pooling layer \n    pool = MaxPooling2D(pool_size=(2, 2))(conv) \n    # Dropout layer \n    drop = Dropout(0.25)(pool) \n    # Flatten layer \n    flatten = Flatten()(drop) \n    # Dense layer \n    dense = Dense(128, activation='relu')(flatten) \n    # Output layer \n    outputs = Dense(10, activation='softmax')(dense) \n    \n    # Create a model and compile it \n    model = Model(inputs, outputs) \n    model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\n    \n    return model", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a neural network in Python to classify handwritten digits from 0 to 9.\n\n### Input:\n\n\n### Output:\nimport keras \nfrom keras.datasets import mnist \nfrom keras.models import Model \nfrom keras.layers import Input, Dense, Dropout, Flatten \nfrom keras.layers import Conv2D, MaxPooling2D \n\ndef create_model():\n    # Define the input layer\n    inputs = Input(shape=(28, 28, 1))\n    \n    # 1st convolutional layer\n    conv = Conv2D(64, kernel_size=3, activation='relu')(inputs) \n    # 2nd convolutional layer \n    conv = Conv2D(32, kernel_size=3, activation='relu')(conv) \n    # Max pooling layer \n    pool = MaxPooling2D(pool_size=(2, 2))(conv) \n    # Dropout layer \n    drop = Dropout(0.25)(pool) \n    # Flatten layer \n    flatten = Flatten()(drop) \n    # Dense layer \n    dense = Dense(128, activation='relu')(flatten) \n    # Output layer \n    outputs = Dense(10, activation='softmax')(dense) \n    \n    # Create a model and compile it \n    model = Model(inputs, outputs) \n    model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\n    \n    return model"}
{"instruction": "Generate a Neural Network in Python to do binary classification on a dataset", "input": "", "output": "# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Neural Network in Python to do binary classification on a dataset\n\n### Input:\n\n\n### Output:\n# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result))"}
{"instruction": "Construct a web-application with HTML and JavaScript to display your resume.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My Resume</title>\n  <style>\n    body { font-family: sans-serif; }\n    #resume_container {\n      width: 70%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n      box-shadow: 3px 3px 8px #ccc;\n    }\n    .resume_item {\n      padding: 15px 0;\n      border-bottom: 1px solid #ccc;\n    }\n  </style>\n</head>\n<body>\n\n<div id=\"resume_container\">\n  <div class=\"resume_item\">\n   <h1>John Doe</h1>\n   <h2>Software Developer</h2>\n  </div>\n \n  <div class=\"resume_item\">\n   <h3>Education</h3>\n   <ul>\n    <li>University of XYZ, 2018 - 2021</li>\n   </ul>\n  </div>\n\n  <div class=\"resume_item\">\n   <h3>Professional Experience</h3>\n   <ul>\n    <li>Company ABC, Software Developer, 2020 - Present</li>\n    <li>Company XYZ, Software Developer Intern, 2019 - 2020</li>\n   </ul>\n  </div>\n \n  <div class=\"resume_item\">\n   <h3>Skills &amp; Tools</h3>\n   <ul>\n    <li>Python, SQL, JavaScript</li>\n    <li>HTML/CSS</li>\n   </ul>\n  </div>\n\n  <div class=\"resume_item\">\n   <h3>Achievements</h3>\n   <ul>\n    <li>Awarded \"Software Developer of the Year\" in 20", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web-application with HTML and JavaScript to display your resume.\n\n### Input:\n\n\n### Output:\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Resume</title>\n  <style>\n    body { font-family: sans-serif; }\n    #resume_container {\n      width: 70%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n      box-shadow: 3px 3px 8px #ccc;\n    }\n    .resume_item {\n      padding: 15px 0;\n      border-bottom: 1px solid #ccc;\n    }\n  </style>\n</head>\n<body>\n\n<div id=\"resume_container\">\n  <div class=\"resume_item\">\n   <h1>John Doe</h1>\n   <h2>Software Developer</h2>\n  </div>\n \n  <div class=\"resume_item\">\n   <h3>Education</h3>\n   <ul>\n    <li>University of XYZ, 2018 - 2021</li>\n   </ul>\n  </div>\n\n  <div class=\"resume_item\">\n   <h3>Professional Experience</h3>\n   <ul>\n    <li>Company ABC, Software Developer, 2020 - Present</li>\n    <li>Company XYZ, Software Developer Intern, 2019 - 2020</li>\n   </ul>\n  </div>\n \n  <div class=\"resume_item\">\n   <h3>Skills &amp; Tools</h3>\n   <ul>\n    <li>Python, SQL, JavaScript</li>\n    <li>HTML/CSS</li>\n   </ul>\n  </div>\n\n  <div class=\"resume_item\">\n   <h3>Achievements</h3>\n   <ul>\n    <li>Awarded \"Software Developer of the Year\" in 20"}
{"instruction": "Find the shortest path between two nodes using the A* algorithm with Python.", "input": "", "output": "def astar(start, goal):\n    # open list for all nodes to consider    \n    open_list = []\n    # closed list for already visited nodes\n    closed_list = []\n    # initializing start values\n    current_node = start\n    current_node.g = 0\n    current_node.h = 0 # heuristic = 0\n\n    # adding start node to open list\n    open_list.append(start)\n\n    # loop until goal node is found     \n    while len(open_list) != 0:\n        # get lowest h value (f = g + h)\n        current_node = get_lowest_h_node(open_list)\n        if current_node == goal:\n            # found the shortest path and reconstruct the path to generate path\n            generate_path(current_node)\n            break\n        open_list.remove(current_node)\n        closed_list.append(current_node)\n\n        # generate children\n        children = generate_children(current_node)\n\n        # update node values\n        for child in children:\n            if child in closed_list:\n                continue\n            child.g = current_node.g + h\n            child.h = get_heuristic_value(child, goal)\n            child.parent_node = current_node\n            open_list.append(child)\n\n    return open_list", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the shortest path between two nodes using the A* algorithm with Python.\n\n### Input:\n\n\n### Output:\ndef astar(start, goal):\n    # open list for all nodes to consider    \n    open_list = []\n    # closed list for already visited nodes\n    closed_list = []\n    # initializing start values\n    current_node = start\n    current_node.g = 0\n    current_node.h = 0 # heuristic = 0\n\n    # adding start node to open list\n    open_list.append(start)\n\n    # loop until goal node is found     \n    while len(open_list) != 0:\n        # get lowest h value (f = g + h)\n        current_node = get_lowest_h_node(open_list)\n        if current_node == goal:\n            # found the shortest path and reconstruct the path to generate path\n            generate_path(current_node)\n            break\n        open_list.remove(current_node)\n        closed_list.append(current_node)\n\n        # generate children\n        children = generate_children(current_node)\n\n        # update node values\n        for child in children:\n            if child in closed_list:\n                continue\n            child.g = current_node.g + h\n            child.h = get_heuristic_value(child, goal)\n            child.parent_node = current_node\n            open_list.append(child)\n\n    return open_list"}
{"instruction": "Design a genetic algorithm in Python to maximize a given objective function.", "input": "", "output": "import random\n\ndef genetic_algorithm(objective_func, pop_size, max_iters, elitism_ratio):\n    population = [random.randint(0, 100) for _ in range(pop_size)]\n    \n    # Iterate through the generations\n    for _ in range(max_iters):\n        # Score the current population\n        population_scores = [objective_func(num) for num in population]\n        \n        # Select the best individuals and breed them\n        elite_length = int(elitism_ratio * pop_size)\n        elite_indices = sorted(range(len(population_scores)), key=lambda k: population_scores[k], reverse=True)[:elite_length]\n        elite_population = [population[i] for i in elite_indices]\n        parent_pool = [population_scores.index(score) for score in population_scores\n            if population_scores.index(score) not in elite_indices]\n        breed_length = pop_size - len(elite_indices)\n        breed_children = [gene_crossover(population[i], population[j]) for i, j in zip(random.sample(parent_pool, breed_length // 2), random.sample(parent_pool, breed_length // 2))] + elite_population\n        \n        # Apply mutation\n        for i in range(len(breed_children)):\n            child = gene_mutation(breed_children[i])\n            breed_children[i] = child\n            \n        population = breed_children\n    \n    return max(population_scores)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a genetic algorithm in Python to maximize a given objective function.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef genetic_algorithm(objective_func, pop_size, max_iters, elitism_ratio):\n    population = [random.randint(0, 100) for _ in range(pop_size)]\n    \n    # Iterate through the generations\n    for _ in range(max_iters):\n        # Score the current population\n        population_scores = [objective_func(num) for num in population]\n        \n        # Select the best individuals and breed them\n        elite_length = int(elitism_ratio * pop_size)\n        elite_indices = sorted(range(len(population_scores)), key=lambda k: population_scores[k], reverse=True)[:elite_length]\n        elite_population = [population[i] for i in elite_indices]\n        parent_pool = [population_scores.index(score) for score in population_scores\n            if population_scores.index(score) not in elite_indices]\n        breed_length = pop_size - len(elite_indices)\n        breed_children = [gene_crossover(population[i], population[j]) for i, j in zip(random.sample(parent_pool, breed_length // 2), random.sample(parent_pool, breed_length // 2))] + elite_population\n        \n        # Apply mutation\n        for i in range(len(breed_children)):\n            child = gene_mutation(breed_children[i])\n            breed_children[i] = child\n            \n        population = breed_children\n    \n    return max(population_scores)"}
{"instruction": "Create a python code to migrate databases between different server instances.", "input": "", "output": "import os\nimport subprocess\n\ndef migrate_database(host1, username1, password1, host2, username2, password2):\n    command_str = \"mysqldump -h '{host1}' -u '{username1}' -p{password1} \\\n            | mysql -h '{host2}' -u '{username2}' -p{password2}\"\n    os.system(command_str.format(host1 = host1, username1 = username1, password1 = password1,\n                                host2 = host2, username2 = username2, password2 = password2))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to migrate databases between different server instances.\n\n### Input:\n\n\n### Output:\nimport os\nimport subprocess\n\ndef migrate_database(host1, username1, password1, host2, username2, password2):\n    command_str = \"mysqldump -h '{host1}' -u '{username1}' -p{password1} \\\n            | mysql -h '{host2}' -u '{username2}' -p{password2}\"\n    os.system(command_str.format(host1 = host1, username1 = username1, password1 = password1,\n                                host2 = host2, username2 = username2, password2 = password2))"}
{"instruction": "Analyze the given dataset and construct a decision tree classifier in Python.", "input": "", "output": "from sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\nX, y = dataset\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Train Decision Tree classifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)\n\n# Make predictions \npred = clf.predict(X_test)\n\n# Evaluate accuracy \nacc = accuracy_score(y_test, pred)\nprint('Accuracy: {:.2f}%'.format(acc*100))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze the given dataset and construct a decision tree classifier in Python.\n\n### Input:\n\n\n### Output:\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\nX, y = dataset\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Train Decision Tree classifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)\n\n# Make predictions \npred = clf.predict(X_test)\n\n# Evaluate accuracy \nacc = accuracy_score(y_test, pred)\nprint('Accuracy: {:.2f}%'.format(acc*100))"}
{"instruction": "Identify the differences between a static method and a class method in Python", "input": "", "output": "A static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. \n\nA class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the differences between a static method and a class method in Python\n\n### Input:\n\n\n### Output:\nA static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. \n\nA class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on."}
{"instruction": "Create a program that takes a user's input and checks if the number is prime.", "input": "", "output": "# Python program to check if user's \n# input is prime or not \n\n# function to check prime number\ndef checkPrime(num):\n    # Looping from 2 to n-1\n    for i in range(2, num):\n        # Checking if there is a remainder\n        if (num % i) == 0:\n            print(num, \" is not a prime number\")\n            break\n    else:\n        print(num, \" is a prime number\")\n\n# Taking input from user\nnum = int(input(\"Enter a number to check if it is prime: \"))\n\n# Check the number if prime or not\ncheckPrime(num)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that takes a user's input and checks if the number is prime.\n\n### Input:\n\n\n### Output:\n# Python program to check if user's \n# input is prime or not \n\n# function to check prime number\ndef checkPrime(num):\n    # Looping from 2 to n-1\n    for i in range(2, num):\n        # Checking if there is a remainder\n        if (num % i) == 0:\n            print(num, \" is not a prime number\")\n            break\n    else:\n        print(num, \" is a prime number\")\n\n# Taking input from user\nnum = int(input(\"Enter a number to check if it is prime: \"))\n\n# Check the number if prime or not\ncheckPrime(num)"}
{"instruction": "Generate an artificial neural network algorithm in Python for classification.", "input": "", "output": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Generate data\nX, y = np.random.rand(1000, 10), np.random.randint(2, size = (1000, 1))\n\n# Define model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=10, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit model\nmodel.fit(X, y, epochs=20, batch_size=32)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an artificial neural network algorithm in Python for classification.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Generate data\nX, y = np.random.rand(1000, 10), np.random.randint(2, size = (1000, 1))\n\n# Define model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=10, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit model\nmodel.fit(X, y, epochs=20, batch_size=32)"}
{"instruction": "Write a Python program to simulate a coin toss and count the number of heads.", "input": "", "output": "import random\n \n# Function to simulate coin toss\ndef coin_toss(num_tosses):\n    head_count = 0\n    tail_count = 0\n    for _ in range(num_tosses):\n        random_choice = random.choice([1, 0])\n        if random_choice == 1:\n            head_count += 1\n            print(\"Heads\")\n        else:\n            tail_count += 1\n            print(\"Tails\")\n    return head_count\n \n# Driver code\nnum_tosses = int(input(\"Enter the number of coin tosses: \"))\nhead_count = coin_toss(num_tosses)\nprint(\"Number of heads:\", head_count)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a coin toss and count the number of heads.\n\n### Input:\n\n\n### Output:\nimport random\n \n# Function to simulate coin toss\ndef coin_toss(num_tosses):\n    head_count = 0\n    tail_count = 0\n    for _ in range(num_tosses):\n        random_choice = random.choice([1, 0])\n        if random_choice == 1:\n            head_count += 1\n            print(\"Heads\")\n        else:\n            tail_count += 1\n            print(\"Tails\")\n    return head_count\n \n# Driver code\nnum_tosses = int(input(\"Enter the number of coin tosses: \"))\nhead_count = coin_toss(num_tosses)\nprint(\"Number of heads:\", head_count)"}
{"instruction": "Write a web scraper in Python to gather the content of all pages of a website", "input": "", "output": "def scrape_website(url):\n    page= requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    for link in soup.find_all('a'):\n        link_url= link.get('href')\n        if link_url.startswith('/'): \n            link_url= url + link_url # form absolute url\n        if '#' not in link_url and link_url.startswith(url): # check for navigation and fragment\n            page_to_get = requests.get(link_url)\n            soup = BeautifulSoup(page_to_get.content, 'html.parser')\n            # do something with the data", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python to gather the content of all pages of a website\n\n### Input:\n\n\n### Output:\ndef scrape_website(url):\n    page= requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    for link in soup.find_all('a'):\n        link_url= link.get('href')\n        if link_url.startswith('/'): \n            link_url= url + link_url # form absolute url\n        if '#' not in link_url and link_url.startswith(url): # check for navigation and fragment\n            page_to_get = requests.get(link_url)\n            soup = BeautifulSoup(page_to_get.content, 'html.parser')\n            # do something with the data"}
{"instruction": "Design a python function that finds the closest palindrome to a given number.", "input": "", "output": "def findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python function that finds the closest palindrome to a given number.\n\n### Input:\n\n\n### Output:\ndef findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0]"}
{"instruction": "Develop a function in Python to calculate the maximum depth of a binary tree.", "input": "", "output": "\"\"\" \nFunction to calculate the maximum depth of a binary tree \n\"\"\" \n\nclass Node: \n    def __init__(self, val): \n        self.val = val \n        self.left = None\n        self.right = None\n\ndef calculate_depth(root): \n    if root is None: \n        return 0 \n    return 1 + max(calculate_depth(root.left), calculate_depth(root.right))\n\n# Driver Code \nif __name__ == '__main__': \n    root = Node(1) \n    root.left = Node(2) \n    root.right = Node(3) \n    root.left.left = Node(4) \n    root.left.right = Node(5) \n  \n    print(\"Maximum Depth of binary tree is\", calculate_depth(root))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to calculate the maximum depth of a binary tree.\n\n### Input:\n\n\n### Output:\n\"\"\" \nFunction to calculate the maximum depth of a binary tree \n\"\"\" \n\nclass Node: \n    def __init__(self, val): \n        self.val = val \n        self.left = None\n        self.right = None\n\ndef calculate_depth(root): \n    if root is None: \n        return 0 \n    return 1 + max(calculate_depth(root.left), calculate_depth(root.right))\n\n# Driver Code \nif __name__ == '__main__': \n    root = Node(1) \n    root.left = Node(2) \n    root.right = Node(3) \n    root.left.left = Node(4) \n    root.left.right = Node(5) \n  \n    print(\"Maximum Depth of binary tree is\", calculate_depth(root))"}
{"instruction": "Design a Python program to print the list of prime numbers between 1 and 100.", "input": "", "output": "# Create a list of prime numbers between 1 and 100\n\ndef prime_nums():\n    lst = [] # declare empty list\n    # Iterate through the numbers from 2 to 100\n    for nums in range(2, 101):\n        for i in range(2, nums//2+1):\n            # If any number is divisible then skip that number\n            if (nums % i) == 0:\n                break\n        else:\n            # If iteration is successful then number is prime so add in the list\n            lst.append(nums)\n    return lst\n \n# Call the function\nprime_numbers = prime_nums()\n \n# Print the list of prime numbers\nprint(prime_numbers)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to print the list of prime numbers between 1 and 100.\n\n### Input:\n\n\n### Output:\n# Create a list of prime numbers between 1 and 100\n\ndef prime_nums():\n    lst = [] # declare empty list\n    # Iterate through the numbers from 2 to 100\n    for nums in range(2, 101):\n        for i in range(2, nums//2+1):\n            # If any number is divisible then skip that number\n            if (nums % i) == 0:\n                break\n        else:\n            # If iteration is successful then number is prime so add in the list\n            lst.append(nums)\n    return lst\n \n# Call the function\nprime_numbers = prime_nums()\n \n# Print the list of prime numbers\nprint(prime_numbers)"}
{"instruction": "Create an artificial neural network in Python to identify handwritten digits.", "input": "", "output": "import numpy as np\n\n# Create a neural network with an input layer with 784 nodes,\n# a hidden layer with 64 nodes, and an output layer with 10 nodes\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5)  \n\n# Test the model \nmodel.evaluate(X_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an artificial neural network in Python to identify handwritten digits.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Create a neural network with an input layer with 784 nodes,\n# a hidden layer with 64 nodes, and an output layer with 10 nodes\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5)  \n\n# Test the model \nmodel.evaluate(X_test, y_test)"}
{"instruction": "Design a script in Python to scrape photos and captions from a given website.", "input": "", "output": "\"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https://example.com/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a script in Python to scrape photos and captions from a given website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https://example.com/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n')"}
{"instruction": "Design a python code to build a web application using Django's MVC framework.", "input": "", "output": "# Importing essential libraries\nimport os\nimport sys\n \n# start a new Django project\nfrom django.core.management import execute_from_command_line\n \n# check the requirements.txt file to get the list of libraries \nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"my_app.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python code to build a web application using Django's MVC framework.\n\n### Input:\n\n\n### Output:\n# Importing essential libraries\nimport os\nimport sys\n \n# start a new Django project\nfrom django.core.management import execute_from_command_line\n \n# check the requirements.txt file to get the list of libraries \nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"my_app.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}
{"instruction": "Write a basic calculator program that can take in two values and an operator.", "input": "", "output": "#!/usr/bin/env python3\n\n# This program is a basic calculator that can take in two values and an operator\n\n# The corresponding operations when the operator input is given\noperations = {\n    \"+\": lambda x, y: x + y, \n    \"-\": lambda x, y: x - y, \n    \"*\": lambda x, y: x * y,\n    \"/\": lambda x, y: x / y\n}\n\n# Take in the values and operator from the user\nnum1 = int(input(\"Enter the first number: \"))\noperator = input(\"Enter the operator: \")\nnum2 = int(input(\"Enter the second number: \"))\n\n# Assert that the operator is valid\nassert operator in operations, f\"The given operator {operator} is not a valid operator\"\n\n# Calculate the result\nresult = operations[operator](num1, num2)\n\nprint(f\"Result: {num1} {operator} {num2} = {result}\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a basic calculator program that can take in two values and an operator.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python3\n\n# This program is a basic calculator that can take in two values and an operator\n\n# The corresponding operations when the operator input is given\noperations = {\n    \"+\": lambda x, y: x + y, \n    \"-\": lambda x, y: x - y, \n    \"*\": lambda x, y: x * y,\n    \"/\": lambda x, y: x / y\n}\n\n# Take in the values and operator from the user\nnum1 = int(input(\"Enter the first number: \"))\noperator = input(\"Enter the operator: \")\nnum2 = int(input(\"Enter the second number: \"))\n\n# Assert that the operator is valid\nassert operator in operations, f\"The given operator {operator} is not a valid operator\"\n\n# Calculate the result\nresult = operations[operator](num1, num2)\n\nprint(f\"Result: {num1} {operator} {num2} = {result}\")"}
{"instruction": "Create a python program to calculate the Mertens function over a given range.", "input": "", "output": "# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the Mertens function over a given range.\n\n### Input:\n\n\n### Output:\n# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)"}
{"instruction": "What is the most efficient way to implement a circular linked list in Python?", "input": "", "output": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass CircularLinkedList:\n def __init__(self):\n self.head = None\n\n def append(self, data):\n if not self.head:\n self.head = Node(data)\n self.head.next = self.head\n else:\n cur = self.head\n while cur.next != self.head:\n cur = cur.next\n\n new_node = Node(data)\n new_node.next = self.head\n cur.next = new_node\n \n def remove(self, key):\n cur = self.head\n prev = None\n while cur.next != self.head:\n if cur.data == key:\n if cur == self.head:\n prev.next = cur.next\n self.head = cur.next\n else:\n prev.next = cur.next\n return \n else:\n prev = cur.next\n cur = cur.next\n \n print(\"Element not found\")\n\ndef print_list(self):\n cur = self.head\n while cur:\n print(cur.data)\n cur = cur.next\n if cur == self.head:\n break", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the most efficient way to implement a circular linked list in Python?\n\n### Input:\n\n\n### Output:\nclass Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass CircularLinkedList:\n def __init__(self):\n self.head = None\n\n def append(self, data):\n if not self.head:\n self.head = Node(data)\n self.head.next = self.head\n else:\n cur = self.head\n while cur.next != self.head:\n cur = cur.next\n\n new_node = Node(data)\n new_node.next = self.head\n cur.next = new_node\n \n def remove(self, key):\n cur = self.head\n prev = None\n while cur.next != self.head:\n if cur.data == key:\n if cur == self.head:\n prev.next = cur.next\n self.head = cur.next\n else:\n prev.next = cur.next\n return \n else:\n prev = cur.next\n cur = cur.next\n \n print(\"Element not found\")\n\ndef print_list(self):\n cur = self.head\n while cur:\n print(cur.data)\n cur = cur.next\n if cur == self.head:\n break"}
{"instruction": "Write a python program to classify a given sentence into positive or negative", "input": "", "output": "\"\"\"\nProgram to classify a sentence into positive or negative\n\"\"\"\n\ndef classify_sentence(sentence):\n    \"\"\"Classifies a given sentence into positive or negative\n\n    Args:\n        sentence (str): The sentence to be classified\n\n    Returns:\n        str: 'positive' or 'negative'\n    \"\"\"\n    tokenized_sentence = sentence.split()\n    num_positive = 0\n    num_negative = 0\n    for word in tokenized_sentence:\n        if word in positive_words:\n            num_positive += 1\n        elif word in negative_words:\n            num_negative += 1\n    if num_positive > num_negative:\n        return \"positive\"\n    elif num_negative > num_positive:\n        return \"negative\"\n    else:\n        return \"neutral\"\n\nif __name__ == '__main__':\n    sentence = input()\n    print(classify_sentence(sentence))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify a given sentence into positive or negative\n\n### Input:\n\n\n### Output:\n\"\"\"\nProgram to classify a sentence into positive or negative\n\"\"\"\n\ndef classify_sentence(sentence):\n    \"\"\"Classifies a given sentence into positive or negative\n\n    Args:\n        sentence (str): The sentence to be classified\n\n    Returns:\n        str: 'positive' or 'negative'\n    \"\"\"\n    tokenized_sentence = sentence.split()\n    num_positive = 0\n    num_negative = 0\n    for word in tokenized_sentence:\n        if word in positive_words:\n            num_positive += 1\n        elif word in negative_words:\n            num_negative += 1\n    if num_positive > num_negative:\n        return \"positive\"\n    elif num_negative > num_positive:\n        return \"negative\"\n    else:\n        return \"neutral\"\n\nif __name__ == '__main__':\n    sentence = input()\n    print(classify_sentence(sentence))"}
{"instruction": "Generate a Python function that prints information about the current machine.", "input": "", "output": "import platform\n\ndef print_machine_details():\n    \"\"\"Print current machine details.\"\"\"\n    # Get system name\n    system_name = platform.system()\n    # Get node name\n    system_node = platform.node()\n    # Get release\n    system_release = platform.release()\n    # get architecture\n    system_architecture = platform.architecture()\n    # Get processor\n    system_processor = platform.machine()\n\n    # Print the system name\n    print(\"System: {}\".format(system_name) )\n    # Print the node name\n    print(\"Node Name: {}\".format(system_node))\n    # Print release\n    print(\"Release: {}\".format(system_release))\n    # Print architecture\n    print(\"Architecture: {}\".format(system_architecture))\n    # Print processor\n    print(\"Processor: {}\".format(system_processor))\n\n# Call the function\nprint_machine_details()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that prints information about the current machine.\n\n### Input:\n\n\n### Output:\nimport platform\n\ndef print_machine_details():\n    \"\"\"Print current machine details.\"\"\"\n    # Get system name\n    system_name = platform.system()\n    # Get node name\n    system_node = platform.node()\n    # Get release\n    system_release = platform.release()\n    # get architecture\n    system_architecture = platform.architecture()\n    # Get processor\n    system_processor = platform.machine()\n\n    # Print the system name\n    print(\"System: {}\".format(system_name) )\n    # Print the node name\n    print(\"Node Name: {}\".format(system_node))\n    # Print release\n    print(\"Release: {}\".format(system_release))\n    # Print architecture\n    print(\"Architecture: {}\".format(system_architecture))\n    # Print processor\n    print(\"Processor: {}\".format(system_processor))\n\n# Call the function\nprint_machine_details()"}
{"instruction": "Build a code in Python to convert any number to its equivalent Roman numeral.", "input": "", "output": "def int_to_roman(num):\n\n    # Map numbers to Roman numerals.\n    roman_numeral_map = (('M', 1000),\n                         ('CM', 900),\n                         ('D', 500),\n                         ('CD', 400),\n                         ('C', 100),\n                         ('XC', 90),\n                         ('L', 50),\n                         ('XL', 40),\n                         ('X', 10),\n                         ('IX', 9),\n                         ('V', 5),\n                         ('IV', 4),\n                         ('I', 1))\n\n    # Input validation.\n    if num <= 0:\n        raise ValueError(\"Input cannot be less than 1.\")\n\n    # Initial output.\n    output = ''\n\n    # Loop through values, look for the highest matching number\n    # and repeat the loop until num becomes 0.\n    for numeral, integer in roman_numeral_map:\n        while num >= integer:\n            output += numeral\n            num -= integer\n\n    # Return result.\n    return output\n\nif __name__ == '__main__':\n    print(int_to_roman(13))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a code in Python to convert any number to its equivalent Roman numeral.\n\n### Input:\n\n\n### Output:\ndef int_to_roman(num):\n\n    # Map numbers to Roman numerals.\n    roman_numeral_map = (('M', 1000),\n                         ('CM', 900),\n                         ('D', 500),\n                         ('CD', 400),\n                         ('C', 100),\n                         ('XC', 90),\n                         ('L', 50),\n                         ('XL', 40),\n                         ('X', 10),\n                         ('IX', 9),\n                         ('V', 5),\n                         ('IV', 4),\n                         ('I', 1))\n\n    # Input validation.\n    if num <= 0:\n        raise ValueError(\"Input cannot be less than 1.\")\n\n    # Initial output.\n    output = ''\n\n    # Loop through values, look for the highest matching number\n    # and repeat the loop until num becomes 0.\n    for numeral, integer in roman_numeral_map:\n        while num >= integer:\n            output += numeral\n            num -= integer\n\n    # Return result.\n    return output\n\nif __name__ == '__main__':\n    print(int_to_roman(13))"}
{"instruction": "Develop a Python script to measure the speed of different sorting algorithms.", "input": "", "output": "\"\"\"\nDevelop a Python script to measure the speed of different sorting algorithms\n\"\"\"\n\nimport timeit\nimport random\n\ndef select_sort(seq):\n    for i in range(len(seq)):\n        min_idx = i\n        for j in range(i+1, len(seq)):\n            if seq[min_idx] > seq[j]:\n                min_idx = j\n        seq[i], seq[min_idx] = seq[min_idx], seq[i]\n\ndef bubble_sort(seq):\n    size = len(seq) - 1\n    while size != 0:\n        for i in range(size):\n            if seq[i] > seq[i+1]:\n                seq[i], seq[i+1] = seq[i+1], seq[i]\n        size -= 1\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    seq = [random.randint(1, 100) for _ in range(10)]\n    select_sort(seq)\n    stop = timeit.default_timer()\n    time_select = stop - start\n    print('Time for selection sort: ', time_select)\n\n    start = timeit.default_timer()\n    seq = [random.randint(1, 100) for _ in range(10)]\n    bubble_sort(seq)\n    stop = timeit.default_timer()\n    time_bubble = stop - start\n    print('Time for bubble sort: ', time_bubble)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to measure the speed of different sorting algorithms.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDevelop a Python script to measure the speed of different sorting algorithms\n\"\"\"\n\nimport timeit\nimport random\n\ndef select_sort(seq):\n    for i in range(len(seq)):\n        min_idx = i\n        for j in range(i+1, len(seq)):\n            if seq[min_idx] > seq[j]:\n                min_idx = j\n        seq[i], seq[min_idx] = seq[min_idx], seq[i]\n\ndef bubble_sort(seq):\n    size = len(seq) - 1\n    while size != 0:\n        for i in range(size):\n            if seq[i] > seq[i+1]:\n                seq[i], seq[i+1] = seq[i+1], seq[i]\n        size -= 1\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    seq = [random.randint(1, 100) for _ in range(10)]\n    select_sort(seq)\n    stop = timeit.default_timer()\n    time_select = stop - start\n    print('Time for selection sort: ', time_select)\n\n    start = timeit.default_timer()\n    seq = [random.randint(1, 100) for _ in range(10)]\n    bubble_sort(seq)\n    stop = timeit.default_timer()\n    time_bubble = stop - start\n    print('Time for bubble sort: ', time_bubble)"}
{"instruction": "Build a convolutional neural network in Python to classify the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras import Model\n\n# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Reshape images to (28, 28, 1)\nx_train = x_train.reshape(-1, 28, 28, 1)\nx_test = x_test.reshape(-1, 28, 28, 1)\n\n# Build convolutional neural network\nclass CNN(Model):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = Conv2D(32, (3, 3), activation='relu')\n        self.flatten = Flatten()\n        self.d1 = Dense(128, activation='relu')\n        self.d2 = Dense(10, activation='softmax')\n\n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)\n        x = self.d1(x)\n        return self.d2(x)\n\n# Build and compile model\nmodel = CNN()\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Test model\nmodel.evaluate(x_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a convolutional neural network in Python to classify the MNIST dataset.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras import Model\n\n# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Reshape images to (28, 28, 1)\nx_train = x_train.reshape(-1, 28, 28, 1)\nx_test = x_test.reshape(-1, 28, 28, 1)\n\n# Build convolutional neural network\nclass CNN(Model):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = Conv2D(32, (3, 3), activation='relu')\n        self.flatten = Flatten()\n        self.d1 = Dense(128, activation='relu')\n        self.d2 = Dense(10, activation='softmax')\n\n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)\n        x = self.d1(x)\n        return self.d2(x)\n\n# Build and compile model\nmodel = CNN()\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Test model\nmodel.evaluate(x_test, y_test)"}
{"instruction": "Create a Python program to scrape an online news website to get the headlines.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup \n\n# url of the website you want to scrape \nurl = \"https://www.news.com/\" \n\n# get the response in the form of html\nr = requests.get(url) \n\n# create a beautifulsoup object to parse contents \nsoup = BeautifulSoup(r.content, 'html5lib') \n\n# find headlines from the parsed page  \nheadlines = soup.find_all('h2') \n\n# Print the headlines \nfor headline in headlines: \n    print(headline.text)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to scrape an online news website to get the headlines.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup \n\n# url of the website you want to scrape \nurl = \"https://www.news.com/\" \n\n# get the response in the form of html\nr = requests.get(url) \n\n# create a beautifulsoup object to parse contents \nsoup = BeautifulSoup(r.content, 'html5lib') \n\n# find headlines from the parsed page  \nheadlines = soup.find_all('h2') \n\n# Print the headlines \nfor headline in headlines: \n    print(headline.text)"}
{"instruction": "Write a Python program to implement a FIFO queue using the collections module.", "input": "", "output": "from collections import deque\n\nclass FIFOQueue:\n    def __init__(self):\n        self.queue = deque([])\n\n    def enqueue(self, item):\n        self.queue.appendleft(item)\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError(\"Cannot dequeue from an empty queue.\")\n        return self.queue.pop()\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def size(self):\n        return len(self.queue)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement a FIFO queue using the collections module.\n\n### Input:\n\n\n### Output:\nfrom collections import deque\n\nclass FIFOQueue:\n    def __init__(self):\n        self.queue = deque([])\n\n    def enqueue(self, item):\n        self.queue.appendleft(item)\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError(\"Cannot dequeue from an empty queue.\")\n        return self.queue.pop()\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def size(self):\n        return len(self.queue)"}
{"instruction": "Generate a Python program to print out all the permutations of a given string.", "input": "", "output": "def permutate(string):\n    if len(string) == 0:\n        return ['']\n    prevList = permutate(string[1: len(string)])\n    nextList = []\n    for i in range(0,len(prevList)):\n        for j in range(0,len(string)):\n            newString = prevList[i][0: j]+string[0]+prevList[i][j: len(string)-1]\n            if newString not in nextList:\n                nextList.append(newString)\n    return nextList\n\nstring = input()\nprint(permutate(string))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print out all the permutations of a given string.\n\n### Input:\n\n\n### Output:\ndef permutate(string):\n    if len(string) == 0:\n        return ['']\n    prevList = permutate(string[1: len(string)])\n    nextList = []\n    for i in range(0,len(prevList)):\n        for j in range(0,len(string)):\n            newString = prevList[i][0: j]+string[0]+prevList[i][j: len(string)-1]\n            if newString not in nextList:\n                nextList.append(newString)\n    return nextList\n\nstring = input()\nprint(permutate(string))"}
{"instruction": "Create a Python algorithm to predict the house prices using the given dataset.", "input": "", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data \ndata = pd.read_csv('housing_data.csv')\n\n# Features and labels\nX = data[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors']]\ny = data['price']\n\n# Create the model \nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict the house prices\npredictions = model.predict(X)\n\n# Print the predictions\nprint('Predicted Prices:', predictions)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to predict the house prices using the given dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data \ndata = pd.read_csv('housing_data.csv')\n\n# Features and labels\nX = data[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors']]\ny = data['price']\n\n# Create the model \nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict the house prices\npredictions = model.predict(X)\n\n# Print the predictions\nprint('Predicted Prices:', predictions)"}
{"instruction": "Implement a class-level decorator in Python to time the execution of a method.", "input": "", "output": "class timed_method(object):\n    def __init__(self,func):\n        self.func = func\n        \n    def __call__(self, *args, **kwargs):\n        start_time = time.time()\n        try:\n            result = self.func(*args, **kwargs)\n        except Exception as e:\n            raise e\n        \n        end_time = time.time()\n        print('Total elapsed time for method %s: %2.2f seconds' % (self.func.__name__, end_time - start_time))\n        return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a class-level decorator in Python to time the execution of a method.\n\n### Input:\n\n\n### Output:\nclass timed_method(object):\n    def __init__(self,func):\n        self.func = func\n        \n    def __call__(self, *args, **kwargs):\n        start_time = time.time()\n        try:\n            result = self.func(*args, **kwargs)\n        except Exception as e:\n            raise e\n        \n        end_time = time.time()\n        print('Total elapsed time for method %s: %2.2f seconds' % (self.func.__name__, end_time - start_time))\n        return result"}
{"instruction": "Create a Python code to calculate the edit distance between two given strings.", "input": "", "output": "def edit_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to calculate the edit distance between two given strings.\n\n### Input:\n\n\n### Output:\ndef edit_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]"}
{"instruction": "Can you recommend important Python libraries that are useful for data science?", "input": "", "output": "There are many important libraries in Python that are useful for data science, such as:\n\n• NumPy – for array and matrix manipulation\n• Pandas – for data manipulation, analysis, and wrangling\n• Matplotlib – for data visualization\n• Scikit-learn – for machine learning algorithms\n• Tensorflow – for deep learning\n• Seaborn – for statistical data visualization\n• statsmodels – for statistical data analysis and modeling\n• Keras – for building deep learning models", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you recommend important Python libraries that are useful for data science?\n\n### Input:\n\n\n### Output:\nThere are many important libraries in Python that are useful for data science, such as:\n\n• NumPy – for array and matrix manipulation\n• Pandas – for data manipulation, analysis, and wrangling\n• Matplotlib – for data visualization\n• Scikit-learn – for machine learning algorithms\n• Tensorflow – for deep learning\n• Seaborn – for statistical data visualization\n• statsmodels – for statistical data analysis and modeling\n• Keras – for building deep learning models"}
{"instruction": "Write a Python program to check the validity of a password (input from users).", "input": "", "output": "def is_valid_password(password):\n    if len(password) < 8:\n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n    \n    if has_uppercase and has_lowercase and has_digit:\n        return True\n    else:\n        return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check the validity of a password (input from users).\n\n### Input:\n\n\n### Output:\ndef is_valid_password(password):\n    if len(password) < 8:\n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n    \n    if has_uppercase and has_lowercase and has_digit:\n        return True\n    else:\n        return False"}
{"instruction": "Describe an efficient way to convert a list of tuples into a Python dictionary", "input": "", "output": "One way to convert a list of tuples into a Python dictionary is to use the Python built-in dict() constructor. The dict() constructor takes the list of tuples as its argument and returns a dictionary. For example, given the list of tuples [(1, ‘a’), (2, ‘b’), (3, ‘c’)], we can use the dict() constructor to convert it into a dictionary as follows: dict([(1, ‘a’), (2, ‘b’), (3, ‘c’)]). This will return a dictionary with the keys 1, 2 and 3, and respective values 'a', 'b' and 'c'.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe an efficient way to convert a list of tuples into a Python dictionary\n\n### Input:\n\n\n### Output:\nOne way to convert a list of tuples into a Python dictionary is to use the Python built-in dict() constructor. The dict() constructor takes the list of tuples as its argument and returns a dictionary. For example, given the list of tuples [(1, ‘a’), (2, ‘b’), (3, ‘c’)], we can use the dict() constructor to convert it into a dictionary as follows: dict([(1, ‘a’), (2, ‘b’), (3, ‘c’)]). This will return a dictionary with the keys 1, 2 and 3, and respective values 'a', 'b' and 'c'."}
{"instruction": "Generate a python class that implements the turtle's position and orientation.", "input": "", "output": "class TurtlePosOri:\n    def __init__(self, pos_x, pos_y, orientation):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.orientation = orientation\n\n    def get_turtle_position(self):\n        return (self.pos_x, self.pos_y)\n\n    def get_turtle_orientation(self):\n        return self.orientation\n\n    def set_turtle_position(self, pos_x, pos_y):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n\n    def set_turtle_orientation(self, orientation):\n        self.orientation = orientation", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class that implements the turtle's position and orientation.\n\n### Input:\n\n\n### Output:\nclass TurtlePosOri:\n    def __init__(self, pos_x, pos_y, orientation):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.orientation = orientation\n\n    def get_turtle_position(self):\n        return (self.pos_x, self.pos_y)\n\n    def get_turtle_orientation(self):\n        return self.orientation\n\n    def set_turtle_position(self, pos_x, pos_y):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n\n    def set_turtle_orientation(self, orientation):\n        self.orientation = orientation"}
{"instruction": "Construct a web crawler in python and count the number of words in a web page.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup \n  \n# url of the website to crawl \nURL = \"https://www.example.com/\"\n  \n# get the whole page content in  \n# the form of text \npage = requests.get(URL).text\n  \n# number of words in the page \nword_count = 0\n  \n# create a Beautiful Soup parsable string \nsoup = BeautifulSoup(page, 'html.parser') \n  \n# find all the tags of type p \nparagraphs = soup.find_all('p') \nfor para in paragraphs: \n    words = para.text.split() \n    word_count += len(words) \n  \n# print the word count \nprint(\"Total words in the page:\", word_count)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web crawler in python and count the number of words in a web page.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup \n  \n# url of the website to crawl \nURL = \"https://www.example.com/\"\n  \n# get the whole page content in  \n# the form of text \npage = requests.get(URL).text\n  \n# number of words in the page \nword_count = 0\n  \n# create a Beautiful Soup parsable string \nsoup = BeautifulSoup(page, 'html.parser') \n  \n# find all the tags of type p \nparagraphs = soup.find_all('p') \nfor para in paragraphs: \n    words = para.text.split() \n    word_count += len(words) \n  \n# print the word count \nprint(\"Total words in the page:\", word_count)"}
{"instruction": "Create a program in Python that converts an integer number to a Roman Numeral.", "input": "", "output": "def convert_to_roman(num):\n    val = [\n    1000, 900, 500, 400,\n    100, 90, 50, 40,\n    10, 9, 5, 4,\n    1\n    ]\n    syb = [\n    \"M\", \"CM\", \"D\", \"CD\",\n    \"C\", \"XC\", \"L\", \"XL\",\n    \"X\", \"IX\", \"V\", \"IV\",\n    \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a positive integer: \"))\n    roman_num = convert_to_roman(num)\n    print('The Roman numeral for the given number is: ', roman_num)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that converts an integer number to a Roman Numeral.\n\n### Input:\n\n\n### Output:\ndef convert_to_roman(num):\n    val = [\n    1000, 900, 500, 400,\n    100, 90, 50, 40,\n    10, 9, 5, 4,\n    1\n    ]\n    syb = [\n    \"M\", \"CM\", \"D\", \"CD\",\n    \"C\", \"XC\", \"L\", \"XL\",\n    \"X\", \"IX\", \"V\", \"IV\",\n    \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a positive integer: \"))\n    roman_num = convert_to_roman(num)\n    print('The Roman numeral for the given number is: ', roman_num)"}
{"instruction": "Develop a python class that checks if a given number is a prime number or not.", "input": "", "output": "class CheckPrime(object):\n\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        if self.number < 2:\n            return False\n\n        for i in range(2, self.number):\n            if self.number % i == 0:\n                return False\n        \n        return True\n\nif __name__ == '__main__':\n    number = int(input('Please input a number: \\n'))\n    check_prime = CheckPrime(number)\n    if check_prime.is_prime():\n        print('The number {} is a prime number.'.format(number))\n    else:\n        print('The number {} is not a prime number.'.format(number))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python class that checks if a given number is a prime number or not.\n\n### Input:\n\n\n### Output:\nclass CheckPrime(object):\n\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        if self.number < 2:\n            return False\n\n        for i in range(2, self.number):\n            if self.number % i == 0:\n                return False\n        \n        return True\n\nif __name__ == '__main__':\n    number = int(input('Please input a number: \\n'))\n    check_prime = CheckPrime(number)\n    if check_prime.is_prime():\n        print('The number {} is a prime number.'.format(number))\n    else:\n        print('The number {} is not a prime number.'.format(number))"}
{"instruction": "Write a python code to print all prime numbers between 1 and a given number n.", "input": "", "output": "# Function to generate prime numbers between 1 and a given number n \ndef generate_prime_numbers(n): \n  \n    # Array for checking if a number is prime or not\n    prime_list = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime_list[p] is not changed, then it is a prime \n        if (prime_list[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime_list[i] = False\n        p += 1\n  \n    # Collecting prime numbers \n    for p in range(2, n): \n        if prime_list[p]: \n            print(p)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to print all prime numbers between 1 and a given number n.\n\n### Input:\n\n\n### Output:\n# Function to generate prime numbers between 1 and a given number n \ndef generate_prime_numbers(n): \n  \n    # Array for checking if a number is prime or not\n    prime_list = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime_list[p] is not changed, then it is a prime \n        if (prime_list[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime_list[i] = False\n        p += 1\n  \n    # Collecting prime numbers \n    for p in range(2, n): \n        if prime_list[p]: \n            print(p)"}
{"instruction": "Design a project in which you have to use Python to scrape and parse websites.", "input": "", "output": "# This project focuses on scraping and parsing websites using Python.\n\n# Scraping\n# First, we will use Python's requests library to scrape the websites of interest. This will allow us to access the HTML content of the websites which can then be parsed using Python's Beautiful Soup library.\n\n# Parsing\n# We will then use Beautiful Soup to parse the HTML content. We will extract the data from the HTML content and store it in a data structure for further processing.\n\n# Further Processing\n# We can then use the data to do further processing. This could include extracting specific text, analyzing the data, or visualizing the data.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a project in which you have to use Python to scrape and parse websites.\n\n### Input:\n\n\n### Output:\n# This project focuses on scraping and parsing websites using Python.\n\n# Scraping\n# First, we will use Python's requests library to scrape the websites of interest. This will allow us to access the HTML content of the websites which can then be parsed using Python's Beautiful Soup library.\n\n# Parsing\n# We will then use Beautiful Soup to parse the HTML content. We will extract the data from the HTML content and store it in a data structure for further processing.\n\n# Further Processing\n# We can then use the data to do further processing. This could include extracting specific text, analyzing the data, or visualizing the data."}
{"instruction": "What are the benefits of using classes instead of writing functions in Python?", "input": "", "output": "The benefits of using classes in Python include creating modular and reusable code, making it easier to organize code, enhancing maintainability and creating inheritance structures. Classes also provide an object-oriented way of programming, which allows you to use objects that contain both data and methods. This makes it easier to abstract complex interactions and reduces the amount of code needed to perform complex operations. Finally, classes also make it easier to support multiple instances of an object. This can be useful in distributed systems, where multiple machines need to interact effectively with the same resources.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the benefits of using classes instead of writing functions in Python?\n\n### Input:\n\n\n### Output:\nThe benefits of using classes in Python include creating modular and reusable code, making it easier to organize code, enhancing maintainability and creating inheritance structures. Classes also provide an object-oriented way of programming, which allows you to use objects that contain both data and methods. This makes it easier to abstract complex interactions and reduces the amount of code needed to perform complex operations. Finally, classes also make it easier to support multiple instances of an object. This can be useful in distributed systems, where multiple machines need to interact effectively with the same resources."}
{"instruction": "Generate a python program that normalizes all measurements in a given dataset.", "input": "", "output": "import pandas as pd\n\ndef normalize_measurements(data):\n    '''This function normalizes the given dataset.'''\n    normalized_data = data.copy()\n    for col in normalized_data.columns:\n        min_val = normalized_data[col].min()\n        max_val = normalized_data[col].max()\n        normalized_data[col] = (normalized_data[col] - min_val) / (max_val - min_val)\n    return normalized_data\n\nif __name__ == \"__main__\":\n    # Read the csv file\n    df = pd.read_csv('data.csv')\n\n    # Normalize the data\n    normalized_df = normalize_measurements(df)\n\n    # Save the normalized data\n    normalized_df.to_csv('normalized_data.csv', index=False)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that normalizes all measurements in a given dataset.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\n\ndef normalize_measurements(data):\n    '''This function normalizes the given dataset.'''\n    normalized_data = data.copy()\n    for col in normalized_data.columns:\n        min_val = normalized_data[col].min()\n        max_val = normalized_data[col].max()\n        normalized_data[col] = (normalized_data[col] - min_val) / (max_val - min_val)\n    return normalized_data\n\nif __name__ == \"__main__\":\n    # Read the csv file\n    df = pd.read_csv('data.csv')\n\n    # Normalize the data\n    normalized_df = normalize_measurements(df)\n\n    # Save the normalized data\n    normalized_df.to_csv('normalized_data.csv', index=False)"}
{"instruction": "Create a predictive algorithm in Python to predict the price of a given stock.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndef predict_stock_price(data):\n    # clean and prepare the data\n    data = data.dropna()\n    \n    # split the data into features and target values\n    X = data.drop(columns=['price'])\n    y = data['price']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # create and fit the model\n    lr = LinearRegression().fit(X_train, y_train)\n\n    # predict on the test data\n    y_pred = lr.predict(X_test)\n    return y_pred", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a predictive algorithm in Python to predict the price of a given stock.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndef predict_stock_price(data):\n    # clean and prepare the data\n    data = data.dropna()\n    \n    # split the data into features and target values\n    X = data.drop(columns=['price'])\n    y = data['price']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # create and fit the model\n    lr = LinearRegression().fit(X_train, y_train)\n\n    # predict on the test data\n    y_pred = lr.predict(X_test)\n    return y_pred"}
{"instruction": "Create a python script to train a machine learning model using a given dataset", "input": "", "output": "from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# creating standard scalar object\nscaler = StandardScaler()\n\n# loading the dataset\ndata = load_dataset()\n\n# splitting the dataset into the train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.25)  \n\n# standarizing the features\nX_train = scaler.fit_transform(X_train)  \nX_test = scaler.transform(X_test)\n\n# Creating the model\nclassifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\n\n# training the model\nclassifier.fit(X_train, y_train)\n\n# predictions\ny_pred = classifier.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to train a machine learning model using a given dataset\n\n### Input:\n\n\n### Output:\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# creating standard scalar object\nscaler = StandardScaler()\n\n# loading the dataset\ndata = load_dataset()\n\n# splitting the dataset into the train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.25)  \n\n# standarizing the features\nX_train = scaler.fit_transform(X_train)  \nX_test = scaler.transform(X_test)\n\n# Creating the model\nclassifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\n\n# training the model\nclassifier.fit(X_train, y_train)\n\n# predictions\ny_pred = classifier.predict(X_test)"}
{"instruction": "Compare and contrast the features of the two languages, JavaScript and Python.", "input": "", "output": "There are several key differences between JavaScript and Python. \n\nJavaScript is primarily a client-side scripting language, while Python is predominantly a server-side scripting language. JavaScript is an interpreted language which means that it does not need to be compiled before running, whereas Python needs to be compiled before it can run. JavaScript is a loosely typed language and allows for variables to have different data types, whereas Python is a strongly typed language and variables have to be given a specific data type. JavaScript can be used to create dynamic webpages with interactive content, while Python is optimized to work with packages and modules, making it a better choice for complex tasks and data analysis.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare and contrast the features of the two languages, JavaScript and Python.\n\n### Input:\n\n\n### Output:\nThere are several key differences between JavaScript and Python. \n\nJavaScript is primarily a client-side scripting language, while Python is predominantly a server-side scripting language. JavaScript is an interpreted language which means that it does not need to be compiled before running, whereas Python needs to be compiled before it can run. JavaScript is a loosely typed language and allows for variables to have different data types, whereas Python is a strongly typed language and variables have to be given a specific data type. JavaScript can be used to create dynamic webpages with interactive content, while Python is optimized to work with packages and modules, making it a better choice for complex tasks and data analysis."}
{"instruction": "Given two binary trees, check if the first tree is subtree of the second tree.", "input": "", "output": "# Python program to check if \n# a binary tree is subtree of another binary tree \n  \n# A binary tree node \nclass Node: \n      \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef isSubTree(T, S): \n    \n    if S is None: \n        return True\n  \n    if T is None: \n        return False\n  \n    if areIdentical(T, S): \n        return True\n  \n    return isSubTree(T.left, S) or isSubTree(T.right, S) \n  \n  \ndef areIdentical(T, S): \n      \n    if T is None and S is None: \n        return True\n  \n    if T is None or S is None: \n        return False\n  \n    return (T.data == S.data and areIdentical(T.left, S.left)and\n        areIdentical(T.right, S.right))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two binary trees, check if the first tree is subtree of the second tree.\n\n### Input:\n\n\n### Output:\n# Python program to check if \n# a binary tree is subtree of another binary tree \n  \n# A binary tree node \nclass Node: \n      \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef isSubTree(T, S): \n    \n    if S is None: \n        return True\n  \n    if T is None: \n        return False\n  \n    if areIdentical(T, S): \n        return True\n  \n    return isSubTree(T.left, S) or isSubTree(T.right, S) \n  \n  \ndef areIdentical(T, S): \n      \n    if T is None and S is None: \n        return True\n  \n    if T is None or S is None: \n        return False\n  \n    return (T.data == S.data and areIdentical(T.left, S.left)and\n        areIdentical(T.right, S.right))"}
{"instruction": "Create a neural network class in Python to model a linear regression function.", "input": "", "output": "import numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network class in Python to model a linear regression function.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out"}
{"instruction": "Develop a static analysis program in Python code to detect programming errors.", "input": "", "output": "import ast\n\nclass StaticAnalysis:\n    def detect_errors(self, code):\n        tree = ast.parse(code)\n        errors = []\n        for node in ast.walk(tree):\n            if isinstance(node, ast.FunctionDef):\n                errors.extend(self.check_function_def(node))\n            elif isinstance(node, ast.Call):\n                errors.extend(self.check_function_call(node))\n        return errors\n\n    def check_function_def(self, function):\n        errors = []\n        if not function.args.args:\n            errors.append(('No parameters passed to function', function.lineno))\n        return errors\n\n    def check_function_call(self, call):\n        errors = []\n        if not call.args:\n            errors.append(('No arguments passed to function call', call.lineno))\n        return errors", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a static analysis program in Python code to detect programming errors.\n\n### Input:\n\n\n### Output:\nimport ast\n\nclass StaticAnalysis:\n    def detect_errors(self, code):\n        tree = ast.parse(code)\n        errors = []\n        for node in ast.walk(tree):\n            if isinstance(node, ast.FunctionDef):\n                errors.extend(self.check_function_def(node))\n            elif isinstance(node, ast.Call):\n                errors.extend(self.check_function_call(node))\n        return errors\n\n    def check_function_def(self, function):\n        errors = []\n        if not function.args.args:\n            errors.append(('No parameters passed to function', function.lineno))\n        return errors\n\n    def check_function_call(self, call):\n        errors = []\n        if not call.args:\n            errors.append(('No arguments passed to function call', call.lineno))\n        return errors"}
{"instruction": "Design a Python program to classify a given set of data using a decision tree.", "input": "", "output": "# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree Classification to the Training set\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to classify a given set of data using a decision tree.\n\n### Input:\n\n\n### Output:\n# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree Classification to the Training set\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)"}
{"instruction": "Create a Python class to insert and delete elements into a doubly linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n        self.prev = None\n\nclass Doubly_Linked_List: \n  \n    def __init__(self): \n        self.head = None\n  \n    def insert(self, data): \n        new_node = Node(data) \n        if not self.head: \n            self.head = new_node \n        else: \n            new_node.next = self.head \n            self.head.prev = new_node \n            self.head = new_node\n\n    def delete(self, del_node): \n        if not self.head: \n            return None\n        if self.head == del_node: \n            self.head = self.head.next\n            self.head.prev = None\n        elif del_node.next: \n            del_node.next.prev = del_node.prev \n            del_node.prev.next = del_node.next \n        else: \n            del_node.prev.next = None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to insert and delete elements into a doubly linked list.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n        self.prev = None\n\nclass Doubly_Linked_List: \n  \n    def __init__(self): \n        self.head = None\n  \n    def insert(self, data): \n        new_node = Node(data) \n        if not self.head: \n            self.head = new_node \n        else: \n            new_node.next = self.head \n            self.head.prev = new_node \n            self.head = new_node\n\n    def delete(self, del_node): \n        if not self.head: \n            return None\n        if self.head == del_node: \n            self.head = self.head.next\n            self.head.prev = None\n        elif del_node.next: \n            del_node.next.prev = del_node.prev \n            del_node.prev.next = del_node.next \n        else: \n            del_node.prev.next = None"}
{"instruction": "Create a desktop application in Python to store passwords with authentication.", "input": "", "output": "# Import relevant libraries\nimport tkinter as tk \nimport hashlib\n\n# Create the main window \nroot = tk.Tk()\nroot.title('Password Manager')\n\n# Create a secure password database\npassword_storage = {}\n\n# Create a function for hashing the password\ndef hash_password(password):\n  hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n  return hashed_password\n\n# Create an authentication system to prompt the user to enter a username and password\ndef authenticate():\n  username_entry = tk.Entry(root) \n  username_entry.pack()\n\n  password_entry = tk.Entry(root, show=\"*\") \n  password_entry.pack()\n\n  def authenticate_user():\n    username = username_entry.get()\n    password = password_entry.get()\n    hashed_password = hash_password(password)\n    if username in password_storage and password_storage[username] == hashed_password:\n      print('Authenticated!')\n    else:\n      print('Incorrect')\n  tk.Button(root, text='Authenticate', command=authenticate_user).pack()\n\n# Call the authenticate function\nauthenticate()\n\nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a desktop application in Python to store passwords with authentication.\n\n### Input:\n\n\n### Output:\n# Import relevant libraries\nimport tkinter as tk \nimport hashlib\n\n# Create the main window \nroot = tk.Tk()\nroot.title('Password Manager')\n\n# Create a secure password database\npassword_storage = {}\n\n# Create a function for hashing the password\ndef hash_password(password):\n  hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n  return hashed_password\n\n# Create an authentication system to prompt the user to enter a username and password\ndef authenticate():\n  username_entry = tk.Entry(root) \n  username_entry.pack()\n\n  password_entry = tk.Entry(root, show=\"*\") \n  password_entry.pack()\n\n  def authenticate_user():\n    username = username_entry.get()\n    password = password_entry.get()\n    hashed_password = hash_password(password)\n    if username in password_storage and password_storage[username] == hashed_password:\n      print('Authenticated!')\n    else:\n      print('Incorrect')\n  tk.Button(root, text='Authenticate', command=authenticate_user).pack()\n\n# Call the authenticate function\nauthenticate()\n\nroot.mainloop()"}
{"instruction": "Build a blockchain network using Python that can record a user's name and age.", "input": "", "output": "import hashlib\nimport json\n\n# define a block in the blockchain\nclass Block:\n    def __init__(self, index, data, timestamp, prev_hash):\n        self.index = index\n        self.data = data\n        self.timestamp = timestamp\n        self.prev_hash = prev_hash\n        self.hash = self.hash_it()\n\n    # generates a SHA256 based on the contents of the block\n    def hash_it(self):\n        sha = hashlib.sha256()\n        block_data = str(self.index) + str(self.data) + str(self.timestamp) + str(self.prev_hash) \n        sha.update(block_data.encode())\n        return sha.hexdigest()\n\n# defines a blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    # adds a block to the blockchain\n    def add_block(self, data):\n        data = self.parse_data(data)\n        index = len(self.chain)\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        prev_hash = self.chain[-1].hash if self.chain else '0'\n\n        self.chain.append(Block(index, data, timestamp, prev_hash))\n\n    # records a user's name and age in the block data\n    def parse_data(self, data):\n        user_data = {\n            'name': data['name'],\n            'age': data['age']\n        }\n        return json.dumps(user_data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a blockchain network using Python that can record a user's name and age.\n\n### Input:\n\n\n### Output:\nimport hashlib\nimport json\n\n# define a block in the blockchain\nclass Block:\n    def __init__(self, index, data, timestamp, prev_hash):\n        self.index = index\n        self.data = data\n        self.timestamp = timestamp\n        self.prev_hash = prev_hash\n        self.hash = self.hash_it()\n\n    # generates a SHA256 based on the contents of the block\n    def hash_it(self):\n        sha = hashlib.sha256()\n        block_data = str(self.index) + str(self.data) + str(self.timestamp) + str(self.prev_hash) \n        sha.update(block_data.encode())\n        return sha.hexdigest()\n\n# defines a blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    # adds a block to the blockchain\n    def add_block(self, data):\n        data = self.parse_data(data)\n        index = len(self.chain)\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        prev_hash = self.chain[-1].hash if self.chain else '0'\n\n        self.chain.append(Block(index, data, timestamp, prev_hash))\n\n    # records a user's name and age in the block data\n    def parse_data(self, data):\n        user_data = {\n            'name': data['name'],\n            'age': data['age']\n        }\n        return json.dumps(user_data)"}
{"instruction": "Using Python, generate a random 6-digit number and check if it is a palindrome.", "input": "", "output": "import random\n\ndef check_palindrome(num):\n    \"\"\"Function to check if a number is a palindrome. \n    \"\"\"\n    num_str = str(num)\n    rev_str = num_str[::-1]\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n\n# Generate a random 6-digit number\nnum = random.randint(100000, 999999)\n\n# Check if it is a palindrome\nif check_palindrome(num):\n    print(f\"The number {num} is a palindrome\")\nelse:\n    print(f\"The number {num} is not a palindrome\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, generate a random 6-digit number and check if it is a palindrome.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef check_palindrome(num):\n    \"\"\"Function to check if a number is a palindrome. \n    \"\"\"\n    num_str = str(num)\n    rev_str = num_str[::-1]\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n\n# Generate a random 6-digit number\nnum = random.randint(100000, 999999)\n\n# Check if it is a palindrome\nif check_palindrome(num):\n    print(f\"The number {num} is a palindrome\")\nelse:\n    print(f\"The number {num} is not a palindrome\")"}
{"instruction": "Design an efficient algorithm in Python for calculating the Fibonacci sequence.", "input": "", "output": "\"\"\"\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence \n\"\"\"\n\n\ndef fib(n):\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        f1 = 0\n        f2 = 1\n        for x in range(2, n+1):\n            f = f1+f2\n            f1 = f2\n            f2 = f\n        return f\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of terms:\"))\n    print(\"Fibonacci sequence:\")\n    for i in range(n):\n        print(fib(i))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence \n\"\"\"\n\n\ndef fib(n):\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        f1 = 0\n        f2 = 1\n        for x in range(2, n+1):\n            f = f1+f2\n            f1 = f2\n            f2 = f\n        return f\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of terms:\"))\n    print(\"Fibonacci sequence:\")\n    for i in range(n):\n        print(fib(i))"}
{"instruction": "Construct a polynomial regression model in Python that models a given data set.", "input": "", "output": "# import packages\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n# create linear regression object\nreg = LinearRegression()\n\n# create polynomial features\npoly = PolynomialFeatures(degree = 2)\nx_poly = poly.fit_transform(X_train)\n\n# fit the linear regression model with the polynomial features\nreg.fit(x_poly, y_train)\n\n# predict the y-values using the regression model\ny_pred = reg.predict(poly.fit_transform(X_test))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a polynomial regression model in Python that models a given data set.\n\n### Input:\n\n\n### Output:\n# import packages\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n# create linear regression object\nreg = LinearRegression()\n\n# create polynomial features\npoly = PolynomialFeatures(degree = 2)\nx_poly = poly.fit_transform(X_train)\n\n# fit the linear regression model with the polynomial features\nreg.fit(x_poly, y_train)\n\n# predict the y-values using the regression model\ny_pred = reg.predict(poly.fit_transform(X_test))"}
{"instruction": "Write a Python program to implement 5-fold cross-validation using scikit-learn.", "input": "", "output": "import numpy as np\nfrom sklearn.model_selection import KFold\n\n# Create a dataset\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\ny = np.array([1, 2, 3, 4, 5, 6])\n\n# Create the Cross-Validation object\nkf = KFold(n_splits=5)\n\n# Iterate through the folds\nfor train_index, test_index in kf.split(X):\n    print(\"Train Index: \", train_index, \"\\n\")\n    print(\"Test Index: \", test_index)\n\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement 5-fold cross-validation using scikit-learn.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import KFold\n\n# Create a dataset\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\ny = np.array([1, 2, 3, 4, 5, 6])\n\n# Create the Cross-Validation object\nkf = KFold(n_splits=5)\n\n# Iterate through the folds\nfor train_index, test_index in kf.split(X):\n    print(\"Train Index: \", train_index, \"\\n\")\n    print(\"Test Index: \", test_index)\n\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]"}
{"instruction": "Design a program in Python to calculate the sum of prime numbers between 1 to n", "input": "", "output": "\"\"\"\nDesign a program in Python to calculate the sum of prime numbers between 1 to n\n\"\"\"\n\n# Function to check for prime numbers\ndef isPrime(num):\n    for n in range(2, num):\n        if (num % n) == 0:\n            return False\n    return True\n\n# Get the sum of prime numbers from 0 to n\ndef sum_prime_numbers(n):\n    prime_sum = 0\n    for i in range(2,n+1):\n        if isPrime(i):\n            prime_sum += i\n    return prime_sum\n\nif __name__ == '__main__':\n    n = 10\n    print(f'The sum of prime numbers from 0 to {n} is: {sum_prime_numbers(n)}')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to calculate the sum of prime numbers between 1 to n\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a program in Python to calculate the sum of prime numbers between 1 to n\n\"\"\"\n\n# Function to check for prime numbers\ndef isPrime(num):\n    for n in range(2, num):\n        if (num % n) == 0:\n            return False\n    return True\n\n# Get the sum of prime numbers from 0 to n\ndef sum_prime_numbers(n):\n    prime_sum = 0\n    for i in range(2,n+1):\n        if isPrime(i):\n            prime_sum += i\n    return prime_sum\n\nif __name__ == '__main__':\n    n = 10\n    print(f'The sum of prime numbers from 0 to {n} is: {sum_prime_numbers(n)}')"}
{"instruction": "Develop a program written in Python that will print the first 30 prime numbers.", "input": "", "output": "def print_primes(n):\n    # Create a list of prime numbers\n    prime_numbers = []\n\n    # Iterate from 2 to n\n    for num in range(2, n + 1):\n        isPrime = True\n        \n        # Check for factors\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n                break\n\n        # If prime, append to list\n        if isPrime:\n            prime_numbers.append(num)\n\n    # Print out the first 30 prime numbers\n    for p in prime_numbers[:30]:\n        print(p, end=\" \")\n\n# Test function\nprint_primes(100)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program written in Python that will print the first 30 prime numbers.\n\n### Input:\n\n\n### Output:\ndef print_primes(n):\n    # Create a list of prime numbers\n    prime_numbers = []\n\n    # Iterate from 2 to n\n    for num in range(2, n + 1):\n        isPrime = True\n        \n        # Check for factors\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n                break\n\n        # If prime, append to list\n        if isPrime:\n            prime_numbers.append(num)\n\n    # Print out the first 30 prime numbers\n    for p in prime_numbers[:30]:\n        print(p, end=\" \")\n\n# Test function\nprint_primes(100)"}
{"instruction": "Write a code in Python to fetch data from a web API and store it in a database.", "input": "", "output": "import requests \nimport sqlite3\n\n# fetch data from api and store in list\nurl = 'http://api.example.com/resources'\nresponse = requests.get(url)\ndata = response.json()\n\n# initiate database connection\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# create table in database\nc.execute(\"CREATE TABLE IF NOT EXISTS resources (id INTEGER, title TEXT);\")\n\n# insert data into database\nfor entry in data:\n    c.execute(\"INSERT INTO resources VALUES (?, ?)\", (entry['id'], entry['title']))\n\n# commit changes and close connection\nconn.commit()\nconn.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to fetch data from a web API and store it in a database.\n\n### Input:\n\n\n### Output:\nimport requests \nimport sqlite3\n\n# fetch data from api and store in list\nurl = 'http://api.example.com/resources'\nresponse = requests.get(url)\ndata = response.json()\n\n# initiate database connection\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# create table in database\nc.execute(\"CREATE TABLE IF NOT EXISTS resources (id INTEGER, title TEXT);\")\n\n# insert data into database\nfor entry in data:\n    c.execute(\"INSERT INTO resources VALUES (?, ?)\", (entry['id'], entry['title']))\n\n# commit changes and close connection\nconn.commit()\nconn.close()"}
{"instruction": "Create a python program to calculate the Fibonacci number at a particular index", "input": "", "output": "\"\"\"\nProgram to calculate the Fibonacci number at a particular index\n\"\"\"\n\ndef fibonacci_at_index(index):\n    \"\"\"Returns the Fibonacci number at a given index.\n    \n    Args:\n        index (int): The index of the Fibonacci number to be returned\n    \n    Returns:\n        int: The Fibonacci number at the given index\n    \"\"\"\n    if index <= 0:\n        return 0\n    if index == 1:\n        return 1\n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2)\n\nif __name__ == '__main__':\n    index = int(input())\n    print(fibonacci_at_index(index))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the Fibonacci number at a particular index\n\n### Input:\n\n\n### Output:\n\"\"\"\nProgram to calculate the Fibonacci number at a particular index\n\"\"\"\n\ndef fibonacci_at_index(index):\n    \"\"\"Returns the Fibonacci number at a given index.\n    \n    Args:\n        index (int): The index of the Fibonacci number to be returned\n    \n    Returns:\n        int: The Fibonacci number at the given index\n    \"\"\"\n    if index <= 0:\n        return 0\n    if index == 1:\n        return 1\n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2)\n\nif __name__ == '__main__':\n    index = int(input())\n    print(fibonacci_at_index(index))"}
{"instruction": "Write a python code to generate a unique URL using a randomly generated string.", "input": "", "output": "import random\nimport string\n \ndef generate_random_string(num_chars): \n    # Generate a random string of length num_chars\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = \"\"\n    for i in range(num_chars):\n        random_string += random.choice(chars)\n    return random_string\n \ndef generate_unique_url(base_url): \n    random_string = generate_random_string(8)\n    unique_url = base_url + random_string\n    return unique_url\n\nif __name__ == '__main__':\n    output = generate_unique_url('www.example.com/')\n    print(output)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to generate a unique URL using a randomly generated string.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n \ndef generate_random_string(num_chars): \n    # Generate a random string of length num_chars\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = \"\"\n    for i in range(num_chars):\n        random_string += random.choice(chars)\n    return random_string\n \ndef generate_unique_url(base_url): \n    random_string = generate_random_string(8)\n    unique_url = base_url + random_string\n    return unique_url\n\nif __name__ == '__main__':\n    output = generate_unique_url('www.example.com/')\n    print(output)"}
{"instruction": "Develop a recursive program in Python to traverse a given binary tree in-order.", "input": "", "output": "class Node: \n  \n    # Constructor to create a new binary node \n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inorder(root): \n    if root: \n        # First recur on left child \n        inorder(root.left) \n  \n        # then print the data of node \n        print(root.data)\n  \n        # now recur on right child \n        inorder(root.right) \n  \n\n# Driver program to test the above function \nroot = Node(1) \nroot.left      = Node(2) \nroot.right     = Node(3) \nroot.left.left  = Node(4) \nroot.left.right  = Node(5) \n  \ninorder(root)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a recursive program in Python to traverse a given binary tree in-order.\n\n### Input:\n\n\n### Output:\nclass Node: \n  \n    # Constructor to create a new binary node \n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inorder(root): \n    if root: \n        # First recur on left child \n        inorder(root.left) \n  \n        # then print the data of node \n        print(root.data)\n  \n        # now recur on right child \n        inorder(root.right) \n  \n\n# Driver program to test the above function \nroot = Node(1) \nroot.left      = Node(2) \nroot.right     = Node(3) \nroot.left.left  = Node(4) \nroot.left.right  = Node(5) \n  \ninorder(root)"}
{"instruction": "Code a GUI application in Python that takes user input and displays a response.", "input": "", "output": "import tkinter as tk\n\ndef user_input():\n    entered_text = input_field.get()\n    output.configure(text= \"You entered: \" + entered_text)\n\n# basic window\nwindow = tk.Tk()\nwindow.title(\"My GUI Application\") # title of the window\nwindow.geometry(\"250x250\") # size of the window\n\n# adding a label\nlabel = tk.Label(window, text=\"Enter your input:\")\nlabel.pack()\n\n# adding a text box\ninput_field = tk.Entry(window)\ninput_field.pack()\n\n# button to submit data\nsubmit_button = tk.Button(window, text=\"Submit\", command=user_input)\nsubmit_button.pack()\n\n# output field\noutput = tk.Label(window, text=\"Output Here\")\noutput.pack()\n\nwindow.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a GUI application in Python that takes user input and displays a response.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\ndef user_input():\n    entered_text = input_field.get()\n    output.configure(text= \"You entered: \" + entered_text)\n\n# basic window\nwindow = tk.Tk()\nwindow.title(\"My GUI Application\") # title of the window\nwindow.geometry(\"250x250\") # size of the window\n\n# adding a label\nlabel = tk.Label(window, text=\"Enter your input:\")\nlabel.pack()\n\n# adding a text box\ninput_field = tk.Entry(window)\ninput_field.pack()\n\n# button to submit data\nsubmit_button = tk.Button(window, text=\"Submit\", command=user_input)\nsubmit_button.pack()\n\n# output field\noutput = tk.Label(window, text=\"Output Here\")\noutput.pack()\n\nwindow.mainloop()"}
{"instruction": "Create a python program to create a bot that answers questions about a product.", "input": "", "output": "import nltk\nimport random\n\ndef generate_answers(question):\n    # Use NLTK to process and tokenize the question\n    tokens = nltk.word_tokenize(question)\n\n    # Generate a preliminary answer\n    answer = \"I'm sorry I don't understand the question.\"\n\n    # Use keyword matching to generate a more accurate answer\n    keywords = ['product']\n\n    for token in tokens:\n        if token in keywords:\n            answer = 'This product is great and extremely versatile!'\n\n    return answer\n\n# Main Program\nwhile True:\n    question = input(\"What would you like to know about the product? : \")\n    answer = generate_answers(question)\n    print(answer)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to create a bot that answers questions about a product.\n\n### Input:\n\n\n### Output:\nimport nltk\nimport random\n\ndef generate_answers(question):\n    # Use NLTK to process and tokenize the question\n    tokens = nltk.word_tokenize(question)\n\n    # Generate a preliminary answer\n    answer = \"I'm sorry I don't understand the question.\"\n\n    # Use keyword matching to generate a more accurate answer\n    keywords = ['product']\n\n    for token in tokens:\n        if token in keywords:\n            answer = 'This product is great and extremely versatile!'\n\n    return answer\n\n# Main Program\nwhile True:\n    question = input(\"What would you like to know about the product? : \")\n    answer = generate_answers(question)\n    print(answer)"}
{"instruction": "Generate a sentence using natural language processing implementations in Python", "input": "", "output": "text = \"Computer Science is awesome!\"\nfrom nltk.tokenize import word_tokenize \nfrom nltk.stem.wordnet import WordNetLemmatizer \nfrom nltk import pos_tag \nfrom nltk.corpus import stopwords \nfrom nltk.corpus import wordnet as wn \n  \nlemma = WordNetLemmatizer() \n  \n# personalized Stopwords and PosTags \nstopwords = set(stopwords.words('english')) \npos_tag = [\"MD\", \"NN\", \"VB\", \"NNS\"] \n  \nword_tokens = word_tokenize(text.lower()) \n  \nfiltered_sentence = [lemma.lemmatize(word) for word in word_tokens \n                        if word not in stopwords and pos_tag[0] in pos_tag] \n                       \nprint(\"Generated Text:\", \" \".join(filtered_sentence)) \n\nGenerated Text: computer science awesome !", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a sentence using natural language processing implementations in Python\n\n### Input:\n\n\n### Output:\ntext = \"Computer Science is awesome!\"\nfrom nltk.tokenize import word_tokenize \nfrom nltk.stem.wordnet import WordNetLemmatizer \nfrom nltk import pos_tag \nfrom nltk.corpus import stopwords \nfrom nltk.corpus import wordnet as wn \n  \nlemma = WordNetLemmatizer() \n  \n# personalized Stopwords and PosTags \nstopwords = set(stopwords.words('english')) \npos_tag = [\"MD\", \"NN\", \"VB\", \"NNS\"] \n  \nword_tokens = word_tokenize(text.lower()) \n  \nfiltered_sentence = [lemma.lemmatize(word) for word in word_tokens \n                        if word not in stopwords and pos_tag[0] in pos_tag] \n                       \nprint(\"Generated Text:\", \" \".join(filtered_sentence)) \n\nGenerated Text: computer science awesome !"}
{"instruction": "Build a machine learning model to diagnose coronary heart disease using Python.", "input": "", "output": "import pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import accuracy_score \n  \n#Load the data\ndataset = pd.read_csv('<file_name>.csv')\nX = dataset.iloc[:, 0:10].values \ny = dataset.iloc[:, 10:].values \n  \n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0,test_size = 0.25) \n  \n#Train and test the model \nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0) \nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test) \n  \n#Evaluate the model \nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model to diagnose coronary heart disease using Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import accuracy_score \n  \n#Load the data\ndataset = pd.read_csv('<file_name>.csv')\nX = dataset.iloc[:, 0:10].values \ny = dataset.iloc[:, 10:].values \n  \n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0,test_size = 0.25) \n  \n#Train and test the model \nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0) \nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test) \n  \n#Evaluate the model \nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))"}
{"instruction": "Write a Python program to find the highest repeating word in a given paragraph.", "input": "", "output": "def highest_repeating_word(paragraph):\n    \"\"\"\n    Finds the highest repeating word in a given paragraph.\n    \n    Args:\n        paragraph (str): The paragraph.\n    \n    Return:\n        str: The highest repeating word.\n    \"\"\"\n\n    words = paragraph.split()\n\n    # Create a dictionary to store the word frequencies\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    highest_freq = 0\n    highest_freq_word = None\n\n    # Find the highest frequency word\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the highest repeating word in a given paragraph.\n\n### Input:\n\n\n### Output:\ndef highest_repeating_word(paragraph):\n    \"\"\"\n    Finds the highest repeating word in a given paragraph.\n    \n    Args:\n        paragraph (str): The paragraph.\n    \n    Return:\n        str: The highest repeating word.\n    \"\"\"\n\n    words = paragraph.split()\n\n    # Create a dictionary to store the word frequencies\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    highest_freq = 0\n    highest_freq_word = None\n\n    # Find the highest frequency word\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word"}
{"instruction": "Create a Python program to display the upcoming 5 events from a given calendar.", "input": "", "output": "import calendar\nfrom datetime import date, time, datetime\n\ndef get_events(cal, start_date, num_events):\n    events = []\n    for i in range(num_events):\n        day_events = cal.itermonthdays2(start_date.year, start_date.month)\n        while not day_events[0][1]:\n            start_date = start_date.replace(day=(start_date.day + 1))\n            day_events = cal.itermonthdays2(start_date.year, start_date.month)\n\n        event_date = start_date.replace(day=day_events[0][0])\n        events.append((event_date, day_events[0][1]))\n        start_date = start_date.replace(day=(start_date.day + 1))\n    return events\n\ncal = calendar.Calendar()\nstart_date = date.today()\nevents = get_events(cal, start_date, 5)\n# print out the upcoming 5 events\nfor event in events:\n    print(event[0], event[1])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to display the upcoming 5 events from a given calendar.\n\n### Input:\n\n\n### Output:\nimport calendar\nfrom datetime import date, time, datetime\n\ndef get_events(cal, start_date, num_events):\n    events = []\n    for i in range(num_events):\n        day_events = cal.itermonthdays2(start_date.year, start_date.month)\n        while not day_events[0][1]:\n            start_date = start_date.replace(day=(start_date.day + 1))\n            day_events = cal.itermonthdays2(start_date.year, start_date.month)\n\n        event_date = start_date.replace(day=day_events[0][0])\n        events.append((event_date, day_events[0][1]))\n        start_date = start_date.replace(day=(start_date.day + 1))\n    return events\n\ncal = calendar.Calendar()\nstart_date = date.today()\nevents = get_events(cal, start_date, 5)\n# print out the upcoming 5 events\nfor event in events:\n    print(event[0], event[1])"}
{"instruction": "Develop a python script for converting an infix expression to postfix notation.", "input": "", "output": "def infix_to_postfix(infix_expr):\n    prec = {}\n    prec[\"*\"] = 3\n    prec[\"/\"] = 3\n    prec[\"+\"] = 2\n    prec[\"-\"] = 2\n    prec[\"(\"] = 1\n    opStack = []\n    postfixList = []\n    tokenList = infix_expr.split()\n\n    for token in tokenList:\n        if token in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or token in \"0123456789\":\n            postfixList.append(token)\n        elif token == '(':\n            opStack.append(token)\n        elif token == ')':\n            topToken = opStack.pop()\n            while topToken != '(':\n                postfixList.append(topToken)\n                topToken = opStack.pop()\n        else:\n            while (len(opStack) != 0) and (prec[opStack[-1]] >= prec[token]):\n                  postfixList.append(opStack.pop())\n            opStack.append(token)\n\n    while len(opStack) != 0:\n        postfixList.append(opStack.pop())\n    return \" \".join(postfixList)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python script for converting an infix expression to postfix notation.\n\n### Input:\n\n\n### Output:\ndef infix_to_postfix(infix_expr):\n    prec = {}\n    prec[\"*\"] = 3\n    prec[\"/\"] = 3\n    prec[\"+\"] = 2\n    prec[\"-\"] = 2\n    prec[\"(\"] = 1\n    opStack = []\n    postfixList = []\n    tokenList = infix_expr.split()\n\n    for token in tokenList:\n        if token in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or token in \"0123456789\":\n            postfixList.append(token)\n        elif token == '(':\n            opStack.append(token)\n        elif token == ')':\n            topToken = opStack.pop()\n            while topToken != '(':\n                postfixList.append(topToken)\n                topToken = opStack.pop()\n        else:\n            while (len(opStack) != 0) and (prec[opStack[-1]] >= prec[token]):\n                  postfixList.append(opStack.pop())\n            opStack.append(token)\n\n    while len(opStack) != 0:\n        postfixList.append(opStack.pop())\n    return \" \".join(postfixList)"}
{"instruction": "Create a python program to encode a given text using a Huffman coding algorithm", "input": "", "output": "# Class to store a node of huffman tree \nclass Node(): \n\n\tdef __init__(self, char, f, left, right): \n\t\tself.char = char \n\t\tself.f = f \n\t\tself.left = left \n\t\tself.right = right \n\n# Function to encode text using huffman tree \ndef HuffmanEncode(text): \n\t# Create a frequency map of characters \n\tfreq = dict() \n\tfor char in text: \n\t\tif char in freq: \n\t\t\tfreq[char] += 1\n\t\telse: \n\t\t\tfreq[char] = 1\n\n\t# Create a Huffman tree \n\tnodes = [] \n\tfor char, f in freq.items(): \n\t\tnodes.append(Node(char, f, None, None)) \n\t\t\n\t# Iteratively construct the Huffman tree \n\twhile len(nodes) > 1: \n\t\t# Sort nodes by frequency \n\t\tnodes.sort(key = lambda x: x.f) \n\t\t# Merge first two nodes \n\t\tnew_node = Node(None, nodes[0].f + nodes[1].f, nodes[0], nodes[1]) \n\t\tnodes = nodes[2:] \n\t\tnodes.append(new_node) \n\t\t\n\t# Huffman encoding \n\tcode = dict() \n\tencode(nodes[0], \"\", code) \n\t\n\t# Return the encoded string \n\tencoded_string = \"\" \n\tfor char in text: \n\t\tencoded_string += code[char] \n\treturn encoded_string", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to encode a given text using a Huffman coding algorithm\n\n### Input:\n\n\n### Output:\n# Class to store a node of huffman tree \nclass Node(): \n\n\tdef __init__(self, char, f, left, right): \n\t\tself.char = char \n\t\tself.f = f \n\t\tself.left = left \n\t\tself.right = right \n\n# Function to encode text using huffman tree \ndef HuffmanEncode(text): \n\t# Create a frequency map of characters \n\tfreq = dict() \n\tfor char in text: \n\t\tif char in freq: \n\t\t\tfreq[char] += 1\n\t\telse: \n\t\t\tfreq[char] = 1\n\n\t# Create a Huffman tree \n\tnodes = [] \n\tfor char, f in freq.items(): \n\t\tnodes.append(Node(char, f, None, None)) \n\t\t\n\t# Iteratively construct the Huffman tree \n\twhile len(nodes) > 1: \n\t\t# Sort nodes by frequency \n\t\tnodes.sort(key = lambda x: x.f) \n\t\t# Merge first two nodes \n\t\tnew_node = Node(None, nodes[0].f + nodes[1].f, nodes[0], nodes[1]) \n\t\tnodes = nodes[2:] \n\t\tnodes.append(new_node) \n\t\t\n\t# Huffman encoding \n\tcode = dict() \n\tencode(nodes[0], \"\", code) \n\t\n\t# Return the encoded string \n\tencoded_string = \"\" \n\tfor char in text: \n\t\tencoded_string += code[char] \n\treturn encoded_string"}
{"instruction": "Create a class in python to encode and decode text using a caesar cipher method", "input": "", "output": "class CaesarCipher:\n    def __init__(self, shift):\n        self.shift = shift\n    \n    def encode(self, text):\n        encoded_text = ''\n        for c in text:\n            if c.isalpha():\n                num_shift = ord(c) + self.shift\n                if c.isupper():\n                    if num_shift > ord('Z'):\n                        num_shift -= 26\n                    elif num_shift < ord('A'):\n                        num_shift += 26\n                elif c.islower():\n                    if num_shift > ord('z'):\n                        num_shift -= 26\n                    elif num_shift < ord('a'):\n                        num_shift += 26\n                encoded_text += chr(num_shift)\n            else:\n                encoded_text += c\n        return encoded_text\n    \n    def decode(self, text):\n        decoded_text = ''\n        for c in text:\n            if c.isalpha():\n                num_shift = ord(c) - self.shift\n                if c.isupper():\n                    if num_shift > ord('Z'):\n                        num_shift -= 26\n                    elif num_shift < ord('A'):\n                        num_shift += 26\n                elif c.islower():\n                    if num_shift > ord('z'):\n                        num_shift -= 26\n                    elif num_shift < ord('a'):\n                        num_shift += 26\n                decoded_text += chr(num_shift)\n            else:\n                decoded_text += c\n        return decoded_text", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in python to encode and decode text using a caesar cipher method\n\n### Input:\n\n\n### Output:\nclass CaesarCipher:\n    def __init__(self, shift):\n        self.shift = shift\n    \n    def encode(self, text):\n        encoded_text = ''\n        for c in text:\n            if c.isalpha():\n                num_shift = ord(c) + self.shift\n                if c.isupper():\n                    if num_shift > ord('Z'):\n                        num_shift -= 26\n                    elif num_shift < ord('A'):\n                        num_shift += 26\n                elif c.islower():\n                    if num_shift > ord('z'):\n                        num_shift -= 26\n                    elif num_shift < ord('a'):\n                        num_shift += 26\n                encoded_text += chr(num_shift)\n            else:\n                encoded_text += c\n        return encoded_text\n    \n    def decode(self, text):\n        decoded_text = ''\n        for c in text:\n            if c.isalpha():\n                num_shift = ord(c) - self.shift\n                if c.isupper():\n                    if num_shift > ord('Z'):\n                        num_shift -= 26\n                    elif num_shift < ord('A'):\n                        num_shift += 26\n                elif c.islower():\n                    if num_shift > ord('z'):\n                        num_shift -= 26\n                    elif num_shift < ord('a'):\n                        num_shift += 26\n                decoded_text += chr(num_shift)\n            else:\n                decoded_text += c\n        return decoded_text"}
{"instruction": "Write a Python program which takes an input and prints out the most common words", "input": "", "output": "import collections\nimport re\n\ndef find_most_common_words(text):\n    # remove special characters\n    clean_text = re.sub('[^a-zA-Z]+', ' ', text)\n    \n    # tokenize\n    words = clean_text.split(' ')\n    \n    # get counts\n    counts = collections.Counter(words)\n    \n    # get most common\n    most_common = counts.most_common()\n    \n    # print most common words\n    for word, count in most_common:\n        print(word + ' : ' + str(count))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which takes an input and prints out the most common words\n\n### Input:\n\n\n### Output:\nimport collections\nimport re\n\ndef find_most_common_words(text):\n    # remove special characters\n    clean_text = re.sub('[^a-zA-Z]+', ' ', text)\n    \n    # tokenize\n    words = clean_text.split(' ')\n    \n    # get counts\n    counts = collections.Counter(words)\n    \n    # get most common\n    most_common = counts.most_common()\n    \n    # print most common words\n    for word, count in most_common:\n        print(word + ' : ' + str(count))"}
{"instruction": "Design a chatbot using Python and the Natural Language Processing library spaCy.", "input": "", "output": "import spacy\n\n# Load the spacy language model\nnlp = spacy.load('en')\n\n# Create the chatbot's response function\ndef chatbot_response(sentence):\n  # Parse the user's input using the spacy nlp object\n  doc = nlp(sentence)\n\n  # Iterate over the parsed words\n  for word in doc:\n    # Check for an adjective\n    if word.pos_ == 'ADJ':\n      return 'That sounds interesting!'\n\n  # If no adjective is found, the chatbot has nothing to reply\n  return 'I see.'", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chatbot using Python and the Natural Language Processing library spaCy.\n\n### Input:\n\n\n### Output:\nimport spacy\n\n# Load the spacy language model\nnlp = spacy.load('en')\n\n# Create the chatbot's response function\ndef chatbot_response(sentence):\n  # Parse the user's input using the spacy nlp object\n  doc = nlp(sentence)\n\n  # Iterate over the parsed words\n  for word in doc:\n    # Check for an adjective\n    if word.pos_ == 'ADJ':\n      return 'That sounds interesting!'\n\n  # If no adjective is found, the chatbot has nothing to reply\n  return 'I see.'"}
{"instruction": "Generate a Python function that checks if a given number is an Armstrong number.", "input": "", "output": "def is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that checks if a given number is an Armstrong number.\n\n### Input:\n\n\n### Output:\ndef is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False"}
{"instruction": "Write a python program to calculate the factorial of a number given by the user.", "input": "", "output": "def calculate_factorial(num): \n    if num < 0: \n        return 0\n    elif num == 0 or num == 1: \n        return 1\n    else: \n        factorial = 1\n        while num > 1:             \n            factorial = factorial * num \n            num = num - 1\n        return factorial \n\n# get user input \nnumber = int(input(\"Enter a number: \"))\n\n# call the function\nfactorial = calculate_factorial(number)\n\n# print the result \nprint(\"Factorial of\", number, \"is\", factorial)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the factorial of a number given by the user.\n\n### Input:\n\n\n### Output:\ndef calculate_factorial(num): \n    if num < 0: \n        return 0\n    elif num == 0 or num == 1: \n        return 1\n    else: \n        factorial = 1\n        while num > 1:             \n            factorial = factorial * num \n            num = num - 1\n        return factorial \n\n# get user input \nnumber = int(input(\"Enter a number: \"))\n\n# call the function\nfactorial = calculate_factorial(number)\n\n# print the result \nprint(\"Factorial of\", number, \"is\", factorial)"}
{"instruction": "Create a Python program to scrape and store the HTML content of a given website.", "input": "", "output": "\"\"\"\nCreate a Python program to scrape and store the HTML content of a given website\n\"\"\"\n\nimport requests\nimport bs4\n\ndef scrape_website(url):\n    # Fetch the web page\n    response = requests.get(url)\n    # Parse the web page\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    # Store the HTML content\n    with open('website_content.txt', 'w') as file:\n        file.write(str(soup))\n\nif __name__ == '__main__':\n    scrape_website('https://example.com')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to scrape and store the HTML content of a given website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python program to scrape and store the HTML content of a given website\n\"\"\"\n\nimport requests\nimport bs4\n\ndef scrape_website(url):\n    # Fetch the web page\n    response = requests.get(url)\n    # Parse the web page\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n    # Store the HTML content\n    with open('website_content.txt', 'w') as file:\n        file.write(str(soup))\n\nif __name__ == '__main__':\n    scrape_website('https://example.com')"}
{"instruction": "Create a Python script that produces a bar chart of the top 10 global languages.", "input": "", "output": "import matplotlib.pyplot as plt\n \n# Data to plot\nlanguages = ['English', 'Chinese', 'Hindi', 'Spanish', \n             'Arabic', 'Portuguese', 'Russian', 'Japanese', \n             'German', 'French']\ncounts = [1.25, 1.21, 0.558, 0.455, 0.347, 0.336, 0.310, \n          0.282, 0.242, 0.220]\n \n# Generate the bar chart\nplt.bar(languages, counts, align='center', color='green', alpha=0.5)\nplt.title('Top 10 Global Languages')\nplt.xlabel('Language')\nplt.ylabel('Number of Speakers (in billions)')\nplt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that produces a bar chart of the top 10 global languages.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt\n \n# Data to plot\nlanguages = ['English', 'Chinese', 'Hindi', 'Spanish', \n             'Arabic', 'Portuguese', 'Russian', 'Japanese', \n             'German', 'French']\ncounts = [1.25, 1.21, 0.558, 0.455, 0.347, 0.336, 0.310, \n          0.282, 0.242, 0.220]\n \n# Generate the bar chart\nplt.bar(languages, counts, align='center', color='green', alpha=0.5)\nplt.title('Top 10 Global Languages')\nplt.xlabel('Language')\nplt.ylabel('Number of Speakers (in billions)')\nplt.show()"}
{"instruction": "Create a Python script to classify book titles as either fiction or non-fiction.", "input": "", "output": "import nltk\n\ndef classify_book(title):\n    # Tokenize the words in the title\n    tokens = nltk.word_tokenize(title)\n\n    # Create the tagger\n    pos_tag = nltk.pos_tag(tokens)\n\n    # Check for words that are commonly used in fiction titles\n    fiction_words = [\"Novel\", \"Novella\", \"Mystery\", \"Fantasy\", \"Adventure\", \"Thriller\", \"Paranormal\", \"Romance\"]\n    has_fiction_word = any([word in fiction_words for word in tokens])\n\n    if has_fiction_word:\n        return 'Fiction'\n    else:\n        return 'Non-Fiction'", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to classify book titles as either fiction or non-fiction.\n\n### Input:\n\n\n### Output:\nimport nltk\n\ndef classify_book(title):\n    # Tokenize the words in the title\n    tokens = nltk.word_tokenize(title)\n\n    # Create the tagger\n    pos_tag = nltk.pos_tag(tokens)\n\n    # Check for words that are commonly used in fiction titles\n    fiction_words = [\"Novel\", \"Novella\", \"Mystery\", \"Fantasy\", \"Adventure\", \"Thriller\", \"Paranormal\", \"Romance\"]\n    has_fiction_word = any([word in fiction_words for word in tokens])\n\n    if has_fiction_word:\n        return 'Fiction'\n    else:\n        return 'Non-Fiction'"}
{"instruction": "Build a web scraping tool using Python that extracts data from a given web page.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Function to make a GET request to a given URL\ndef get_page_data(url):\n    # Make a GET request\n    response = requests.get(url)\n\n    # Parse the HTML from the GET request\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract the desired data\n    data = soup.find_all('div', {'class':'data-container'})\n\n    # Return the data\n    return data\n\n# Extract data from a given URL\ndata = get_page_data('example.com/data-page')\n\n# Print the extracted data\nprint(data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web scraping tool using Python that extracts data from a given web page.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Function to make a GET request to a given URL\ndef get_page_data(url):\n    # Make a GET request\n    response = requests.get(url)\n\n    # Parse the HTML from the GET request\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract the desired data\n    data = soup.find_all('div', {'class':'data-container'})\n\n    # Return the data\n    return data\n\n# Extract data from a given URL\ndata = get_page_data('example.com/data-page')\n\n# Print the extracted data\nprint(data)"}
{"instruction": "Generate a python program to compute the edit distance between two given strings", "input": "", "output": "def edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], \n                        dp[i-1][j], \n                        dp[i-1][j-1]) \n    return dp[m][n]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to compute the edit distance between two given strings\n\n### Input:\n\n\n### Output:\ndef edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], \n                        dp[i-1][j], \n                        dp[i-1][j-1]) \n    return dp[m][n]"}
{"instruction": "Generate a Monte-Carlo simulation program in Python to estimate the value of Pi.", "input": "", "output": "import random\n \n# Function to generate random points\ndef generate_random_point():\n    x = random.uniform(-1, 1)\n    y = random.uniform(-1, 1)\n    return (x, y)\n \n# Function to calculate Pi\ndef calculate_pi(num_samples):\n    # Number of points inside the circle\n    num_inside = 0\n    for i in range(num_samples):\n        # Generate a random point  \n        point = generate_random_point()\n        # Check if the point is inside the circle\n        if (point[0]**2 + point[1]**2 <= 1):\n            num_inside += 1\n    # Calculate pi\n    return 4*num_inside/num_samples", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Monte-Carlo simulation program in Python to estimate the value of Pi.\n\n### Input:\n\n\n### Output:\nimport random\n \n# Function to generate random points\ndef generate_random_point():\n    x = random.uniform(-1, 1)\n    y = random.uniform(-1, 1)\n    return (x, y)\n \n# Function to calculate Pi\ndef calculate_pi(num_samples):\n    # Number of points inside the circle\n    num_inside = 0\n    for i in range(num_samples):\n        # Generate a random point  \n        point = generate_random_point()\n        # Check if the point is inside the circle\n        if (point[0]**2 + point[1]**2 <= 1):\n            num_inside += 1\n    # Calculate pi\n    return 4*num_inside/num_samples"}
{"instruction": "Using a neural network model, design a Python script to classify flower species.", "input": "", "output": "import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPClassifier\n\n# Read in the data\ndata = pd.read_csv('flowers.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Scale the data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Train the neural network\nclf = MLPClassifier(hidden_layer_sizes=(20, 20), max_iter=1000)\nclf.fit(X, y)\n\n# Test the model\npreds = clf.predict(X)\n\n# Evaluate the model\naccuracy = np.mean(preds == y)\nprint('Model accuracy: {:.2f}%'.format(accuracy*100))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a neural network model, design a Python script to classify flower species.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPClassifier\n\n# Read in the data\ndata = pd.read_csv('flowers.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Scale the data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Train the neural network\nclf = MLPClassifier(hidden_layer_sizes=(20, 20), max_iter=1000)\nclf.fit(X, y)\n\n# Test the model\npreds = clf.predict(X)\n\n# Evaluate the model\naccuracy = np.mean(preds == y)\nprint('Model accuracy: {:.2f}%'.format(accuracy*100))"}
{"instruction": "Create a Python algorithm to classify positive and negative sentiment in tweets.", "input": "", "output": "def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to classify positive and negative sentiment in tweets.\n\n### Input:\n\n\n### Output:\ndef sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results"}
{"instruction": "Generate a Python program to generate an HTML table from a list of dictionaries.", "input": "", "output": "def html_from_dict(data):\n    '''\n    This function creates an HTML table from list of dictionaries.\n    Each dictionary represents one row in the table.\n    '''\n\n    html = '<table>'\n    html += '<tr>'\n    \n    # table headings\n    data_keys = list(data[0].keys())\n    for key in data_keys:\n        html += '<th>' + str(key) + '</th>'\n    html += '</tr>'\n\n    # table content\n    for row in data:\n        html += '<tr>'\n        for key in data_keys:\n            html += '<td>' + str(row[key]) + '</td>'\n        html += '</tr>'\n    \n    html += '</table>'\n    \n    return html", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate an HTML table from a list of dictionaries.\n\n### Input:\n\n\n### Output:\ndef html_from_dict(data):\n    '''\n    This function creates an HTML table from list of dictionaries.\n    Each dictionary represents one row in the table.\n    '''\n\n    html = '<table>'\n    html += '<tr>'\n    \n    # table headings\n    data_keys = list(data[0].keys())\n    for key in data_keys:\n        html += '<th>' + str(key) + '</th>'\n    html += '</tr>'\n\n    # table content\n    for row in data:\n        html += '<tr>'\n        for key in data_keys:\n            html += '<td>' + str(row[key]) + '</td>'\n        html += '</tr>'\n    \n    html += '</table>'\n    \n    return html"}
{"instruction": "Create a Python program to simulate an automatic grocery store checkout machine.", "input": "", "output": "import collections \n\ndef calculate_price(items): \n    items_dict = collections.Counter(items) \n    total_price = 0\n    # Iterate through each item\n    for item in items_dict: \n        price = items_dict[item] * prices[item] \n        total_price += price \n    # Return the total price\n    return total_price \n\n# Mapping of item and its price \nprices = { \n    'apple': 2, \n    'banana': 4, \n    'orange': 6\n    } \n# List of items to buy\nitems = ['apple', 'apple', 'orange', 'banana', 'apple'] \n\n# Calculate total price\nprice = calculate_price(items) \nprint(\"Total Price is\", price)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to simulate an automatic grocery store checkout machine.\n\n### Input:\n\n\n### Output:\nimport collections \n\ndef calculate_price(items): \n    items_dict = collections.Counter(items) \n    total_price = 0\n    # Iterate through each item\n    for item in items_dict: \n        price = items_dict[item] * prices[item] \n        total_price += price \n    # Return the total price\n    return total_price \n\n# Mapping of item and its price \nprices = { \n    'apple': 2, \n    'banana': 4, \n    'orange': 6\n    } \n# List of items to buy\nitems = ['apple', 'apple', 'orange', 'banana', 'apple'] \n\n# Calculate total price\nprice = calculate_price(items) \nprint(\"Total Price is\", price)"}
{"instruction": "Develop a program to perform edit distance calculation on two strings in Python.", "input": "", "output": "def edit_distance(str1, str2):\n    matrix = []\n    for i in range(len(str1) + 1):\n        matrix.append([0] * (len(str2) + 1))\n        \n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n        \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n    \n    return matrix[len(str1)][len(str2)]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to perform edit distance calculation on two strings in Python.\n\n### Input:\n\n\n### Output:\ndef edit_distance(str1, str2):\n    matrix = []\n    for i in range(len(str1) + 1):\n        matrix.append([0] * (len(str2) + 1))\n        \n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n        \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n    \n    return matrix[len(str1)][len(str2)]"}
{"instruction": "Can you develop a basic web server in Python that serves a webpage when queried?", "input": "", "output": "from http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import urlparse\n\nclass RequestHandler(BaseHTTPRequestHandler):\n\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-Type', 'text/html')\n    self.end_headers()\n    self.wfile.write(b\"<!DOCTYPE html><html><head> <title>Home Page</title> </head><body> <h1> Welcome to my website! </h1> </body></html>\")\n\ndef run(server_class = HTTPServer, handler_class = RequestHandler):\n  server_address = ('', 8000)\n  httpd = server_class(server_address, handler_class)\n  httpd.serve_forever()\n\nrun()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a basic web server in Python that serves a webpage when queried?\n\n### Input:\n\n\n### Output:\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import urlparse\n\nclass RequestHandler(BaseHTTPRequestHandler):\n\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-Type', 'text/html')\n    self.end_headers()\n    self.wfile.write(b\"<!DOCTYPE html><html><head> <title>Home Page</title> </head><body> <h1> Welcome to my website! </h1> </body></html>\")\n\ndef run(server_class = HTTPServer, handler_class = RequestHandler):\n  server_address = ('', 8000)\n  httpd = server_class(server_address, handler_class)\n  httpd.serve_forever()\n\nrun()"}
{"instruction": "What path do you suggest to optimize the runtime of a program written in Python?", "input": "", "output": "One suggestion to optimize the runtime of a program written in Python is to use vectorized operations with NumPy where possible, as it can offer significant performance gains over native Python code. Additionally, use data structures such as dictionaries, sets and lists, where appropriate, as they can help improve lookup time and memory efficiency. Furthermore, implementing memoization, or caching of intermediate results, can greatly reduce the runtime performance of a program. Finally, use python profiling tools to identify and optimize code sections or functions which are the slowest.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat path do you suggest to optimize the runtime of a program written in Python?\n\n### Input:\n\n\n### Output:\nOne suggestion to optimize the runtime of a program written in Python is to use vectorized operations with NumPy where possible, as it can offer significant performance gains over native Python code. Additionally, use data structures such as dictionaries, sets and lists, where appropriate, as they can help improve lookup time and memory efficiency. Furthermore, implementing memoization, or caching of intermediate results, can greatly reduce the runtime performance of a program. Finally, use python profiling tools to identify and optimize code sections or functions which are the slowest."}
{"instruction": "Implement a Python code to calculate the Levenshtein distance between two words.", "input": "", "output": "def levenshtein_distance(word1, word2):\n    m = len(word1)\n    n = len(word2)\n\n    distance = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(1, m+1):\n        distance[i][0] = i\n    for j in range(1, n+1):\n        distance[0][j] = j\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if word1[i-1] == word2[j-1]:\n                cost = 0\n            else:\n                cost = 1\n            distance[i][j] = min(distance[i-1][j] + 1, \n                                    distance[i][j-1] + 1, \n                                    distance[i-1][j-1] + cost)\n\n    return distance[m][n]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python code to calculate the Levenshtein distance between two words.\n\n### Input:\n\n\n### Output:\ndef levenshtein_distance(word1, word2):\n    m = len(word1)\n    n = len(word2)\n\n    distance = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(1, m+1):\n        distance[i][0] = i\n    for j in range(1, n+1):\n        distance[0][j] = j\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if word1[i-1] == word2[j-1]:\n                cost = 0\n            else:\n                cost = 1\n            distance[i][j] = min(distance[i-1][j] + 1, \n                                    distance[i][j-1] + 1, \n                                    distance[i-1][j-1] + cost)\n\n    return distance[m][n]"}
{"instruction": "Generate a password strength checker in Python that follows the NIST guidelines.", "input": "", "output": "import re\n\ndef check_password_strength(password):\n    '''This function checks if the given password is strong according to NIST guidelines'''\n    # check if password is atleast 8 characters long\n    if len(password) < 8:\n        return False\n    \n    # check if password contains atleast one lowercase letter\n    if not re.search('[a-z]', password):\n        return False\n    \n    # check if password contains atleast one uppercase letter\n    if not re.search('[A-Z]', password):\n        return False\n    \n    # check if password contains atleast one number\n    if not re.search('[0-9]', password):\n        return False\n    \n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a password strength checker in Python that follows the NIST guidelines.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef check_password_strength(password):\n    '''This function checks if the given password is strong according to NIST guidelines'''\n    # check if password is atleast 8 characters long\n    if len(password) < 8:\n        return False\n    \n    # check if password contains atleast one lowercase letter\n    if not re.search('[a-z]', password):\n        return False\n    \n    # check if password contains atleast one uppercase letter\n    if not re.search('[A-Z]', password):\n        return False\n    \n    # check if password contains atleast one number\n    if not re.search('[0-9]', password):\n        return False\n    \n    return True"}
{"instruction": "Write a python program to verify if the given DNA strand is a palindrome or not.", "input": "", "output": "def is_palindrome_dna(dna):\n    # Step 1: Extract the complementary strand by replacing each nucleotide with its complement in the strand \n    complement = \"\"\n    for letter in dna:\n        if letter == 'A':\n            complement += 'T'\n        elif letter == 'C':\n            complement += 'G'\n        elif letter == 'G':\n            complement += 'C'\n        elif letter == 'T':\n            complement += 'A'\n        else:\n            print(\"Invalid nucleotide detected\")\n    \n    # Step 2: Reverse the strand and compare it to its complementary strand\n    reverse = complement[::-1]\n    return reverse == dna\n\nprint(is_palindrome_dna(\"ATGCTATCG\")) # prints True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to verify if the given DNA strand is a palindrome or not.\n\n### Input:\n\n\n### Output:\ndef is_palindrome_dna(dna):\n    # Step 1: Extract the complementary strand by replacing each nucleotide with its complement in the strand \n    complement = \"\"\n    for letter in dna:\n        if letter == 'A':\n            complement += 'T'\n        elif letter == 'C':\n            complement += 'G'\n        elif letter == 'G':\n            complement += 'C'\n        elif letter == 'T':\n            complement += 'A'\n        else:\n            print(\"Invalid nucleotide detected\")\n    \n    # Step 2: Reverse the strand and compare it to its complementary strand\n    reverse = complement[::-1]\n    return reverse == dna\n\nprint(is_palindrome_dna(\"ATGCTATCG\")) # prints True"}
{"instruction": "Define a function in Python to determine the most common word in a given string.", "input": "", "output": "def most_common_word(string):\n    # convert string to lower case \n    string = string.lower() \n  \n    # split the string into words  \n    words = string.split() \n  \n    # create a dictionary to store words and their frequency  \n    word_freq_dict = {} \n  \n    # iterate through each word in words list  \n    for word in words: \n          \n        if word not in word_freq_dict: \n            word_freq_dict[word] = 0\n        word_freq_dict[word] += 1\n  \n    # sort the dictionary in descending order of frequency  \n    sorted_dict = sorted(word_freq_dict.items(), key=lambda kv: kv[1], reverse=True) \n  \n    # return the most frequent word  \n    return sorted_dict[0][0]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function in Python to determine the most common word in a given string.\n\n### Input:\n\n\n### Output:\ndef most_common_word(string):\n    # convert string to lower case \n    string = string.lower() \n  \n    # split the string into words  \n    words = string.split() \n  \n    # create a dictionary to store words and their frequency  \n    word_freq_dict = {} \n  \n    # iterate through each word in words list  \n    for word in words: \n          \n        if word not in word_freq_dict: \n            word_freq_dict[word] = 0\n        word_freq_dict[word] += 1\n  \n    # sort the dictionary in descending order of frequency  \n    sorted_dict = sorted(word_freq_dict.items(), key=lambda kv: kv[1], reverse=True) \n  \n    # return the most frequent word  \n    return sorted_dict[0][0]"}
{"instruction": "Write a function in Python to render a table in ASCII with 4 columns and 3 rows.", "input": "", "output": "def render_ascii_table(columns, rows):\n    col_width = 10\n\n    # Create array of column labels\n    header_row = [('{:^' + str(col_width) + '}').format(label) for label in columns]\n\n    # Create divider row\n    divider_row = ['-' * col_width] * len(columns)\n\n    # Create row of data\n    data_rows = [[('{:^' + str(col_width) + '}').format(data) for data in row] for row in rows]\n\n    # Create table\n    table = [header_row] + [divider_row] + data_rows\n\n    # Render table\n    for row in table:\n        print('|'.join(row))\n\nrender_ascii_table(['col1', 'col2', 'col3', 'col4'], [\n    ['data1', 'data2', 'data3', 'data4'],\n    ['data5', 'data6', 'data7', 'data8'],\n    ['data9', 'data10', 'data11', 'data12']\n])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to render a table in ASCII with 4 columns and 3 rows.\n\n### Input:\n\n\n### Output:\ndef render_ascii_table(columns, rows):\n    col_width = 10\n\n    # Create array of column labels\n    header_row = [('{:^' + str(col_width) + '}').format(label) for label in columns]\n\n    # Create divider row\n    divider_row = ['-' * col_width] * len(columns)\n\n    # Create row of data\n    data_rows = [[('{:^' + str(col_width) + '}').format(data) for data in row] for row in rows]\n\n    # Create table\n    table = [header_row] + [divider_row] + data_rows\n\n    # Render table\n    for row in table:\n        print('|'.join(row))\n\nrender_ascii_table(['col1', 'col2', 'col3', 'col4'], [\n    ['data1', 'data2', 'data3', 'data4'],\n    ['data5', 'data6', 'data7', 'data8'],\n    ['data9', 'data10', 'data11', 'data12']\n])"}
{"instruction": "Build a classifier in Python that can classify a movie against different genres.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# read in the dataset\ndf = pd.read_csv('movie_data.csv')\n\n# remove irrelevant columns\ndf_clean = df.drop(['plot', 'cast', 'director', 'year'], axis=1)\n\n# feature engineering\nX = df_clean.drop('genre', axis=1).values\ny = df_clean['genre'].values\n\n# split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model \nrf = RandomForestClassifier(n_estimators=1000, random_state=0)\nrf.fit(X_train, y_train)\n\n# evaluate the model\naccuracy = rf.score(X_test, y_test)\nprint('Model accuracy on test set: ', accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a classifier in Python that can classify a movie against different genres.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# read in the dataset\ndf = pd.read_csv('movie_data.csv')\n\n# remove irrelevant columns\ndf_clean = df.drop(['plot', 'cast', 'director', 'year'], axis=1)\n\n# feature engineering\nX = df_clean.drop('genre', axis=1).values\ny = df_clean['genre'].values\n\n# split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model \nrf = RandomForestClassifier(n_estimators=1000, random_state=0)\nrf.fit(X_train, y_train)\n\n# evaluate the model\naccuracy = rf.score(X_test, y_test)\nprint('Model accuracy on test set: ', accuracy)"}
{"instruction": "Create an algorithm in Python to determine the number of days between two dates.", "input": "", "output": "def daysBetween (date1, date2): \n  \n    # Number of days per month in \n    # non leap year. \n    monthDays = [31, 28, 31, 30, 31, 30, \n                31, 31, 30, 31, 30, 31] \n  \n    # Initialize count using years and day \n    n1 = date1[2] * 365 + date1[0] \n    n2 = date2[2] * 365 + date2[0] \n  \n    # Add days for months in given date \n    for i in range(date1[1]-1): \n        n1 += monthDays[i] \n  \n    for i in range(date2[1]-1): \n        n2 += monthDays[i] \n  \n    # Since every leap year is of 366 days, \n    # Add a day for every leap year \n    n1 += date1[2]//4 - date1[2]//100 + date1[2]//400 \n    n2 += date2[2]//4 - date2[2]//100 + date2[2]//400 \n  \n    # Return difference between two counts \n    return (n2 - n1)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to determine the number of days between two dates.\n\n### Input:\n\n\n### Output:\ndef daysBetween (date1, date2): \n  \n    # Number of days per month in \n    # non leap year. \n    monthDays = [31, 28, 31, 30, 31, 30, \n                31, 31, 30, 31, 30, 31] \n  \n    # Initialize count using years and day \n    n1 = date1[2] * 365 + date1[0] \n    n2 = date2[2] * 365 + date2[0] \n  \n    # Add days for months in given date \n    for i in range(date1[1]-1): \n        n1 += monthDays[i] \n  \n    for i in range(date2[1]-1): \n        n2 += monthDays[i] \n  \n    # Since every leap year is of 366 days, \n    # Add a day for every leap year \n    n1 += date1[2]//4 - date1[2]//100 + date1[2]//400 \n    n2 += date2[2]//4 - date2[2]//100 + date2[2]//400 \n  \n    # Return difference between two counts \n    return (n2 - n1)"}
{"instruction": "Create a Python program to automate the process of filing receipts and invoices.", "input": "", "output": "import os\nimport shutil\n\n# define a function to move file to designated folder \ndef move_file (src_path, dest_path):\n    shutil.move(src_path, dest_path)\n    print(\"File moved from\", src_path, \"to\", dest_path)\n\n# define source and destination \nsrc_dir = \"./Unfiled_Documents/\"\ndest_dir = \"./Invoices_and_Receipts/\"\n\n# iterate through the files\nfor root, dirs, files in os.walk(src_dir):\n    for file in files: \n        # check the file type \n        filename, file_extension = os.path.splitext(file)\n        if file_extension in ['.pdf', '.odt', '.docx']:\n            # move the file \n            src = os.path.join(root, file)\n            dest = dest_dir + 'invoice_or_receipt' + file_extension\n            move_file(src, dest)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to automate the process of filing receipts and invoices.\n\n### Input:\n\n\n### Output:\nimport os\nimport shutil\n\n# define a function to move file to designated folder \ndef move_file (src_path, dest_path):\n    shutil.move(src_path, dest_path)\n    print(\"File moved from\", src_path, \"to\", dest_path)\n\n# define source and destination \nsrc_dir = \"./Unfiled_Documents/\"\ndest_dir = \"./Invoices_and_Receipts/\"\n\n# iterate through the files\nfor root, dirs, files in os.walk(src_dir):\n    for file in files: \n        # check the file type \n        filename, file_extension = os.path.splitext(file)\n        if file_extension in ['.pdf', '.odt', '.docx']:\n            # move the file \n            src = os.path.join(root, file)\n            dest = dest_dir + 'invoice_or_receipt' + file_extension\n            move_file(src, dest)"}
{"instruction": "Create a neural network model in Python to classify text as positive or negative", "input": "", "output": "\"\"\"\nCreate a neural network model in Python to classify text as positive or negative\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf \n\n# Define the model\nmodel = tf.keras.models.Sequential([\n    # The input layer with shape of vocab size used for one-hot encoding  \n    tf.keras.layers.Input(shape=(vocab_size)),\n    # Add a layer of Dropout for regularized learning\n    tf.keras.layers.Dropout(rate=0.2),\n    # The hidden layers\n    tf.keras.layers.Dense(units=64, activation='relu'),\n    tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy', \n    metrics=['accuracy']\n)\n\n# Fit on the training data\nmodel.fit(X_train, y_train, epochs=5, batch_size=32)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network model in Python to classify text as positive or negative\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a neural network model in Python to classify text as positive or negative\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf \n\n# Define the model\nmodel = tf.keras.models.Sequential([\n    # The input layer with shape of vocab size used for one-hot encoding  \n    tf.keras.layers.Input(shape=(vocab_size)),\n    # Add a layer of Dropout for regularized learning\n    tf.keras.layers.Dropout(rate=0.2),\n    # The hidden layers\n    tf.keras.layers.Dense(units=64, activation='relu'),\n    tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy', \n    metrics=['accuracy']\n)\n\n# Fit on the training data\nmodel.fit(X_train, y_train, epochs=5, batch_size=32)"}
{"instruction": "Generate Python code to find the pair with the maximum product in a given array.", "input": "", "output": "def max_pair_product(arr):\n    # Initialize the maximum product and the maximum elements\n    max_product = 0\n    max_elems = [0, 0]\n    # Iterate through each element in the array \n    for i in range(len(arr)):\n        left_elem = arr[i]\n        # Iterate through each other element in the array\n        for j in range(i + 1, len(arr)):\n            right_elem = arr[j]\n            # Compute the product\n            product = left_elem * right_elem\n            # Find the maximum product and the corresponding elements\n            if product > max_product:\n                max_product = product\n                max_elems = [left_elem, right_elem]\n    # Return the maximum product and the corresponding elements\n    return (max_product, max_elems)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to find the pair with the maximum product in a given array.\n\n### Input:\n\n\n### Output:\ndef max_pair_product(arr):\n    # Initialize the maximum product and the maximum elements\n    max_product = 0\n    max_elems = [0, 0]\n    # Iterate through each element in the array \n    for i in range(len(arr)):\n        left_elem = arr[i]\n        # Iterate through each other element in the array\n        for j in range(i + 1, len(arr)):\n            right_elem = arr[j]\n            # Compute the product\n            product = left_elem * right_elem\n            # Find the maximum product and the corresponding elements\n            if product > max_product:\n                max_product = product\n                max_elems = [left_elem, right_elem]\n    # Return the maximum product and the corresponding elements\n    return (max_product, max_elems)"}
{"instruction": "Develop a game trajectory algorithm in Python for a two-dimensional environment.", "input": "", "output": "# Define a function for trajectory algorithms\ndef trajectory_algorithm(start_point, end_point):\n    # Set the dampening parameter, which determines how far the ball moves in each step\n    d = 0.1\n    # Find the distance between start and end points\n    dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Define a loop to iterate through\n    while dist > (d ** 2):\n        # Move the ball closer to the end point\n        start_point[0] = start_point[0] + ((end_point[0] - start_point[0]) * d)\n        start_point[1] = start_point[1] + ((end_point[1] - start_point[1]) * d)\n        # Redefine the distance for the next iteration\n        dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Return the final point\n    return start_point", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a game trajectory algorithm in Python for a two-dimensional environment.\n\n### Input:\n\n\n### Output:\n# Define a function for trajectory algorithms\ndef trajectory_algorithm(start_point, end_point):\n    # Set the dampening parameter, which determines how far the ball moves in each step\n    d = 0.1\n    # Find the distance between start and end points\n    dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Define a loop to iterate through\n    while dist > (d ** 2):\n        # Move the ball closer to the end point\n        start_point[0] = start_point[0] + ((end_point[0] - start_point[0]) * d)\n        start_point[1] = start_point[1] + ((end_point[1] - start_point[1]) * d)\n        # Redefine the distance for the next iteration\n        dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Return the final point\n    return start_point"}
{"instruction": "Create a program in Python that takes a sentence and converts it into Pig Latin.", "input": "", "output": "# Function to convert English sentence to Pig Latin \ndef pig_latin(sentence): \n      \n    # Separate the sentence into words \n    words = sentence.split(' ') \n      \n    # Convert each word into Pig Latin \n    pig_latin_words = [] \n    for word in words: \n        pig_latin_words.append(convert(word)) \n      \n    # Return the sentence with words converted to Pig Latin \n    return ' '.join(pig_latin_words) \n  \n# Function to convert English word to Pig Latin \ndef convert(word): \n      \n    # IF the word contains just one letter then return the same \n    if len(word) == 1: \n        return word \n     \n    # If word is a vocal then just add \"way\" at the end \n    elif word[0] in 'aeiou': \n        return word + \"way\"\n      \n    # If word begins with a consonant then move the consonant to the end and add \"ay\" \n    else: \n        return word[1:] + word[0] + \"ay\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a sentence and converts it into Pig Latin.\n\n### Input:\n\n\n### Output:\n# Function to convert English sentence to Pig Latin \ndef pig_latin(sentence): \n      \n    # Separate the sentence into words \n    words = sentence.split(' ') \n      \n    # Convert each word into Pig Latin \n    pig_latin_words = [] \n    for word in words: \n        pig_latin_words.append(convert(word)) \n      \n    # Return the sentence with words converted to Pig Latin \n    return ' '.join(pig_latin_words) \n  \n# Function to convert English word to Pig Latin \ndef convert(word): \n      \n    # IF the word contains just one letter then return the same \n    if len(word) == 1: \n        return word \n     \n    # If word is a vocal then just add \"way\" at the end \n    elif word[0] in 'aeiou': \n        return word + \"way\"\n      \n    # If word begins with a consonant then move the consonant to the end and add \"ay\" \n    else: \n        return word[1:] + word[0] + \"ay\""}
{"instruction": "Design an algorithm in Python to detect if a given tree is a binary search tree.", "input": "", "output": "\"\"\"\nDesign an algorithm in Python to detect if a given tree is a binary search tree\n\"\"\"\n\n#Define the Node class\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# Define the isBST function \ndef isBST(root): \n    # Base condition\n    if root is None: \n        return True\n  \n    # Check if the value is within range\n    if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): \n        return False\n  \n    # Check the subtrees\n    if (not isBST(root.left)) or (not isBST(root.right)): \n        return False\n  \n    # Pass all test cases\n    return True\n  \n# Find the minimum value in a tree\ndef getMinValue(root): \n    if root is None: \n        return float(\"inf\") \n    minv = root.val \n    minv = min(minv, getMinValue(root.left)) \n    minv = min(minv, getMinValue(root.right)) \n    return minv\n  \n  \n# Find the maximum value in a tree\ndef getMaxValue(root): \n    if root is None: \n        return -float(\"inf\") \n    maxv = root.val \n    maxv = max(maxv, getMaxValue(root.left)) \n    maxv = max(maxv, getMaxValue(root.right)) \n    return maxv", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to detect if a given tree is a binary search tree.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign an algorithm in Python to detect if a given tree is a binary search tree\n\"\"\"\n\n#Define the Node class\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# Define the isBST function \ndef isBST(root): \n    # Base condition\n    if root is None: \n        return True\n  \n    # Check if the value is within range\n    if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): \n        return False\n  \n    # Check the subtrees\n    if (not isBST(root.left)) or (not isBST(root.right)): \n        return False\n  \n    # Pass all test cases\n    return True\n  \n# Find the minimum value in a tree\ndef getMinValue(root): \n    if root is None: \n        return float(\"inf\") \n    minv = root.val \n    minv = min(minv, getMinValue(root.left)) \n    minv = min(minv, getMinValue(root.right)) \n    return minv\n  \n  \n# Find the maximum value in a tree\ndef getMaxValue(root): \n    if root is None: \n        return -float(\"inf\") \n    maxv = root.val \n    maxv = max(maxv, getMaxValue(root.left)) \n    maxv = max(maxv, getMaxValue(root.right)) \n    return maxv"}
{"instruction": "Using OOP paradigm, create a Python class for a character in a role-playing game.", "input": "", "output": "class Character:\n    def __init__(self,name,hp,mp,strength,intelligence,dexterity):\n        self.name = name\n        self.hp = hp\n        self.mp = mp\n        self.strength = strength\n        self.intelligence = intelligence\n        self.dexterity = dexterity\n        \n    def print_stats(self):\n        print(f\"Name: {self.name} \\nHP: {self.hp} \\nMP: {self.mp} \\nStrength: {self.strength} \\nIntelligence: {self.intelligence} \\nDexterity: {self.dexterity}\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing OOP paradigm, create a Python class for a character in a role-playing game.\n\n### Input:\n\n\n### Output:\nclass Character:\n    def __init__(self,name,hp,mp,strength,intelligence,dexterity):\n        self.name = name\n        self.hp = hp\n        self.mp = mp\n        self.strength = strength\n        self.intelligence = intelligence\n        self.dexterity = dexterity\n        \n    def print_stats(self):\n        print(f\"Name: {self.name} \\nHP: {self.hp} \\nMP: {self.mp} \\nStrength: {self.strength} \\nIntelligence: {self.intelligence} \\nDexterity: {self.dexterity}\")"}
{"instruction": "Create an algorithm in Python to solve \"Tower of Hanoi\" game of a 4 disk problem.", "input": "", "output": "def solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): \n    if num_disks == 1: \n        print(\"Move disk 1 from rod\", start_rod, \"to rod\", end_rod) \n        return\n    solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) \n    print(\"Move disk\", num_disks, \"from rod\", start_rod, \"to rod\", end_rod) \n    solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) \n  \n  \n# Driver code \nnum_disks = 4\nsolveTowerOfHanoi(num_disks)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to solve \"Tower of Hanoi\" game of a 4 disk problem.\n\n### Input:\n\n\n### Output:\ndef solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): \n    if num_disks == 1: \n        print(\"Move disk 1 from rod\", start_rod, \"to rod\", end_rod) \n        return\n    solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) \n    print(\"Move disk\", num_disks, \"from rod\", start_rod, \"to rod\", end_rod) \n    solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) \n  \n  \n# Driver code \nnum_disks = 4\nsolveTowerOfHanoi(num_disks)"}
{"instruction": "Construct a linear regression model in Python to predict the output of a dataset.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the dataset\ndf = pd.read_csv('dataset.csv')\n\n# Extract input and output features\nX = df[df.columns[:-1]].values\ny = df[df.columns[-1]].values\n\n# Create and fit the model\nmodel = LinearRegression().fit(X, y)\n\n# Output the model coefficients \nprint('Intercept:', model.intercept_)  \nfor i, col in enumerate(df.columns[:-1]):\n    print(f'Coefficient of {col} : {model.coef_[i]}')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a linear regression model in Python to predict the output of a dataset.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the dataset\ndf = pd.read_csv('dataset.csv')\n\n# Extract input and output features\nX = df[df.columns[:-1]].values\ny = df[df.columns[-1]].values\n\n# Create and fit the model\nmodel = LinearRegression().fit(X, y)\n\n# Output the model coefficients \nprint('Intercept:', model.intercept_)  \nfor i, col in enumerate(df.columns[:-1]):\n    print(f'Coefficient of {col} : {model.coef_[i]}')"}
{"instruction": "Implement a web scraper in Python to extract the top ten trending YouTube videos.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# make a request to get the page content\npage = requests.get(\"https://www.youtube.com/feed/trending\")\n\n# parse the page content\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract the list of trending videos\ntrending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper')\n\n# print the top ten trending videos\nfor video in trending_videos[:10]:\n    print(video.find(class_='yt-uix-tile-link').get('title'))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web scraper in Python to extract the top ten trending YouTube videos.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# make a request to get the page content\npage = requests.get(\"https://www.youtube.com/feed/trending\")\n\n# parse the page content\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract the list of trending videos\ntrending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper')\n\n# print the top ten trending videos\nfor video in trending_videos[:10]:\n    print(video.find(class_='yt-uix-tile-link').get('title'))"}
{"instruction": "Write a Python program to scrape data from a webpage https://www.example.com/data", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.example.com/data'\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Storing data in list \ndata = []\nfor tr_list in soup.find_all('tr'):\n    # store data in list \n    data.append([td_list.text.strip() for td_list in tr_list.find_all('td')])\n    \n# printing fetched data\nfor tr_list in data:\n    print(tr_list)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scrape data from a webpage https://www.example.com/data\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.example.com/data'\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Storing data in list \ndata = []\nfor tr_list in soup.find_all('tr'):\n    # store data in list \n    data.append([td_list.text.strip() for td_list in tr_list.find_all('td')])\n    \n# printing fetched data\nfor tr_list in data:\n    print(tr_list)"}
{"instruction": "Develop a web crawler in Python to scrape all headlines from a given news website", "input": "", "output": "import requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl_headlines(url): \n    \n    code = requests.get(url)  \n    plain = code.text  \n    soup = BeautifulSoup(plain, \"html.parser\")  \n  \n    headlines = [] \n    for headline in soup.find_all('a', {'class': 'story-link'}): \n        headlines.append(headline.string) \n          \n    return headlines \n  \n\nURL = \"https://www.example.com/news\"\nheadlines =  crawl_headlines(URL) \nprint(\"Headlines:\\n\") \n\nfor headline in headlines: \n    print(headline)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web crawler in Python to scrape all headlines from a given news website\n\n### Input:\n\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl_headlines(url): \n    \n    code = requests.get(url)  \n    plain = code.text  \n    soup = BeautifulSoup(plain, \"html.parser\")  \n  \n    headlines = [] \n    for headline in soup.find_all('a', {'class': 'story-link'}): \n        headlines.append(headline.string) \n          \n    return headlines \n  \n\nURL = \"https://www.example.com/news\"\nheadlines =  crawl_headlines(URL) \nprint(\"Headlines:\\n\") \n\nfor headline in headlines: \n    print(headline)"}
{"instruction": "Create an expression parser in Python to evaluate basic mathematical expressions.", "input": "", "output": "# Assume input is a valid mathematical expression with no syntax errors \n\ndef expression_parser(expression): \n    tokens = expression.split() \n    stack = [] \n  \n    for token in tokens: \n        if token == '+' or token == '*' or token == '/': \n            a = stack.pop() \n            b = stack.pop() \n            if token == '+': \n                c = b + a \n            elif token == '*': \n                c = b * a \n            else: \n                c = b / a \n            stack.append(c) \n        else: \n            stack.append(int(token)) \n    return stack.pop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an expression parser in Python to evaluate basic mathematical expressions.\n\n### Input:\n\n\n### Output:\n# Assume input is a valid mathematical expression with no syntax errors \n\ndef expression_parser(expression): \n    tokens = expression.split() \n    stack = [] \n  \n    for token in tokens: \n        if token == '+' or token == '*' or token == '/': \n            a = stack.pop() \n            b = stack.pop() \n            if token == '+': \n                c = b + a \n            elif token == '*': \n                c = b * a \n            else: \n                c = b / a \n            stack.append(c) \n        else: \n            stack.append(int(token)) \n    return stack.pop()"}
{"instruction": "Generate a program to find all the prime numbers between 1100 and 1300 in Python.", "input": "", "output": "def is_prime(n):\n    if n==2 or n==3: return True\n    if n%2==0 or n<2: return False\n \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n\ndef find_prime_numbers(start, end):\n    primes = []\n    for num in range(start,end + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nprint(find_prime_numbers(1100, 1300)) # Output: [1103, 1105, 1107, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to find all the prime numbers between 1100 and 1300 in Python.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    if n==2 or n==3: return True\n    if n%2==0 or n<2: return False\n \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n\ndef find_prime_numbers(start, end):\n    primes = []\n    for num in range(start,end + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nprint(find_prime_numbers(1100, 1300)) # Output: [1103, 1105, 1107, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297]"}
{"instruction": "Modify the provided Python code to find the prime numbers up to the given number.", "input": "", "output": "def prime_numbers(number):\n    # initialise prime list to empty\n    prime_list = []\n    \n    # loop over the range from 2 to the given number\n    for num in range(2, number + 1):\n        \n        # assume the number to be a prime number\n        is_prime = True\n        \n        # check if any number less than it divides num\n        for divider in range(2, num):\n            if (num % divider == 0):\n                is_prime = False\n                break\n        \n        # append the number to the prime list\n        if is_prime:\n            prime_list.append(num)\n    \n    # return the result\n    return prime_list", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the provided Python code to find the prime numbers up to the given number.\n\n### Input:\n\n\n### Output:\ndef prime_numbers(number):\n    # initialise prime list to empty\n    prime_list = []\n    \n    # loop over the range from 2 to the given number\n    for num in range(2, number + 1):\n        \n        # assume the number to be a prime number\n        is_prime = True\n        \n        # check if any number less than it divides num\n        for divider in range(2, num):\n            if (num % divider == 0):\n                is_prime = False\n                break\n        \n        # append the number to the prime list\n        if is_prime:\n            prime_list.append(num)\n    \n    # return the result\n    return prime_list"}
{"instruction": "Create a server in Python that uses TCP to transmit messages between two clients.", "input": "", "output": "import socket\nimport threading\n\n# Create a network socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind socket to port\nserver_address = ('127.0.0.1', 10000)\ns.bind(server_address)\n\n# Wait for incoming connection\ns.listen()\n\n# Thread for handling incoming connection\ndef client_thread(conn):\n    while True:\n        data = conn.recv(4096)\n        conn.send(data)\n\n# Main thread loop\nwhile True:\n    conn, addr = s.accept()\n    print(\"Connected to:\", addr)\n\n    # Start the client thread for handling incoming connection\n    thread = threading.Thread(target=client_thread, args=(conn,))\n    thread.start()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a server in Python that uses TCP to transmit messages between two clients.\n\n### Input:\n\n\n### Output:\nimport socket\nimport threading\n\n# Create a network socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind socket to port\nserver_address = ('127.0.0.1', 10000)\ns.bind(server_address)\n\n# Wait for incoming connection\ns.listen()\n\n# Thread for handling incoming connection\ndef client_thread(conn):\n    while True:\n        data = conn.recv(4096)\n        conn.send(data)\n\n# Main thread loop\nwhile True:\n    conn, addr = s.accept()\n    print(\"Connected to:\", addr)\n\n    # Start the client thread for handling incoming connection\n    thread = threading.Thread(target=client_thread, args=(conn,))\n    thread.start()"}
{"instruction": "Write a Python function to find the most Frequent words in a given list of words.", "input": "", "output": "def find_frequent_words(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_word_count = 0\n    frequent_words = []\n    for word, count in word_counts.items():\n        if count > max_word_count:\n            frequent_words = [word]\n            max_word_count = count\n        elif count == max_word_count:\n            frequent_words.append(word)\n            \n    return frequent_words\n\nwords = [\"cat\", \"dog\", \"cat\", \"bird\", \"cat\"]\nfrequent_words = find_frequent_words(words)\nprint(\"Most frequent words: \", frequent_words)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the most Frequent words in a given list of words.\n\n### Input:\n\n\n### Output:\ndef find_frequent_words(words):\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    \n    max_word_count = 0\n    frequent_words = []\n    for word, count in word_counts.items():\n        if count > max_word_count:\n            frequent_words = [word]\n            max_word_count = count\n        elif count == max_word_count:\n            frequent_words.append(word)\n            \n    return frequent_words\n\nwords = [\"cat\", \"dog\", \"cat\", \"bird\", \"cat\"]\nfrequent_words = find_frequent_words(words)\nprint(\"Most frequent words: \", frequent_words)"}
{"instruction": "Suggest a Python generator for all possible combinations of r elements in a list.", "input": "", "output": "def combination_generator(lst, r):\n    # Initialize empty list\n    combinations = []\n    \n    # Create a loop to pick every element\n    for i in range(len(lst)):\n        \n        # Create a loop to create permutations \n        # of the picked elements\n        for j in combinations:\n            s = j[:]\n            s.append(lst[i])\n            if len(s) == r:\n                combinations.append(s)\n            elif len(s) < r:\n                combinations.append(s)\n                for k in range(i+1, len(lst)):\n                    s = s[:]\n                    s.append(lst[k])\n                    if len(s) == r:\n                        combinations.append(s)\n    return combinations", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a Python generator for all possible combinations of r elements in a list.\n\n### Input:\n\n\n### Output:\ndef combination_generator(lst, r):\n    # Initialize empty list\n    combinations = []\n    \n    # Create a loop to pick every element\n    for i in range(len(lst)):\n        \n        # Create a loop to create permutations \n        # of the picked elements\n        for j in combinations:\n            s = j[:]\n            s.append(lst[i])\n            if len(s) == r:\n                combinations.append(s)\n            elif len(s) < r:\n                combinations.append(s)\n                for k in range(i+1, len(lst)):\n                    s = s[:]\n                    s.append(lst[k])\n                    if len(s) == r:\n                        combinations.append(s)\n    return combinations"}
{"instruction": "Generate an object-oriented Python code to create a Guitar class with properties.", "input": "", "output": "class Guitar:\n \n    # initialise the class\n    def __init__(self, brand=None, wood=None, strings=None, pickups=None):\n        self.brand = brand\n        self.wood = wood\n        self.strings = strings\n        self.pickups = pickups\n \n    # define getter and setter methods\n    def set_brand(self, brand):\n        self.brand = brand\n \n    def get_brand(self):\n        return self.brand\n \n    def set_wood(self, wood):\n        self.wood = wood\n \n    def get_wood(self):\n        return self.wood\n \n    def set_strings(self, strings):\n        self.strings = strings\n \n    def get_strings(self):\n        return self.strings\n \n    def set_pickups(self, pickups):\n        self.pickups = pickups\n \n    def get_pickups(self):\n        return self.pickups", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an object-oriented Python code to create a Guitar class with properties.\n\n### Input:\n\n\n### Output:\nclass Guitar:\n \n    # initialise the class\n    def __init__(self, brand=None, wood=None, strings=None, pickups=None):\n        self.brand = brand\n        self.wood = wood\n        self.strings = strings\n        self.pickups = pickups\n \n    # define getter and setter methods\n    def set_brand(self, brand):\n        self.brand = brand\n \n    def get_brand(self):\n        return self.brand\n \n    def set_wood(self, wood):\n        self.wood = wood\n \n    def get_wood(self):\n        return self.wood\n \n    def set_strings(self, strings):\n        self.strings = strings\n \n    def get_strings(self):\n        return self.strings\n \n    def set_pickups(self, pickups):\n        self.pickups = pickups\n \n    def get_pickups(self):\n        return self.pickups"}
{"instruction": "Design a class in Python to store customer information for an e-commerce website.", "input": "", "output": "class Customer:\ndef __init__(self, name, email, address, phone, credit_card_number):\n self.name = name\n self.email = email\n self.address = address\n self.phone = phone\n self.credit_card_number = credit_card_number\n \ndef get_name(self):\n return self.name\n \ndef set_name(self, name):\n self.name = name\n \ndef get_email(self):\n return self.email\n \ndef set_email(self, email):\n self.email = email\n \ndef get_address(self):\n return self.address\n \ndef set_address(self, address):\n self.address = address\n \ndef get_phone(self):\n return self.phone\n \ndef set_phone(self, phone):\n self.phone = phone\n \ndef get_credit_card_number(self):\n return self.credit_card_number\n \ndef set_credit_card_number(self, credit_card_number):\n self.credit_card_number = credit_card_number", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to store customer information for an e-commerce website.\n\n### Input:\n\n\n### Output:\nclass Customer:\ndef __init__(self, name, email, address, phone, credit_card_number):\n self.name = name\n self.email = email\n self.address = address\n self.phone = phone\n self.credit_card_number = credit_card_number\n \ndef get_name(self):\n return self.name\n \ndef set_name(self, name):\n self.name = name\n \ndef get_email(self):\n return self.email\n \ndef set_email(self, email):\n self.email = email\n \ndef get_address(self):\n return self.address\n \ndef set_address(self, address):\n self.address = address\n \ndef get_phone(self):\n return self.phone\n \ndef set_phone(self, phone):\n self.phone = phone\n \ndef get_credit_card_number(self):\n return self.credit_card_number\n \ndef set_credit_card_number(self, credit_card_number):\n self.credit_card_number = credit_card_number"}
{"instruction": "You need to create a python module to explain the Canny Edge Detection algorithm.", "input": "", "output": "import numpy as np\n \ndef cannyEdgeDetector(img, sigma):\n    \n    # Step 1: Filter the image with a Gaussian filter to remove noise\n    blurred = gaussianFilter(img, sigma)\n    \n    # Step 2: Obtain the gradients (Gx, Gy) of the blurred image\n    Gx, Gy = sobelFilter(blurred)\n    \n    # Step 3: Calculate the magnitude and angle of the gradient\n    magnitude, angle = calculateGradient(Gx, Gy)\n    \n    # Step 4: Non-maximum suppression to thin the edges while retaining \n    # strong edge points\n    thin_image = nonMaximumSuppression(magnitude, angle)\n    \n    # Step 5: Double threshold to classify pixels as weak or strong edge\n    strong_px, weak_px = doubleThreshold(thin_image)\n    \n    # Step 6: Trace through the edge map and obtain the final edges\n    edges = followEdge(strong_px, weak_px)\n    \n    return edges", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to create a python module to explain the Canny Edge Detection algorithm.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n \ndef cannyEdgeDetector(img, sigma):\n    \n    # Step 1: Filter the image with a Gaussian filter to remove noise\n    blurred = gaussianFilter(img, sigma)\n    \n    # Step 2: Obtain the gradients (Gx, Gy) of the blurred image\n    Gx, Gy = sobelFilter(blurred)\n    \n    # Step 3: Calculate the magnitude and angle of the gradient\n    magnitude, angle = calculateGradient(Gx, Gy)\n    \n    # Step 4: Non-maximum suppression to thin the edges while retaining \n    # strong edge points\n    thin_image = nonMaximumSuppression(magnitude, angle)\n    \n    # Step 5: Double threshold to classify pixels as weak or strong edge\n    strong_px, weak_px = doubleThreshold(thin_image)\n    \n    # Step 6: Trace through the edge map and obtain the final edges\n    edges = followEdge(strong_px, weak_px)\n    \n    return edges"}
{"instruction": "Create a classification algorithm in Python to distinguish between cats and dogs.", "input": "", "output": "# Import Python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score \n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nX = data[['Height','Weight','Length']].values\ny = data['Label'].values\n\n# Encode labels\nencoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)\n\n# Train classifier\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Classification accuracy: ', accuracy * 100, '%')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a classification algorithm in Python to distinguish between cats and dogs.\n\n### Input:\n\n\n### Output:\n# Import Python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score \n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nX = data[['Height','Weight','Length']].values\ny = data['Label'].values\n\n# Encode labels\nencoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)\n\n# Train classifier\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Classification accuracy: ', accuracy * 100, '%')"}
{"instruction": "Formulate a Python code for calculating the Levenshtein distance for two strings.", "input": "", "output": "def calculateLevenshteinDistance(str1, str2): \n    n = len(str1)\n    m = len(str2)\n  \n    # Create a matrix to store results \n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n    # Initialize the first row and column with the difference of lengths\n    for i in range(n + 1): \n        for j in range(m + 1): \n    \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n  \n    # Iterate through the matrix and replace the \n    # cells with the required edit distance\n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1]\n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[n][m]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a Python code for calculating the Levenshtein distance for two strings.\n\n### Input:\n\n\n### Output:\ndef calculateLevenshteinDistance(str1, str2): \n    n = len(str1)\n    m = len(str2)\n  \n    # Create a matrix to store results \n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n    # Initialize the first row and column with the difference of lengths\n    for i in range(n + 1): \n        for j in range(m + 1): \n    \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n  \n    # Iterate through the matrix and replace the \n    # cells with the required edit distance\n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1]\n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[n][m]"}
{"instruction": "Train a Python model to predict whether a given sentence is positive or negative.", "input": "", "output": "\"\"\"\nBuilding a Python model to predict whether a given sentence is positive or negative.\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n \ndef sentiment_model(sentences):\n    # Read in data\n    data = pd.DataFrame(sentences, columns=['sentence'])\n\n    # Convert text data to bag of words\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(data['sentence'])\n\n    # Split data into train and test sets\n    labels = np.array([1, 0])\n    X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(),\n                                                        labels,\n                                                        test_size=0.1, \n                                                        random_state=42)\n\n    # Fit Naive Bayes model\n    clf = MultinomialNB()\n    clf.fit(X_train, y_train)\n\n    # Make predictions\n    return clf.predict(X_test)\n\nif __name__ == '__main__':\n    sentences = <put input here>\n    print(sentiment_model(sentences))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a Python model to predict whether a given sentence is positive or negative.\n\n### Input:\n\n\n### Output:\n\"\"\"\nBuilding a Python model to predict whether a given sentence is positive or negative.\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n \ndef sentiment_model(sentences):\n    # Read in data\n    data = pd.DataFrame(sentences, columns=['sentence'])\n\n    # Convert text data to bag of words\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(data['sentence'])\n\n    # Split data into train and test sets\n    labels = np.array([1, 0])\n    X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(),\n                                                        labels,\n                                                        test_size=0.1, \n                                                        random_state=42)\n\n    # Fit Naive Bayes model\n    clf = MultinomialNB()\n    clf.fit(X_train, y_train)\n\n    # Make predictions\n    return clf.predict(X_test)\n\nif __name__ == '__main__':\n    sentences = <put input here>\n    print(sentiment_model(sentences))"}
{"instruction": "Demonstrate how to use classes and objects in Python by creating an Account class", "input": "", "output": "class Account:\n    def __init__(self, name, balance):\n        # instance attributes\n        self.name = name\n        self.balance = balance\n    \n    # method to withdraw money from account\n    def withdraw(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # check if amount is greater than balance\n        if amount > self.balance:\n            raise ValueError('Insufficient funds')\n        \n        # subtract the amount from the balance\n        self.balance -= amount\n    \n    # method to deposit money to account\n    def deposit(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # add the amount to the balance\n        self.balance +=amount\n\n# create an instance of the Account class\nmy_account = Account('John Doe', 100)\n\n# withdraw money from account\nmy_account.withdraw(50)\n\n# deposit money to account\nmy_account.deposit(20)\n\n# print the updated balance\nprint('Account balance:', my_account.balance)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDemonstrate how to use classes and objects in Python by creating an Account class\n\n### Input:\n\n\n### Output:\nclass Account:\n    def __init__(self, name, balance):\n        # instance attributes\n        self.name = name\n        self.balance = balance\n    \n    # method to withdraw money from account\n    def withdraw(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # check if amount is greater than balance\n        if amount > self.balance:\n            raise ValueError('Insufficient funds')\n        \n        # subtract the amount from the balance\n        self.balance -= amount\n    \n    # method to deposit money to account\n    def deposit(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # add the amount to the balance\n        self.balance +=amount\n\n# create an instance of the Account class\nmy_account = Account('John Doe', 100)\n\n# withdraw money from account\nmy_account.withdraw(50)\n\n# deposit money to account\nmy_account.deposit(20)\n\n# print the updated balance\nprint('Account balance:', my_account.balance)"}
{"instruction": "Develop an algorithm using Python to convert a given number (0-99999) into words.", "input": "", "output": "def num_to_words(num):\n    basic_terms = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n        10: \"ten\",\n        11: \"eleven\",\n        12: \"twelve\",\n        13: \"thirteen\",\n        20: \"twenty\",\n        30: \"thirty\",\n        40: \"forty\",\n        50: \"fifty\",\n        60: \"sixty\",\n        70: \"seventy\",\n        80: \"eighty\",\n        90: \"ninety\"\n    }\n    \n    if num in basic_terms.keys():\n        return basic_terms[num]\n\n    else:\n        num_words = \"\"\n        if num > 20 and num < 100:\n            num_words += basic_terms[num - (num % 10)] + \" \"\n                         + basic_terms[num % 10]\n        elif num >= 100 and num < 1000:\n            num_words += basic_terms[num // 100] + \" \" + \"hundred \" \n            if num % 100 != 0:\n                num_words += num_to_words(num % 100)\n        elif num >= 1000 and num < 10000:\n            num_words += basic_terms[num // 1000] + \" \" + \"thousand \" \n            if num % 1000 != 0:\n                num_words += num_to_words(num % 1000)\n    return num_words", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm using Python to convert a given number (0-99999) into words.\n\n### Input:\n\n\n### Output:\ndef num_to_words(num):\n    basic_terms = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n        10: \"ten\",\n        11: \"eleven\",\n        12: \"twelve\",\n        13: \"thirteen\",\n        20: \"twenty\",\n        30: \"thirty\",\n        40: \"forty\",\n        50: \"fifty\",\n        60: \"sixty\",\n        70: \"seventy\",\n        80: \"eighty\",\n        90: \"ninety\"\n    }\n    \n    if num in basic_terms.keys():\n        return basic_terms[num]\n\n    else:\n        num_words = \"\"\n        if num > 20 and num < 100:\n            num_words += basic_terms[num - (num % 10)] + \" \"\n                         + basic_terms[num % 10]\n        elif num >= 100 and num < 1000:\n            num_words += basic_terms[num // 100] + \" \" + \"hundred \" \n            if num % 100 != 0:\n                num_words += num_to_words(num % 100)\n        elif num >= 1000 and num < 10000:\n            num_words += basic_terms[num // 1000] + \" \" + \"thousand \" \n            if num % 1000 != 0:\n                num_words += num_to_words(num % 1000)\n    return num_words"}
{"instruction": "Generate code in Python to convert an infix expression into a postfix expression.", "input": "", "output": "# Function to convert Infix expression to Postfix \ndef infixToPostfix(expression): \n\n# empty list that will store the postfix expression \npostfix = []  \n\n# dictionary containing the precedence value of operators \nprecedence = {'^':3, '*':3, '/':3, '+':2, '-':2, '(':1} \n\n# Stack to store operators \nstack = [] \n\n# Iterate over the expression for conversion \nfor char in expression: \n\n# If an operand is encountered, add it to the list postfix \nif char not in precedence.keys(): \n  postfix.append(char) \n\n# If left parenthesis is encountered, push it onto the stack \nelif char == '(': \n  stack.append(char) \n\n# If right parenthesis is encountered, pop from the  \n# stack, till the corresponding left parenthesis is not found \n# and append all operators to postfix expression \nelif char == ')': \n  temp = stack.pop() \n  while(temp != '('): \n    postfix.append(temp) \n    temp = stack.pop() \n\n# If an operator is encountered, check which operator  \n# has higher precedence, then pop the higher precedence  \n# operator and add it to the postfix expression, then  \n# push the lower precedence operator onto the stack  \nelse: \n  while(len(stack) != 0 and precedence[char] <= precedence[stack[-1]]): \n    postfix.append(stack.pop()) \n  stack.append(char) \n\n# Pop the remaining operators from the stack and add them  \nwhile len(stack) != 0: \n  postfix.append(stack.pop()) \n\nreturn \"\".join(postfix)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code in Python to convert an infix expression into a postfix expression.\n\n### Input:\n\n\n### Output:\n# Function to convert Infix expression to Postfix \ndef infixToPostfix(expression): \n\n# empty list that will store the postfix expression \npostfix = []  \n\n# dictionary containing the precedence value of operators \nprecedence = {'^':3, '*':3, '/':3, '+':2, '-':2, '(':1} \n\n# Stack to store operators \nstack = [] \n\n# Iterate over the expression for conversion \nfor char in expression: \n\n# If an operand is encountered, add it to the list postfix \nif char not in precedence.keys(): \n  postfix.append(char) \n\n# If left parenthesis is encountered, push it onto the stack \nelif char == '(': \n  stack.append(char) \n\n# If right parenthesis is encountered, pop from the  \n# stack, till the corresponding left parenthesis is not found \n# and append all operators to postfix expression \nelif char == ')': \n  temp = stack.pop() \n  while(temp != '('): \n    postfix.append(temp) \n    temp = stack.pop() \n\n# If an operator is encountered, check which operator  \n# has higher precedence, then pop the higher precedence  \n# operator and add it to the postfix expression, then  \n# push the lower precedence operator onto the stack  \nelse: \n  while(len(stack) != 0 and precedence[char] <= precedence[stack[-1]]): \n    postfix.append(stack.pop()) \n  stack.append(char) \n\n# Pop the remaining operators from the stack and add them  \nwhile len(stack) != 0: \n  postfix.append(stack.pop()) \n\nreturn \"\".join(postfix)"}
{"instruction": "Create a Python Flask application to implement a RESTful API for a given data set.", "input": "", "output": "from flask import Flask, request, jsonify\nimport json \n\napp = Flask(__name__)\n\n# Load the data set \nwith open('data.json', 'r') as f:\n data = json.load(f)\n\n@app.route('/data', methods=['GET', 'POST'])\ndef data_handler():\n if request.method == 'GET':\n  return jsonify(data)\n elif request.method == 'POST':\n  content = request.get_json(silent=True)\n  data.append(content)\n  return jsonify(data)\n\nif __name__ == '__main__':\n app.run()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Flask application to implement a RESTful API for a given data set.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, request, jsonify\nimport json \n\napp = Flask(__name__)\n\n# Load the data set \nwith open('data.json', 'r') as f:\n data = json.load(f)\n\n@app.route('/data', methods=['GET', 'POST'])\ndef data_handler():\n if request.method == 'GET':\n  return jsonify(data)\n elif request.method == 'POST':\n  content = request.get_json(silent=True)\n  data.append(content)\n  return jsonify(data)\n\nif __name__ == '__main__':\n app.run()"}
{"instruction": "Design an Artificial Neural Network in Python to identify the sentiment of tweets.", "input": "", "output": "import numpy as np \nimport tensorflow as tf\n\n#Define Model Layers\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim, input_length=max_length),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n#Compile Model\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an Artificial Neural Network in Python to identify the sentiment of tweets.\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport tensorflow as tf\n\n#Define Model Layers\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim, input_length=max_length),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n#Compile Model\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])"}
{"instruction": "Create an algorithm in Python to determine whether a given string is a palindrome.", "input": "", "output": "# define a function to check if a string is a palindrome\ndef is_palindrome(string):\n    # reverse the string \n    reversed_string = string[::-1]\n    # check if reversed string is equal to original \n    if string == reversed_string:\n        return True\n    else:\n        return False\n \n# check for given string\nstring = 'malayalam'\nif is_palindrome(string):\n    print(string + ' is a palindrome')\nelse:\n    print(string + ' is not a palindrome')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to determine whether a given string is a palindrome.\n\n### Input:\n\n\n### Output:\n# define a function to check if a string is a palindrome\ndef is_palindrome(string):\n    # reverse the string \n    reversed_string = string[::-1]\n    # check if reversed string is equal to original \n    if string == reversed_string:\n        return True\n    else:\n        return False\n \n# check for given string\nstring = 'malayalam'\nif is_palindrome(string):\n    print(string + ' is a palindrome')\nelse:\n    print(string + ' is not a palindrome')"}
{"instruction": "Create a deep learning algorithm in Python to classify emails as spam or not spam.", "input": "", "output": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\ndef create_spam_classifier():\n model = Sequential()\n model.add(Dense(128, activation='relu', input_shape=(20,)))\n model.add(Dropout(0.5))\n model.add(Dense(1, activation='sigmoid'))\n \n model.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n )\n\n return model\n\nif __name__ == \"__main__\":\n model = create_spam_classifier()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a deep learning algorithm in Python to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\ndef create_spam_classifier():\n model = Sequential()\n model.add(Dense(128, activation='relu', input_shape=(20,)))\n model.add(Dropout(0.5))\n model.add(Dense(1, activation='sigmoid'))\n \n model.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n )\n\n return model\n\nif __name__ == \"__main__\":\n model = create_spam_classifier()"}
{"instruction": "Write a Python algorithm to find the Minimum Spanning Tree using Prim's algorithm.", "input": "", "output": "def prim(G, start):\n    node = start\n    visited = set()\n    edges = []\n    visited.add(node)\n    while len(visited) < G.num_nodes:\n        min_edge = float(\"inf\")\n        for neighbor, weight in G.neighbors[node]:\n            if neighbor not in visited and weight < min_edge:\n                min_edge = weight\n                new_node = neighbor\n        edges.append((node, new_node, min_edge))\n        visited.add(new_node)\n        node = new_node\n    return edges", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to find the Minimum Spanning Tree using Prim's algorithm.\n\n### Input:\n\n\n### Output:\ndef prim(G, start):\n    node = start\n    visited = set()\n    edges = []\n    visited.add(node)\n    while len(visited) < G.num_nodes:\n        min_edge = float(\"inf\")\n        for neighbor, weight in G.neighbors[node]:\n            if neighbor not in visited and weight < min_edge:\n                min_edge = weight\n                new_node = neighbor\n        edges.append((node, new_node, min_edge))\n        visited.add(new_node)\n        node = new_node\n    return edges"}
{"instruction": "Can you develop a function in Python to check if two given strings are isomorphic?", "input": "", "output": "def isIsomorphic(s1, s2):\n    # Create a dictionary to map character from one string to another\n    map_dict = {}\n\n    if len(s1) != len(s2):\n        return False\n\n    for i in range(len(s1)):\n        if s1[i] not in map_dict:\n            # Check if the mapped character already occurs in target string\n            if s2[i] in map_dict.values():\n                return False\n            # Store the mapping  \n            map_dict[s1[i]] = s2[i]\n        elif map_dict[s1[i]] != s2[i]:\n            return False\n\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a function in Python to check if two given strings are isomorphic?\n\n### Input:\n\n\n### Output:\ndef isIsomorphic(s1, s2):\n    # Create a dictionary to map character from one string to another\n    map_dict = {}\n\n    if len(s1) != len(s2):\n        return False\n\n    for i in range(len(s1)):\n        if s1[i] not in map_dict:\n            # Check if the mapped character already occurs in target string\n            if s2[i] in map_dict.values():\n                return False\n            # Store the mapping  \n            map_dict[s1[i]] = s2[i]\n        elif map_dict[s1[i]] != s2[i]:\n            return False\n\n    return True"}
{"instruction": "Create a web scraper in Python to extract the text content from multiple webpages.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch the webpages \nresponse = requests.get('https://example.com/page1.html')\n#response2 = requests.get('https://example.com/page2.html')\n#..\n#responseN = requests.get('https://example.com/pageN.html')\n\n# Parse the HTML contents  \nsoup = BeautifulSoup(response.text, 'lxml')\n#soup2 = BeautifulSoup(response2.text, 'lxml')\n#..\n#soupN = BeautifulSoup(responseN.text, 'lxml')\n\n# Extract the text content of each webpage \ntext_content = soup.get_text()\n#text_content2 = soup2.get_text()\n#.\n#text_contentN = soupN.get_text()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract the text content from multiple webpages.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Fetch the webpages \nresponse = requests.get('https://example.com/page1.html')\n#response2 = requests.get('https://example.com/page2.html')\n#..\n#responseN = requests.get('https://example.com/pageN.html')\n\n# Parse the HTML contents  \nsoup = BeautifulSoup(response.text, 'lxml')\n#soup2 = BeautifulSoup(response2.text, 'lxml')\n#..\n#soupN = BeautifulSoup(responseN.text, 'lxml')\n\n# Extract the text content of each webpage \ntext_content = soup.get_text()\n#text_content2 = soup2.get_text()\n#.\n#text_contentN = soupN.get_text()"}
{"instruction": "Design an algorithm in Python to find the longest common substring in two strings.", "input": "", "output": "def longestCommonSubstring(string1, string2):\n    n1=len(string1)\n    n2=len(string2)\n    \n    L=[[0 for _ in range(n2+1)]for _ in range(n1+1)]\n    longestSubstring=\"\"\n    longestSubstringLength=0\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if string1[i-1]==string2[j-1]:\n                L[i][j]=L[i-1][j-1]+1\n                if L[i][j]>longestSubstringLength:\n                    longestSubstringLength=L[i][j]\n                    longestSubstring=string1[i-1-longestSubstringLength+1:i]\n            else:\n                L[i][j]=0\n    return longestSubstring", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the longest common substring in two strings.\n\n### Input:\n\n\n### Output:\ndef longestCommonSubstring(string1, string2):\n    n1=len(string1)\n    n2=len(string2)\n    \n    L=[[0 for _ in range(n2+1)]for _ in range(n1+1)]\n    longestSubstring=\"\"\n    longestSubstringLength=0\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if string1[i-1]==string2[j-1]:\n                L[i][j]=L[i-1][j-1]+1\n                if L[i][j]>longestSubstringLength:\n                    longestSubstringLength=L[i][j]\n                    longestSubstring=string1[i-1-longestSubstringLength+1:i]\n            else:\n                L[i][j]=0\n    return longestSubstring"}
{"instruction": "Construct a web scraper in Python to extract address data from a list of websites.", "input": "", "output": "import requests \nfrom bs4 import BeautifulSoup \n\n# List of websites\nurls = [\n    \"example1.com\", \n    \"example2.com\",\n    \"example3.com\"\n]\n\n# Database to store the information\ndata = []\n\n# Loop over each website\nfor url in urls:\n    page = requests.get(url) \n    soup = BeautifulSoup(page.content, 'html.parser') \n  \n    # Get the first address\n    address_div = soup.find('div', class_='address')\n\n    # Extract the address\n    for line in address_div.findAll('rer'):\n        address = line.string\n    \n    # Add the address to the database\n    data.append(address)\n\n# Return the database\nreturn data", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web scraper in Python to extract address data from a list of websites.\n\n### Input:\n\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n\n# List of websites\nurls = [\n    \"example1.com\", \n    \"example2.com\",\n    \"example3.com\"\n]\n\n# Database to store the information\ndata = []\n\n# Loop over each website\nfor url in urls:\n    page = requests.get(url) \n    soup = BeautifulSoup(page.content, 'html.parser') \n  \n    # Get the first address\n    address_div = soup.find('div', class_='address')\n\n    # Extract the address\n    for line in address_div.findAll('rer'):\n        address = line.string\n    \n    # Add the address to the database\n    data.append(address)\n\n# Return the database\nreturn data"}
{"instruction": "Write a Python function to invert a string (swap uppercase and lowercase letters).", "input": "", "output": "def invert_string(string):\n    # Initially create an empty string as result \n    result = ''\n    \n    # Traverse every character of the string \n    for char in string: \n        # If an uppercase character is found \n        if char.isupper(): \n            # Add its lowercase equivalent to the result \n            result += char.lower() \n        # If a lowercase character is found \n        elif char.islower(): \n            # Add its uppercase equivalent to the result \n            result += char.upper() \n        else: \n            # If not an alphabet character \n            result += char\n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to invert a string (swap uppercase and lowercase letters).\n\n### Input:\n\n\n### Output:\ndef invert_string(string):\n    # Initially create an empty string as result \n    result = ''\n    \n    # Traverse every character of the string \n    for char in string: \n        # If an uppercase character is found \n        if char.isupper(): \n            # Add its lowercase equivalent to the result \n            result += char.lower() \n        # If a lowercase character is found \n        elif char.islower(): \n            # Add its uppercase equivalent to the result \n            result += char.upper() \n        else: \n            # If not an alphabet character \n            result += char\n    return result"}
{"instruction": "Implement a decision-making algorithm for a rock-paper-scissors game using Python.", "input": "", "output": "# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision-making algorithm for a rock-paper-scissors game using Python.\n\n### Input:\n\n\n### Output:\n# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)"}
{"instruction": "Come up with a correct function to calculate the length of a linked list in Python", "input": "", "output": "# Python Program to Calculate the Length of a Linked List \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def lengthLinkedList(self): \n        curr = self.head \n        length = 0 \n          \n        while curr != None: \n            length += 1\n            curr = curr.next\n          \n        return length\n\nif __name__ == '__main__': \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second\n    second.next = third\n  \n    print(\"Length of Linked List: \" + str(llist.lengthLinkedList()))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a correct function to calculate the length of a linked list in Python\n\n### Input:\n\n\n### Output:\n# Python Program to Calculate the Length of a Linked List \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def lengthLinkedList(self): \n        curr = self.head \n        length = 0 \n          \n        while curr != None: \n            length += 1\n            curr = curr.next\n          \n        return length\n\nif __name__ == '__main__': \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second\n    second.next = third\n  \n    print(\"Length of Linked List: \" + str(llist.lengthLinkedList()))"}
{"instruction": "Construct a tree data structure in Python to represent a given binary search tree.", "input": "", "output": "class Node(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef construct_tree(vals):\n    root = Node(vals[0])\n    for val in vals[1:]:\n        node = Node(val)\n        tmp_node = root\n        while True:\n            if node.val > tmp_node.val:\n                if tmp_node.right is None:\n                    tmp_node.right = node\n                    break\n                else:\n                    tmp_node = tmp_node.right\n            else:\n                if tmp_node.left is None:\n                    tmp_node.left = node\n                    break\n                else:\n                    tmp_node = tmp_node.left\n    return root", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a tree data structure in Python to represent a given binary search tree.\n\n### Input:\n\n\n### Output:\nclass Node(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef construct_tree(vals):\n    root = Node(vals[0])\n    for val in vals[1:]:\n        node = Node(val)\n        tmp_node = root\n        while True:\n            if node.val > tmp_node.val:\n                if tmp_node.right is None:\n                    tmp_node.right = node\n                    break\n                else:\n                    tmp_node = tmp_node.right\n            else:\n                if tmp_node.left is None:\n                    tmp_node.left = node\n                    break\n                else:\n                    tmp_node = tmp_node.left\n    return root"}
{"instruction": "Create a neural network in Python to recognize the handwritten digits from 0 to 9.", "input": "", "output": "\"\"\"\nCreate a neural network in Python to recognize the handwritten digits from 0 to 9.\n\"\"\"\n\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\n# load the MNIST dataset\nmnist = keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# normalize the data\nx_train, x_test = x_train/255.0, x_test/255.0\n\n# build the model\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(256, activation='relu'),\n    keras.layers.Dense(10, activation='softmax')\n])\n\n# compile and fit the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\nprint(\"Test accuracy: \", test_acc)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python to recognize the handwritten digits from 0 to 9.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a neural network in Python to recognize the handwritten digits from 0 to 9.\n\"\"\"\n\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\n# load the MNIST dataset\nmnist = keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# normalize the data\nx_train, x_test = x_train/255.0, x_test/255.0\n\n# build the model\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(256, activation='relu'),\n    keras.layers.Dense(10, activation='softmax')\n])\n\n# compile and fit the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\nprint(\"Test accuracy: \", test_acc)"}
{"instruction": "Write a debugging tool which visualizes the calls and returns of a Python program.", "input": "", "output": "import sys\nimport traceback\n\ndef visualize_program_calls():\n  def trace_calls(frame, event, arg):\n    if event != 'call':\n      return\n    co = frame.f_code\n    func_name = co.co_name\n    if func_name == 'write':\n      # Ignore write() calls from print statements\n      return\n    func_line_no = frame.f_lineno\n    func_filename = co.co_filename\n    caller = frame.f_back\n    caller_line_no = caller.f_lineno\n    caller_filename = caller.f_code.co_filename\n    print('Call to %s on line %s of %s from line %s of %s' % \\\n        (func_name, func_line_no, func_filename,\n         caller_line_no, caller_filename))\n    return\n\n  sys.setprofile(trace_calls)\n\ndef _visualize_program_returns(*args):\n  for thread_id, frame in sys._current_frames().items():\n    print('Return from %s on line %s of %s' % \\\n        (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename))\n\nsys.settrace(_visualize_program_returns)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a debugging tool which visualizes the calls and returns of a Python program.\n\n### Input:\n\n\n### Output:\nimport sys\nimport traceback\n\ndef visualize_program_calls():\n  def trace_calls(frame, event, arg):\n    if event != 'call':\n      return\n    co = frame.f_code\n    func_name = co.co_name\n    if func_name == 'write':\n      # Ignore write() calls from print statements\n      return\n    func_line_no = frame.f_lineno\n    func_filename = co.co_filename\n    caller = frame.f_back\n    caller_line_no = caller.f_lineno\n    caller_filename = caller.f_code.co_filename\n    print('Call to %s on line %s of %s from line %s of %s' % \\\n        (func_name, func_line_no, func_filename,\n         caller_line_no, caller_filename))\n    return\n\n  sys.setprofile(trace_calls)\n\ndef _visualize_program_returns(*args):\n  for thread_id, frame in sys._current_frames().items():\n    print('Return from %s on line %s of %s' % \\\n        (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename))\n\nsys.settrace(_visualize_program_returns)"}
{"instruction": "Design a trading strategy using Python to maximize profits while minimizing risks.", "input": "", "output": "def trading_strategy(portfolio):\n    \"\"\"\n    Function to design a trading strategy using Python to maximize profits while minimizing risks\n\n    Arguments:\n    portfolio -- current portfolio of the trader\n\n    Returns:\n    new_portfolio -- new and improved portfolio\n    \"\"\"\n\n    # Initialize the new and improved portfolio\n    new_portfolio = portfolio.copy()\n \n    # Loop through all the stocks in the portfolio\n    for stock in portfolio:\n        # Calculate the current price of the stock\n        price = get_price(stock)\n \n        # Calculate the risk of buying the stock\n        risk = get_risk(stock)\n \n        # Calculate the expected return of buying the stock\n        return_expected = get_expected_return(stock, price)\n \n        # Calculate the risk/reward ratio\n        risk_reward = return_expected/risk\n \n        # If the risk/reward ratio is greater than 1,\n        # then buy the stock\n        if risk_reward > 1:\n            # Calculate the amount to buy\n            amount = calculate_amount_to_buy(portfolio, price, risk)\n coy\u0013\n            # Buy the stock\n            new_portfolio = buy_stock(new_portfolio, stock, amount)\n \n        # Else, sell the stock\n        else:\n            # Sell the stock\n            new_portfolio = sell_stock(new_portfolio, stock)\n\n    # return the new and improved portfolio\n    return new_portfolio", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a trading strategy using Python to maximize profits while minimizing risks.\n\n### Input:\n\n\n### Output:\ndef trading_strategy(portfolio):\n    \"\"\"\n    Function to design a trading strategy using Python to maximize profits while minimizing risks\n\n    Arguments:\n    portfolio -- current portfolio of the trader\n\n    Returns:\n    new_portfolio -- new and improved portfolio\n    \"\"\"\n\n    # Initialize the new and improved portfolio\n    new_portfolio = portfolio.copy()\n \n    # Loop through all the stocks in the portfolio\n    for stock in portfolio:\n        # Calculate the current price of the stock\n        price = get_price(stock)\n \n        # Calculate the risk of buying the stock\n        risk = get_risk(stock)\n \n        # Calculate the expected return of buying the stock\n        return_expected = get_expected_return(stock, price)\n \n        # Calculate the risk/reward ratio\n        risk_reward = return_expected/risk\n \n        # If the risk/reward ratio is greater than 1,\n        # then buy the stock\n        if risk_reward > 1:\n            # Calculate the amount to buy\n            amount = calculate_amount_to_buy(portfolio, price, risk)\n coy\u0013\n            # Buy the stock\n            new_portfolio = buy_stock(new_portfolio, stock, amount)\n \n        # Else, sell the stock\n        else:\n            # Sell the stock\n            new_portfolio = sell_stock(new_portfolio, stock)\n\n    # return the new and improved portfolio\n    return new_portfolio"}
{"instruction": "Could you write a program that does linear regression with two variables in Python?", "input": "", "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create data\nx = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# Create target\ny = np.dot(x, np.array([1, 2])) + 3\n\n# Create a linear regression model\nmodel = LinearRegression()\n# Fit the model\nmodel.fit(x, y)\n\n# Make prediction\nx_test = np.array([3, 5])\ny_test = model.predict([x_test])\n\n# Output prediction\nprint(\"Predicted value of y given x=[3,5] :\", y_test[0])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCould you write a program that does linear regression with two variables in Python?\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create data\nx = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# Create target\ny = np.dot(x, np.array([1, 2])) + 3\n\n# Create a linear regression model\nmodel = LinearRegression()\n# Fit the model\nmodel.fit(x, y)\n\n# Make prediction\nx_test = np.array([3, 5])\ny_test = model.predict([x_test])\n\n# Output prediction\nprint(\"Predicted value of y given x=[3,5] :\", y_test[0])"}
{"instruction": "Design a web application in Django that uses a SQLite database to store information", "input": "", "output": "# Create a Django project\ndjango-admin startproject myproject\n\n# Create an app called 'infoapp'\npython manage.py startapp infoapp\n\n# Configure settings.py to connect to a SQLite database, and add 'infoapp' to INSTALLED_APPS\n# Create models in infoapp/models.py\n# create tests in infoapp/tests.py\n\n# Migrate models\npython manage.py makemigrations\npython manage.py migrate\n\n# Create views and routes in infoapp/views.py\n\n# Run the web application\npython manage.py runserver", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application in Django that uses a SQLite database to store information\n\n### Input:\n\n\n### Output:\n# Create a Django project\ndjango-admin startproject myproject\n\n# Create an app called 'infoapp'\npython manage.py startapp infoapp\n\n# Configure settings.py to connect to a SQLite database, and add 'infoapp' to INSTALLED_APPS\n# Create models in infoapp/models.py\n# create tests in infoapp/tests.py\n\n# Migrate models\npython manage.py makemigrations\npython manage.py migrate\n\n# Create views and routes in infoapp/views.py\n\n# Run the web application\npython manage.py runserver"}
{"instruction": "Automate the testing of a function with different inputs using a testing framework.", "input": "", "output": "#import the python testing library\nimport unittest\n\n#import the function to be tested\nfrom mycode import myfunction\n\n# Create an instance of the test\ntest = unittest.TestCase()  \n\n# Create a list of inputs to test\ninputs = [[1,2], [3,4], [5,6]]\n\n# Create expected outputs\nexpected_outputs = [3, 7, 11]\n\n# Check the outputs for all inputs \nfor i in range(len(inputs)):  \n     result = myfunction(inputs[i][0], inputs[i][1])\n     test.assertEqual(result, expected_outputs[i])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the testing of a function with different inputs using a testing framework.\n\n### Input:\n\n\n### Output:\n#import the python testing library\nimport unittest\n\n#import the function to be tested\nfrom mycode import myfunction\n\n# Create an instance of the test\ntest = unittest.TestCase()  \n\n# Create a list of inputs to test\ninputs = [[1,2], [3,4], [5,6]]\n\n# Create expected outputs\nexpected_outputs = [3, 7, 11]\n\n# Check the outputs for all inputs \nfor i in range(len(inputs)):  \n     result = myfunction(inputs[i][0], inputs[i][1])\n     test.assertEqual(result, expected_outputs[i])"}
{"instruction": "Build a web application in python to display the current temperature in Fahrenheit.", "input": "", "output": "from flask import Flask, request \nfrom requests import get \n\napp = Flask(__name__) \n\n@app.route('/', methods=['GET']) \ndef home():\n    api_key = # API key for open weather API\n    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'\n    output = request.get(url).json()\n    temp = output['main']['temp']\n    return f\"The current temperature in Fahrenheit is {temp} F\"\nif __name__ == '__main__': \n    app.run(debug=True, host='0.0.0.0', port=8989)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web application in python to display the current temperature in Fahrenheit.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, request \nfrom requests import get \n\napp = Flask(__name__) \n\n@app.route('/', methods=['GET']) \ndef home():\n    api_key = # API key for open weather API\n    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'\n    output = request.get(url).json()\n    temp = output['main']['temp']\n    return f\"The current temperature in Fahrenheit is {temp} F\"\nif __name__ == '__main__': \n    app.run(debug=True, host='0.0.0.0', port=8989)"}
{"instruction": "Write a Python program to send an email with the subject \"Welcome to our website!\".", "input": "", "output": "import smtplib\n\n# Options\nserver = 'smtp.gmail.com'\nport = 587\npassword = 'my-password'\n\n# Sending Email \nsenderEmail = 'sender@gmail.com' \nrecieverEmail = 'reciever@gmail.com' \nsubject = 'Welcome to our website!'\nbody = 'Thank you for visiting our website!'\n\nmessage = f'Subject: {subject}\\n\\n{body}'\n\n# Connecting to SMTP server\nserver = smtplib.SMTP(server, port)\nserver.starttls()\nserver.login(senderEmail, password)\n\n# Sending the email\nserver.sendmail(senderEmail, recieverEmail, message)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to send an email with the subject \"Welcome to our website!\".\n\n### Input:\n\n\n### Output:\nimport smtplib\n\n# Options\nserver = 'smtp.gmail.com'\nport = 587\npassword = 'my-password'\n\n# Sending Email \nsenderEmail = 'sender@gmail.com' \nrecieverEmail = 'reciever@gmail.com' \nsubject = 'Welcome to our website!'\nbody = 'Thank you for visiting our website!'\n\nmessage = f'Subject: {subject}\\n\\n{body}'\n\n# Connecting to SMTP server\nserver = smtplib.SMTP(server, port)\nserver.starttls()\nserver.login(senderEmail, password)\n\n# Sending the email\nserver.sendmail(senderEmail, recieverEmail, message)"}
{"instruction": "Build a logistic regression model in Python to classify emails as spam or not spam.", "input": "", "output": "import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create feature matrix \nX = data[['text', 'subject']]\n\n# Create target vector \ny = data['label']\n\n# Split the data into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Fit the model \nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)\n\n# Make predictions \ny_pred = logistic.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a logistic regression model in Python to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create feature matrix \nX = data[['text', 'subject']]\n\n# Create target vector \ny = data['label']\n\n# Split the data into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Fit the model \nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)\n\n# Make predictions \ny_pred = logistic.predict(X_test)"}
{"instruction": "Generate a Python class to read in a textfile and count the frequency of each word.", "input": "", "output": "class WordCounter:\n    def __init__(self, filename):\n        self.word_counts = {}\n        self.filename = filename\n        self.process_file()\n\n    def process_file(self):\n        with open(self.filename) as f:\n            for line in f:\n                words = line.split()\n                for word in words:\n                    if word in self.word_counts:\n                        self.word_counts[word] += 1\n                    else:\n                        self.word_counts[word] = 1\n\n    def get_word_counts(self):\n        return self.word_counts", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to read in a textfile and count the frequency of each word.\n\n### Input:\n\n\n### Output:\nclass WordCounter:\n    def __init__(self, filename):\n        self.word_counts = {}\n        self.filename = filename\n        self.process_file()\n\n    def process_file(self):\n        with open(self.filename) as f:\n            for line in f:\n                words = line.split()\n                for word in words:\n                    if word in self.word_counts:\n                        self.word_counts[word] += 1\n                    else:\n                        self.word_counts[word] = 1\n\n    def get_word_counts(self):\n        return self.word_counts"}
{"instruction": "Write a Python script to extract the top trending topics from a given Twitter page.", "input": "", "output": "import tweepy\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\n# get trending topics for given twitter page\ndef getTrendingTopics(username):\n    topics = []\n    tweets = api.user_timeline(screen_name=username, count=100)\n    for tweet in tweets:\n        for hashtag in tweet.entities.get('hashtags'):\n            topics.append(hashtag['text'])\n    return sorted(set(topics))\n\nusername = input('Enter twitter username: ')\ntrendingTopics = getTrendingTopics(username)\nprint(trendingTopics)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to extract the top trending topics from a given Twitter page.\n\n### Input:\n\n\n### Output:\nimport tweepy\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\n# get trending topics for given twitter page\ndef getTrendingTopics(username):\n    topics = []\n    tweets = api.user_timeline(screen_name=username, count=100)\n    for tweet in tweets:\n        for hashtag in tweet.entities.get('hashtags'):\n            topics.append(hashtag['text'])\n    return sorted(set(topics))\n\nusername = input('Enter twitter username: ')\ntrendingTopics = getTrendingTopics(username)\nprint(trendingTopics)"}
{"instruction": "Formulate a linear programming problem in Python to minimize a given cost function.", "input": "", "output": "import pulp \n  \n# Declare the problem \nprob = pulp.LpProblem(\"Cost Minimization Problem\", pulp.LpMinimize)  \n  \n# Define the decision variables  \nx = pulp.LpVariable(\"x\", lowBound = 0) \ny = pulp.LpVariable(\"y\", lowBound = 0) \n  \n# Define the objective function  \nprob += 4 * x + 5 * y  \n  \n# Define the constraints  \nprob += x + y <= 10\nprob += 2 * x + 3 * y <= 18\n  \n# Solve the problem \nprob.solve() \n  \n# Print the results \nprint(\"The value of x is {} and the value of y is {}\".format(x.varValue, y.varValue)) \nprint(\"The total cost is {}\".format(pulp.value(prob.objective)))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a linear programming problem in Python to minimize a given cost function.\n\n### Input:\n\n\n### Output:\nimport pulp \n  \n# Declare the problem \nprob = pulp.LpProblem(\"Cost Minimization Problem\", pulp.LpMinimize)  \n  \n# Define the decision variables  \nx = pulp.LpVariable(\"x\", lowBound = 0) \ny = pulp.LpVariable(\"y\", lowBound = 0) \n  \n# Define the objective function  \nprob += 4 * x + 5 * y  \n  \n# Define the constraints  \nprob += x + y <= 10\nprob += 2 * x + 3 * y <= 18\n  \n# Solve the problem \nprob.solve() \n  \n# Print the results \nprint(\"The value of x is {} and the value of y is {}\".format(x.varValue, y.varValue)) \nprint(\"The total cost is {}\".format(pulp.value(prob.objective)))"}
{"instruction": "Write a python program to calculate the longest increasing subsequence of an array.", "input": "", "output": "def longest_increasing_subsequence(arr): \n    n = len(arr) \n  \n    # Declare the list (array) for LIS and \n    # initialize LIS values for all indexes \n    lis = [1]*n \n  \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    # Initialize maximum to 0 to get the maximum of all \n    # LIS \n    maximum = 0\n  \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the longest increasing subsequence of an array.\n\n### Input:\n\n\n### Output:\ndef longest_increasing_subsequence(arr): \n    n = len(arr) \n  \n    # Declare the list (array) for LIS and \n    # initialize LIS values for all indexes \n    lis = [1]*n \n  \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    # Initialize maximum to 0 to get the maximum of all \n    # LIS \n    maximum = 0\n  \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum"}
{"instruction": "Train a supervised learning model in Python to predict the outcome of a horse race.", "input": "", "output": "# Imports\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = np.loadtxt('horse_race_data.txt')\nX_data = data[:, :-1]\ny_data = data[:, -1]\n\n# Split into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2)\n\n# Train the model\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\n# Make predictions\npredictions = clf.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, predictions)\nprint('Model accuracy: ' + str(accuracy))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a supervised learning model in Python to predict the outcome of a horse race.\n\n### Input:\n\n\n### Output:\n# Imports\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = np.loadtxt('horse_race_data.txt')\nX_data = data[:, :-1]\ny_data = data[:, -1]\n\n# Split into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2)\n\n# Train the model\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\n# Make predictions\npredictions = clf.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, predictions)\nprint('Model accuracy: ' + str(accuracy))"}
{"instruction": "Generate a python program to sort a given linked list using the quicksort algorithm", "input": "", "output": "def sort_linked_list(head):\n    if not head or head.next is None:\n        return head\n\n    mid = get_middle(head)\n    mid_next = mid.next\n\n    l1 = sort_linked_list(head)\n    l2 = sort_linked_list(mid_next)\n\n    return merge(l1, l2)\n\ndef merge(l1, l2):\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = merge(l1.next, l2)\n        return l1\n    else:\n        l2.next = merge(l1, l2.next)\n        return l2\n\ndef get_middle(head):\n    if not head:\n        return head\n\n    slow = head\n    fast = head\n\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to sort a given linked list using the quicksort algorithm\n\n### Input:\n\n\n### Output:\ndef sort_linked_list(head):\n    if not head or head.next is None:\n        return head\n\n    mid = get_middle(head)\n    mid_next = mid.next\n\n    l1 = sort_linked_list(head)\n    l2 = sort_linked_list(mid_next)\n\n    return merge(l1, l2)\n\ndef merge(l1, l2):\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = merge(l1.next, l2)\n        return l1\n    else:\n        l2.next = merge(l1, l2.next)\n        return l2\n\ndef get_middle(head):\n    if not head:\n        return head\n\n    slow = head\n    fast = head\n\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow"}
{"instruction": "Create a Python program that determines the largest prime factor of a given number.", "input": "", "output": "def max_prime_factor(n): \n  \n    # Initialize the maximum prime factor \n    # variable with the lowest one \n    maxPrime = -1\n      \n    # Print the number of 2s that divide n \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1      # equivalent to n /= 2 \n          \n    # n must be odd at this point,  \n    # thus skip the even numbers and  \n    # iterate only for odd integers \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i  \n      \n    # This condition is to handle the \n    # case when n is a prime number \n    # greater than 2 \n    if n > 2: \n        maxPrime = n \n      \n    return int(maxPrime)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that determines the largest prime factor of a given number.\n\n### Input:\n\n\n### Output:\ndef max_prime_factor(n): \n  \n    # Initialize the maximum prime factor \n    # variable with the lowest one \n    maxPrime = -1\n      \n    # Print the number of 2s that divide n \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1      # equivalent to n /= 2 \n          \n    # n must be odd at this point,  \n    # thus skip the even numbers and  \n    # iterate only for odd integers \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i  \n      \n    # This condition is to handle the \n    # case when n is a prime number \n    # greater than 2 \n    if n > 2: \n        maxPrime = n \n      \n    return int(maxPrime)"}
{"instruction": "Create a login system in Python to verify users' credentials from a MySQL database.", "input": "", "output": "import mysql.connector \n\n# create a connection to the MySQL Database \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"user\",\n  passwd=\"password\",\n  database=\"database_name\"\n)\n\n# create a function to verify the user\ndef login_user(username, password):\n    # create SQL query\n    query = \"SELECT * FROM users WHERE username = %s AND password = %s\"\n    \n    # initialize cursor\n    cur = mydb.cursor()\n    \n    # execute query\n    cur.execute(query, (username, password))\n    \n    # extract row from the database\n    row = cur.fetchone()\n        \n    # if the username and password does not match\n    if row == None:\n        return False\n    # if the username and password match\n    else:\n        return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a login system in Python to verify users' credentials from a MySQL database.\n\n### Input:\n\n\n### Output:\nimport mysql.connector \n\n# create a connection to the MySQL Database \nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"user\",\n  passwd=\"password\",\n  database=\"database_name\"\n)\n\n# create a function to verify the user\ndef login_user(username, password):\n    # create SQL query\n    query = \"SELECT * FROM users WHERE username = %s AND password = %s\"\n    \n    # initialize cursor\n    cur = mydb.cursor()\n    \n    # execute query\n    cur.execute(query, (username, password))\n    \n    # extract row from the database\n    row = cur.fetchone()\n        \n    # if the username and password does not match\n    if row == None:\n        return False\n    # if the username and password match\n    else:\n        return True"}
{"instruction": "Develop a Python script to find the optimal number of clusters for a given dataset.", "input": "", "output": "import numpy as np \nimport matplotlib.pyplot as plt \n\ndef optimal_k(X): \n \n distortions = [] \n inertias = [] \n mapping1 = {} \n mapping2 = {} \n K = range(1,10) \n\n for k in K: \n #Building and fitting the model \n kmeanModel = KMeans(n_clusters=k).fit(X) \n kmeanModel.fit(X) \n \n distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, \n 'euclidean'),axis=1)) / X.shape[0]) \n inertias.append(kmeanModel.inertia_) \n\n #Visualize \n plt.plot(K, distortions, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Distortion') \n plt.title('The Elbow Method using Distortion') \n plt.show() \n \n plt.plot(K, inertias, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Inertia') \n plt.title('The Elbow Method using Inertia') \n plt.show() \n\noptimal_k(X)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to find the optimal number of clusters for a given dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport matplotlib.pyplot as plt \n\ndef optimal_k(X): \n \n distortions = [] \n inertias = [] \n mapping1 = {} \n mapping2 = {} \n K = range(1,10) \n\n for k in K: \n #Building and fitting the model \n kmeanModel = KMeans(n_clusters=k).fit(X) \n kmeanModel.fit(X) \n \n distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, \n 'euclidean'),axis=1)) / X.shape[0]) \n inertias.append(kmeanModel.inertia_) \n\n #Visualize \n plt.plot(K, distortions, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Distortion') \n plt.title('The Elbow Method using Distortion') \n plt.show() \n \n plt.plot(K, inertias, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Inertia') \n plt.title('The Elbow Method using Inertia') \n plt.show() \n\noptimal_k(X)"}
{"instruction": "Write a code for implementing a stack in Python that can handle max of 10 elements.", "input": "", "output": "\"\"\"\nWrite a code for implementing a stack in python that can handle max of 10 elements\n\"\"\"\n\nclass MyStack:\n    def __init__(self, capacity=10):\n        self.capacity = capacity\n        self.top = 0\n        self.stack = [None]*self.capacity\n\n    def push(self, item):\n        # check the stack is full or not\n        if self.top == self.capacity:\n            raise Exception('Stack is full!')\n        else:\n            self.stack[self.top] = item\n            self.top += 1\n\n    def pop(self):\n        # check the stack is empty or not\n        if self.top == 0:\n            raise Exception('Stack is empty!')\n        else:\n            item = self.stack[self.top-1]\n            self.stack[self.top-1] = None\n            self.top -= 1\n            return item", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code for implementing a stack in Python that can handle max of 10 elements.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a code for implementing a stack in python that can handle max of 10 elements\n\"\"\"\n\nclass MyStack:\n    def __init__(self, capacity=10):\n        self.capacity = capacity\n        self.top = 0\n        self.stack = [None]*self.capacity\n\n    def push(self, item):\n        # check the stack is full or not\n        if self.top == self.capacity:\n            raise Exception('Stack is full!')\n        else:\n            self.stack[self.top] = item\n            self.top += 1\n\n    def pop(self):\n        # check the stack is empty or not\n        if self.top == 0:\n            raise Exception('Stack is empty!')\n        else:\n            item = self.stack[self.top-1]\n            self.stack[self.top-1] = None\n            self.top -= 1\n            return item"}
{"instruction": "Design a machine learning algorithm in python that predicts the price of a product.", "input": "", "output": "import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_absolute_error \n\n# Read in data \ndata = pd.read_csv('data.csv') \n\n# Split data into dependent and independent variables \nX = data.iloc[:, :-1].values \ny = data.iloc[:, -1].values \n\n# Split data into training and testing datasets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \n\n# Train the model \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) \n\n# Make predictions on the test data\ny_pred = regressor.predict(X_test) \n\n# Calculate the mean absolute error \nmae = mean_absolute_error(y_test, y_pred) \n\n# Print results \nprint('Mean absolute error: %.2f' % mae)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a machine learning algorithm in python that predicts the price of a product.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_absolute_error \n\n# Read in data \ndata = pd.read_csv('data.csv') \n\n# Split data into dependent and independent variables \nX = data.iloc[:, :-1].values \ny = data.iloc[:, -1].values \n\n# Split data into training and testing datasets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \n\n# Train the model \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) \n\n# Make predictions on the test data\ny_pred = regressor.predict(X_test) \n\n# Calculate the mean absolute error \nmae = mean_absolute_error(y_test, y_pred) \n\n# Print results \nprint('Mean absolute error: %.2f' % mae)"}
{"instruction": "Build a tree structure for an online course program using HTML, CSS and JavaScript.", "input": "", "output": "<html>\n  <head>\n    <title>Course Tree</title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics</li>\n              <li>Data Structures</li>\n              <li>Advanced Topics</li>\n            </ul>\n          </li>\n          <li>Javascript\n            <ul>\n              <li>Basics</li>\n              <li>Object Oriented Programming</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Design \n        <ul>\n          <li>UI/UX Design\n            <ul>\n              <li>Wireframing</li>\n              <li>Prototyping</li>\n              <li>Visual Design</li>\n            </ul>\n          </li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design</li>\n              <li>Illustration</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a tree structure for an online course program using HTML, CSS and JavaScript.\n\n### Input:\n\n\n### Output:\n<html>\n  <head>\n    <title>Course Tree</title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics</li>\n              <li>Data Structures</li>\n              <li>Advanced Topics</li>\n            </ul>\n          </li>\n          <li>Javascript\n            <ul>\n              <li>Basics</li>\n              <li>Object Oriented Programming</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Design \n        <ul>\n          <li>UI/UX Design\n            <ul>\n              <li>Wireframing</li>\n              <li>Prototyping</li>\n              <li>Visual Design</li>\n            </ul>\n          </li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design</li>\n              <li>Illustration</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>"}
{"instruction": "Using an open source API, create a program to perform sentiment analysis on tweets.", "input": "", "output": "#Importing the necessary libraries\nimport tweepy\nimport requests\n\n#Authentication \nconsumer_key = ...\nconsumer_secret = ...\n\naccess_key = ...\naccess_secret = ...\n\n#Creating the authentication object\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n\n#Setting access tokens\nauth.set_access_token(access_key, access_secret)\n\n#Creating the API object\napi = tweepy.API(auth)\n\n#Defining the sentiment analysis function\ndef sentiment_analysis(tweet):\n    post_data = {'text': tweet}\n    response = requests.post('https://api.meaningcloud.com/sentiment-2.1', \n                            data=post_data, \n                            headers={'content-type':'application/x-www-form-urlencoded', \n                            'apikey': '<insert API key here>'})\n                            \n    response_json = response.json()\n    print(response_json)\n    return response_json['score_tag']\n\n#Running the sentiment analysis\ntweets = api.search(q='#python', lang='en', rpp=1)\nfor tweet in tweets:\n print(sentiment_analysis(tweet.text))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing an open source API, create a program to perform sentiment analysis on tweets.\n\n### Input:\n\n\n### Output:\n#Importing the necessary libraries\nimport tweepy\nimport requests\n\n#Authentication \nconsumer_key = ...\nconsumer_secret = ...\n\naccess_key = ...\naccess_secret = ...\n\n#Creating the authentication object\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n\n#Setting access tokens\nauth.set_access_token(access_key, access_secret)\n\n#Creating the API object\napi = tweepy.API(auth)\n\n#Defining the sentiment analysis function\ndef sentiment_analysis(tweet):\n    post_data = {'text': tweet}\n    response = requests.post('https://api.meaningcloud.com/sentiment-2.1', \n                            data=post_data, \n                            headers={'content-type':'application/x-www-form-urlencoded', \n                            'apikey': '<insert API key here>'})\n                            \n    response_json = response.json()\n    print(response_json)\n    return response_json['score_tag']\n\n#Running the sentiment analysis\ntweets = api.search(q='#python', lang='en', rpp=1)\nfor tweet in tweets:\n print(sentiment_analysis(tweet.text))"}
{"instruction": "Build a neural network model in Python to classify colors into red, green and blue.", "input": "", "output": "#import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#create a dataset\ndata = np.array([[255, 0, 0], [0, 255, 0], [0, 0, 255]])\nlabels = np.array(['red', 'green', 'blue'])\n\n#encode target labels\nencoder = LabelEncoder()\nencoded_labels = encoder.fit_transform(labels)\n\n#split dataset into 80% train and 20% test\nx_train, x_test, y_train, y_test = train_test_split(data, encoded_labels, test_size=0.2)\n\n#set parameters\ninput_dim = 3\noutput_dim = 3\nbatch_size = 10\nepochs = 10\n\n#build a sequential model\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=input_dim))\nmodel.add(Dense(output_dim, activation='softmax'))\n\n#compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n#train and evaluate the model\nmodel.fit(x_train, y_train, batch_size=batch_size, epochs=epochs)\nscore = model.evaluate(x_test, y_test, batch_size=batch_size)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a neural network model in Python to classify colors into red, green and blue.\n\n### Input:\n\n\n### Output:\n#import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#create a dataset\ndata = np.array([[255, 0, 0], [0, 255, 0], [0, 0, 255]])\nlabels = np.array(['red', 'green', 'blue'])\n\n#encode target labels\nencoder = LabelEncoder()\nencoded_labels = encoder.fit_transform(labels)\n\n#split dataset into 80% train and 20% test\nx_train, x_test, y_train, y_test = train_test_split(data, encoded_labels, test_size=0.2)\n\n#set parameters\ninput_dim = 3\noutput_dim = 3\nbatch_size = 10\nepochs = 10\n\n#build a sequential model\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=input_dim))\nmodel.add(Dense(output_dim, activation='softmax'))\n\n#compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n#train and evaluate the model\nmodel.fit(x_train, y_train, batch_size=batch_size, epochs=epochs)\nscore = model.evaluate(x_test, y_test, batch_size=batch_size)"}
{"instruction": "Write a function in Python to gather data from a web page and save it in CSV format.", "input": "", "output": "\"\"\"\nWrite a function in Python to gather data from a web page and save it in CSV format.\n\"\"\"\n\nimport requests\nimport csv\n\ndef get_data_and_save_as_csv(url):\n    response = requests.get(url)\n    data = response.json()\n    with open('output.csv', 'w', newline = '') as csv_file:\n        writer = csv.writer(csv_file)\n        writer.writerows([data[key] for key in data.keys()])\n\nif __name__ == '__main__':\n    url = input(\"Enter URL:\")\n    get_data_and_save_as_csv(url)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to gather data from a web page and save it in CSV format.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a function in Python to gather data from a web page and save it in CSV format.\n\"\"\"\n\nimport requests\nimport csv\n\ndef get_data_and_save_as_csv(url):\n    response = requests.get(url)\n    data = response.json()\n    with open('output.csv', 'w', newline = '') as csv_file:\n        writer = csv.writer(csv_file)\n        writer.writerows([data[key] for key in data.keys()])\n\nif __name__ == '__main__':\n    url = input(\"Enter URL:\")\n    get_data_and_save_as_csv(url)"}
{"instruction": "Construct a neural network model in Python to classify the MNIST data set correctly.", "input": "", "output": "import keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a neural network model in Python to classify the MNIST data set correctly.\n\n### Input:\n\n\n### Output:\nimport keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])"}
{"instruction": "Design a function to calculate the mean, median and mode of a given array in Python.", "input": "", "output": "def calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum / len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n else:\n median = arr[int(len(arr) / 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to calculate the mean, median and mode of a given array in Python.\n\n### Input:\n\n\n### Output:\ndef calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum / len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n else:\n median = arr[int(len(arr) / 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode]"}
{"instruction": "Create a Python code to generate the valid set of parenthesis for a given integer n.", "input": "", "output": "def generate_parenthesis(n):\n    result = []\n\n    def generate_parens(left, right, n, curr_string):\n        if left == n and right == n:\n            result.append(curr_string)\n            return\n        \n        # open a new parenthesis if one can still be opened\n        if left < n:\n            generate_parens(left + 1, right, n, curr_string + \"(\")\n \n        # close a parenthesis if it's safe to do so\n        if right < left:\n            generate_parens(left, right + 1, n, curr_string + \")\")\n    \n    generate_parens(0, 0, n, \"\")\n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to generate the valid set of parenthesis for a given integer n.\n\n### Input:\n\n\n### Output:\ndef generate_parenthesis(n):\n    result = []\n\n    def generate_parens(left, right, n, curr_string):\n        if left == n and right == n:\n            result.append(curr_string)\n            return\n        \n        # open a new parenthesis if one can still be opened\n        if left < n:\n            generate_parens(left + 1, right, n, curr_string + \"(\")\n \n        # close a parenthesis if it's safe to do so\n        if right < left:\n            generate_parens(left, right + 1, n, curr_string + \")\")\n    \n    generate_parens(0, 0, n, \"\")\n    return result"}
{"instruction": "Design a Python class with methods to compute the square and cube of a given number.", "input": "", "output": "\"\"\"\nDesign a Python class with methods to compute the square and cube of a \ngiven number.\n\"\"\"\n\nclass MathOperations:\n\n    # constructor\n    def __init__(self, number):\n        self.number = number\n\n    # method to compute the square\n    def square(self):\n        return self.number * self.number\n\n    # method to compute the cube\n    def cube(self):\n        return self.number * self.number * self.number\n\n# create an object of the MathOperations class\nobj = MathOperations(2)\n\n# calling methods\nprint(\"Square of 2 is:\", obj.square())\nprint(\"Cube of 2 is:\", obj.cube())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class with methods to compute the square and cube of a given number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python class with methods to compute the square and cube of a \ngiven number.\n\"\"\"\n\nclass MathOperations:\n\n    # constructor\n    def __init__(self, number):\n        self.number = number\n\n    # method to compute the square\n    def square(self):\n        return self.number * self.number\n\n    # method to compute the cube\n    def cube(self):\n        return self.number * self.number * self.number\n\n# create an object of the MathOperations class\nobj = MathOperations(2)\n\n# calling methods\nprint(\"Square of 2 is:\", obj.square())\nprint(\"Cube of 2 is:\", obj.cube())"}
{"instruction": "Create a function in Python to migrate data from a SQL database to a NoSQL database.", "input": "", "output": "def migrate_data(src_db, dest_db):\n    \"\"\"\n    This function will migrate data from a SQL database \n    to a NoSQL database\n    \"\"\"\n    # Connect to the source SQL database\n    connection = src_db.connect()\n\n    # Iterate through each table in the source database\n    for table_name in src_db.get_table_names():\n        # Retrieve the table data\n        table_data = src_db.execute(\"SELECT * From \" + table_name)\n\n        # Insert the data into the destination NoSQL database\n        dest_db.write(table_name, table_data)\n\n    # Close the connection\n    connection.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to migrate data from a SQL database to a NoSQL database.\n\n### Input:\n\n\n### Output:\ndef migrate_data(src_db, dest_db):\n    \"\"\"\n    This function will migrate data from a SQL database \n    to a NoSQL database\n    \"\"\"\n    # Connect to the source SQL database\n    connection = src_db.connect()\n\n    # Iterate through each table in the source database\n    for table_name in src_db.get_table_names():\n        # Retrieve the table data\n        table_data = src_db.execute(\"SELECT * From \" + table_name)\n\n        # Insert the data into the destination NoSQL database\n        dest_db.write(table_name, table_data)\n\n    # Close the connection\n    connection.close()"}
{"instruction": "Create a machine learning model in Python to predict housing prices given a dataset.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read in dataset\ndata = pd.read_csv('housing_data.csv')\n\n# Split data into features and targets\nX = data.drop('HousingPrice', axis=1)\ny = data['HousingPrice']\n\n# Split data into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X_train, y_train)\n\n# Make prediction on testing data\ny_pred = model.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict housing prices given a dataset.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read in dataset\ndata = pd.read_csv('housing_data.csv')\n\n# Split data into features and targets\nX = data.drop('HousingPrice', axis=1)\ny = data['HousingPrice']\n\n# Split data into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X_train, y_train)\n\n# Make prediction on testing data\ny_pred = model.predict(X_test)"}
{"instruction": "Create a program to find the Mean, Median and Mode of an array of numbers in Python.", "input": "", "output": "def mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef median(numbers):\n    numbers.sort()\n    middle_index = int(len(numbers)/2)\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index] + numbers[middle_index-1])/2\n    else:\n        return numbers[middle_index]\n\ndef mode(numbers):\n    max_freq = 0\n    modes = []\n    for num in set(numbers):\n        count = numbers.count(num)\n        if count > max_freq:\n            modes.clear()\n            modes.append(num)\n            max_freq = count\n        elif count == max_freq and num not in modes:\n            modes.append(num)\n    return modes", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to find the Mean, Median and Mode of an array of numbers in Python.\n\n### Input:\n\n\n### Output:\ndef mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef median(numbers):\n    numbers.sort()\n    middle_index = int(len(numbers)/2)\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index] + numbers[middle_index-1])/2\n    else:\n        return numbers[middle_index]\n\ndef mode(numbers):\n    max_freq = 0\n    modes = []\n    for num in set(numbers):\n        count = numbers.count(num)\n        if count > max_freq:\n            modes.clear()\n            modes.append(num)\n            max_freq = count\n        elif count == max_freq and num not in modes:\n            modes.append(num)\n    return modes"}
{"instruction": "Provide a machine learning model in python to classify emails into spam or non-spam.", "input": "", "output": "import pandas as pd \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the dataset\ndf = pd.read_csv('spam_data.csv')\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(df['email'], df['label'], random_state=0)\n\n# Extract features\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\n\n# Train a model\nmodel = MultinomialNB().fit(X_train_vectorized, y_train)\n\n# Check accuracy\npreds = model.predict(vect.transform(X_test))\n\n# Display the accuracy score\nprint('Accuracy: %s' % accuracy_score(y_test, preds))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a machine learning model in python to classify emails into spam or non-spam.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the dataset\ndf = pd.read_csv('spam_data.csv')\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(df['email'], df['label'], random_state=0)\n\n# Extract features\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\n\n# Train a model\nmodel = MultinomialNB().fit(X_train_vectorized, y_train)\n\n# Check accuracy\npreds = model.predict(vect.transform(X_test))\n\n# Display the accuracy score\nprint('Accuracy: %s' % accuracy_score(y_test, preds))"}
{"instruction": "Create a class in Python with four attributes and appropriate getter,setter methods.", "input": "", "output": "class Student:\n    def __init__(self, name, age, marks, roll_number):\n        self.name = name\n        self.age = age\n        self.marks = marks\n        self.roll_number = roll_number\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_age(self):\n        return self.age\n\n    def set_age(self, age):\n        self.age = age\n\n    def get_marks(self):\n        return self.marks\n\n    def set_marks(self, marks):\n        self.marks = marks\n\n    def get_roll_number(self):\n        return self.roll_number\n\n    def set_roll_number(self, roll_number):\n        self.roll_number = roll_number", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python with four attributes and appropriate getter,setter methods.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age, marks, roll_number):\n        self.name = name\n        self.age = age\n        self.marks = marks\n        self.roll_number = roll_number\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_age(self):\n        return self.age\n\n    def set_age(self, age):\n        self.age = age\n\n    def get_marks(self):\n        return self.marks\n\n    def set_marks(self, marks):\n        self.marks = marks\n\n    def get_roll_number(self):\n        return self.roll_number\n\n    def set_roll_number(self, roll_number):\n        self.roll_number = roll_number"}
{"instruction": "Come up with a complex problem written in Python to be solved in a parallel fashion.", "input": "", "output": "import multiprocessing as mp\nfrom multiprocessing import Pool\n\n# Main function to process data\ndef process_data(data):\n    # Perform complex processing on data\n    processed_data = complex_processing(data)\n    return process_data \n\n# Function to be called in parallel\ndef parallel_fn(data):\n    # Split data\n    data_slice = np.array_split(data, num_procs)\n    # Define a pool of process\n    pool = Pool(processes=num_procs)\n    # Execute process_data in parallel\n    processed_data = pool.map(process_data, data_slice)\n    # Join list of results\n    results = np.concatenate(processed_data)\n    # Close the pool\n    pool.close()\n    # Return results\n    return results", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a complex problem written in Python to be solved in a parallel fashion.\n\n### Input:\n\n\n### Output:\nimport multiprocessing as mp\nfrom multiprocessing import Pool\n\n# Main function to process data\ndef process_data(data):\n    # Perform complex processing on data\n    processed_data = complex_processing(data)\n    return process_data \n\n# Function to be called in parallel\ndef parallel_fn(data):\n    # Split data\n    data_slice = np.array_split(data, num_procs)\n    # Define a pool of process\n    pool = Pool(processes=num_procs)\n    # Execute process_data in parallel\n    processed_data = pool.map(process_data, data_slice)\n    # Join list of results\n    results = np.concatenate(processed_data)\n    # Close the pool\n    pool.close()\n    # Return results\n    return results"}
{"instruction": "Write a python program to build a social media platform that stores users and posts.", "input": "", "output": "class User:\n    def __init__(self, username):\n        self.username = username\n\nclass Post:\n    def __init__(self, user, text):\n        self.user = user\n        self.text = text\n\nclass SocialMediaPlatform:\n    def __init__(self):\n        self.users = []\n        self.posts = []\n\n    def create_user(self, username):\n        new_user = User(username)\n        self.users.append(new_user)\n\n    def create_post(self, username, text):\n        user = self.find_user_by_name(username)\n        if not user:\n            return None\n        post = Post(user, text)\n        self.posts.append(post)\n        return post\n\n    def find_user_by_name(self, username):\n        for user in self.users:\n            if user.username == username:\n                return user\n        return None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to build a social media platform that stores users and posts.\n\n### Input:\n\n\n### Output:\nclass User:\n    def __init__(self, username):\n        self.username = username\n\nclass Post:\n    def __init__(self, user, text):\n        self.user = user\n        self.text = text\n\nclass SocialMediaPlatform:\n    def __init__(self):\n        self.users = []\n        self.posts = []\n\n    def create_user(self, username):\n        new_user = User(username)\n        self.users.append(new_user)\n\n    def create_post(self, username, text):\n        user = self.find_user_by_name(username)\n        if not user:\n            return None\n        post = Post(user, text)\n        self.posts.append(post)\n        return post\n\n    def find_user_by_name(self, username):\n        for user in self.users:\n            if user.username == username:\n                return user\n        return None"}
{"instruction": "Build an optimization problem in Python with an objective function and 2 constraints", "input": "", "output": "import numpy as np\nfrom scipy.optimize import minimize\n \ndef objective(x):\n    return (x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2])\n \ndef constraint1(x):\n    return x[0]*x[1]*x[2]*x[3] - 25 \n \ndef constraint2(x):\n    sum_sq = 40\n    for i in range(4):\n        sum_sq = sum_sq - x[i]**2 \n    return sum_sq\n     \n# Initial Guess\nx0 = np.array([1, 4, 10, 1])\n \n# show initial objective\nprint('Initial SSE Objective: ' + str(objective(x0))) \n\n# Constraints\ncons = ({'type': 'ineq', 'fun': constraint1}, \n    {'type': 'ineq', 'fun': constraint2})\n \n# Solution\nres = minimize(objective, x0, method='SLSQP', \n        constraints=cons, options={'disp': True})\n     \n# Show final objective\nprint('Final SSE Objective: ' + str(res.fun))\n \n# Print final solution\nprint('x1 = ' + str(res.x[0]))\nprint('x2 = ' + str(res.x[1]))\nprint('x3 = ' + str(res.x[2]))\nprint('x4 = ' + str(res.x[3]))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an optimization problem in Python with an objective function and 2 constraints\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n \ndef objective(x):\n    return (x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2])\n \ndef constraint1(x):\n    return x[0]*x[1]*x[2]*x[3] - 25 \n \ndef constraint2(x):\n    sum_sq = 40\n    for i in range(4):\n        sum_sq = sum_sq - x[i]**2 \n    return sum_sq\n     \n# Initial Guess\nx0 = np.array([1, 4, 10, 1])\n \n# show initial objective\nprint('Initial SSE Objective: ' + str(objective(x0))) \n\n# Constraints\ncons = ({'type': 'ineq', 'fun': constraint1}, \n    {'type': 'ineq', 'fun': constraint2})\n \n# Solution\nres = minimize(objective, x0, method='SLSQP', \n        constraints=cons, options={'disp': True})\n     \n# Show final objective\nprint('Final SSE Objective: ' + str(res.fun))\n \n# Print final solution\nprint('x1 = ' + str(res.x[0]))\nprint('x2 = ' + str(res.x[1]))\nprint('x3 = ' + str(res.x[2]))\nprint('x4 = ' + str(res.x[3]))"}
{"instruction": "Design a genetic algorithm in Python to find the optimal value for a given function.", "input": "", "output": "import numpy as np\n\n# Define the target function\ndef f(x): \n    return x**3 - 6 * x**2 + 4 * x + 12\n\n# Set the population size\nPOP_SIZE = 10\n\n# Generate random population of points\nnp.random.seed(42)\npopulation = np.random.uniform(-10, 10, (POP_SIZE, 2))\n\n# Evaluation\nfitness = [f(x) for x in population]\n\n# Selection \nparents = np.array(list(zip(population, fitness)))\nparents = parents[ parents[:,-1].argsort()]\n\n# Crossover \ncrossed_points = np.array(list(zip(parents[0:5,0], parents[5:,0])))\ncrossover_points = []\nfor pair in crossed_points:\n    x1 = np.mean(pair, axis=0)[0]\n    x2 = np.mean(pair, axis=0)[1]\n    crossover_points.append([x1, x2])\n\n# Mutation\nmutation = np.random.uniform(-10, 10, (POP_SIZE, 2))\n\n# Generate new population\nnew_population = np.array(list(zip(crossover_points, mutation)))\nnew_population = np.concatenate([crossover_points,mutation],axis=0)\n\n# Evaluation\nfitness = [f(x) for x in new_population]\n\n# Selection\nfinal = np.array(list(zip(population, fitness)))\nfinal = final[ final[:,-1].argsort()]\n\n# Define the optimal point\noptimal_point = final[0,0]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a genetic algorithm in Python to find the optimal value for a given function.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Define the target function\ndef f(x): \n    return x**3 - 6 * x**2 + 4 * x + 12\n\n# Set the population size\nPOP_SIZE = 10\n\n# Generate random population of points\nnp.random.seed(42)\npopulation = np.random.uniform(-10, 10, (POP_SIZE, 2))\n\n# Evaluation\nfitness = [f(x) for x in population]\n\n# Selection \nparents = np.array(list(zip(population, fitness)))\nparents = parents[ parents[:,-1].argsort()]\n\n# Crossover \ncrossed_points = np.array(list(zip(parents[0:5,0], parents[5:,0])))\ncrossover_points = []\nfor pair in crossed_points:\n    x1 = np.mean(pair, axis=0)[0]\n    x2 = np.mean(pair, axis=0)[1]\n    crossover_points.append([x1, x2])\n\n# Mutation\nmutation = np.random.uniform(-10, 10, (POP_SIZE, 2))\n\n# Generate new population\nnew_population = np.array(list(zip(crossover_points, mutation)))\nnew_population = np.concatenate([crossover_points,mutation],axis=0)\n\n# Evaluation\nfitness = [f(x) for x in new_population]\n\n# Selection\nfinal = np.array(list(zip(population, fitness)))\nfinal = final[ final[:,-1].argsort()]\n\n# Define the optimal point\noptimal_point = final[0,0]"}
{"instruction": "Research and write a report on the current state of the Python programming language.", "input": "", "output": "Python is an interpreted, high-level programming language developed by Dutch programmer Guido Van Rossum in 1991. It has a comprehensive and large standard library, and a very easy-to-learn and widely used syntax. Python is commonly used in many areas of scientific computing and is widely used in web and software development, artificial intelligence, machine learning, and data science. Python is highly regarded for its readability and broad applicability, and is the most popular language for learning Computer Science due to its flexible and expanding libraries. It supports object-oriented, procedural, and functional programming. Python, like most languages, can be used to create sophisticated applications, graphs and data visualizations, create web development, debug existing projects, and many other interesting tasks. It is a beginner-friendly language and the official support is well organized and up-to-date, making it truly an ideal choice for beginners. The experience and effort involved in learning Python can easily be produced in other computer-related related fields, making Python increasingly attractive and adopted.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nResearch and write a report on the current state of the Python programming language.\n\n### Input:\n\n\n### Output:\nPython is an interpreted, high-level programming language developed by Dutch programmer Guido Van Rossum in 1991. It has a comprehensive and large standard library, and a very easy-to-learn and widely used syntax. Python is commonly used in many areas of scientific computing and is widely used in web and software development, artificial intelligence, machine learning, and data science. Python is highly regarded for its readability and broad applicability, and is the most popular language for learning Computer Science due to its flexible and expanding libraries. It supports object-oriented, procedural, and functional programming. Python, like most languages, can be used to create sophisticated applications, graphs and data visualizations, create web development, debug existing projects, and many other interesting tasks. It is a beginner-friendly language and the official support is well organized and up-to-date, making it truly an ideal choice for beginners. The experience and effort involved in learning Python can easily be produced in other computer-related related fields, making Python increasingly attractive and adopted."}
{"instruction": "Create a Django web application that allows users to view, add, and edit blog posts.", "input": "", "output": "# create our Django project\ndjango-admin startproject blogapp\n\n# create our app \ncd blogapp\npython manage.py startapp posts\n\n# create a model for our blog posts\n# in posts/models.py:\nfrom django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True) \n\n# register the model with admin\n# in posts/admin.py:\nfrom django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)\n\n# create a form for our blog posts\n# in posts/forms.py:\nfrom django import forms\nfrom .models import Post\n\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'content']\n\n# create a view for our posts\n# in posts/views.py:\nfrom django.shortcuts import render\nfrom .models import Post\nfrom .forms import PostForm\n\ndef posts_view(request):\n    posts = Post.objects.all()\n    if request.method == 'POST':\n        form = PostForm(request.POST)\n        if form.is_valid():\n            post = form.save()\n            return redirect('posts_view')\n    else:\n        form = PostForm()\n    return render(request, 'posts/posts_view.html', { 'posts': posts, 'form': form })", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django web application that allows users to view, add, and edit blog posts.\n\n### Input:\n\n\n### Output:\n# create our Django project\ndjango-admin startproject blogapp\n\n# create our app \ncd blogapp\npython manage.py startapp posts\n\n# create a model for our blog posts\n# in posts/models.py:\nfrom django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True) \n\n# register the model with admin\n# in posts/admin.py:\nfrom django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)\n\n# create a form for our blog posts\n# in posts/forms.py:\nfrom django import forms\nfrom .models import Post\n\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'content']\n\n# create a view for our posts\n# in posts/views.py:\nfrom django.shortcuts import render\nfrom .models import Post\nfrom .forms import PostForm\n\ndef posts_view(request):\n    posts = Post.objects.all()\n    if request.method == 'POST':\n        form = PostForm(request.POST)\n        if form.is_valid():\n            post = form.save()\n            return redirect('posts_view')\n    else:\n        form = PostForm()\n    return render(request, 'posts/posts_view.html', { 'posts': posts, 'form': form })"}
{"instruction": "Create functions 'isPalindrome()' and 'removeDuplicates()' for a Python linked list.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def isPalindrome(self):\n        # your code here\n        slow_ptr = self.head\n        fast_ptr = self.head\n        rev_head = None\n        \n        while(fast_ptr):\n            fast_ptr = fast_ptr.next\n            if fast_ptr:\n                fast_ptr = fast_ptr.next\n                prev = slow_ptr\n                slow_ptr = slow_ptr.next\n            \n            prev.next = rev_head\n            rev_head = prev\n        \n        fast_ptr = self.head\n        while(rev_head):\n            if fast_ptr.data != rev_head.data:\n                return False\n            fast_ptr = fast_ptr.next\n            rev_head = rev_head.next\n        \n        return True\n    \n    def removeDuplicates(self):\n        # your code here\n        cur_node = self.head\n        while cur_node:\n            prev_node = cur_node\n            next_node = cur_node.next\n            while next_node:\n                if next_node.data == cur_node.data:\n                    prev_node.next = next_node.next\n                else:\n                    prev_node = next_node\n                next_node = next_node.next\n            cur_node = cur_node.next", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate functions 'isPalindrome()' and 'removeDuplicates()' for a Python linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def isPalindrome(self):\n        # your code here\n        slow_ptr = self.head\n        fast_ptr = self.head\n        rev_head = None\n        \n        while(fast_ptr):\n            fast_ptr = fast_ptr.next\n            if fast_ptr:\n                fast_ptr = fast_ptr.next\n                prev = slow_ptr\n                slow_ptr = slow_ptr.next\n            \n            prev.next = rev_head\n            rev_head = prev\n        \n        fast_ptr = self.head\n        while(rev_head):\n            if fast_ptr.data != rev_head.data:\n                return False\n            fast_ptr = fast_ptr.next\n            rev_head = rev_head.next\n        \n        return True\n    \n    def removeDuplicates(self):\n        # your code here\n        cur_node = self.head\n        while cur_node:\n            prev_node = cur_node\n            next_node = cur_node.next\n            while next_node:\n                if next_node.data == cur_node.data:\n                    prev_node.next = next_node.next\n                else:\n                    prev_node = next_node\n                next_node = next_node.next\n            cur_node = cur_node.next"}
{"instruction": "Create a python program to summarize a given text using natural language processing.", "input": "", "output": "import nltk \nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom collections import defaultdict\nfrom string import punctuation\nfrom heapq import nlargest\nimport numpy as np\n\n# Function to summarize the given text\ndef summarize(text, n):\n    # Tokenize the sentences in the text\n    sents = sent_tokenize(text)\n \n    # Tokenize the words in the text\n    words = word_tokenize(text.lower())\n \n    # Generate a list of stop words\n    stop_words = set(stopwords.words('english') + list(punctuation))\n \n    # Create a word frequency dictionary\n    word_freq = defaultdict(int)\n    for word in words:\n        if word not in stop_words:\n            word_freq[word] += 1\n \n    max_freq = max(word_freq.values()) \n \n    # Normalize the frequencies\n    for word in word_freq.keys():\n        word_freq[word] *= 1.0/max_freq\n \n    # Compute sentence scores\n    sent_scores = defaultdict(int) \n    for i, sent in enumerate(sents):\n        for word in word_tokenize(sent.lower()):\n            if word in word_freq.keys():\n                sent_scores[i] += word_freq[word]\n \n    # Identify the n highest scoring sentences\n    summary_sents = nlargest(n, sent_scores, key=sent_scores.get)\n    summary = [sents[j] for j in sorted(summary_sents)]   \n    return ' '.join(summary)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to summarize a given text using natural language processing.\n\n### Input:\n\n\n### Output:\nimport nltk \nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom collections import defaultdict\nfrom string import punctuation\nfrom heapq import nlargest\nimport numpy as np\n\n# Function to summarize the given text\ndef summarize(text, n):\n    # Tokenize the sentences in the text\n    sents = sent_tokenize(text)\n \n    # Tokenize the words in the text\n    words = word_tokenize(text.lower())\n \n    # Generate a list of stop words\n    stop_words = set(stopwords.words('english') + list(punctuation))\n \n    # Create a word frequency dictionary\n    word_freq = defaultdict(int)\n    for word in words:\n        if word not in stop_words:\n            word_freq[word] += 1\n \n    max_freq = max(word_freq.values()) \n \n    # Normalize the frequencies\n    for word in word_freq.keys():\n        word_freq[word] *= 1.0/max_freq\n \n    # Compute sentence scores\n    sent_scores = defaultdict(int) \n    for i, sent in enumerate(sents):\n        for word in word_tokenize(sent.lower()):\n            if word in word_freq.keys():\n                sent_scores[i] += word_freq[word]\n \n    # Identify the n highest scoring sentences\n    summary_sents = nlargest(n, sent_scores, key=sent_scores.get)\n    summary = [sents[j] for j in sorted(summary_sents)]   \n    return ' '.join(summary)"}
{"instruction": "Develop a Python module to optimize a function by Particle Swarm Optimization (PSO).", "input": "", "output": "import random\n\ndef pso_optimize(cost_func, num_particles, num_iter, min_pos, max_pos):\n    swarm_position = []\n    swarm_velocity = []\n    swarm_cost = []\n\n    for i in range(num_particles):\n        swarm_position.append([random.uniform(min_pos, max_pos) for d in range(len(min_pos))])\n        swarm_velocity.append([0 for d in range(len(min_pos))])\n        swarm_cost.append(cost_func(swarm_position[i]))\n\n    for it in range(num_iter):\n        for i in range(num_particles):\n            swarm_cost[i] = cost_func(swarm_position[i])\n\n            if swarm_cost[i] > swarm[i]['best_cost']:\n                swarm[i]['best_cost'] = swarm_cost[i]\n                swarm[i]['best_position'] = swarm_position[i]\n\n            if swarm_cost[i] > swarm['global_best_cost']:\n                swarm['global_best_cost'] = swarm_cost[i]\n                swarm['global_best_position'] = swarm_position[i]\n\n            for d in range(len(min_pos)):\n                rp = random.randint(0,1)\n                rg = random.randint(0,1)\n                swarm_velocity[i][d] = (swarm_velocity[i][d] \n                    + 2*rp*(swarm[i]['best_position'][d] - swarm_position[i][d])\n                    + 2*rg*(swarm['global_best_position'][d] - swarm_position[i][d]))\n                swarm_position[i][d] = swarm_position[i][d] + swarm_velocity[i][d]\n    return swarm['global_best_position'], swarm['global_best_cost']", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python module to optimize a function by Particle Swarm Optimization (PSO).\n\n### Input:\n\n\n### Output:\nimport random\n\ndef pso_optimize(cost_func, num_particles, num_iter, min_pos, max_pos):\n    swarm_position = []\n    swarm_velocity = []\n    swarm_cost = []\n\n    for i in range(num_particles):\n        swarm_position.append([random.uniform(min_pos, max_pos) for d in range(len(min_pos))])\n        swarm_velocity.append([0 for d in range(len(min_pos))])\n        swarm_cost.append(cost_func(swarm_position[i]))\n\n    for it in range(num_iter):\n        for i in range(num_particles):\n            swarm_cost[i] = cost_func(swarm_position[i])\n\n            if swarm_cost[i] > swarm[i]['best_cost']:\n                swarm[i]['best_cost'] = swarm_cost[i]\n                swarm[i]['best_position'] = swarm_position[i]\n\n            if swarm_cost[i] > swarm['global_best_cost']:\n                swarm['global_best_cost'] = swarm_cost[i]\n                swarm['global_best_position'] = swarm_position[i]\n\n            for d in range(len(min_pos)):\n                rp = random.randint(0,1)\n                rg = random.randint(0,1)\n                swarm_velocity[i][d] = (swarm_velocity[i][d] \n                    + 2*rp*(swarm[i]['best_position'][d] - swarm_position[i][d])\n                    + 2*rg*(swarm['global_best_position'][d] - swarm_position[i][d]))\n                swarm_position[i][d] = swarm_position[i][d] + swarm_velocity[i][d]\n    return swarm['global_best_position'], swarm['global_best_cost']"}
{"instruction": "Write a Python program to convert a positive integer to its Roman numeral equivalent.", "input": "", "output": "def int_to_roman(num):\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman = ''\n    for value, symbol in roman_numerals.items():\n        while num >= value:\n            roman += symbol\n            num -= value\n    return roman", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a positive integer to its Roman numeral equivalent.\n\n### Input:\n\n\n### Output:\ndef int_to_roman(num):\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman = ''\n    for value, symbol in roman_numerals.items():\n        while num >= value:\n            roman += symbol\n            num -= value\n    return roman"}
{"instruction": "Create a program in Python to calculate the Levenshtein distance between two strings.", "input": "", "output": "def levenshtein(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to calculate the Levenshtein distance between two strings.\n\n### Input:\n\n\n### Output:\ndef levenshtein(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]"}
{"instruction": "Design a program in Python to find the highest occurring character in a given string.", "input": "", "output": "def highest_occurring_char(str):\n    char_dict = {}\n    highest_count = 0\n    highest_char = \"\"\n    for char in str:\n        if char in char_dict:\n           char_dict[char] += 1 \n        else:\n            char_dict[char] = 1\n            \n        if char_dict[char] > highest_count:\n            highest_count = char_dict[char]\n            highest_char = char\n            \n    return highest_char\n\nmy_str = \"test string\"\nhighest_char = highest_occurring_char(my_str)\nprint(highest_char)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to find the highest occurring character in a given string.\n\n### Input:\n\n\n### Output:\ndef highest_occurring_char(str):\n    char_dict = {}\n    highest_count = 0\n    highest_char = \"\"\n    for char in str:\n        if char in char_dict:\n           char_dict[char] += 1 \n        else:\n            char_dict[char] = 1\n            \n        if char_dict[char] > highest_count:\n            highest_count = char_dict[char]\n            highest_char = char\n            \n    return highest_char\n\nmy_str = \"test string\"\nhighest_char = highest_occurring_char(my_str)\nprint(highest_char)"}
{"instruction": "Generate a program to implement a depth first search (DFS) algorithm on a given tree.", "input": "", "output": "# A Python program to perform a Depth\n# First Traversal of graph \n\n# Here an example of a graph structure \ngraph = {\n  'A': ['B', 'C'],\n  'B': ['D', 'E'],\n  'C': ['F'],\n  'D': [],\n  'E': ['F'],\n  'F': []\n}\n\n# This method performs a DFS \ndef dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited\n\n# Driver Code \nvisited = dfs(graph, 'A', [])\nprint(visited)\n# Output: ['A', 'B', 'D', 'E', 'F', 'C']", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to implement a depth first search (DFS) algorithm on a given tree.\n\n### Input:\n\n\n### Output:\n# A Python program to perform a Depth\n# First Traversal of graph \n\n# Here an example of a graph structure \ngraph = {\n  'A': ['B', 'C'],\n  'B': ['D', 'E'],\n  'C': ['F'],\n  'D': [],\n  'E': ['F'],\n  'F': []\n}\n\n# This method performs a DFS \ndef dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited\n\n# Driver Code \nvisited = dfs(graph, 'A', [])\nprint(visited)\n# Output: ['A', 'B', 'D', 'E', 'F', 'C']"}
{"instruction": "Design a python program which takes a two strings and finds out if they are anagrams.", "input": "", "output": "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    hashmap = {}\n    \n    for letter in str1:\n        if letter in hashmap:\n            hashmap[letter] += 1\n        else:\n            hashmap[letter] = 1\n    \n    for letter in str2:\n        if letter not in hashmap or hashmap[letter] == 0:\n            return False\n        else:\n            hashmap[letter] -= 1\n            \n    for key in hashmap:\n        if hashmap[key] != 0:\n            return False\n            \n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program which takes a two strings and finds out if they are anagrams.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    hashmap = {}\n    \n    for letter in str1:\n        if letter in hashmap:\n            hashmap[letter] += 1\n        else:\n            hashmap[letter] = 1\n    \n    for letter in str2:\n        if letter not in hashmap or hashmap[letter] == 0:\n            return False\n        else:\n            hashmap[letter] -= 1\n            \n    for key in hashmap:\n        if hashmap[key] != 0:\n            return False\n            \n    return True"}
{"instruction": "Generate Python code to get a list of the top 20 Reddit posts from a given subreddit.", "input": "", "output": "import requests\nimport json\n\n# Get the response from reddit\nurl = \"https://www.reddit.com/r/dataisbeautiful/top/.json\"\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"}\nresponse = requests.get(url, headers=headers, allow_redirects=False)\ndata = json.loads(response.text)\n\n# Get the list of the top 20 posts\npost_list = data['data']['children']\ntop_20_posts = [post['data']['title'] for post in post_list[:20]]\n\nprint(top_20_posts)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to get a list of the top 20 Reddit posts from a given subreddit.\n\n### Input:\n\n\n### Output:\nimport requests\nimport json\n\n# Get the response from reddit\nurl = \"https://www.reddit.com/r/dataisbeautiful/top/.json\"\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"}\nresponse = requests.get(url, headers=headers, allow_redirects=False)\ndata = json.loads(response.text)\n\n# Get the list of the top 20 posts\npost_list = data['data']['children']\ntop_20_posts = [post['data']['title'] for post in post_list[:20]]\n\nprint(top_20_posts)"}
{"instruction": "Create a neural network in Python for a regression task to predict a numerical value.", "input": "", "output": "# import necessary libraries \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf \n\n# define the neural network architecture \nmodel = tf.keras.Sequential([ \n     tf.keras.layers.Input(shape=(input_dim,)), \n     tf.keras.layers.Dense(units=128, activation=\"relu\"), \n     tf.keras.layers.Dense(units=64, activation=\"relu\"), \n     tf.keras.layers.Dense(units=1, activation=\"linear\") \n]) \n\n# compile the model \nmodel.compile(optimizer=\"adam\", loss=\"mean_squared_error\") \n\n# fit the model \nmodel.fit(X_train, Y_train, epochs=10)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python for a regression task to predict a numerical value.\n\n### Input:\n\n\n### Output:\n# import necessary libraries \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf \n\n# define the neural network architecture \nmodel = tf.keras.Sequential([ \n     tf.keras.layers.Input(shape=(input_dim,)), \n     tf.keras.layers.Dense(units=128, activation=\"relu\"), \n     tf.keras.layers.Dense(units=64, activation=\"relu\"), \n     tf.keras.layers.Dense(units=1, activation=\"linear\") \n]) \n\n# compile the model \nmodel.compile(optimizer=\"adam\", loss=\"mean_squared_error\") \n\n# fit the model \nmodel.fit(X_train, Y_train, epochs=10)"}
{"instruction": "Identify a classification algorithm using Python and generate a code to implement it.", "input": "", "output": "import numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the Iris dataset\nX, y = load_iris(return_X_y=True)\n\n# Create a training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)\n\n# Fit the model using K-Nearest Neighbors classifier\nknn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = knn.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify a classification algorithm using Python and generate a code to implement it.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the Iris dataset\nX, y = load_iris(return_X_y=True)\n\n# Create a training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)\n\n# Fit the model using K-Nearest Neighbors classifier\nknn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = knn.predict(X_test)"}
{"instruction": "Create a Python decorator that counts the number of times a given function is called.", "input": "", "output": "\"\"\"\nCreate a Python decorator that counts the number of times a given \nfunction is called.\n\"\"\"\n\ndef counter_decorator(func):\n    count = 0\n\n    def wrapper(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'{func.__name__} has been called {count} times!')\n        return func(*args, **kwargs)\n\n    return wrapper\n\n@counter_decorator\ndef random_function():\n    pass\n\nif __name__ == '__main__':\n    random_function() # prints \"random_function has been called 1 time!\"\n    random_function() # prints \"random_function has been called 2 time!\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python decorator that counts the number of times a given function is called.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python decorator that counts the number of times a given \nfunction is called.\n\"\"\"\n\ndef counter_decorator(func):\n    count = 0\n\n    def wrapper(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'{func.__name__} has been called {count} times!')\n        return func(*args, **kwargs)\n\n    return wrapper\n\n@counter_decorator\ndef random_function():\n    pass\n\nif __name__ == '__main__':\n    random_function() # prints \"random_function has been called 1 time!\"\n    random_function() # prints \"random_function has been called 2 time!\""}
{"instruction": "Generate a Python script to cluster handwritten numbers by a given similarity metric.", "input": "", "output": "# import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_digits\n\n# load the digits dataset\ndigits = load_digits()\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=10, random_state=42)\n\n# fit the model to the digits dataset \nkmeans_model.fit(digits.data)\n\n# assign labels to the clusters\nlabels = kmeans_model.labels_\n\n# plot the clusters\nfor i in range(10):\n    # create a mask to isolate each cluster\n    mask = labels == i\n    \n    # plot the images of the cluster\n    plt.title(f\"Cluster {i}\")\n    plt.imshow(digits.images[mask][0], cmap=\"gray\")\n    plt.show()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to cluster handwritten numbers by a given similarity metric.\n\n### Input:\n\n\n### Output:\n# import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_digits\n\n# load the digits dataset\ndigits = load_digits()\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=10, random_state=42)\n\n# fit the model to the digits dataset \nkmeans_model.fit(digits.data)\n\n# assign labels to the clusters\nlabels = kmeans_model.labels_\n\n# plot the clusters\nfor i in range(10):\n    # create a mask to isolate each cluster\n    mask = labels == i\n    \n    # plot the images of the cluster\n    plt.title(f\"Cluster {i}\")\n    plt.imshow(digits.images[mask][0], cmap=\"gray\")\n    plt.show()"}
{"instruction": "Construct a machine learning algorithm in Python to predict sales for a retail store.", "input": "", "output": "import pandas as pd \nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data\ndata = pd.read_csv('sales_data.csv') \n# Split into X and y\nX = data.drop('sales', axis=1)\ny = data['sales'] \n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1) \n# Initialize the model\nmodel = LinearRegression() \n# Fit the model to the training data\nmodel.fit(X_train, y_train)\n# Predict using the model on the test data\npredictions = model.predict(X_test) \n# Evaluate the model performance\nscore = model.score(X_test, y_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a machine learning algorithm in Python to predict sales for a retail store.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data\ndata = pd.read_csv('sales_data.csv') \n# Split into X and y\nX = data.drop('sales', axis=1)\ny = data['sales'] \n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1) \n# Initialize the model\nmodel = LinearRegression() \n# Fit the model to the training data\nmodel.fit(X_train, y_train)\n# Predict using the model on the test data\npredictions = model.predict(X_test) \n# Evaluate the model performance\nscore = model.score(X_test, y_test)"}
{"instruction": "Code a function in Python that generates a list of prime numbers up to a given limit.", "input": "", "output": "def generate_prime_numbers(limit):\n    # Create an initial list of all numbers from 0 up to the limit.\n    primes = [True] * (limit + 1)\n    # Set 0 and 1 to False since that are not primes.\n    primes[0] = False\n    primes[1] = False\n    \n    # Iterate through the numbers up to the square root of the limit\n    for i in range(2, int(limit**0.5) + 1):\n        if primes[i] == True:\n            # set the multiples of this number to False\n            for j in range(i*i, limit+1, i):\n                primes[j] = False\n\n    # Create a list with only True elements (those which are prime numbers)\n    true_primes = [i for i in range(2, limit+1) if primes[i] == True]\n            \n    return true_primes", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python that generates a list of prime numbers up to a given limit.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(limit):\n    # Create an initial list of all numbers from 0 up to the limit.\n    primes = [True] * (limit + 1)\n    # Set 0 and 1 to False since that are not primes.\n    primes[0] = False\n    primes[1] = False\n    \n    # Iterate through the numbers up to the square root of the limit\n    for i in range(2, int(limit**0.5) + 1):\n        if primes[i] == True:\n            # set the multiples of this number to False\n            for j in range(i*i, limit+1, i):\n                primes[j] = False\n\n    # Create a list with only True elements (those which are prime numbers)\n    true_primes = [i for i in range(2, limit+1) if primes[i] == True]\n            \n    return true_primes"}
{"instruction": "Develop a machine learning model in Python to identify the author of a given article.", "input": "", "output": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to identify the author of a given article.\n\n### Input:\n\n\n### Output:\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')"}
{"instruction": "Describe the advantages of using programming languages such as Python and JavaScript.", "input": "", "output": "Python and JavaScript are both powerful, dynamic programming languages that offer a wide range of features and benefits. Python is well-liked for its readability and constructs that make it easier to learn and code, while JavaScript excels at interactive web-building and is flexible enough to be adapted to a variety of applications. Together, they offer developers a wide range of options for creating apps and websites. Python offers an easy, high-level language with a strong emphasis on readability & decrease in development time, while JavaScript is great for building interactive websites and applications. Lastly, both languages have an active community, supportive tools, and a large number of libraries available.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe the advantages of using programming languages such as Python and JavaScript.\n\n### Input:\n\n\n### Output:\nPython and JavaScript are both powerful, dynamic programming languages that offer a wide range of features and benefits. Python is well-liked for its readability and constructs that make it easier to learn and code, while JavaScript excels at interactive web-building and is flexible enough to be adapted to a variety of applications. Together, they offer developers a wide range of options for creating apps and websites. Python offers an easy, high-level language with a strong emphasis on readability & decrease in development time, while JavaScript is great for building interactive websites and applications. Lastly, both languages have an active community, supportive tools, and a large number of libraries available."}
{"instruction": "build a class in Python that holds and manipulate a number of high scores for a game.", "input": "", "output": "class HighScores:\n    \n    def __init__(self, num_scores):\n        self.scores = [0] * num_scores\n        self.curr_index = 0 # stores index of last score filled \n        self.num_scores = num_scores\n        \n    def add_score(self, score):\n        if self.curr_index < self.num_scores:\n            self.scores[self.curr_index] = score\n            self.curr_index += 1\n        else:\n            # update the minimum score in the list\n            min_score_index = 0\n            for i in range(1, self.num_scores):\n                if self.scores[i] < self.scores[i-1]:\n                    min_score_index = i\n            if self.scores[min_score_index] < score:\n                self.scores[min_score_index] = score\n    \n    def get_scores(self):\n        return self.scores", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nbuild a class in Python that holds and manipulate a number of high scores for a game.\n\n### Input:\n\n\n### Output:\nclass HighScores:\n    \n    def __init__(self, num_scores):\n        self.scores = [0] * num_scores\n        self.curr_index = 0 # stores index of last score filled \n        self.num_scores = num_scores\n        \n    def add_score(self, score):\n        if self.curr_index < self.num_scores:\n            self.scores[self.curr_index] = score\n            self.curr_index += 1\n        else:\n            # update the minimum score in the list\n            min_score_index = 0\n            for i in range(1, self.num_scores):\n                if self.scores[i] < self.scores[i-1]:\n                    min_score_index = i\n            if self.scores[min_score_index] < score:\n                self.scores[min_score_index] = score\n    \n    def get_scores(self):\n        return self.scores"}
{"instruction": "Design a Python program to build a menu-based system to carry out various operations.", "input": "", "output": "# Define menu\nmenu = ['Calculator', 'Quiz', 'Message Board', 'Live Chat']\n\n# Print menu\nprint(\"Menu:\")\nfor item in menu:\n  print(\"-\", item)\n\n# Run a loop until user quits the program\ndone = False\nwhile not done:\n  # Print list of options\n  selection = input(\"Type the name of the action you want to select (or type 'Quit to exit): \")\n  if selection == 'Calculator':\n    # Code for Calculator\n    print(\"Calculator....\")\n  elif selection == 'Quiz':\n    # Code for Quiz\n    print(\"Quiz....\")\n  elif selection == 'Message Board':\n    # Code for Message Board\n    print(\"Message Board....\")\n  elif selection == 'Live Chat':\n    # Code for Live Chat\n    print(\"Live Chat....\")\n  elif selection == 'Quit':\n    done = True\n  else:\n    print(\"Invalid selection, please choose from the list of options.\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to build a menu-based system to carry out various operations.\n\n### Input:\n\n\n### Output:\n# Define menu\nmenu = ['Calculator', 'Quiz', 'Message Board', 'Live Chat']\n\n# Print menu\nprint(\"Menu:\")\nfor item in menu:\n  print(\"-\", item)\n\n# Run a loop until user quits the program\ndone = False\nwhile not done:\n  # Print list of options\n  selection = input(\"Type the name of the action you want to select (or type 'Quit to exit): \")\n  if selection == 'Calculator':\n    # Code for Calculator\n    print(\"Calculator....\")\n  elif selection == 'Quiz':\n    # Code for Quiz\n    print(\"Quiz....\")\n  elif selection == 'Message Board':\n    # Code for Message Board\n    print(\"Message Board....\")\n  elif selection == 'Live Chat':\n    # Code for Live Chat\n    print(\"Live Chat....\")\n  elif selection == 'Quit':\n    done = True\n  else:\n    print(\"Invalid selection, please choose from the list of options.\")"}
{"instruction": "Create a search engine that can take a query and return a list of matching documents.", "input": "", "output": "# Load libraries\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Create a corpus\ndoc1 = \"Python is a great programming language\"\ndoc2 = \"Python and web development go hand in hand\"\ndoc3 = \"Data science is also powered by Python\"\ncorpus = [doc1, doc2, doc3]\n\n# Create a CountVectorizer object\nvectorizer = CountVectorizer()\n\n# Generate the matrix\nX = vectorizer.fit_transform(corpus)\n\n# Generate the cosine similarity matrix\nsimilarity_matrix = cosine_similarity(X)\n\n# Function to get a query\ndef get_query(query):\n    query_vector = vectorizer.transform([query])\n    results = cosine_similarity(query_vector, X)\n    return results\n\n# Function to get the results\ndef get_results(results, corpus):\n    list_results = []\n    for i, score in enumerate(results):\n        if score[0] > 0.0:\n            list_results.append([score[0], corpus[i]])\n\n    # Sort in descending order\n    sorted_results = sorted(list_results, reverse = True)\n    return sorted_results", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search engine that can take a query and return a list of matching documents.\n\n### Input:\n\n\n### Output:\n# Load libraries\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Create a corpus\ndoc1 = \"Python is a great programming language\"\ndoc2 = \"Python and web development go hand in hand\"\ndoc3 = \"Data science is also powered by Python\"\ncorpus = [doc1, doc2, doc3]\n\n# Create a CountVectorizer object\nvectorizer = CountVectorizer()\n\n# Generate the matrix\nX = vectorizer.fit_transform(corpus)\n\n# Generate the cosine similarity matrix\nsimilarity_matrix = cosine_similarity(X)\n\n# Function to get a query\ndef get_query(query):\n    query_vector = vectorizer.transform([query])\n    results = cosine_similarity(query_vector, X)\n    return results\n\n# Function to get the results\ndef get_results(results, corpus):\n    list_results = []\n    for i, score in enumerate(results):\n        if score[0] > 0.0:\n            list_results.append([score[0], corpus[i]])\n\n    # Sort in descending order\n    sorted_results = sorted(list_results, reverse = True)\n    return sorted_results"}
{"instruction": "Create a Python program that uses a dictionary to store the information of ten books.", "input": "", "output": "books_dict = {\n    \"The Great Gatsby\": {\n        \"author\": \"F. Scott Fitzgerald\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1925\n    },\n    \"To Kill a Mockingbird\": {\n        \"author\": \"Harper Lee\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1960\n    },\n    \"The Catcher in the Rye\": {\n        \"author\": \"J.D. Salinger\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1951\n    },\n    \"1984\": {\n        \"author\": \"George Orwell\",\n        \"genre\": \"Fiction\",\n        \"year_published\": 1949\n    },\n    \"The Hobbit\": {\n        \"author\": \"J.R.R. Tolkien\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1937\n    },\n    \"The Lord of the Rings\": {\n        \"author\": \"J.R.R. Tolkien\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1955\n    },\n    \"Alice's Adventures in Wonderland\": {\n        \"author\": \"Lewis Carroll\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1865\n    },\n    \"Pride and Prejudice\": {\n        \"author\": \"Jane Austen\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1813\n    },\n    \"The Adventures of Sherlock Holmes\": {\n        \"author\": \"Arthur Conan Doyle\",\n        \"genre\": \"Mystery\",\n        \"year_published\": 1892\n    },\n    \"The Little Prince\": {\n        \"author\": \"Antoine de Saint-Exupéry\",\n        \"genre\": \"Fable\",\n        \"year_published\": 1943\n    } \n}", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses a dictionary to store the information of ten books.\n\n### Input:\n\n\n### Output:\nbooks_dict = {\n    \"The Great Gatsby\": {\n        \"author\": \"F. Scott Fitzgerald\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1925\n    },\n    \"To Kill a Mockingbird\": {\n        \"author\": \"Harper Lee\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1960\n    },\n    \"The Catcher in the Rye\": {\n        \"author\": \"J.D. Salinger\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1951\n    },\n    \"1984\": {\n        \"author\": \"George Orwell\",\n        \"genre\": \"Fiction\",\n        \"year_published\": 1949\n    },\n    \"The Hobbit\": {\n        \"author\": \"J.R.R. Tolkien\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1937\n    },\n    \"The Lord of the Rings\": {\n        \"author\": \"J.R.R. Tolkien\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1955\n    },\n    \"Alice's Adventures in Wonderland\": {\n        \"author\": \"Lewis Carroll\",\n        \"genre\": \"Fantasy\",\n        \"year_published\": 1865\n    },\n    \"Pride and Prejudice\": {\n        \"author\": \"Jane Austen\",\n        \"genre\": \"Novel\",\n        \"year_published\": 1813\n    },\n    \"The Adventures of Sherlock Holmes\": {\n        \"author\": \"Arthur Conan Doyle\",\n        \"genre\": \"Mystery\",\n        \"year_published\": 1892\n    },\n    \"The Little Prince\": {\n        \"author\": \"Antoine de Saint-Exupéry\",\n        \"genre\": \"Fable\",\n        \"year_published\": 1943\n    } \n}"}
{"instruction": "Create a program in Python that optimizes a given function using a genetic algorithm.", "input": "", "output": "import numpy as np\nimport random\n\n# Define a fitness function\ndef fitness_function(x):\n    return x ** 2 - 3 * x + 4\n# Generate initial population\npopulation = [random.uniform(-100,100) for _ in range(100)]\n# Start a genetic algorithm to optimize the population\ndef genetic_algorithm(population):\n    # Selection\n    selected = np.random.choice(population, 50, replace=False)\n    # Crossover\n    offspring = []\n    for i in range(0, len(selected)-1, 2):\n        parent1, parent2 = selected[i], selected[i+1]\n        cross_over_point = random.randint(0, len(parent1)-1)\n        offspring_1 = np.concatenate([parent1[:cross_over_point], parent2[cross_over_point:]])\n        offspring_2 = np.concatenate([parent2[:cross_over_point], parent1[cross_over_point:]])\n        offspring.append(offspring_1)\n        offspring.append(offspring_2)\n    # Mutation\n    for i in range(len(offspring)):\n        for bit_index, bit_value in enumerate(offspring[i]):\n            mutation_prob = random.random()\n            if mutation_prob < 0.3:\n                offspring[i][bit_index] = random.random() * 200 - 100\n    # ELitism\n    population = sorted(population, key=fitness_function, reverse=True)\n    population = population[:10] + offspring\n    # Return the new population\n    return population\n\n# Run the genetic algorithm\nfor i in range(500):\n    population = genetic_algorithm(population)\n\n# Find the optimal solution\nopt_solution = max(population, key=fitness_function)\nprint(\"Optimum solution: {}\".format(opt_solution))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that optimizes a given function using a genetic algorithm.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport random\n\n# Define a fitness function\ndef fitness_function(x):\n    return x ** 2 - 3 * x + 4\n# Generate initial population\npopulation = [random.uniform(-100,100) for _ in range(100)]\n# Start a genetic algorithm to optimize the population\ndef genetic_algorithm(population):\n    # Selection\n    selected = np.random.choice(population, 50, replace=False)\n    # Crossover\n    offspring = []\n    for i in range(0, len(selected)-1, 2):\n        parent1, parent2 = selected[i], selected[i+1]\n        cross_over_point = random.randint(0, len(parent1)-1)\n        offspring_1 = np.concatenate([parent1[:cross_over_point], parent2[cross_over_point:]])\n        offspring_2 = np.concatenate([parent2[:cross_over_point], parent1[cross_over_point:]])\n        offspring.append(offspring_1)\n        offspring.append(offspring_2)\n    # Mutation\n    for i in range(len(offspring)):\n        for bit_index, bit_value in enumerate(offspring[i]):\n            mutation_prob = random.random()\n            if mutation_prob < 0.3:\n                offspring[i][bit_index] = random.random() * 200 - 100\n    # ELitism\n    population = sorted(population, key=fitness_function, reverse=True)\n    population = population[:10] + offspring\n    # Return the new population\n    return population\n\n# Run the genetic algorithm\nfor i in range(500):\n    population = genetic_algorithm(population)\n\n# Find the optimal solution\nopt_solution = max(population, key=fitness_function)\nprint(\"Optimum solution: {}\".format(opt_solution))"}
{"instruction": "Generate a Python program that compares two binary trees to check if they are similar.", "input": "", "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that compares two binary trees to check if they are similar.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)"}
{"instruction": "Develop a Python script to find the number of vowels and consonants in a given string.", "input": "", "output": "def findVowelsConsonants(string): \n    # Initializing vowels and consonants count to 0\n    vowels_count = 0\n    consonants_count = 0\n    # Iterate through the string and calculate the count of vowels and consonants\n    for char in string:\n        if (char >= 'a' and char <= 'z'):\n            if char in 'aeiou':\n                vowels_count += 1\n            else:\n                consonants_count += 1\n    return (vowels_count, consonants_count)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to find the number of vowels and consonants in a given string.\n\n### Input:\n\n\n### Output:\ndef findVowelsConsonants(string): \n    # Initializing vowels and consonants count to 0\n    vowels_count = 0\n    consonants_count = 0\n    # Iterate through the string and calculate the count of vowels and consonants\n    for char in string:\n        if (char >= 'a' and char <= 'z'):\n            if char in 'aeiou':\n                vowels_count += 1\n            else:\n                consonants_count += 1\n    return (vowels_count, consonants_count)"}
{"instruction": "Design a decision tree classifier in Python to distinguish between apples and oranges.", "input": "", "output": "#importing libraries\nfrom sklearn import tree\nimport numpy as np\n\n# preparing the data\n# features\nfeatures = [[140,1],[130,1],[150,0],[170,0]]\n\n# target\ntarget = ['apple','apple','orange','orange']\n\n# training the classifier\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(features, target)\n\n# testing the classifier\ntest_sample = [160,0]\ntest_sample = np.array(test_sample).reshape(1,2)\nprediction = clf.predict(test_sample)\n\nprint(prediction)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a decision tree classifier in Python to distinguish between apples and oranges.\n\n### Input:\n\n\n### Output:\n#importing libraries\nfrom sklearn import tree\nimport numpy as np\n\n# preparing the data\n# features\nfeatures = [[140,1],[130,1],[150,0],[170,0]]\n\n# target\ntarget = ['apple','apple','orange','orange']\n\n# training the classifier\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(features, target)\n\n# testing the classifier\ntest_sample = [160,0]\ntest_sample = np.array(test_sample).reshape(1,2)\nprediction = clf.predict(test_sample)\n\nprint(prediction)"}
{"instruction": "Draft a Python Class to store sensitive data such as passwords in an encrypted format.", "input": "", "output": "import hashlib \nclass PasswordStore:\n    def __init__(self, username, password):\n        self.username = username \n        self.encryptedPassword = self._encryptPassword(password)\n    def _encryptPassword(self, password):\n        hashed_password = hashlib.sha512((password + self.username).encode('utf-8')).hexdigest()\n        return hashed_password\n    def authenticate(self, password):\n        return self.encryptedPassword == self._encryptPassword(password)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDraft a Python Class to store sensitive data such as passwords in an encrypted format.\n\n### Input:\n\n\n### Output:\nimport hashlib \nclass PasswordStore:\n    def __init__(self, username, password):\n        self.username = username \n        self.encryptedPassword = self._encryptPassword(password)\n    def _encryptPassword(self, password):\n        hashed_password = hashlib.sha512((password + self.username).encode('utf-8')).hexdigest()\n        return hashed_password\n    def authenticate(self, password):\n        return self.encryptedPassword == self._encryptPassword(password)"}
{"instruction": "Create a machine learning algorithm in Python to classify flowers by their petal size.", "input": "", "output": "from sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\n\n# Load the iris dataset \niris = load_iris()\n \n# Create the X (features) and y (target) arrays\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n \n# Train the SVC classifier\nsvm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)\n\n# Create predictions \npredictions = svm_model_linear.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning algorithm in Python to classify flowers by their petal size.\n\n### Input:\n\n\n### Output:\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\n\n# Load the iris dataset \niris = load_iris()\n \n# Create the X (features) and y (target) arrays\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n \n# Train the SVC classifier\nsvm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)\n\n# Create predictions \npredictions = svm_model_linear.predict(X_test)"}
{"instruction": "Write a Python program to create a KMeans model and cluster iris data into 3 clusters.", "input": "", "output": "\"\"\"\nWrite a Python program to create a KMeans model and cluster iris data into 3 clusters.\n\"\"\"\n\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn import datasets\n\n# Load the iris data\niris = datasets.load_iris()\nX = pd.DataFrame(iris.data)\ny = pd.DataFrame(iris.target)\n\n# Create the KMeans model \nmodel = KMeans(n_clusters=3, random_state=0)\nmodel.fit(X)\n\n# Predict the clusters\nprediction = model.predict(X)\n\n# Add the prediction to the data frame\nX.insert(0, \"cluster\", prediction)\n\n# Print the result\nprint(X)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a KMeans model and cluster iris data into 3 clusters.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a Python program to create a KMeans model and cluster iris data into 3 clusters.\n\"\"\"\n\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn import datasets\n\n# Load the iris data\niris = datasets.load_iris()\nX = pd.DataFrame(iris.data)\ny = pd.DataFrame(iris.target)\n\n# Create the KMeans model \nmodel = KMeans(n_clusters=3, random_state=0)\nmodel.fit(X)\n\n# Predict the clusters\nprediction = model.predict(X)\n\n# Add the prediction to the data frame\nX.insert(0, \"cluster\", prediction)\n\n# Print the result\nprint(X)"}
{"instruction": "Generate a python program to determine which episode of a TV show is the most popular.", "input": "", "output": "def get_most_popular_episode(data):\n    \"\"\"\n    Args:\n        data (dict): A dictionary with information about each episode of the TV show, \n        including the number of views and the episode number\n    Returns:\n        int: The number of the most popular episode\n    \"\"\"\n\n    max_views = 0\n    most_popular_episode = 0\n    for ep_num, ep_data in data.items():\n        num_views = ep_data[\"views\"]\n        if num_views > max_views:\n            max_views = num_views\n            most_popular_episode = ep_num\n    return most_popular_episode", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to determine which episode of a TV show is the most popular.\n\n### Input:\n\n\n### Output:\ndef get_most_popular_episode(data):\n    \"\"\"\n    Args:\n        data (dict): A dictionary with information about each episode of the TV show, \n        including the number of views and the episode number\n    Returns:\n        int: The number of the most popular episode\n    \"\"\"\n\n    max_views = 0\n    most_popular_episode = 0\n    for ep_num, ep_data in data.items():\n        num_views = ep_data[\"views\"]\n        if num_views > max_views:\n            max_views = num_views\n            most_popular_episode = ep_num\n    return most_popular_episode"}
{"instruction": "Code an algorithm in Python that takes in a linked list and splits it into two halves.", "input": "", "output": "# Defining a Node\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\ndef splitList(head):\n  # Base case\n  if head == None or head.next == None:\n    return head\n  \n  # Fast and slow pointers\n  fastPtr = head.next\n  slowPtr = head\n\n  # Advancing the fastPtr twice and slowPtr once\n  while(fastPtr != None):\n    fastPtr = fastPtr.next\n    if fastPtr != None:\n      slowPtr = slowPtr.next\n      fastPtr = fastPtr.next\n  \n  # Splitting the linked list in half\n  fastPtr = slowPtr.next\n  slowPtr.next = None\n  \n  return head, fastPtr", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode an algorithm in Python that takes in a linked list and splits it into two halves.\n\n### Input:\n\n\n### Output:\n# Defining a Node\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\ndef splitList(head):\n  # Base case\n  if head == None or head.next == None:\n    return head\n  \n  # Fast and slow pointers\n  fastPtr = head.next\n  slowPtr = head\n\n  # Advancing the fastPtr twice and slowPtr once\n  while(fastPtr != None):\n    fastPtr = fastPtr.next\n    if fastPtr != None:\n      slowPtr = slowPtr.next\n      fastPtr = fastPtr.next\n  \n  # Splitting the linked list in half\n  fastPtr = slowPtr.next\n  slowPtr.next = None\n  \n  return head, fastPtr"}
{"instruction": "Develop a web scraper in Python to download a list of educational videos from YouTube.", "input": "", "output": "# Import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.parse\n\n# Make a GET request\nr = requests.get('https://www.youtube.com/results?search_query=' + urllib.parse.quote('educational videos'))\n\n# Parse the HTML page\nsoup = BeautifulSoup(r.text, 'html.parser')\nvideos = soup.find_all('h3', {'class': 'yt-lockup-title'})\n\n# Save the links\nlinks = [video.find('a')['href'] for video in videos]\n\n# Download the videos\nfor link in links:\n    r = requests.get(link)\n    with open('video.mp4', 'wb') as f:\n        f.write(r.content)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraper in Python to download a list of educational videos from YouTube.\n\n### Input:\n\n\n### Output:\n# Import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.parse\n\n# Make a GET request\nr = requests.get('https://www.youtube.com/results?search_query=' + urllib.parse.quote('educational videos'))\n\n# Parse the HTML page\nsoup = BeautifulSoup(r.text, 'html.parser')\nvideos = soup.find_all('h3', {'class': 'yt-lockup-title'})\n\n# Save the links\nlinks = [video.find('a')['href'] for video in videos]\n\n# Download the videos\nfor link in links:\n    r = requests.get(link)\n    with open('video.mp4', 'wb') as f:\n        f.write(r.content)"}
{"instruction": "Write a dialogue system in Python to respond to customer queries related to a product.", "input": "", "output": "import random\n\ndef respond_to_query(query):\n    if query == 'What is the price?':\n        return 'The price of our product is $30.'\n    elif query == 'Where can I buy it?':\n        return 'You can buy it from our online store or from select retailers.'\n    elif query == 'How do I use it?':\n        return 'Follow the instructions in the user manual.'\n    else:\n        responses = ['I am sorry, I do not understand your question.',\n                     'Can you be more specific?',\n                     'Please ask a specific question about the product.']\n        return random.choice(responses)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a dialogue system in Python to respond to customer queries related to a product.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef respond_to_query(query):\n    if query == 'What is the price?':\n        return 'The price of our product is $30.'\n    elif query == 'Where can I buy it?':\n        return 'You can buy it from our online store or from select retailers.'\n    elif query == 'How do I use it?':\n        return 'Follow the instructions in the user manual.'\n    else:\n        responses = ['I am sorry, I do not understand your question.',\n                     'Can you be more specific?',\n                     'Please ask a specific question about the product.']\n        return random.choice(responses)"}
{"instruction": "Develop a method for converting an introduction letter from PDF to HTML, using Python.", "input": "", "output": "import pdfminer \n\ndef convert_pdf_to_html(pdf_file):\n    content = \"\"\n    # to convert pdf document to html\n    with open(pdf_file, \"rb\") as file:\n        pdf = pdfminer.pdfdocument.PDFDocument(file)\n        rsrcmgr = pdfminer.pdfinterp.PDFResourceManager()\n        laparams = pdfminer.pdflayout.LAParams()\n        device = pdfminer.converter.HTMLConverter(rsrcmgr, laparams=laparams)\n        interpreter = pdfminer.pdfinterp.PDFPageInterpreter(rsrcmgr, device)\n        for page in pdfminer.pdfpage.PDFPage.create_pages(pdf):\n            interpreter.process_page(page)\n            content += device.get_result()\n\n    return content", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a method for converting an introduction letter from PDF to HTML, using Python.\n\n### Input:\n\n\n### Output:\nimport pdfminer \n\ndef convert_pdf_to_html(pdf_file):\n    content = \"\"\n    # to convert pdf document to html\n    with open(pdf_file, \"rb\") as file:\n        pdf = pdfminer.pdfdocument.PDFDocument(file)\n        rsrcmgr = pdfminer.pdfinterp.PDFResourceManager()\n        laparams = pdfminer.pdflayout.LAParams()\n        device = pdfminer.converter.HTMLConverter(rsrcmgr, laparams=laparams)\n        interpreter = pdfminer.pdfinterp.PDFPageInterpreter(rsrcmgr, device)\n        for page in pdfminer.pdfpage.PDFPage.create_pages(pdf):\n            interpreter.process_page(page)\n            content += device.get_result()\n\n    return content"}
{"instruction": "Write a code to optimize a given knapsack problem using dynamic programming in Python.", "input": "", "output": "def knapsack(weights, values, max_weight):\n    # Create a matrix to store results of subproblems\n    mat = [[0 for i in range(max_weight + 1)] for i in range(len(weights) + 1)]\n\n    # Fill mat[][] in bottom up manner\n    for i in range(len(weights) + 1):\n        for w in range(max_weight + 1):\n            if i == 0 or w == 0:\n                mat[i][w] = 0\n            elif weights[i-1] <= w:\n                mat[i][w] = max(values[i-1] + mat[i-1][w-weights[i-1]], mat[i-1][w])\n            else:\n                mat[i][w] = mat[i-1][w]\n\n    # Find the maximum value\n    max_value = mat[len(weights)][max_weight]\n\n    return max_value", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to optimize a given knapsack problem using dynamic programming in Python.\n\n### Input:\n\n\n### Output:\ndef knapsack(weights, values, max_weight):\n    # Create a matrix to store results of subproblems\n    mat = [[0 for i in range(max_weight + 1)] for i in range(len(weights) + 1)]\n\n    # Fill mat[][] in bottom up manner\n    for i in range(len(weights) + 1):\n        for w in range(max_weight + 1):\n            if i == 0 or w == 0:\n                mat[i][w] = 0\n            elif weights[i-1] <= w:\n                mat[i][w] = max(values[i-1] + mat[i-1][w-weights[i-1]], mat[i-1][w])\n            else:\n                mat[i][w] = mat[i-1][w]\n\n    # Find the maximum value\n    max_value = mat[len(weights)][max_weight]\n\n    return max_value"}
{"instruction": "Create a program using Python to determine the prime factorization for a given number.", "input": "", "output": "\"\"\"\nThis program will use Python to determine the prime factorization for a given number.\n\"\"\"\ndef prime_factorization(n): \n    # Initialize the prime factor list\n    prime_factors = [] \n  \n    # Find the smallest prime factor of the number\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n //= 2\n          \n    # Check the odd numbers to find the prime factors \n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            prime_factors.append(i) \n            n //= i\n  \n    # If the number is greater than 2, it is a prime factor \n    if n > 2: \n        prime_factors.append(n)\n  \n    return prime_factors", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program using Python to determine the prime factorization for a given number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nThis program will use Python to determine the prime factorization for a given number.\n\"\"\"\ndef prime_factorization(n): \n    # Initialize the prime factor list\n    prime_factors = [] \n  \n    # Find the smallest prime factor of the number\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n //= 2\n          \n    # Check the odd numbers to find the prime factors \n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            prime_factors.append(i) \n            n //= i\n  \n    # If the number is greater than 2, it is a prime factor \n    if n > 2: \n        prime_factors.append(n)\n  \n    return prime_factors"}
{"instruction": "Implement a KNN Algorithm in Python to classify iris datapoints into three categories.", "input": "", "output": "# import relevant libraries\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0)\n\n# Initialize the model\nknn_model = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model to train data\nknn_model.fit(X_train, y_train)\n\n# Score the model on test data\nknn_model.score(X_test, y_test)\n\n# Output a prediction \nknn_model.predict([[3, 5, 4, 2]])\n# Output: [1] (This is Iris-versicolor)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a KNN Algorithm in Python to classify iris datapoints into three categories.\n\n### Input:\n\n\n### Output:\n# import relevant libraries\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0)\n\n# Initialize the model\nknn_model = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model to train data\nknn_model.fit(X_train, y_train)\n\n# Score the model on test data\nknn_model.score(X_test, y_test)\n\n# Output a prediction \nknn_model.predict([[3, 5, 4, 2]])\n# Output: [1] (This is Iris-versicolor)"}
{"instruction": "Implement a hash table in Python that supports insert, delete and retrieve operations.", "input": "", "output": "class HashTable:\n    def __init__(self):\n        self.table = [[] for _ in range(256)]\n \n    def insert(self, key, value):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                self.table[h][i] = (key, value)\n                return\n        self.table[h].append((key, value))\n \n    def retrieve(self, key):\n        h = hash(key) % 256\n        for kv in self.table[h]:\n            if kv[0] == key:\n                return kv[1]\n \n    def delete(self, key):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                del self.table[h][i]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a hash table in Python that supports insert, delete and retrieve operations.\n\n### Input:\n\n\n### Output:\nclass HashTable:\n    def __init__(self):\n        self.table = [[] for _ in range(256)]\n \n    def insert(self, key, value):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                self.table[h][i] = (key, value)\n                return\n        self.table[h].append((key, value))\n \n    def retrieve(self, key):\n        h = hash(key) % 256\n        for kv in self.table[h]:\n            if kv[0] == key:\n                return kv[1]\n \n    def delete(self, key):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                del self.table[h][i]"}
{"instruction": "Write a Python function to create and show a binary search tree given a set of values.", "input": "", "output": "class Node:\n    def __init__(self, val):\n        self.l = None\n        self.r = None\n        self.v = val\n\ndef tree_insert( node, val):\n    if node is None:\n        return Node(val)\n    if val < node.v:\n        node.l = tree_insert(node.l, val)\n    else:\n        node.r = tree_insert(node.r, val)\n\n    return node\n\ndef show_tree(node):\n    if node is None:\n        return\n    \n    show_tree(node.l)\n    \n    print(f\"{node.v}\")\n    \n    show_tree(node.r)\n\ndef initialize_tree():\n    root = None\n    set_values = [8, 3, 10, 1, 6, 14, 4, 7, 13]\n    for val in set_values:\n        root = tree_insert(root, val)\n    \n    return root\n\nroot = initialize_tree()\nshow_tree(root)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to create and show a binary search tree given a set of values.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, val):\n        self.l = None\n        self.r = None\n        self.v = val\n\ndef tree_insert( node, val):\n    if node is None:\n        return Node(val)\n    if val < node.v:\n        node.l = tree_insert(node.l, val)\n    else:\n        node.r = tree_insert(node.r, val)\n\n    return node\n\ndef show_tree(node):\n    if node is None:\n        return\n    \n    show_tree(node.l)\n    \n    print(f\"{node.v}\")\n    \n    show_tree(node.r)\n\ndef initialize_tree():\n    root = None\n    set_values = [8, 3, 10, 1, 6, 14, 4, 7, 13]\n    for val in set_values:\n        root = tree_insert(root, val)\n    \n    return root\n\nroot = initialize_tree()\nshow_tree(root)"}
{"instruction": "Create a GUI program in Python to ask a user to input any text and display the output.", "input": "", "output": "import tkinter as tk\n\n# Create window\nwindow = tk.Tk() \nwindow.title(\"Input-Output Program\") \nwindow.geometry(\"400x200\") \n\n#  Create a Label\nmessage_heading = tk.Label(text=\"Input:\") \nmessage_heading.grid(column=0, row=0)\n\n# Create a text entry box\ntext_entry = tk.Entry() \ntext_entry.grid(column=1, row=0)\n\n# Create a Submit Button\nsubmit_button = tk.Button(text=\"Submit\", command=lambda: submit_input()) \nsubmit_button.grid(column=2, row=0)\n\n# Output label\noutput_heading = tk.Label(text=\"Output:\") \noutput_heading.grid(column=0, row=2)\n\noutput_display = tk.Label()\noutput_display.grid(column=1, row=2) \n\n# Submit function\ndef submit_input(): \n    user_input = text_entry.get()\n    output_display['text'] = user_input\n    \n# Create an event loop\nwindow.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI program in Python to ask a user to input any text and display the output.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\n# Create window\nwindow = tk.Tk() \nwindow.title(\"Input-Output Program\") \nwindow.geometry(\"400x200\") \n\n#  Create a Label\nmessage_heading = tk.Label(text=\"Input:\") \nmessage_heading.grid(column=0, row=0)\n\n# Create a text entry box\ntext_entry = tk.Entry() \ntext_entry.grid(column=1, row=0)\n\n# Create a Submit Button\nsubmit_button = tk.Button(text=\"Submit\", command=lambda: submit_input()) \nsubmit_button.grid(column=2, row=0)\n\n# Output label\noutput_heading = tk.Label(text=\"Output:\") \noutput_heading.grid(column=0, row=2)\n\noutput_display = tk.Label()\noutput_display.grid(column=1, row=2) \n\n# Submit function\ndef submit_input(): \n    user_input = text_entry.get()\n    output_display['text'] = user_input\n    \n# Create an event loop\nwindow.mainloop()"}
{"instruction": "Create a Python class to implement linked list add, delete, and print functionalities.", "input": "", "output": "class Node:\n def __init__(self, dataval=None):\n   self.dataval = dataval\n   self.nextval = None\n\nclass SLinkedList:\n def __init__(self):\n  self.headval = None\n\n# Function to add node\n def addNode(self, dataval):\n  NewNode = Node(dataval)\n  if self.headval is None:\n   self.headval = NewNode\n   return\n  laste = self.headval\n  while(laste.nextval):\n   laste = laste.nextval\n  laste.nextval=NewNode\n\n# Function to print the linked list\n def listprint(self):\n  printval = self.headval\n  while printval is not None:\n   print (printval.dataval),\n   printval = printval.nextval\n\n# Function to delete a node\n def DeleteNode(self, dataval):\n  deletenode = self.headval\n  if deletenode.dataval == dataval:\n   self.headval = deletenode.nextval\n   deletenode = None\n   return\n\n  prevnode = None\n  while deletenode.dataval != dataval:\n   prevnode = deletenode\n   deletenode = deletenode.nextval\n\n  prevnode.nextval = deletenode.nextval\n  deletenode = None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to implement linked list add, delete, and print functionalities.\n\n### Input:\n\n\n### Output:\nclass Node:\n def __init__(self, dataval=None):\n   self.dataval = dataval\n   self.nextval = None\n\nclass SLinkedList:\n def __init__(self):\n  self.headval = None\n\n# Function to add node\n def addNode(self, dataval):\n  NewNode = Node(dataval)\n  if self.headval is None:\n   self.headval = NewNode\n   return\n  laste = self.headval\n  while(laste.nextval):\n   laste = laste.nextval\n  laste.nextval=NewNode\n\n# Function to print the linked list\n def listprint(self):\n  printval = self.headval\n  while printval is not None:\n   print (printval.dataval),\n   printval = printval.nextval\n\n# Function to delete a node\n def DeleteNode(self, dataval):\n  deletenode = self.headval\n  if deletenode.dataval == dataval:\n   self.headval = deletenode.nextval\n   deletenode = None\n   return\n\n  prevnode = None\n  while deletenode.dataval != dataval:\n   prevnode = deletenode\n   deletenode = deletenode.nextval\n\n  prevnode.nextval = deletenode.nextval\n  deletenode = None"}
{"instruction": "Develop a sentiment analysis model by implementing a Naive Bayes classifier in Python.", "input": "", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\n\n# Data Preprocessing\n# Read dataset into pandas dataframe\ndf = pd.read_csv(\"data.csv\")\n\n# Extract relevant features\nfeatures = df.iloc[:, :-1].values\nlabels = df.iloc[: , -1].values\n\n# Split dataset into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state= 0)\n\n# Train and Test data feature engineering\ncv = CountVectorizer()\nX_train = cv.fit_transform(X_train)\nX_test = cv.transform(X_test)\n\n# Train the Naive Bayes Classifier Model\nclassifier = BernoulliNB()\nclassifier.fit(X_train, y_train)\n\n# Test the accuracy of the model\ny_pred = classifier.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy of the model\nprint(\"Accuracy: \", accuracy * 100, \"%\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a sentiment analysis model by implementing a Naive Bayes classifier in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB\n\n# Data Preprocessing\n# Read dataset into pandas dataframe\ndf = pd.read_csv(\"data.csv\")\n\n# Extract relevant features\nfeatures = df.iloc[:, :-1].values\nlabels = df.iloc[: , -1].values\n\n# Split dataset into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state= 0)\n\n# Train and Test data feature engineering\ncv = CountVectorizer()\nX_train = cv.fit_transform(X_train)\nX_test = cv.transform(X_test)\n\n# Train the Naive Bayes Classifier Model\nclassifier = BernoulliNB()\nclassifier.fit(X_train, y_train)\n\n# Test the accuracy of the model\ny_pred = classifier.predict(X_test)\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy of the model\nprint(\"Accuracy: \", accuracy * 100, \"%\")"}
{"instruction": "Design a Python algorithm to identify the longest common subsequence from two strings.", "input": "", "output": "def lcs(a, b):\n    # Generate a 2D matrix from the two strings\n    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]\n    # Initialize the matrix\n    for i in range(len(a) + 1): \n        for j in range(len(b) + 1): \n            if i == 0 or j == 0: \n                arr[i][j] = 0\n            # If the characters at i and j match \n            elif a[i-1] == b[j-1]: \n                arr[i][j] = arr[i-1][j-1] + 1\n            # If the characters dont match \n            else: \n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n    # Traverse the 2D matrix and find the longest common subsequence\n    index = arr[len(a)][len(b)]\n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = len(a) \n    j = len(b)\n    while i > 0 and j > 0: \n        if a[i-1] == b[j-1]: \n            lcs[index-1] = a[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif arr[i-1][j] > arr[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(lcs)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to identify the longest common subsequence from two strings.\n\n### Input:\n\n\n### Output:\ndef lcs(a, b):\n    # Generate a 2D matrix from the two strings\n    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]\n    # Initialize the matrix\n    for i in range(len(a) + 1): \n        for j in range(len(b) + 1): \n            if i == 0 or j == 0: \n                arr[i][j] = 0\n            # If the characters at i and j match \n            elif a[i-1] == b[j-1]: \n                arr[i][j] = arr[i-1][j-1] + 1\n            # If the characters dont match \n            else: \n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n    # Traverse the 2D matrix and find the longest common subsequence\n    index = arr[len(a)][len(b)]\n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = len(a) \n    j = len(b)\n    while i > 0 and j > 0: \n        if a[i-1] == b[j-1]: \n            lcs[index-1] = a[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif arr[i-1][j] > arr[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(lcs)"}
{"instruction": "Create an AI chatbot in Python to answer simple user questions about a specific topic.", "input": "", "output": "# import libraries\nimport random\nimport nltk\nfrom nltk.corpus import wordnet  \n\n# define a function to find the synonym of a given word\ndef get_synonym(word):\n    synonyms = set()\n    for syn in wordnet.synsets(word):\n        for l in syn.lemmas():\n            synonyms.add(l.name())\n    if word in synonyms:\n        synonyms.remove(word)\n    return list(synonyms)\n\n# define a function to generate a response\ndef bot_response(question):\n    responses = [\"I'm not sure I understand, could you rephrase the question?\", \n                 \"I don't have enough information to answer that question, can you give me more data?\", \n                 \"I'm not sure I can help you with that.\", \n                 \"Can you rephrase the question?\", \n                 \"What would you like to know?\"]\n                 \n    # tokenize the sentence\n    tokens = nltk.word_tokenize(question)\n    \n    # look for a synonym of each word\n    synonyms_list = []\n    for word in tokens:\n        synonyms_list.append(get_synonym(word))\n\n    # generate a response with synonyms of each word\n    response_tokens = []\n    for synonyms in synonyms_list:\n        if len(synonyms) > 0:\n            response_tokens.append(random.choice(synonyms))\n        else:\n            response_tokens.append(word)\n    response = ' '.join(response_tokens)\n\n    # if not, randomly select one of the predefined responses\n    if not response:\n        response = random.choice(responses)\n     \n    return response", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI chatbot in Python to answer simple user questions about a specific topic.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport random\nimport nltk\nfrom nltk.corpus import wordnet  \n\n# define a function to find the synonym of a given word\ndef get_synonym(word):\n    synonyms = set()\n    for syn in wordnet.synsets(word):\n        for l in syn.lemmas():\n            synonyms.add(l.name())\n    if word in synonyms:\n        synonyms.remove(word)\n    return list(synonyms)\n\n# define a function to generate a response\ndef bot_response(question):\n    responses = [\"I'm not sure I understand, could you rephrase the question?\", \n                 \"I don't have enough information to answer that question, can you give me more data?\", \n                 \"I'm not sure I can help you with that.\", \n                 \"Can you rephrase the question?\", \n                 \"What would you like to know?\"]\n                 \n    # tokenize the sentence\n    tokens = nltk.word_tokenize(question)\n    \n    # look for a synonym of each word\n    synonyms_list = []\n    for word in tokens:\n        synonyms_list.append(get_synonym(word))\n\n    # generate a response with synonyms of each word\n    response_tokens = []\n    for synonyms in synonyms_list:\n        if len(synonyms) > 0:\n            response_tokens.append(random.choice(synonyms))\n        else:\n            response_tokens.append(word)\n    response = ' '.join(response_tokens)\n\n    # if not, randomly select one of the predefined responses\n    if not response:\n        response = random.choice(responses)\n     \n    return response"}
{"instruction": "Build a web application using Python and Flask that displays the current date and time.", "input": "", "output": "from flask import Flask\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('/')\ndef homepage():\n    the_time = datetime.now().strftime(\"%A, %d %b %Y %l:%M %p\")\n    return \"\"\"\n    <h1>Current Date and Time</h1>\n    <p>It is currently {time}.</p>\n    <p>The local timezone is {timezone}.</p>\n    \"\"\".format(time = the_time, timezone = datetime.now().strftime(\"%Z\"))\n\nif __name__ == '__main__':\n    app.run(debug=True)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web application using Python and Flask that displays the current date and time.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('/')\ndef homepage():\n    the_time = datetime.now().strftime(\"%A, %d %b %Y %l:%M %p\")\n    return \"\"\"\n    <h1>Current Date and Time</h1>\n    <p>It is currently {time}.</p>\n    <p>The local timezone is {timezone}.</p>\n    \"\"\".format(time = the_time, timezone = datetime.now().strftime(\"%Z\"))\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction": "Implement a function in Python to detect whether a given string is a valid ISBN number.", "input": "", "output": "def is_isbn_valid(isbn):\n    isbn = isbn.replace(\"-\", \"\")\n    if len(isbn) != 10:\n        return False\n \n    sum = 0\n    factor = 10\n \n    for i in range(len(isbn)):\n        if isbn[i].isdigit():\n            sum += int(isbn[i]) * factor\n        elif isbn[i].upper() == 'X':\n            sum += 10 * factor\n        else:\n            return False\n        factor -= 1\n    \n    if sum % 11 == 0:\n        return True\n    else:\n        return False", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to detect whether a given string is a valid ISBN number.\n\n### Input:\n\n\n### Output:\ndef is_isbn_valid(isbn):\n    isbn = isbn.replace(\"-\", \"\")\n    if len(isbn) != 10:\n        return False\n \n    sum = 0\n    factor = 10\n \n    for i in range(len(isbn)):\n        if isbn[i].isdigit():\n            sum += int(isbn[i]) * factor\n        elif isbn[i].upper() == 'X':\n            sum += 10 * factor\n        else:\n            return False\n        factor -= 1\n    \n    if sum % 11 == 0:\n        return True\n    else:\n        return False"}
{"instruction": "Produce a Python program to merge two sorted lists, given two ordered lists of numbers.", "input": "", "output": "def merge_sorted_lists(list1, list2):\n merged_list = []\n \n\t#loop through each element and add to list in sorted order\n\twhile list1 != [] and list2 != []:\n\t\tif list1[0] <= list2[0]:\n\t\t\tmerged_list.append(list1[0])\n\t\t\tlist1.remove(list1[0])\n\t\telse:\n\t\t\tmerged_list.append(list2[0])\n\t\t\tlist2.remove(list2[0])\n \n\t #if any elements left\n\tif list1 != []:\n\t\tmerged_list.extend(list1)\n\tif list2 != []:\n\t\tmerged_list.extend(list2)\n \n\treturn merged_list", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program to merge two sorted lists, given two ordered lists of numbers.\n\n### Input:\n\n\n### Output:\ndef merge_sorted_lists(list1, list2):\n merged_list = []\n \n\t#loop through each element and add to list in sorted order\n\twhile list1 != [] and list2 != []:\n\t\tif list1[0] <= list2[0]:\n\t\t\tmerged_list.append(list1[0])\n\t\t\tlist1.remove(list1[0])\n\t\telse:\n\t\t\tmerged_list.append(list2[0])\n\t\t\tlist2.remove(list2[0])\n \n\t #if any elements left\n\tif list1 != []:\n\t\tmerged_list.extend(list1)\n\tif list2 != []:\n\t\tmerged_list.extend(list2)\n \n\treturn merged_list"}
{"instruction": "Generate a Python program to compress a string into a series of numbers and vice-versa.", "input": "", "output": "def compress(string):\n    if string == '' or not string:\n        return string\n    compressed_str = []\n    i = 0\n    j = 0\n    while i < len(string):\n        while j < len(string) and string[j] == string[i]:\n            j = j + 1\n        compressed_str.append([string[i], str(j-i)])\n        i = j\n    return compressed_str\n\ndef decompress(compressed_str):\n    decompressed_str = \"\"\n    for i in compressed_str:\n        decompressed_str+=i[0]*int(i[1])\n    return decompressed_str", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to compress a string into a series of numbers and vice-versa.\n\n### Input:\n\n\n### Output:\ndef compress(string):\n    if string == '' or not string:\n        return string\n    compressed_str = []\n    i = 0\n    j = 0\n    while i < len(string):\n        while j < len(string) and string[j] == string[i]:\n            j = j + 1\n        compressed_str.append([string[i], str(j-i)])\n        i = j\n    return compressed_str\n\ndef decompress(compressed_str):\n    decompressed_str = \"\"\n    for i in compressed_str:\n        decompressed_str+=i[0]*int(i[1])\n    return decompressed_str"}
{"instruction": "Create a neural network in Python capable of solving a multiple classification problem.", "input": "", "output": "import tensorflow as tf\n\n# Create an input layer with two input features\ninputs = tf.keras.Input(shape=(2,))\n\n# Add a dense layer with three neurons\nx = tf.keras.layers.Dense(3, activation='sigmoid')(inputs)\n\n# Add a dense layer with three neurons\noutputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n\n# Create the model\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n# Compile\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python capable of solving a multiple classification problem.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\n\n# Create an input layer with two input features\ninputs = tf.keras.Input(shape=(2,))\n\n# Add a dense layer with three neurons\nx = tf.keras.layers.Dense(3, activation='sigmoid')(inputs)\n\n# Add a dense layer with three neurons\noutputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n\n# Create the model\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n# Compile\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])"}
{"instruction": "Write a python program to classify text input as either positive or negative sentiment.", "input": "", "output": "# Example of predicting sentiment from text\nfrom textblob import TextBlob\n \ndef classify_sentiment(text):\n\t# create TextBlob object of passed text\n\tanalysis = TextBlob(text)\n\t# set sentiment\n\tif analysis.sentiment.polarity > 0:\n\t\treturn 'positive'\n\telif analysis.sentiment.polarity == 0:\n\t\treturn 'neutral'\n\telse:\n\t\treturn 'negative'\n\ntext1 = 'I am a good person'\ntext2 = 'I am a bad person'\n\nsentiment1 = classify_sentiment(text1) \nsentiment2 = classify_sentiment(text2) \n\nprint(sentiment1)\nprint(sentiment2)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify text input as either positive or negative sentiment.\n\n### Input:\n\n\n### Output:\n# Example of predicting sentiment from text\nfrom textblob import TextBlob\n \ndef classify_sentiment(text):\n\t# create TextBlob object of passed text\n\tanalysis = TextBlob(text)\n\t# set sentiment\n\tif analysis.sentiment.polarity > 0:\n\t\treturn 'positive'\n\telif analysis.sentiment.polarity == 0:\n\t\treturn 'neutral'\n\telse:\n\t\treturn 'negative'\n\ntext1 = 'I am a good person'\ntext2 = 'I am a bad person'\n\nsentiment1 = classify_sentiment(text1) \nsentiment2 = classify_sentiment(text2) \n\nprint(sentiment1)\nprint(sentiment2)"}
{"instruction": "Develop a Python program to send a mail notification when a certain event is triggered.", "input": "", "output": "import smtplib\n\n# Chnage this variable when the event is triggered\nmessage_sent = False\n\nif not message_sent:\n    # Replace sender_email and receiver_email with valid email\n    sender_email = \"SENDER EMAIL\"\n    receiver_email = \"RECEIVER EMAIL\"\n    message = \"The event has been triggered.\"\n    \n    server = smtplib.SMTP('smtp.gmail.com', 587)\n    server.ehlo()\n    server.starttls()\n    server.login(sender_email, \"YOUR PASSWORD\")\n    server.sendmail(sender_email, receiver_email, message)\n    message_sent = True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to send a mail notification when a certain event is triggered.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\n# Chnage this variable when the event is triggered\nmessage_sent = False\n\nif not message_sent:\n    # Replace sender_email and receiver_email with valid email\n    sender_email = \"SENDER EMAIL\"\n    receiver_email = \"RECEIVER EMAIL\"\n    message = \"The event has been triggered.\"\n    \n    server = smtplib.SMTP('smtp.gmail.com', 587)\n    server.ehlo()\n    server.starttls()\n    server.login(sender_email, \"YOUR PASSWORD\")\n    server.sendmail(sender_email, receiver_email, message)\n    message_sent = True"}
{"instruction": "Write a Python function to find the closest pair of points from a given list of points.", "input": "", "output": "def find_closest_pair(points):\n    min_distance = float('inf')\n    min_pair = []\n\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = get_euclidean_distance(points[i], points[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_pair = points[i], points[j]\n    return min_pair\n\ndef get_euclidean_distance(point1, point2):\n    diffx = point1[0] - point2[0]\n    diffy = point1[1] - point2[1]\n    return math.sqrt(diffx**2 + diffy**2)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the closest pair of points from a given list of points.\n\n### Input:\n\n\n### Output:\ndef find_closest_pair(points):\n    min_distance = float('inf')\n    min_pair = []\n\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = get_euclidean_distance(points[i], points[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_pair = points[i], points[j]\n    return min_pair\n\ndef get_euclidean_distance(point1, point2):\n    diffx = point1[0] - point2[0]\n    diffy = point1[1] - point2[1]\n    return math.sqrt(diffx**2 + diffy**2)"}
{"instruction": "Create a web scraper in Python to scrape the top 10 products from a bike parts website.", "input": "", "output": "#import libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n#specify the url and fetch the data from the server\nurl = 'https://examplewebsite.com/'\npage = requests.get(url) \n\n#parse the html content \nsoup = BeautifulSoup(page.content, 'html.parser') \n\n#get all the product listings\nlistings = soup.find_all('div', class_='listing')\n\n#iterate over each of the product listings\nfor listing in listings[:10]:\n  title = listing.find('h2').text\n  price = listing.find('span', class_='price').text\n  print('{} - {}'.format(title, price))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to scrape the top 10 products from a bike parts website.\n\n### Input:\n\n\n### Output:\n#import libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n#specify the url and fetch the data from the server\nurl = 'https://examplewebsite.com/'\npage = requests.get(url) \n\n#parse the html content \nsoup = BeautifulSoup(page.content, 'html.parser') \n\n#get all the product listings\nlistings = soup.find_all('div', class_='listing')\n\n#iterate over each of the product listings\nfor listing in listings[:10]:\n  title = listing.find('h2').text\n  price = listing.find('span', class_='price').text\n  print('{} - {}'.format(title, price))"}
{"instruction": "Write a python program to perform sentiment analysis on a dataset of customer comments.", "input": "", "output": "# Import libraries\nimport pandas as pd\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n\n# Read the customer comments into a dataframe \ndf = pd.read_csv('customer_comments.csv')\ndf.head()\n\n# Create an instance of the SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()\n\n# Loop over comments in the dataframe and compute sentiment scores\nfor comment in df[\"comment\"]:\n    sentiment=sia.polarity_scores(comment)['compound']\n    df.loc[df[\"comment\"]==comment,\"sentiment\"]=sentiment\n    \n# Print the results\nprint(df.head())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to perform sentiment analysis on a dataset of customer comments.\n\n### Input:\n\n\n### Output:\n# Import libraries\nimport pandas as pd\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n\n# Read the customer comments into a dataframe \ndf = pd.read_csv('customer_comments.csv')\ndf.head()\n\n# Create an instance of the SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()\n\n# Loop over comments in the dataframe and compute sentiment scores\nfor comment in df[\"comment\"]:\n    sentiment=sia.polarity_scores(comment)['compound']\n    df.loc[df[\"comment\"]==comment,\"sentiment\"]=sentiment\n    \n# Print the results\nprint(df.head())"}
{"instruction": "Generate a class in Python that creates a fraction object and adds two fraction objects", "input": "", "output": "\"\"\"\nGenerate a class in Python that creates a fraction object and adds two fraction objects\n\"\"\"\n\nclass Fraction:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __add__(self, other):\n        numerator = self.numerator * other.denominator + other.numerator * self.denominator\n        denominator = self.denominator * other.denominator\n        return Fraction(numerator, denominator)\n\nif __name__ == '__main__':\n    f1 = Fraction(1, 2)\n    f2 = Fraction(3, 5)\n    f3 = f1 + f2\n    print(f3.numerator, f3.denominator)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python that creates a fraction object and adds two fraction objects\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a class in Python that creates a fraction object and adds two fraction objects\n\"\"\"\n\nclass Fraction:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __add__(self, other):\n        numerator = self.numerator * other.denominator + other.numerator * self.denominator\n        denominator = self.denominator * other.denominator\n        return Fraction(numerator, denominator)\n\nif __name__ == '__main__':\n    f1 = Fraction(1, 2)\n    f2 = Fraction(3, 5)\n    f3 = f1 + f2\n    print(f3.numerator, f3.denominator)"}
{"instruction": "Design a function in Python that implements a decision tree classifier for two classes.", "input": "", "output": "def decision_tree_classifier(data):\n    # check for base cases\n    if len(data) == 0:\n        return None\n    elif len(data[0]) == 1:\n        # all columns are the same => return the most frequent label\n        return find_most_frequent_label(data)\n\n    # find the best split attribute\n    attr_idx, split_val = find_best_split_attr(data)\n\n    # create a decision tree node\n    tree = TreeNode(attr_idx, split_val)\n\n    # create subtrees based on split attribute\n    left, right = split_data(data, attr_idx, split_val)\n    tree.add_left_subtree(decision_tree_classifier(left))\n    tree.add_right_subtree(decision_tree_classifier(right))\n    \n    return tree", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that implements a decision tree classifier for two classes.\n\n### Input:\n\n\n### Output:\ndef decision_tree_classifier(data):\n    # check for base cases\n    if len(data) == 0:\n        return None\n    elif len(data[0]) == 1:\n        # all columns are the same => return the most frequent label\n        return find_most_frequent_label(data)\n\n    # find the best split attribute\n    attr_idx, split_val = find_best_split_attr(data)\n\n    # create a decision tree node\n    tree = TreeNode(attr_idx, split_val)\n\n    # create subtrees based on split attribute\n    left, right = split_data(data, attr_idx, split_val)\n    tree.add_left_subtree(decision_tree_classifier(left))\n    tree.add_right_subtree(decision_tree_classifier(right))\n    \n    return tree"}
{"instruction": "Create an optimization problem in Python to maximize a function subject to constraints.", "input": "", "output": "import numpy as np\nfrom scipy.optimize import minimize\n\n# Define objective function\ndef objective(x):\n    return x[0]*x[3]*(x[0]+x[1]+x[2])+x[2]\n\n# Define constraints\ndef constraint1(x):\n    return x[0]*x[1]*x[2]*x[3]-25.0\n\ndef constraint2(x):\n    sum_eq = 40.0\n    for i in range(4):\n        sum_eq = sum_eq - x[i]**2\n    return sum_eq\n\n# Initial guesses\nx0 = [1,5,5,1]\n\n# Bounds\nb = (1.0,5.0)\nbnds = (b, b, b, b)\n\n# Constraints\ncon1 = {'type': 'ineq', 'fun': constraint1} \ncon2 = {'type': 'eq', 'fun': constraint2}\ncons = ([con1, con2])\n\n# Solve problem\nsolution = minimize(objective, x0, method='SLSQP', bounds=bnds, constraints=cons)\n\n# Print solution\nprint(solution)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization problem in Python to maximize a function subject to constraints.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Define objective function\ndef objective(x):\n    return x[0]*x[3]*(x[0]+x[1]+x[2])+x[2]\n\n# Define constraints\ndef constraint1(x):\n    return x[0]*x[1]*x[2]*x[3]-25.0\n\ndef constraint2(x):\n    sum_eq = 40.0\n    for i in range(4):\n        sum_eq = sum_eq - x[i]**2\n    return sum_eq\n\n# Initial guesses\nx0 = [1,5,5,1]\n\n# Bounds\nb = (1.0,5.0)\nbnds = (b, b, b, b)\n\n# Constraints\ncon1 = {'type': 'ineq', 'fun': constraint1} \ncon2 = {'type': 'eq', 'fun': constraint2}\ncons = ([con1, con2])\n\n# Solve problem\nsolution = minimize(objective, x0, method='SLSQP', bounds=bnds, constraints=cons)\n\n# Print solution\nprint(solution)"}
{"instruction": "Create a function in Python to delete an element from a linked list given its position.", "input": "", "output": "def deleteNode(head, position):\n  # If linked list is empty \n  if head == None: \n    return\n\n  # Store head node  \n  temp = head \n \n  # If head needs to be removed  \n  if position == 0: \n    head = temp.next\n    temp = None\n    return head \n\n  # Find previous node of the node to be deleted  \n  for i in range(position-1): \n    temp = temp.next\n    if temp is None: \n        break\n\n  # if position is more than number of nodes  \n  if temp is None: \n    return\n\n  # Node temp.next is the node to be deleted  \n  # store pointer to the next of node to be deleted  \n  next = temp.next.next\n\n  # Unlink the node from linked list  \n  temp.next = None\n\n  temp.next = next\n\n  return head", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to delete an element from a linked list given its position.\n\n### Input:\n\n\n### Output:\ndef deleteNode(head, position):\n  # If linked list is empty \n  if head == None: \n    return\n\n  # Store head node  \n  temp = head \n \n  # If head needs to be removed  \n  if position == 0: \n    head = temp.next\n    temp = None\n    return head \n\n  # Find previous node of the node to be deleted  \n  for i in range(position-1): \n    temp = temp.next\n    if temp is None: \n        break\n\n  # if position is more than number of nodes  \n  if temp is None: \n    return\n\n  # Node temp.next is the node to be deleted  \n  # store pointer to the next of node to be deleted  \n  next = temp.next.next\n\n  # Unlink the node from linked list  \n  temp.next = None\n\n  temp.next = next\n\n  return head"}
{"instruction": "Create a HTML page to explain why a particular programming language is the best choice.", "input": "", "output": "<html>\n<head>\n  <title>Why Choose Python programming language?</title>\n  <style>\n    body { background-color: #eeeeee; }\n  </style>\n</head>\n<body>\n  <h1>Why Choose Python programming language?</h1>\n  <p>\n    Python is a highly popular programming language that is used for many tasks, from web development to data science. It is versatile, user-friendly and easy to learn. The language has an extensive library of modules for different tasks, which make it great for developing complex applications quickly. Its syntax is simple and concise and it is great for rapid prototyping. Its strong support for object oriented programming makes it a great choice for developers who want to develop robust and divided applications.\n  </p>\n</body>\n</html>", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a HTML page to explain why a particular programming language is the best choice.\n\n### Input:\n\n\n### Output:\n<html>\n<head>\n  <title>Why Choose Python programming language?</title>\n  <style>\n    body { background-color: #eeeeee; }\n  </style>\n</head>\n<body>\n  <h1>Why Choose Python programming language?</h1>\n  <p>\n    Python is a highly popular programming language that is used for many tasks, from web development to data science. It is versatile, user-friendly and easy to learn. The language has an extensive library of modules for different tasks, which make it great for developing complex applications quickly. Its syntax is simple and concise and it is great for rapid prototyping. Its strong support for object oriented programming makes it a great choice for developers who want to develop robust and divided applications.\n  </p>\n</body>\n</html>"}
{"instruction": "Create an AI model in Python to classify an email as either a business or personal one.", "input": "", "output": "import pandas as pd \nimport numpy as np \nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score \n\ndata = pd.read_json('emails.json') \nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)\n\n# Transform textual data in vectors \ntfidf = TfidfVectorizer() \nX_train_vec = tfidf.fit_transform(X_train) \nX_test_vec = tfidf.transform(X_test)\n\n# Create and train a logistic regression model \nmodel = LogisticRegression() \nmodel.fit(X_train_vec, y_train) \n\n# Test the model accuracy \npredictions = model.predict(X_test_vec) \naccuracy = accuracy_score(y_test, predictions) \nprint('Model accuracy: ', accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python to classify an email as either a business or personal one.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nimport numpy as np \nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score \n\ndata = pd.read_json('emails.json') \nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)\n\n# Transform textual data in vectors \ntfidf = TfidfVectorizer() \nX_train_vec = tfidf.fit_transform(X_train) \nX_test_vec = tfidf.transform(X_test)\n\n# Create and train a logistic regression model \nmodel = LogisticRegression() \nmodel.fit(X_train_vec, y_train) \n\n# Test the model accuracy \npredictions = model.predict(X_test_vec) \naccuracy = accuracy_score(y_test, predictions) \nprint('Model accuracy: ', accuracy)"}
{"instruction": "Create an optimization algorithm in Python for finding the maximum value of a function.", "input": "", "output": "# This function contains our objective function: \n# the function that we are trying to maximize \ndef objective_fn(x):  \n    return x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2] \n  \n# This function contains our constraints \ndef constraint_fn(x): \n    return x[0] * x[1] * x[2] * x[3] - 25  \n  \n# The constraint should be greater than or equal to 0\ncons = ({'type': 'ineq', 'fun': constraint_fn})\n\n# Bounds for x \nb = (1, 5) \nbnds = (b, b, b, b) \n\n# Initializing starting point of the solution  \nx0 = [1, 5, 5, 1]  \n  \n# maximum value at 5,4,4,2 is 5*4*4*2 = 80 \n\n# Calling scipy optimize minimize \n# to find the maximum value of \n# our objective_fn \nresult = opt.minimize(objective_fn, x0, method='SLSQP', bounds=bnds, constraints=cons)  \n  \n# Printing optimized value \nprint(result.x)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm in Python for finding the maximum value of a function.\n\n### Input:\n\n\n### Output:\n# This function contains our objective function: \n# the function that we are trying to maximize \ndef objective_fn(x):  \n    return x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2] \n  \n# This function contains our constraints \ndef constraint_fn(x): \n    return x[0] * x[1] * x[2] * x[3] - 25  \n  \n# The constraint should be greater than or equal to 0\ncons = ({'type': 'ineq', 'fun': constraint_fn})\n\n# Bounds for x \nb = (1, 5) \nbnds = (b, b, b, b) \n\n# Initializing starting point of the solution  \nx0 = [1, 5, 5, 1]  \n  \n# maximum value at 5,4,4,2 is 5*4*4*2 = 80 \n\n# Calling scipy optimize minimize \n# to find the maximum value of \n# our objective_fn \nresult = opt.minimize(objective_fn, x0, method='SLSQP', bounds=bnds, constraints=cons)  \n  \n# Printing optimized value \nprint(result.x)"}
{"instruction": "Design a Python program to find the longest sequence of consecutive integers in a list.", "input": "", "output": "def longest_sequence(arr):\n    longest_sequence = []\n    current_sequence = []\n    current_num = None\n    \n    for num in sorted(arr):\n        if current_num is None or num == current_num + 1:\n            current_sequence.append(num)\n            current_num = num\n        else:\n            if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n                longest_sequence = current_sequence\n            current_sequence = [num]\n            current_num = num\n\n    if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n        longest_sequence = current_sequence\n\n    return longest_sequence", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find the longest sequence of consecutive integers in a list.\n\n### Input:\n\n\n### Output:\ndef longest_sequence(arr):\n    longest_sequence = []\n    current_sequence = []\n    current_num = None\n    \n    for num in sorted(arr):\n        if current_num is None or num == current_num + 1:\n            current_sequence.append(num)\n            current_num = num\n        else:\n            if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n                longest_sequence = current_sequence\n            current_sequence = [num]\n            current_num = num\n\n    if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n        longest_sequence = current_sequence\n\n    return longest_sequence"}
{"instruction": "Automate a process using an AI model in Python to determine if an email is spam or not.", "input": "", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\n\n# Load data \ndata = pd.read_csv('data.csv')\n\n# Separate labels and features\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split the dataset into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy is:', round(accuracy*100, 2), '%', sep='')\n\n# Print confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nprint('Confusion matrix:')\nprint(cm)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate a process using an AI model in Python to determine if an email is spam or not.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\n\n# Load data \ndata = pd.read_csv('data.csv')\n\n# Separate labels and features\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split the dataset into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy is:', round(accuracy*100, 2), '%', sep='')\n\n# Print confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nprint('Confusion matrix:')\nprint(cm)"}
{"instruction": "Create a web scraper using Python and Selenium to scrape information from IMDB website.", "input": "", "output": "from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport pandas as pd\n\n# Initialize Webdriver\ndriver = webdriver.Firefox()\n\n# Open the IMDB website\ndriver.get('https://www.imdb.com/chart/top?ref_=ft_250')\n\n# Wait until the elements on the web page are loaded\nWebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \"chart\")))\n\n# Parse and store the information to a pandas dataframe\ntitles = driver.find_elements_by_class_name('titleColumn')\nratings = driver.find_elements_by_class_name('ratingColumn')\ndf = pd.DataFrame(columns = ['title', 'rating'])\n\nfor title, rating in zip(titles, ratings):\n    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)\n\n# Close the browser\ndriver.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python and Selenium to scrape information from IMDB website.\n\n### Input:\n\n\n### Output:\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport pandas as pd\n\n# Initialize Webdriver\ndriver = webdriver.Firefox()\n\n# Open the IMDB website\ndriver.get('https://www.imdb.com/chart/top?ref_=ft_250')\n\n# Wait until the elements on the web page are loaded\nWebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \"chart\")))\n\n# Parse and store the information to a pandas dataframe\ntitles = driver.find_elements_by_class_name('titleColumn')\nratings = driver.find_elements_by_class_name('ratingColumn')\ndf = pd.DataFrame(columns = ['title', 'rating'])\n\nfor title, rating in zip(titles, ratings):\n    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)\n\n# Close the browser\ndriver.close()"}
{"instruction": "Can you design an algorithm in Python to find the longest palindrome in a given string?", "input": "", "output": "def longest_palindrome(s):\n    n = len(s)\n    T = [[False for i in range(n)] for i in range(n)] \n    maxLength = 0\n\n    # Find palindromes of single characters \n    for i in range(n):\n      T[i][i] = True\n\n    # Find palindromes of double characters \n    for i in range(n-1):\n      if s[i] == s[i+1]:\n        T[i][i+1] = True\n        maxLength = 2\n\n    # Find palindromes of length greater than 2 \n    for k in range(3, n+1):\n      for i in range(n-k+1):\n        j = i+k-1\n        if s[i] == s[j] and T[i+1][j-1]:\n          T[i][j] = True\n          maxLength = k\n\n    #Find the start and end of the longest one \n    startIndex=0\n    endIndex=0\n    for i in range(n):\n      for j in range(n):\n        if T[i][j] and j-i+1 >= maxLength:\n          maxLength = j-i+1\n          startIndex = i\n          endIndex = j\n    \n    longestPalindrome = s[startIndex:endIndex+1]\n\n    return longestPalindrome", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design an algorithm in Python to find the longest palindrome in a given string?\n\n### Input:\n\n\n### Output:\ndef longest_palindrome(s):\n    n = len(s)\n    T = [[False for i in range(n)] for i in range(n)] \n    maxLength = 0\n\n    # Find palindromes of single characters \n    for i in range(n):\n      T[i][i] = True\n\n    # Find palindromes of double characters \n    for i in range(n-1):\n      if s[i] == s[i+1]:\n        T[i][i+1] = True\n        maxLength = 2\n\n    # Find palindromes of length greater than 2 \n    for k in range(3, n+1):\n      for i in range(n-k+1):\n        j = i+k-1\n        if s[i] == s[j] and T[i+1][j-1]:\n          T[i][j] = True\n          maxLength = k\n\n    #Find the start and end of the longest one \n    startIndex=0\n    endIndex=0\n    for i in range(n):\n      for j in range(n):\n        if T[i][j] and j-i+1 >= maxLength:\n          maxLength = j-i+1\n          startIndex = i\n          endIndex = j\n    \n    longestPalindrome = s[startIndex:endIndex+1]\n\n    return longestPalindrome"}
{"instruction": "What are the advantages and disadvantages of using an interpreted language like Python?", "input": "", "output": "Advantages of using a interpreted language like Python:\n\n- It generally runs faster than compiled languages as it just evaluates expressions as they run.\n- It is easier to debug since errors are caught during the interpretation process, rather than during compilation process.\n- It is easier to learn and requires less development time, so it is cheaper to implement.\n- It is a versatile language, supported by many libraries and frameworks, which makes it suitable for many different projects.\n\nDisadvantages of using a interpreted language like Python:\n\n- It tends to be slower than compiled languages as the code must be interpreted each time it is run.\n- Code can be difficult to optimize, resulting in less efficient programs.\n- Interpreted languages are not always suitable for resource-intensive tasks, such as video game development.\n- Interpreted languages can be more vulnerable to security issues.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat are the advantages and disadvantages of using an interpreted language like Python?\n\n### Input:\n\n\n### Output:\nAdvantages of using a interpreted language like Python:\n\n- It generally runs faster than compiled languages as it just evaluates expressions as they run.\n- It is easier to debug since errors are caught during the interpretation process, rather than during compilation process.\n- It is easier to learn and requires less development time, so it is cheaper to implement.\n- It is a versatile language, supported by many libraries and frameworks, which makes it suitable for many different projects.\n\nDisadvantages of using a interpreted language like Python:\n\n- It tends to be slower than compiled languages as the code must be interpreted each time it is run.\n- Code can be difficult to optimize, resulting in less efficient programs.\n- Interpreted languages are not always suitable for resource-intensive tasks, such as video game development.\n- Interpreted languages can be more vulnerable to security issues."}
{"instruction": "Create a Python code to inform the user the closest airport for their current location.", "input": "", "output": "import requests\nimport json\n\nurl = \"http://ipinfo.io/json\"\nparams = {\"auth\": \"<Your API Key>\"}\nresponse = requests.get(url, params=params)\n\nif response.ok:\n    data = response.json()\n    lat = data[\"loc\"].split(\",\")[0]\n    lon = data[\"loc\"].split(\",\")[1]\n\n    url = \"https://api.airvisual.com/v2/nearest_city\"\n    params = {\"lat\": lat, \"lon\": lon, \"key\": \"<Your API Key>\"}\n    response = requests.get(url, params=params)\n\nif response.ok:\n    data = response.json()\n    locationName = data[\"data\"][\"city\"]\n    nearestAirport = data[\"data\"][\"nearest_airport\"]\n    airportCode = data[\"data\"][\"nearest_airport_code\"]\n    airportDistance = data[\"data\"][\"nearest_airport_distance\"]\n    types = data[\"data\"][\"nearest_airport_types\"]\n    print(\"Your closest airport is \"+ airportCode + \" (\" + locationName +\") which is \" + airportDistance + \" away from your location.\")\n    print(\"Airport Types: \" + \", \".join(types))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to inform the user the closest airport for their current location.\n\n### Input:\n\n\n### Output:\nimport requests\nimport json\n\nurl = \"http://ipinfo.io/json\"\nparams = {\"auth\": \"<Your API Key>\"}\nresponse = requests.get(url, params=params)\n\nif response.ok:\n    data = response.json()\n    lat = data[\"loc\"].split(\",\")[0]\n    lon = data[\"loc\"].split(\",\")[1]\n\n    url = \"https://api.airvisual.com/v2/nearest_city\"\n    params = {\"lat\": lat, \"lon\": lon, \"key\": \"<Your API Key>\"}\n    response = requests.get(url, params=params)\n\nif response.ok:\n    data = response.json()\n    locationName = data[\"data\"][\"city\"]\n    nearestAirport = data[\"data\"][\"nearest_airport\"]\n    airportCode = data[\"data\"][\"nearest_airport_code\"]\n    airportDistance = data[\"data\"][\"nearest_airport_distance\"]\n    types = data[\"data\"][\"nearest_airport_types\"]\n    print(\"Your closest airport is \"+ airportCode + \" (\" + locationName +\") which is \" + airportDistance + \" away from your location.\")\n    print(\"Airport Types: \" + \", \".join(types))"}
{"instruction": "Generate a Python script to send an email from a given address to a specified recipient.", "input": "", "output": "import smtplib\n\nsender_email = \"<sender_email_address>\"\nreceiver_email = \"<receiver_email_address>\"\npassword = \"<sender_password>\"\nmessage = \"Hi, This email is sent from Python!\"\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(sender_email, password)\nprint(\"Login Success!\")\n\nserver.sendmail(sender_email, receiver_email, message)\nprint(\"Email has been sent successfully to \", receiver_email)\n\nserver.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to send an email from a given address to a specified recipient.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\nsender_email = \"<sender_email_address>\"\nreceiver_email = \"<receiver_email_address>\"\npassword = \"<sender_password>\"\nmessage = \"Hi, This email is sent from Python!\"\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(sender_email, password)\nprint(\"Login Success!\")\n\nserver.sendmail(sender_email, receiver_email, message)\nprint(\"Email has been sent successfully to \", receiver_email)\n\nserver.quit()"}
{"instruction": "Develop a design algorithm in Python that randomly generates a unique snowflake pattern.", "input": "", "output": "import random\n\ndef generate_snowflake():\n  # Generate random numbers between 0 and 1\n  a = random.random()\n  b = random.random()\n  c = random.random()\n\n  # Generate the snowflake\n  snowflake = [] \n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.cos(a * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(b * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(c * math.pi * 2))\n\n  return snowflake", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a design algorithm in Python that randomly generates a unique snowflake pattern.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_snowflake():\n  # Generate random numbers between 0 and 1\n  a = random.random()\n  b = random.random()\n  c = random.random()\n\n  # Generate the snowflake\n  snowflake = [] \n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.cos(a * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(b * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(c * math.pi * 2))\n\n  return snowflake"}
{"instruction": "Can you build an application with Python and Flask to handle user and card registration?", "input": "", "output": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        user = request.form['username']\n        card = request.form['card']\n        # handle user and card registration here\n        # ...\n        return render_template('register.html', success=True)\n    else:\n        return render_template('register.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you build an application with Python and Flask to handle user and card registration?\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        user = request.form['username']\n        card = request.form['card']\n        # handle user and card registration here\n        # ...\n        return render_template('register.html', success=True)\n    else:\n        return render_template('register.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction": "Write a Python program to identify the longest common sub-sequence of two given strings.", "input": "", "output": "def longest_common_subsequence(s1, s2):\n m = len(s1)\n n = len(s2)\n \n # Create a table to store results of subproblems\n dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n \n # Fill d[][] in bottom up manner\n for i in range(m + 1):\n  for j in range(n + 1):\n   if i == 0 or j == 0:\n    dp[i][j] = 0\n   elif s1[i - 1] == s2[j - 1]:\n    dp[i][j] = dp[i - 1][j - 1] + 1\n   else:\n    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n \n # LCS will be last entry in the lookup table\n return dp[m][n]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify the longest common sub-sequence of two given strings.\n\n### Input:\n\n\n### Output:\ndef longest_common_subsequence(s1, s2):\n m = len(s1)\n n = len(s2)\n \n # Create a table to store results of subproblems\n dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n \n # Fill d[][] in bottom up manner\n for i in range(m + 1):\n  for j in range(n + 1):\n   if i == 0 or j == 0:\n    dp[i][j] = 0\n   elif s1[i - 1] == s2[j - 1]:\n    dp[i][j] = dp[i - 1][j - 1] + 1\n   else:\n    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n \n # LCS will be last entry in the lookup table\n return dp[m][n]"}
{"instruction": "Create a Python module to read a specific XML schema and return a list of model objects.", "input": "", "output": "import xml.etree.ElementTree as ET\n\nclass ModelObject:\n    def __init__(self, xml_node):\n        \"\"\"Constructor for ModelObject\n        xml_node should be an ElementTree node of the xml data\n        \"\"\"\n        self.name = xml_node.attrib['name']\n        self.value = xml_node.text\n\ndef read_xml(xml):\n    \"\"\"Reads a given xml and returns a list of ModelObjects\n    \"\"\"\n    root = ET.fromstring(xml)\n    objects = []\n    for node in root.iter('model'):\n        objects.append(ModelObject(node))\n    return objects", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module to read a specific XML schema and return a list of model objects.\n\n### Input:\n\n\n### Output:\nimport xml.etree.ElementTree as ET\n\nclass ModelObject:\n    def __init__(self, xml_node):\n        \"\"\"Constructor for ModelObject\n        xml_node should be an ElementTree node of the xml data\n        \"\"\"\n        self.name = xml_node.attrib['name']\n        self.value = xml_node.text\n\ndef read_xml(xml):\n    \"\"\"Reads a given xml and returns a list of ModelObjects\n    \"\"\"\n    root = ET.fromstring(xml)\n    objects = []\n    for node in root.iter('model'):\n        objects.append(ModelObject(node))\n    return objects"}
{"instruction": "Generate a machine learning model in Python to predict prices from the provided dataset.", "input": "", "output": "# Load data\nimport pandas as pd\ndf = pd.read_csv('data.csv')\n\n# Extract features and target\nX = df.drop('price', axis=1).values\ny = df['price'].values\n\n# Split into train and test \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train machine learning model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = regressor.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python to predict prices from the provided dataset.\n\n### Input:\n\n\n### Output:\n# Load data\nimport pandas as pd\ndf = pd.read_csv('data.csv')\n\n# Extract features and target\nX = df.drop('price', axis=1).values\ny = df['price'].values\n\n# Split into train and test \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train machine learning model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = regressor.predict(X_test)"}
{"instruction": "Write a Python script to optimize an algorithm for finding a specific element in a list.", "input": "", "output": "def find_element(input_list,element):\n  for index, val in enumerate(input_list):\n    if val == element:\n      return index\n \ndef optimized_find_element(input_list,element):\n  low,high=0,len(input_list)-1\n \n  while low <= high:\n    mid = (low + high) // 2\n    if input_list[mid] == element:\n      return mid\n    elif element > input_list[mid]:\n      low = mid + 1\n    else:\n      high = mid - 1\n \n  return -1\n \ninput_list = [1,2,3,4,5,6,7,8,9]\nelement = 7\nindex = find_element(input_list,element)\nprint(index)\nindex = optimized_find_element(input_list,element)\nprint(index)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to optimize an algorithm for finding a specific element in a list.\n\n### Input:\n\n\n### Output:\ndef find_element(input_list,element):\n  for index, val in enumerate(input_list):\n    if val == element:\n      return index\n \ndef optimized_find_element(input_list,element):\n  low,high=0,len(input_list)-1\n \n  while low <= high:\n    mid = (low + high) // 2\n    if input_list[mid] == element:\n      return mid\n    elif element > input_list[mid]:\n      low = mid + 1\n    else:\n      high = mid - 1\n \n  return -1\n \ninput_list = [1,2,3,4,5,6,7,8,9]\nelement = 7\nindex = find_element(input_list,element)\nprint(index)\nindex = optimized_find_element(input_list,element)\nprint(index)"}
{"instruction": "Create a program that can generate a random Swiss Internex Bank Account Number in Python", "input": "", "output": "import random\n\ndef generate_account_number():\n    # Generate a random Account number\n    account_number = '00' \n    nums = [str(random.randint(0, 9)) for _ in range(7)]\n    account_number += \"\".join(nums)\n    checksum = get_checksum(account_number)\n    account_number += str(checksum)\n    return account_number\n\ndef get_checksum(account_number):\n    n = 0\n    for i, num in enumerate(account_number):\n        n += int(num) * (i % 6 + 2)\n\n    checksum = 11 - (n % 11)\n    if checksum == 10:\n        return 0\n    elif checksum == 11:\n        return 5\n    else:\n        return checksum", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that can generate a random Swiss Internex Bank Account Number in Python\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_account_number():\n    # Generate a random Account number\n    account_number = '00' \n    nums = [str(random.randint(0, 9)) for _ in range(7)]\n    account_number += \"\".join(nums)\n    checksum = get_checksum(account_number)\n    account_number += str(checksum)\n    return account_number\n\ndef get_checksum(account_number):\n    n = 0\n    for i, num in enumerate(account_number):\n        n += int(num) * (i % 6 + 2)\n\n    checksum = 11 - (n % 11)\n    if checksum == 10:\n        return 0\n    elif checksum == 11:\n        return 5\n    else:\n        return checksum"}
{"instruction": "Generate a Python function for finding the maximum consecutive sum of a list of numbers.", "input": "", "output": "def max_consecutive_sum(numbers):\n    \"\"\"\n    Finds the maximum consecutive sum of a list of numbers. \n    \n    Args:\n        numbers (list of ints): The list of numbers.\n    \n    Return:\n        int: The maximum consecutive sum.\n    \"\"\"\n\n    # Set the initial maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the numbers and find the maximum sum\n    running_sum = 0\n    for number in numbers:\n        running_sum += number\n        if running_sum > max_sum:\n            max_sum = running_sum\n        if running_sum < 0:\n            running_sum = 0\n    \n    return max_sum", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function for finding the maximum consecutive sum of a list of numbers.\n\n### Input:\n\n\n### Output:\ndef max_consecutive_sum(numbers):\n    \"\"\"\n    Finds the maximum consecutive sum of a list of numbers. \n    \n    Args:\n        numbers (list of ints): The list of numbers.\n    \n    Return:\n        int: The maximum consecutive sum.\n    \"\"\"\n\n    # Set the initial maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the numbers and find the maximum sum\n    running_sum = 0\n    for number in numbers:\n        running_sum += number\n        if running_sum > max_sum:\n            max_sum = running_sum\n        if running_sum < 0:\n            running_sum = 0\n    \n    return max_sum"}
{"instruction": "Create a function in Python that sorts a list of integers in O(nlog(n)) time complexity.", "input": "", "output": "def sortList(arr):\n    if len(arr) == 0:\n        return []\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = sortList(left)\n    right = sortList(right)\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n\n    while leftIndex < len(left) and rightIndex < len(right):\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n    result += left[leftIndex:]\n    result += right[rightIndex:]\n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that sorts a list of integers in O(nlog(n)) time complexity.\n\n### Input:\n\n\n### Output:\ndef sortList(arr):\n    if len(arr) == 0:\n        return []\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = sortList(left)\n    right = sortList(right)\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n\n    while leftIndex < len(left) and rightIndex < len(right):\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n    result += left[leftIndex:]\n    result += right[rightIndex:]\n    return result"}
{"instruction": "Generate a Python program to find the closest pair of points in a two-dimensional plane.", "input": "", "output": "import math\n\n# List of points\npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\n\n# Initialize variables \nmin_distance = float('inf')\nclosest_pair = ()\n\n# Loop through points\nfor i in range(len(points)):\n    for j in range(i+1, len(points)):\n        # calculate the distance\n        distance = math.sqrt((points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2)\n\n        # check if the distance is less than the minimum distance\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = (points[i], points[j])\n\n# Print the closest pair\nprint(\"The closest pair of points is:\", closest_pair)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find the closest pair of points in a two-dimensional plane.\n\n### Input:\n\n\n### Output:\nimport math\n\n# List of points\npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\n\n# Initialize variables \nmin_distance = float('inf')\nclosest_pair = ()\n\n# Loop through points\nfor i in range(len(points)):\n    for j in range(i+1, len(points)):\n        # calculate the distance\n        distance = math.sqrt((points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2)\n\n        # check if the distance is less than the minimum distance\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = (points[i], points[j])\n\n# Print the closest pair\nprint(\"The closest pair of points is:\", closest_pair)"}
{"instruction": "Create a k-nearest-neighbour algorithm in Python to classify data points in two classes.", "input": "", "output": "import numpy as np\nimport pandas as pd\n\ndef knn(features, target, neighbors):\n    target = np.array(target)\n    num_samples = target.shape[0]\n\n    # Calculate Euclidean distances from each sample point\n    distances = np.sqrt(((features - features[:,np.newaxis])**2).sum(axis=2))\n\n    # Get indices of the k nearest neighbors\n    indices = np.argsort(distances, axis=1)[:, :neighbors]\n\n    # Count frequencies of each class among k nearest neighbors\n    nbors_classes = target[indices]\n    nbors_freq = np.apply_along_axis(lambda x: np.bincount(x, minlength=2), 1, nbors_classes)\n\n    # Make predictions\n    pred = np.argmax(nbors_freq, axis=1)\n    return pred", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a k-nearest-neighbour algorithm in Python to classify data points in two classes.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\ndef knn(features, target, neighbors):\n    target = np.array(target)\n    num_samples = target.shape[0]\n\n    # Calculate Euclidean distances from each sample point\n    distances = np.sqrt(((features - features[:,np.newaxis])**2).sum(axis=2))\n\n    # Get indices of the k nearest neighbors\n    indices = np.argsort(distances, axis=1)[:, :neighbors]\n\n    # Count frequencies of each class among k nearest neighbors\n    nbors_classes = target[indices]\n    nbors_freq = np.apply_along_axis(lambda x: np.bincount(x, minlength=2), 1, nbors_classes)\n\n    # Make predictions\n    pred = np.argmax(nbors_freq, axis=1)\n    return pred"}
{"instruction": "Develop a Python program to replace all the occurences of a substring in a given string.", "input": "", "output": "def replace_substring(string, substring, replacement):\n    # Get all the indices of the substring\n    indices = []\n    position = 0\n    while position < len(string):\n        index = string.find(substring, position)\n        # If substring not found, break\n        if index == -1:\n            break\n        # Append the index\n        indices.append(index)\n        position = index + 1\n    \n    # Construct the replaced string based on the indices\n    replaced_string = ''\n    start = 0\n    for i in indices:\n        replaced_string += string[start:i] + replacement\n        start = i + len(substring)\n    replaced_string += string[start:]\n    \n    return replaced_string", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to replace all the occurences of a substring in a given string.\n\n### Input:\n\n\n### Output:\ndef replace_substring(string, substring, replacement):\n    # Get all the indices of the substring\n    indices = []\n    position = 0\n    while position < len(string):\n        index = string.find(substring, position)\n        # If substring not found, break\n        if index == -1:\n            break\n        # Append the index\n        indices.append(index)\n        position = index + 1\n    \n    # Construct the replaced string based on the indices\n    replaced_string = ''\n    start = 0\n    for i in indices:\n        replaced_string += string[start:i] + replacement\n        start = i + len(substring)\n    replaced_string += string[start:]\n    \n    return replaced_string"}
{"instruction": "Develop a system in Python for generating a monthly report on the most popular webpages.", "input": "", "output": "import requests\nfrom collections import Counter\n\ndef generate_report(url):\n    # make request to the given URL\n    response = requests.get(url)\n    if response.status_code == 200:\n        # parse the data\n        data = response.json()\n        # count the occurrences of each URL\n        counter = Counter()\n        for entry in data:\n            counter[entry['url']] += 1\n        # get the most popular websites\n        most_popular = counter.most_common(10)\n        # generate the report\n        report = \"MONTHLY REPORT\\n\"\n        for url, count in most_popular:\n            report += \"{}: {} views\\n\".format(url, count)\n        print(report)\n\ngenerate_report(\"url\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a system in Python for generating a monthly report on the most popular webpages.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom collections import Counter\n\ndef generate_report(url):\n    # make request to the given URL\n    response = requests.get(url)\n    if response.status_code == 200:\n        # parse the data\n        data = response.json()\n        # count the occurrences of each URL\n        counter = Counter()\n        for entry in data:\n            counter[entry['url']] += 1\n        # get the most popular websites\n        most_popular = counter.most_common(10)\n        # generate the report\n        report = \"MONTHLY REPORT\\n\"\n        for url, count in most_popular:\n            report += \"{}: {} views\\n\".format(url, count)\n        print(report)\n\ngenerate_report(\"url\")"}
{"instruction": "Create a python program to find the least common ancestor of two nodes in a binary tree.", "input": "", "output": "class BinaryTree:\n    def __init__(self, root):\n        self.root = root\n\n\n    def leastCommonAncestor(self, node1, node2):\n        def recurseTree(node):\n            if not node:\n                return False\n\n            left = recurseTree(node.left)\n            right = recurseTree(node.right)\n\n            mid = node == node1 or node == node2\n\n            # If any two of the three flags left, right or mid become True.\n            if mid + left +right >= 2:\n                self.ancestor = node\n\n            # Return True if either left or right or mid becomes True.\n            return mid or left or right\n\n        recurseTree(self.root)\n        return self.ancestor", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find the least common ancestor of two nodes in a binary tree.\n\n### Input:\n\n\n### Output:\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = root\n\n\n    def leastCommonAncestor(self, node1, node2):\n        def recurseTree(node):\n            if not node:\n                return False\n\n            left = recurseTree(node.left)\n            right = recurseTree(node.right)\n\n            mid = node == node1 or node == node2\n\n            # If any two of the three flags left, right or mid become True.\n            if mid + left +right >= 2:\n                self.ancestor = node\n\n            # Return True if either left or right or mid becomes True.\n            return mid or left or right\n\n        recurseTree(self.root)\n        return self.ancestor"}
{"instruction": "Create a web service in Python that can respond to a handwritten number recognition API.", "input": "", "output": "# Import libraries\nimport flask\nfrom flask import request, jsonify\nimport tensorflow as tf\n\n# Load the model\nmodel = tf.keras.models.load_model('handwritten_recognition_model.h5')\n\n# Create the API \napp = flask.Flask(__name__)\n\n@app.route('/api', methods=['POST'])\ndef predict():\n\n    # Get the data from the POST request\n    data = request.get_json(force=True)\n\n    # Make prediction \n    prediction = model.predict(data)\n\n    # Return the result mapped to the labels \n    labels = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', \n    5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    output = labels[np.argmax(prediction)]\n\n    # Return the result in json format \n    return jsonify(output)\n\nif __name__ == '__main__':\n    app.run(debug=True)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Python that can respond to a handwritten number recognition API.\n\n### Input:\n\n\n### Output:\n# Import libraries\nimport flask\nfrom flask import request, jsonify\nimport tensorflow as tf\n\n# Load the model\nmodel = tf.keras.models.load_model('handwritten_recognition_model.h5')\n\n# Create the API \napp = flask.Flask(__name__)\n\n@app.route('/api', methods=['POST'])\ndef predict():\n\n    # Get the data from the POST request\n    data = request.get_json(force=True)\n\n    # Make prediction \n    prediction = model.predict(data)\n\n    # Return the result mapped to the labels \n    labels = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', \n    5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    output = labels[np.argmax(prediction)]\n\n    # Return the result in json format \n    return jsonify(output)\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction": "Build a model in Python to classify if a given input is a positive or negative sentiment", "input": "", "output": "import numpy as np \nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score \n\n# load and prepare the data\ndata = pd.read_csv(\"data.csv\")\n# split into training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['sentiment'], test_size=0.3, random_state=42)\n\n# transform text into numbers\ntfidf = TfidfVectorizer(max_features=1000, stop_words='english')\nX_train_tfidf = tfidf.fit_transform(X_train) \nX_test_tfidf = tfidf.transform(X_test)\n\n# create and train the model \nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# evaluate the model \nscore = accuracy_score(y_test, y_pred)\nprint(score)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a model in Python to classify if a given input is a positive or negative sentiment\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score \n\n# load and prepare the data\ndata = pd.read_csv(\"data.csv\")\n# split into training and test datasets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['sentiment'], test_size=0.3, random_state=42)\n\n# transform text into numbers\ntfidf = TfidfVectorizer(max_features=1000, stop_words='english')\nX_train_tfidf = tfidf.fit_transform(X_train) \nX_test_tfidf = tfidf.transform(X_test)\n\n# create and train the model \nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# evaluate the model \nscore = accuracy_score(y_test, y_pred)\nprint(score)"}
{"instruction": "Construct a python program that can predict the outcome of a game of Rock Paper Scissors", "input": "", "output": "import random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program that can predict the outcome of a game of Rock Paper Scissors\n\n### Input:\n\n\n### Output:\nimport random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors()"}
{"instruction": "Construct a maximum priority queue in Python given the list of numbers [25,2,105,62,12].", "input": "", "output": "class MaxPQ:\n    def __init__(self, arr = []):\n        self.heap = [0]\n        for item in arr:\n            self.add(item)\n    \n    def add(self, key):\n        self.heap.append(key)\n        self._swim(len(self.heap)-1)\n    \n    def delMax(self):\n        root = self.heap[1]\n        self.heap[1] = self.heap[-1]\n        self.heap.pop()\n        self._sink(1)\n        return root\n    \n    def _swim(self, k):\n        while k > 1 and self.heap[k] > self.heap[k//2]:\n            temp = self.heap[k]\n            self.heap[k] = self.heap[k//2]\n            self.heap[k//2] = temp\n            k = k//2\n    \n    def _sink(self, k):\n        while 2*k <= len(self.heap)-1:\n            j = 2*k\n            if j < len(self.heap)-1 and self.heap[j] < self.heap[j+1]:\n                j += 1\n            if self.heap[j] > self.heap[k]:\n                temp = self.heap[j]\n                self.heap[j] = self.heap[k]\n                self.heap[k] = temp\n                k = j\n            else:\n                break\n\npq = MaxPQ([25,2,105,62,12])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a maximum priority queue in Python given the list of numbers [25,2,105,62,12].\n\n### Input:\n\n\n### Output:\nclass MaxPQ:\n    def __init__(self, arr = []):\n        self.heap = [0]\n        for item in arr:\n            self.add(item)\n    \n    def add(self, key):\n        self.heap.append(key)\n        self._swim(len(self.heap)-1)\n    \n    def delMax(self):\n        root = self.heap[1]\n        self.heap[1] = self.heap[-1]\n        self.heap.pop()\n        self._sink(1)\n        return root\n    \n    def _swim(self, k):\n        while k > 1 and self.heap[k] > self.heap[k//2]:\n            temp = self.heap[k]\n            self.heap[k] = self.heap[k//2]\n            self.heap[k//2] = temp\n            k = k//2\n    \n    def _sink(self, k):\n        while 2*k <= len(self.heap)-1:\n            j = 2*k\n            if j < len(self.heap)-1 and self.heap[j] < self.heap[j+1]:\n                j += 1\n            if self.heap[j] > self.heap[k]:\n                temp = self.heap[j]\n                self.heap[j] = self.heap[k]\n                self.heap[k] = temp\n                k = j\n            else:\n                break\n\npq = MaxPQ([25,2,105,62,12])"}
{"instruction": "Write a Python script to print a log of the most visited websites over the last 30 days.", "input": "", "output": "from datetime import timedelta, date\nimport requests\n\ndef get_pageview_data(date, page):\n  api_key = '<YOUR_API_KEY>'\n  base_url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/{page}/daily/{date}/{date}'\n \n  response = requests.get(base_url.format(page=page, date=date), headers={\n      'User-Agent': 'My Personal Analytics App',\n      'Accept': 'application/json',\n      'X-WMF-User-Agent': api_key\n      })\n  \n  response.raise_for_status()\n  return response.json()\n\n# Get the date from 30 days ago\ndate_before_30_days = date.today() - timedelta(days=30)\n\nmost_visited_sites = {}\n\nfor d in range(30):\n  date = date_before_30_days + timedelta(days=d)\n  date_string = date.strftime('%Y%m%d')\n  \n  # Get page view data for the current date\n  pageview_data = get_pageview_data(date_string, 'Main_Page')\n  \n  # Store page view data in a dictionary\n  most_visited_sites[date_string] = pageview_data[\"items\"][0][\"views\"]\n\n# Print log\nprint('Date\\t\\tViews')\nfor date, views in most_visited_sites.items():\n  print('{}\\t\\t{}'.format(date, views))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print a log of the most visited websites over the last 30 days.\n\n### Input:\n\n\n### Output:\nfrom datetime import timedelta, date\nimport requests\n\ndef get_pageview_data(date, page):\n  api_key = '<YOUR_API_KEY>'\n  base_url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/{page}/daily/{date}/{date}'\n \n  response = requests.get(base_url.format(page=page, date=date), headers={\n      'User-Agent': 'My Personal Analytics App',\n      'Accept': 'application/json',\n      'X-WMF-User-Agent': api_key\n      })\n  \n  response.raise_for_status()\n  return response.json()\n\n# Get the date from 30 days ago\ndate_before_30_days = date.today() - timedelta(days=30)\n\nmost_visited_sites = {}\n\nfor d in range(30):\n  date = date_before_30_days + timedelta(days=d)\n  date_string = date.strftime('%Y%m%d')\n  \n  # Get page view data for the current date\n  pageview_data = get_pageview_data(date_string, 'Main_Page')\n  \n  # Store page view data in a dictionary\n  most_visited_sites[date_string] = pageview_data[\"items\"][0][\"views\"]\n\n# Print log\nprint('Date\\t\\tViews')\nfor date, views in most_visited_sites.items():\n  print('{}\\t\\t{}'.format(date, views))"}
{"instruction": "Develop a user interface in python tkinter to add, modify, and delete items from a list.", "input": "", "output": "# imports \nimport tkinter as tk\n\n# window config\nwin = tk.Tk()\nwin.title(\"list operations\")\n\n# list variable\ndata = []\n\n# functions\ndef add_item():\n    data.append(txt_input.get())\n    refresh_list()\n    \ndef delete_item():\n    data.remove(lst_data.get(tk.ACTIVE))\n    refresh_list()\n\ndef modify_item():\n    data[lst_data.curselection()[0]] = txt_input.get()\n    refresh_list()\n        \ndef refresh_list():\n    lst_data.delete(0, tk.END)\n    for item in data:\n        lst_data.insert(tk.END, item)\n\n# frame\nfrm_list = tk.Frame(win)\nlbl_input = tk.Label(frm_list, text=\"Input\")\ntxt_input = tk.Entry(frm_list, width=15)\n\nlbl_input.grid(row=0, column=0)\ntxt_input.grid(row=0, column=1)\n\n# listbox config\nlst_data = tk.Listbox(frm_list, height=5)\nlst_data.grid(row=1, column=0, columnspan=2)\n\n# button config\nbtn_add = tk.Button(frm_list, text=\"add\", command=add_item)\nbtn_delete = tk.Button(frm_list, text=\"delete\", command=delete_item)\nbtn_modify = tk.Button(frm_list, text=\"modify\", command=modify_item)\nbtn_add.grid(row=2, column=0)\nbtn_delete.grid(row=2, column=1)\nbtn_modify.grid(row=2, column=2)\n\n# frame grid\nfrm_list.grid(row=0, column=0)\n\nwin.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a user interface in python tkinter to add, modify, and delete items from a list.\n\n### Input:\n\n\n### Output:\n# imports \nimport tkinter as tk\n\n# window config\nwin = tk.Tk()\nwin.title(\"list operations\")\n\n# list variable\ndata = []\n\n# functions\ndef add_item():\n    data.append(txt_input.get())\n    refresh_list()\n    \ndef delete_item():\n    data.remove(lst_data.get(tk.ACTIVE))\n    refresh_list()\n\ndef modify_item():\n    data[lst_data.curselection()[0]] = txt_input.get()\n    refresh_list()\n        \ndef refresh_list():\n    lst_data.delete(0, tk.END)\n    for item in data:\n        lst_data.insert(tk.END, item)\n\n# frame\nfrm_list = tk.Frame(win)\nlbl_input = tk.Label(frm_list, text=\"Input\")\ntxt_input = tk.Entry(frm_list, width=15)\n\nlbl_input.grid(row=0, column=0)\ntxt_input.grid(row=0, column=1)\n\n# listbox config\nlst_data = tk.Listbox(frm_list, height=5)\nlst_data.grid(row=1, column=0, columnspan=2)\n\n# button config\nbtn_add = tk.Button(frm_list, text=\"add\", command=add_item)\nbtn_delete = tk.Button(frm_list, text=\"delete\", command=delete_item)\nbtn_modify = tk.Button(frm_list, text=\"modify\", command=modify_item)\nbtn_add.grid(row=2, column=0)\nbtn_delete.grid(row=2, column=1)\nbtn_modify.grid(row=2, column=2)\n\n# frame grid\nfrm_list.grid(row=0, column=0)\n\nwin.mainloop()"}
{"instruction": "Create a Python plugin that utilizes a machine learning model to improve search results.", "input": "", "output": "import json\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nclass SearchPlugin:\n    def __init__(self, saved_model):\n        \"\"\"\n        Initializes search plugin by loading the saved machine learning model.\n\n        Parameters\n        ----------\n        saved_model: str\n            String path of the saved machine learning model.\n        \"\"\"\n        self.model = json.loads(open(saved_model, 'r').read())\n\n    def search(self, query):\n        \"\"\"\n        Utilizes the saved machine learning model to improve user query search results.\n\n        Parameters\n        ----------\n        query: str\n            String representing user query.\n\n        Returns\n        -------\n        results: list\n            List of most relevant search results.\n        \"\"\"\n        # create vector representation of query\n        query_vector = TfidfVectorizer(vocabulary=self.model).transform([query]).toarray()\n        \n        # calculate cosine similarity between query and previously indexed search results\n        sims = cosine_similarity(query_vector, self.model['vector'])\n        \n        # sort results based on cosine similarity\n        sims_sorted_indices = np.argsort(-sims)\n        \n        # return most relevant search results\n        return self.model['result'][sims_sorted_indices]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python plugin that utilizes a machine learning model to improve search results.\n\n### Input:\n\n\n### Output:\nimport json\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nclass SearchPlugin:\n    def __init__(self, saved_model):\n        \"\"\"\n        Initializes search plugin by loading the saved machine learning model.\n\n        Parameters\n        ----------\n        saved_model: str\n            String path of the saved machine learning model.\n        \"\"\"\n        self.model = json.loads(open(saved_model, 'r').read())\n\n    def search(self, query):\n        \"\"\"\n        Utilizes the saved machine learning model to improve user query search results.\n\n        Parameters\n        ----------\n        query: str\n            String representing user query.\n\n        Returns\n        -------\n        results: list\n            List of most relevant search results.\n        \"\"\"\n        # create vector representation of query\n        query_vector = TfidfVectorizer(vocabulary=self.model).transform([query]).toarray()\n        \n        # calculate cosine similarity between query and previously indexed search results\n        sims = cosine_similarity(query_vector, self.model['vector'])\n        \n        # sort results based on cosine similarity\n        sims_sorted_indices = np.argsort(-sims)\n        \n        # return most relevant search results\n        return self.model['result'][sims_sorted_indices]"}
{"instruction": "Design a class in Python that stores a 2x2 matrix and has a method to return its inverse.", "input": "", "output": "class Matrix:\n    def __init__(self, matrix):\n        self.matrix = matrix\n    \n    def get_inverse(self):\n        inverse = [[0,0],[0,0]]\n        a = self.matrix[0][0]\n        b = self.matrix[0][1]\n        c = self.matrix[1][0]\n        d = self.matrix[1][1]\n    \n        inverse[0][0] = d/(a*d - b*c)\n        inverse[0][1] = -1*b/(a*d - b*c)\n        inverse[1][0] = -1*c/(a*d - b*c)\n        inverse[1][1] = -(a/(a*d - b*c))\n    \n        return inverse", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that stores a 2x2 matrix and has a method to return its inverse.\n\n### Input:\n\n\n### Output:\nclass Matrix:\n    def __init__(self, matrix):\n        self.matrix = matrix\n    \n    def get_inverse(self):\n        inverse = [[0,0],[0,0]]\n        a = self.matrix[0][0]\n        b = self.matrix[0][1]\n        c = self.matrix[1][0]\n        d = self.matrix[1][1]\n    \n        inverse[0][0] = d/(a*d - b*c)\n        inverse[0][1] = -1*b/(a*d - b*c)\n        inverse[1][0] = -1*c/(a*d - b*c)\n        inverse[1][1] = -(a/(a*d - b*c))\n    \n        return inverse"}
{"instruction": "Create a Python script that crawls a given URL and prints out all of the links within it.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_url_links(url):\n    # query the website and return the html to the variable\n    page = requests.get(url)\n    \n    # parse the html using beautiful soup and store in variable `soup`\n    soup = BeautifulSoup(page.content, 'html.parser')\n    \n    # Take out the <div> of name and get its value\n    links = soup.find_all('a')\n    for link in links:\n        print(link.get('href'))\n\nget_url_links('https://www.example.com/')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that crawls a given URL and prints out all of the links within it.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_url_links(url):\n    # query the website and return the html to the variable\n    page = requests.get(url)\n    \n    # parse the html using beautiful soup and store in variable `soup`\n    soup = BeautifulSoup(page.content, 'html.parser')\n    \n    # Take out the <div> of name and get its value\n    links = soup.find_all('a')\n    for link in links:\n        print(link.get('href'))\n\nget_url_links('https://www.example.com/')"}
{"instruction": "Create a Python algorithm that classifies the Iris flowers dataset into three categories.", "input": "", "output": "from sklearn.datasets import load_iris\nfrom sklearn import tree\nimport pandas as pd\n\n# Import dataset\ndata = load_iris()\n\n# Split dataset into features and labels\nX = data.data\ny = data.target\n\n# Train decision tree model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Make predictions\nprediction = clf.predict(X)\n\n# Print accuracy and confusion matrix\nprint(f'Accuracy: {clf.score(X, y)}')\npd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm that classifies the Iris flowers dataset into three categories.\n\n### Input:\n\n\n### Output:\nfrom sklearn.datasets import load_iris\nfrom sklearn import tree\nimport pandas as pd\n\n# Import dataset\ndata = load_iris()\n\n# Split dataset into features and labels\nX = data.data\ny = data.target\n\n# Train decision tree model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Make predictions\nprediction = clf.predict(X)\n\n# Print accuracy and confusion matrix\nprint(f'Accuracy: {clf.score(X, y)}')\npd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])"}
{"instruction": "Design and implement a Python class that stores words and their meanings as a dictionary.", "input": "", "output": "class Dictionary (object):\n    def __init__(self):\n        self.data = {} #initialize empty dictionary\n\n    def add(self, word, definition):\n        self.data[word] = definition #add a new word, definition pair\n\n    def remove(self, word):\n        if word in self.data:\n            del self.data[word] #removes a word, definition pair\n\n    def print_all(self):\n        for word in self.data.keys():\n            print(word + ':', self.data[word]) #prints all words, definitions stored", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a Python class that stores words and their meanings as a dictionary.\n\n### Input:\n\n\n### Output:\nclass Dictionary (object):\n    def __init__(self):\n        self.data = {} #initialize empty dictionary\n\n    def add(self, word, definition):\n        self.data[word] = definition #add a new word, definition pair\n\n    def remove(self, word):\n        if word in self.data:\n            del self.data[word] #removes a word, definition pair\n\n    def print_all(self):\n        for word in self.data.keys():\n            print(word + ':', self.data[word]) #prints all words, definitions stored"}
{"instruction": "Generate a python program that takes two strings and outputs the longest common substring", "input": "", "output": "def longestCommonSubstring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest: \n                    longest = m[x][y] \n                    x_longest = x \n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes two strings and outputs the longest common substring\n\n### Input:\n\n\n### Output:\ndef longestCommonSubstring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest: \n                    longest = m[x][y] \n                    x_longest = x \n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]"}
{"instruction": "Implement a linear regression model in Python to predict the target value given features.", "input": "", "output": "# import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load the dataset\ndf = pd.read_csv('data.csv')\n\n# separate the data into features (X) and target (y)\nX = df.drop('target', axis=1).values\ny = df['target'].values\n\n# split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)\n\n# evaluate the model\nscore = regressor.score(X_test, y_test)\nprint('Model accuracy on test set: ', score)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a linear regression model in Python to predict the target value given features.\n\n### Input:\n\n\n### Output:\n# import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load the dataset\ndf = pd.read_csv('data.csv')\n\n# separate the data into features (X) and target (y)\nX = df.drop('target', axis=1).values\ny = df['target'].values\n\n# split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)\n\n# evaluate the model\nscore = regressor.score(X_test, y_test)\nprint('Model accuracy on test set: ', score)"}
{"instruction": "Construct a convolutional neural network from scratch in Python to classify MNIST digits.", "input": "", "output": "import torch \nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MnistNet(nn.Module): \n    def __init__(self): \n        super(MnistNet, self).__init__() \n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5) \n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5) \n        self.conv2_drop = nn.Dropout2d() \n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n    def forward(self, x):\n        x = F.relu(F.max_pool2d(self.conv1(x), 2)) \n        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\n        x = x.view(-1, 320) \n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training) \n        x = self.fc2(x) \n        return F.log_softmax(x)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a convolutional neural network from scratch in Python to classify MNIST digits.\n\n### Input:\n\n\n### Output:\nimport torch \nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MnistNet(nn.Module): \n    def __init__(self): \n        super(MnistNet, self).__init__() \n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5) \n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5) \n        self.conv2_drop = nn.Dropout2d() \n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n    def forward(self, x):\n        x = F.relu(F.max_pool2d(self.conv1(x), 2)) \n        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\n        x = x.view(-1, 320) \n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training) \n        x = self.fc2(x) \n        return F.log_softmax(x)"}
{"instruction": "Develop a chatbot in Python that records customer requests and stores them in a database.", "input": "", "output": "import sqlite3\n\n# Connect to the database\ncon = sqlite3.connect('customer_requests.db')\ncursor = con.cursor()\n\n# Create the customer table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS customer_requests(request_id INTEGER PRIMARY KEY, request TEXT NOT NULL)\")\n\n# Create and run the chatbot\ndef chatbot():\n    print(\"Welcome to the chatbot! Enter 'exit' to quit.\\n\")\n    while True:\n        response = input(\"You: \")\n        if response == 'exit':\n            break\n        else:\n            print(\"Chatbot: Your request has been recorded.\\n\")\n            # Store the request in the database\n            con.execute(f\"INSERT INTO customer_requests(request) VALUES ('{response}')\")\n            con.commit()\n\nchatbot()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a chatbot in Python that records customer requests and stores them in a database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\n# Connect to the database\ncon = sqlite3.connect('customer_requests.db')\ncursor = con.cursor()\n\n# Create the customer table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS customer_requests(request_id INTEGER PRIMARY KEY, request TEXT NOT NULL)\")\n\n# Create and run the chatbot\ndef chatbot():\n    print(\"Welcome to the chatbot! Enter 'exit' to quit.\\n\")\n    while True:\n        response = input(\"You: \")\n        if response == 'exit':\n            break\n        else:\n            print(\"Chatbot: Your request has been recorded.\\n\")\n            # Store the request in the database\n            con.execute(f\"INSERT INTO customer_requests(request) VALUES ('{response}')\")\n            con.commit()\n\nchatbot()"}
{"instruction": "Generate a function in Python for computing the Levenshtein distance between two strings.", "input": "", "output": "#Compute the Levenshtein distance between two strings\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein(s2, s1)\n \n    # len(s1) >= len(s2)\n    if len(s2) == 0:\n        return len(s1)\n \n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer\n            deletions = current_row[j] + 1       # than s2\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python for computing the Levenshtein distance between two strings.\n\n### Input:\n\n\n### Output:\n#Compute the Levenshtein distance between two strings\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein(s2, s1)\n \n    # len(s1) >= len(s2)\n    if len(s2) == 0:\n        return len(s1)\n \n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer\n            deletions = current_row[j] + 1       # than s2\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]"}
{"instruction": "Design a simple OOP calculator class in Python to carry our basic arithematic operations.", "input": "", "output": "class SimpleCalculator:\n    \"\"\"A simple class which has methods to do basic arithmetic operations.\"\"\"\n    def __init__(self):\n        \"\"\"Initializing an instance of the SimpleCalculator class.\"\"\"\n        self.result = 0\n    \n    def __str__(self):\n        \"\"\"Returns the string representation for the SimpleCalculator class.\"\"\"\n        return \"Simple Calculator\"\n    \n    def add(self, num1, num2):\n        self.result = num1 + num2\n        return self.result\n    \n    def subtract(self, num1, num2):\n        self.result = num1 - num2\n        return self.result\n    \n    def multiply(self, num1, num2):\n        self.result = num1 * num2\n        return self.result\n    \n    def divide(self, num1, num2):\n        self.result = num1 / num2\n        return self.result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a simple OOP calculator class in Python to carry our basic arithematic operations.\n\n### Input:\n\n\n### Output:\nclass SimpleCalculator:\n    \"\"\"A simple class which has methods to do basic arithmetic operations.\"\"\"\n    def __init__(self):\n        \"\"\"Initializing an instance of the SimpleCalculator class.\"\"\"\n        self.result = 0\n    \n    def __str__(self):\n        \"\"\"Returns the string representation for the SimpleCalculator class.\"\"\"\n        return \"Simple Calculator\"\n    \n    def add(self, num1, num2):\n        self.result = num1 + num2\n        return self.result\n    \n    def subtract(self, num1, num2):\n        self.result = num1 - num2\n        return self.result\n    \n    def multiply(self, num1, num2):\n        self.result = num1 * num2\n        return self.result\n    \n    def divide(self, num1, num2):\n        self.result = num1 / num2\n        return self.result"}
{"instruction": "Develop a system in Python to allow users to rate sports teams using a scale from 1 to 5.", "input": "", "output": "# import required libraries\nimport pandas as pd\n\n# define the rating scale\nrating_scale = [1,2,3,4,5]\n\n# create an empty DataFrame\nrating_df = pd.DataFrame(columns=['Team', 'Rating'])\n\n# function to take in user input and add it to the DataFrame\ndef add_rating(team, rating):\n    rating_df = rating_df.append({'Team': team, 'Rating': rating}, ignore_index=True)\n\n# function to allow a user to rate a team\ndef rate_team():\n    team = input('Which team would you like to rate? ')\n    rating = input('Please enter a rating between 1 and 5: ')\n    if rating not in rating_scale:\n        print('Error: Rating must be between 1 and 5!')\n        rate_team()\n    else:\n        add_rating(team, rating)\n        print('Rating added successfully!')\n\n# call the rate_team() function\nrate_team()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a system in Python to allow users to rate sports teams using a scale from 1 to 5.\n\n### Input:\n\n\n### Output:\n# import required libraries\nimport pandas as pd\n\n# define the rating scale\nrating_scale = [1,2,3,4,5]\n\n# create an empty DataFrame\nrating_df = pd.DataFrame(columns=['Team', 'Rating'])\n\n# function to take in user input and add it to the DataFrame\ndef add_rating(team, rating):\n    rating_df = rating_df.append({'Team': team, 'Rating': rating}, ignore_index=True)\n\n# function to allow a user to rate a team\ndef rate_team():\n    team = input('Which team would you like to rate? ')\n    rating = input('Please enter a rating between 1 and 5: ')\n    if rating not in rating_scale:\n        print('Error: Rating must be between 1 and 5!')\n        rate_team()\n    else:\n        add_rating(team, rating)\n        print('Rating added successfully!')\n\n# call the rate_team() function\nrate_team()"}
{"instruction": "Create a Python program to analyze and classify text documents into different categories.", "input": "", "output": "import nltk\nfrom sklearn import datasets\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Load the data\ncategories = ['science', 'arts', 'politics']\ndocuments = datasets.load_files(\"./documents\", categories=categories, encoding=\"utf-8\")\n\n#Preprocess the data\nvectorizer = CountVectorizer(stop_words='english',lowercase=True)\nX = vectorizer.fit_transform(documents.data)\ntfidf_transformer = TfidfTransformer()\nX_tfidf = tfidf_transformer.fit_transform(X)\n\n#Build the model\nclf = MultinomialNB().fit(X_tfidf, documents.target)\n\n#Classify documents\ntext = \"This document is about the science of climate change.\"\nX = vectorizer.transform([text])\nX_tfidf = tfidf_transformer.transform(X)\nprediction = clf.predict(X_tfidf)\n\nprint \"This document is classified as:\", documents.target_names[prediction[0]]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to analyze and classify text documents into different categories.\n\n### Input:\n\n\n### Output:\nimport nltk\nfrom sklearn import datasets\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Load the data\ncategories = ['science', 'arts', 'politics']\ndocuments = datasets.load_files(\"./documents\", categories=categories, encoding=\"utf-8\")\n\n#Preprocess the data\nvectorizer = CountVectorizer(stop_words='english',lowercase=True)\nX = vectorizer.fit_transform(documents.data)\ntfidf_transformer = TfidfTransformer()\nX_tfidf = tfidf_transformer.fit_transform(X)\n\n#Build the model\nclf = MultinomialNB().fit(X_tfidf, documents.target)\n\n#Classify documents\ntext = \"This document is about the science of climate change.\"\nX = vectorizer.transform([text])\nX_tfidf = tfidf_transformer.transform(X)\nprediction = clf.predict(X_tfidf)\n\nprint \"This document is classified as:\", documents.target_names[prediction[0]]"}
{"instruction": "Write a web server in Python that is capable of responding to both GET and POST requests.", "input": "", "output": "from http.server import HTTPServer, BaseHTTPRequestHandler\n\n# Create the server\nserver = HTTPServer(('localhost', 8080), BaseHTTPRequestHandler)\n\n# Request handler for both GET and POST requests\nclass RequestHandler(BaseHTTPRequestHandler):\n\n    # Handle GET requests\n    def do_GET(self):\n        # Send response status code\n        self.send_response(200)\n\n        # Send headers\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n\n        # Send response in html\n        self.wfile.write(\"<html><body>This is a GET request</body></html>\")\n\n    # Handle POST requests\n    def do_POST(self):\n        # Send response status code\n        self.send_response(200)\n\n        # Send response headers\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n\n        # Send response in html\n        self.wfile.write(\"<html><body>This is a POST request</body></html>\")\n\n# Run the server\nserver.serve_forever()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web server in Python that is capable of responding to both GET and POST requests.\n\n### Input:\n\n\n### Output:\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\n# Create the server\nserver = HTTPServer(('localhost', 8080), BaseHTTPRequestHandler)\n\n# Request handler for both GET and POST requests\nclass RequestHandler(BaseHTTPRequestHandler):\n\n    # Handle GET requests\n    def do_GET(self):\n        # Send response status code\n        self.send_response(200)\n\n        # Send headers\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n\n        # Send response in html\n        self.wfile.write(\"<html><body>This is a GET request</body></html>\")\n\n    # Handle POST requests\n    def do_POST(self):\n        # Send response status code\n        self.send_response(200)\n\n        # Send response headers\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n\n        # Send response in html\n        self.wfile.write(\"<html><body>This is a POST request</body></html>\")\n\n# Run the server\nserver.serve_forever()"}
{"instruction": "Write a Python class for creating a binary tree andfinding the maximum depth of the tree.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n \n   def __init__(self):\n       self.root = None\n \n   def add_node(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._add_to_tree(self.root, data)\n\n    def _add_to_tree(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._add_to_tree(node.left, data)\n        else:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._add_to_tree(node.right, data)\n\n    def max_depth(self):\n        return self._max_depth(self.root)\n\n    def _max_depth(self, node):\n        if node is None:\n            return 0\n        else:\n            left_depth = self._max_depth(node.left) \n            right_depth = self._max_depth(node.right)\n            return max(left_depth, right_depth) + 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class for creating a binary tree andfinding the maximum depth of the tree.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n \n   def __init__(self):\n       self.root = None\n \n   def add_node(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._add_to_tree(self.root, data)\n\n    def _add_to_tree(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._add_to_tree(node.left, data)\n        else:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._add_to_tree(node.right, data)\n\n    def max_depth(self):\n        return self._max_depth(self.root)\n\n    def _max_depth(self, node):\n        if node is None:\n            return 0\n        else:\n            left_depth = self._max_depth(node.left) \n            right_depth = self._max_depth(node.right)\n            return max(left_depth, right_depth) + 1"}
{"instruction": "Generate a function to perform stochastic gradient descent on the iris dataset in Python.", "input": "", "output": "\"\"\"\nPerform stochastic gradient descent on the iris dataset in Python.\n\"\"\"\n\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Set the hyperparameters\nNUM_ITERATIONS = 1000 \nLEARNING_RATE = 0.01\n\n# Initialize the weights\nw = np.zeros(X_train.shape[1])\nb = np.zeros((1,)) \n\n# Perform the Stochastic Gradient Descent\nfor n in range(NUM_ITERATIONS):\n    # Pick a random point\n    x_i, y_i = X_train[np.random.randint(X_train.shape[0])], y_train[np.random.randint(y_train.shape[0])]\n\n    # Compute the Sigmoid\n    z = np.matmul(w, x_i) + b \n    sigmoid = 1 / (1 + np.exp(-z))\n\n    # Compute the Gradients\n    dw = (sigmoid - y_i) * x_i\n    db = (sigmoid - y_i) \n\n    # Update the weights\n    w = w - LEARNING_RATE * dw \n    b = b - LEARNING_RATE * db\n\n# Make predictions\ny_pred = np.matmul(X_test, w) + b\ny_pred = np.round(1 / (1 + np.exp(-y_pred)))\n\n# Compute the accuracy\naccuracy = metrics.accuracy_score(y_test, y_pred) \nprint(\"Accuracy:\", accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to perform stochastic gradient descent on the iris dataset in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nPerform stochastic gradient descent on the iris dataset in Python.\n\"\"\"\n\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n# Split the dataset into test and train sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Set the hyperparameters\nNUM_ITERATIONS = 1000 \nLEARNING_RATE = 0.01\n\n# Initialize the weights\nw = np.zeros(X_train.shape[1])\nb = np.zeros((1,)) \n\n# Perform the Stochastic Gradient Descent\nfor n in range(NUM_ITERATIONS):\n    # Pick a random point\n    x_i, y_i = X_train[np.random.randint(X_train.shape[0])], y_train[np.random.randint(y_train.shape[0])]\n\n    # Compute the Sigmoid\n    z = np.matmul(w, x_i) + b \n    sigmoid = 1 / (1 + np.exp(-z))\n\n    # Compute the Gradients\n    dw = (sigmoid - y_i) * x_i\n    db = (sigmoid - y_i) \n\n    # Update the weights\n    w = w - LEARNING_RATE * dw \n    b = b - LEARNING_RATE * db\n\n# Make predictions\ny_pred = np.matmul(X_test, w) + b\ny_pred = np.round(1 / (1 + np.exp(-y_pred)))\n\n# Compute the accuracy\naccuracy = metrics.accuracy_score(y_test, y_pred) \nprint(\"Accuracy:\", accuracy)"}
{"instruction": "Construct a neural network in Python to predict the price of Bitcoin for the next 5 days.", "input": "", "output": "\"\"\"\nConstruct a neural network in Python to predict the price of Bitcoin for the next 5 days\n\"\"\"\n\nimport numpy as np\n#import matplotlib.pyplot as plt\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Load the dataset\ndataset = pd.read_csv('BTC-USD.csv')\n\n# Get the values\nclosing_prices = dataset.iloc[:, [4]].values\n\n# Normalize the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nprices_scaled = scaler.fit_transform(closing_prices)\n\n# Create the input data for the model\nX, Y = [], []\nfor i in range(30, len(prices_scaled)):\n    X.append(prices_scaled[i-30:i, 0])\n    Y.append(prices_scaled[i, 0])\nX, Y = np.array(X), np.array(Y)\n\n# Reshape the input\nX = np.reshape(X, (X.shape[0], X.shape[1], 1))\n\n# Create the model\nmodel = Sequential()\nmodel.add(LSTM(128, input_shape=(X.shape[1], 1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='adam')\n\n# Train the model\nmodel.fit(X, Y, epochs=100, batch_size=32)\n\n# Prepare the 5-day prediction data\nprediction_data = prices_scaled[-30:, 0]\nprediction_data = np.reshape(prediction_data, (1, 30, 1))\n\n# Make the 5-day prediction\npredictions = model.predict(prediction_data)\nprediction = scaler.inverse_transform(predictions)\nprint(prediction)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a neural network in Python to predict the price of Bitcoin for the next 5 days.\n\n### Input:\n\n\n### Output:\n\"\"\"\nConstruct a neural network in Python to predict the price of Bitcoin for the next 5 days\n\"\"\"\n\nimport numpy as np\n#import matplotlib.pyplot as plt\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Load the dataset\ndataset = pd.read_csv('BTC-USD.csv')\n\n# Get the values\nclosing_prices = dataset.iloc[:, [4]].values\n\n# Normalize the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nprices_scaled = scaler.fit_transform(closing_prices)\n\n# Create the input data for the model\nX, Y = [], []\nfor i in range(30, len(prices_scaled)):\n    X.append(prices_scaled[i-30:i, 0])\n    Y.append(prices_scaled[i, 0])\nX, Y = np.array(X), np.array(Y)\n\n# Reshape the input\nX = np.reshape(X, (X.shape[0], X.shape[1], 1))\n\n# Create the model\nmodel = Sequential()\nmodel.add(LSTM(128, input_shape=(X.shape[1], 1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='adam')\n\n# Train the model\nmodel.fit(X, Y, epochs=100, batch_size=32)\n\n# Prepare the 5-day prediction data\nprediction_data = prices_scaled[-30:, 0]\nprediction_data = np.reshape(prediction_data, (1, 30, 1))\n\n# Make the 5-day prediction\npredictions = model.predict(prediction_data)\nprediction = scaler.inverse_transform(predictions)\nprint(prediction)"}
{"instruction": "Generate a Python dictionary where the keys are states and the values are their capitals.", "input": "", "output": "state_capitals = {\n    'Alabama': 'Montgomery',\n    'Alaska': 'Juneau',\n    'Arizona': 'Phoenix',\n    'Arkansas': 'Little Rock',\n    'California': 'Sacramento',\n    'Colorado': 'Denver',\n    'Connecticut': 'Hartford',\n    'Delaware': 'Dover',\n    'Florida': 'Tallahassee',\n    'Georgia': 'Atlanta',\n    'Hawaii': 'Honolulu',\n    'Idaho': 'Boise',\n    'Illinois': 'Springfield',\n    'Indiana': 'Indianapolis',\n    'Iowa': 'Des Moines',\n    'Kansas': 'Topeka',\n    'Kentucky': 'Frankfort',\n    'Louisiana': 'Baton Rouge',\n    'Maine': 'Augusta',\n    'Maryland': 'Annapolis',\n    'Massachusetts': 'Boston',\n    'Michigan': 'Lansing',\n    'Minnesota': 'Saint Paul',\n    'Mississippi': 'Jackson',\n    'Missouri': 'Jefferson City',\n    'Montana': 'Helena',\n    'Nebraska': 'Lincoln',\n    'Nevada': 'Carson City',\n    'New Hampshire': 'Concord',\n    'New Jersey': 'Trenton',\n    'New Mexico': 'Santa Fe',\n    'New York': 'Albany',\n    'North Carolina': 'Raleigh',\n    'North Dakota': 'Bismarck',\n    'Ohio': 'Columbus',\n    'Oklahoma': 'Oklahoma City',\n    'Oregon': 'Salem',\n    'Pennsylvania': 'Harrisburg',\n    'Rhode Island': 'Providence',\n    'South Carolina': 'Columbia',\n    'South Dakota': 'Pierre',\n    'Tennessee': 'Nashville',\n    'Texas': 'Austin',\n    'Utah': 'Salt Lake City',\n    'Vermont': 'Montpelier',\n    'Virginia': 'Richmond',\n    'Washington': 'Olympia',\n    'West Virginia': 'Charleston',\n    'Wisconsin': 'Madison',\n    'Wyoming': 'Cheyenne'\n}", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python dictionary where the keys are states and the values are their capitals.\n\n### Input:\n\n\n### Output:\nstate_capitals = {\n    'Alabama': 'Montgomery',\n    'Alaska': 'Juneau',\n    'Arizona': 'Phoenix',\n    'Arkansas': 'Little Rock',\n    'California': 'Sacramento',\n    'Colorado': 'Denver',\n    'Connecticut': 'Hartford',\n    'Delaware': 'Dover',\n    'Florida': 'Tallahassee',\n    'Georgia': 'Atlanta',\n    'Hawaii': 'Honolulu',\n    'Idaho': 'Boise',\n    'Illinois': 'Springfield',\n    'Indiana': 'Indianapolis',\n    'Iowa': 'Des Moines',\n    'Kansas': 'Topeka',\n    'Kentucky': 'Frankfort',\n    'Louisiana': 'Baton Rouge',\n    'Maine': 'Augusta',\n    'Maryland': 'Annapolis',\n    'Massachusetts': 'Boston',\n    'Michigan': 'Lansing',\n    'Minnesota': 'Saint Paul',\n    'Mississippi': 'Jackson',\n    'Missouri': 'Jefferson City',\n    'Montana': 'Helena',\n    'Nebraska': 'Lincoln',\n    'Nevada': 'Carson City',\n    'New Hampshire': 'Concord',\n    'New Jersey': 'Trenton',\n    'New Mexico': 'Santa Fe',\n    'New York': 'Albany',\n    'North Carolina': 'Raleigh',\n    'North Dakota': 'Bismarck',\n    'Ohio': 'Columbus',\n    'Oklahoma': 'Oklahoma City',\n    'Oregon': 'Salem',\n    'Pennsylvania': 'Harrisburg',\n    'Rhode Island': 'Providence',\n    'South Carolina': 'Columbia',\n    'South Dakota': 'Pierre',\n    'Tennessee': 'Nashville',\n    'Texas': 'Austin',\n    'Utah': 'Salt Lake City',\n    'Vermont': 'Montpelier',\n    'Virginia': 'Richmond',\n    'Washington': 'Olympia',\n    'West Virginia': 'Charleston',\n    'Wisconsin': 'Madison',\n    'Wyoming': 'Cheyenne'\n}"}
{"instruction": "Design an Object-Oriented design in Python to represent a mobile phone in a virtual world.", "input": "", "output": "class Phone:\n  def __init__(self, name):\n    self.name = name\n    self.owner = None\n\n  def assign_owner(self, owner):\n    self.owner = owner\n\n  def use(self):\n    print(f\"{self.owner.name} is using {self.name}\")\n\nclass Person:\n  def __init__(self, name):\n    self.name = name\n    self.phone = None\n\n  def assign_phone(self, phone):\n    self.phone = phone\n    self.phone.owner = self\n\n  def use_phone(self):\n    if self.phone is not None:\n      self.phone.use()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an Object-Oriented design in Python to represent a mobile phone in a virtual world.\n\n### Input:\n\n\n### Output:\nclass Phone:\n  def __init__(self, name):\n    self.name = name\n    self.owner = None\n\n  def assign_owner(self, owner):\n    self.owner = owner\n\n  def use(self):\n    print(f\"{self.owner.name} is using {self.name}\")\n\nclass Person:\n  def __init__(self, name):\n    self.name = name\n    self.phone = None\n\n  def assign_phone(self, phone):\n    self.phone = phone\n    self.phone.owner = self\n\n  def use_phone(self):\n    if self.phone is not None:\n      self.phone.use()"}
{"instruction": "Generate a script to setup environment variables that can be used by all of your programs.", "input": "", "output": "#!/bin/bash\n\n# set up your environment variables\n# -------------------------------\n# Defining environment variables\n\n# my_name\nexport my_name=\"John Doe\"\n\n# my_age\nexport my_age=\"32\"\n\n# my_code_editor\nexport my_code_editor=\"vim\"\n\n# my_python_version\nexport my_python_version=\"3.7\"\n\n# my_favourite_language\nexport my_favourite_language=\"java\"\n\n# my_git_username\nexport my_git_username=\"johndoe123\"\n\n# my_github_url\nexport my_github_url=\"https://github.com/johndoe123\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script to setup environment variables that can be used by all of your programs.\n\n### Input:\n\n\n### Output:\n#!/bin/bash\n\n# set up your environment variables\n# -------------------------------\n# Defining environment variables\n\n# my_name\nexport my_name=\"John Doe\"\n\n# my_age\nexport my_age=\"32\"\n\n# my_code_editor\nexport my_code_editor=\"vim\"\n\n# my_python_version\nexport my_python_version=\"3.7\"\n\n# my_favourite_language\nexport my_favourite_language=\"java\"\n\n# my_git_username\nexport my_git_username=\"johndoe123\"\n\n# my_github_url\nexport my_github_url=\"https://github.com/johndoe123\""}
{"instruction": "Construct a program with Python for calculating the average of the numbers in a given list", "input": "", "output": "\"\"\"\nConstruct a program with Python for calculating the average of the numbers in a given list\n\"\"\"\n\ndef calculate_average(numbers):\n    # Calculate the sum of the numbers\n    total_sum = 0 \n    for n in numbers:\n        total_sum += n\n\n    # Calculate the average of the numbers\n    average = total_sum/len(numbers)\n    return average\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5]\n    print(f'The average of the numbers in the list is: {calculate_average(numbers)}')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program with Python for calculating the average of the numbers in a given list\n\n### Input:\n\n\n### Output:\n\"\"\"\nConstruct a program with Python for calculating the average of the numbers in a given list\n\"\"\"\n\ndef calculate_average(numbers):\n    # Calculate the sum of the numbers\n    total_sum = 0 \n    for n in numbers:\n        total_sum += n\n\n    # Calculate the average of the numbers\n    average = total_sum/len(numbers)\n    return average\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5]\n    print(f'The average of the numbers in the list is: {calculate_average(numbers)}')"}
{"instruction": "Write a Python function to merge two given sorted lists A and B into a single sorted list.", "input": "", "output": "def merge_sorted_lists(list1, list2):\n    result = []\n    i = 0  # Represents the index of list1\n    j = 0  # Represents the index of list2\n \n    # Compare elements of both lists and append the smaller one\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n \n    # List1 or List2's elements are not added to the result yet\n    result += list1[i:]\n    result += list2[j:]\n    return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to merge two given sorted lists A and B into a single sorted list.\n\n### Input:\n\n\n### Output:\ndef merge_sorted_lists(list1, list2):\n    result = []\n    i = 0  # Represents the index of list1\n    j = 0  # Represents the index of list2\n \n    # Compare elements of both lists and append the smaller one\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n \n    # List1 or List2's elements are not added to the result yet\n    result += list1[i:]\n    result += list2[j:]\n    return result"}
{"instruction": "Generate a fuzzy search algorithm in Python that can match strings with near similarities.", "input": "", "output": "def find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a fuzzy search algorithm in Python that can match strings with near similarities.\n\n### Input:\n\n\n### Output:\ndef find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches"}
{"instruction": "Create a neural network in Python to predict the type of flower given a set of attributes.", "input": "", "output": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add a hidden layer\nmodel.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))\n\n# Add an output layer\nmodel.add(Dense(3, kernel_initializer='uniform', activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python to predict the type of flower given a set of attributes.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add a hidden layer\nmodel.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))\n\n# Add an output layer\nmodel.add(Dense(3, kernel_initializer='uniform', activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))"}
{"instruction": "Construct a python program to demonstrate the usage of the Fibonacci numbers in a problem.", "input": "", "output": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n# First Fibonacci number is 0 \n   elif n==1: \n      return 0\n# Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Input number of terms in the Fibonacci sequence\nnterms = 10\n\n# Check if the input number is valid\nif nterms <= 0:\n   print(\"Incorrect input\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(Fibonacci(i))\n       \n# This can be used to solve the Fibonacci Sequence puzzle\n# The puzzle is -\n# Given a number n, find the nth Fibonacci number\n# That can be easily done using the above code", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to demonstrate the usage of the Fibonacci numbers in a problem.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n# First Fibonacci number is 0 \n   elif n==1: \n      return 0\n# Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Input number of terms in the Fibonacci sequence\nnterms = 10\n\n# Check if the input number is valid\nif nterms <= 0:\n   print(\"Incorrect input\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(Fibonacci(i))\n       \n# This can be used to solve the Fibonacci Sequence puzzle\n# The puzzle is -\n# Given a number n, find the nth Fibonacci number\n# That can be easily done using the above code"}
{"instruction": "Develop a Python program that converts temperature between Celsius, Fahrenheit and Kelvin.", "input": "", "output": "def convertTemp(temp, fromUnit, toUnit):\n    if fromUnit == 'C':\n        if toUnit == 'F':\n            temp = temp * (9/5) + 32\n        elif toUnit == 'K':\n            temp += 273.15\n    elif fromUnit == 'F':\n        if toUnit == 'C':\n            temp = (temp - 32) * (5/9)\n        elif toUnit == 'K':\n            temp = (temp - 32) * (5/9) + 273.15\n    elif fromUnit == 'K':\n        if toUnit == 'C':\n            temp -= 273.15\n        elif toUnit == 'F':\n            temp = (temp - 273.15) * (9/5) + 32\n\n    return temp\n\ntemp = 100\nprint(\"In Celsius:\", convertTemp(temp, 'F', 'C'))\nprint(\"In Fahrenheit:\", convertTemp(temp, 'C', 'F'))\nprint(\"In Kelvin:\", convertTemp(temp, 'C', 'K'))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that converts temperature between Celsius, Fahrenheit and Kelvin.\n\n### Input:\n\n\n### Output:\ndef convertTemp(temp, fromUnit, toUnit):\n    if fromUnit == 'C':\n        if toUnit == 'F':\n            temp = temp * (9/5) + 32\n        elif toUnit == 'K':\n            temp += 273.15\n    elif fromUnit == 'F':\n        if toUnit == 'C':\n            temp = (temp - 32) * (5/9)\n        elif toUnit == 'K':\n            temp = (temp - 32) * (5/9) + 273.15\n    elif fromUnit == 'K':\n        if toUnit == 'C':\n            temp -= 273.15\n        elif toUnit == 'F':\n            temp = (temp - 273.15) * (9/5) + 32\n\n    return temp\n\ntemp = 100\nprint(\"In Celsius:\", convertTemp(temp, 'F', 'C'))\nprint(\"In Fahrenheit:\", convertTemp(temp, 'C', 'F'))\nprint(\"In Kelvin:\", convertTemp(temp, 'C', 'K'))"}
{"instruction": "Develop an algorithm in Python for solving the knapsack problem using dynamic programming.", "input": "", "output": "# A utility function that returns  \n# maximum of two integers \ndef max(a, b): \n    return a if (a > b) else b \n  \n# Returns the maximum value that  \n# can be put in a knapsack of capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more  \n    # than Knapsack of capacity W, then  \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),  \n                   knapSack(W, wt, val, n-1))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for solving the knapsack problem using dynamic programming.\n\n### Input:\n\n\n### Output:\n# A utility function that returns  \n# maximum of two integers \ndef max(a, b): \n    return a if (a > b) else b \n  \n# Returns the maximum value that  \n# can be put in a knapsack of capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more  \n    # than Knapsack of capacity W, then  \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),  \n                   knapSack(W, wt, val, n-1))"}
{"instruction": "Create a web scraper in Python which finds the maximum and minimum temperatures in the US.", "input": "", "output": "# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# set the url to scrape\nurl = \"https://www.weather.gov/source/crh/stateMaxMinTemps.php\"\n\n# make a request to the url and create the beautiful soup object\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# parse the table\ntable = soup.find(id=\"main\")\n\n# read the table in to a DataFrame\ndf = pd.read_html(str(table))[0]\n\n# rename the columns\ndf.columns=['state', 'max_temp', 'min_temp']\n\n# find the maximum and minimum temperatures\nmax_temp = df['max_temp'].max()\nmin_temp = df['min_temp'].min()\n\n# print the maximum and minimum temperatures\nprint('The maximum temperature in the US is: %s' % max_temp) \nprint('The minimum temperature in the US is: %s' % min_temp)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python which finds the maximum and minimum temperatures in the US.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# set the url to scrape\nurl = \"https://www.weather.gov/source/crh/stateMaxMinTemps.php\"\n\n# make a request to the url and create the beautiful soup object\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# parse the table\ntable = soup.find(id=\"main\")\n\n# read the table in to a DataFrame\ndf = pd.read_html(str(table))[0]\n\n# rename the columns\ndf.columns=['state', 'max_temp', 'min_temp']\n\n# find the maximum and minimum temperatures\nmax_temp = df['max_temp'].max()\nmin_temp = df['min_temp'].min()\n\n# print the maximum and minimum temperatures\nprint('The maximum temperature in the US is: %s' % max_temp) \nprint('The minimum temperature in the US is: %s' % min_temp)"}
{"instruction": "Write a Python program to simulate a rock-paper-scissor game which is played for 3 rounds.", "input": "", "output": "import random \n\n# Dictionary with all possible choices\nchoices = {\"rock\": 0, \"paper\": 1, \"scissors\": 2}\n\n# A dictionary to store the results\nresults = {0:0, 1:0, 2:0}\n\n# Number of rounds to be performed\nrounds = 3\n\n# Main game loop\nfor i in range(rounds):\n    # Generate random player choices \n    user_choice = random.choice(list(choices.keys()))\n    computer_choice = random.choice(list(choices.keys()))\n    # Evaluate who won\n    user_choice_val = choices[user_choice]\n    computer_choice_val = choices[computer_choice]\n    if user_choice_val == computer_choice_val:\n        result = 0\n    elif user_choice_val > computer_choice_val or (user_choice_val == 2 and computer_choice_val == 0):\n        result = 1\n    else:\n        result = 2\n    # Update the results dictionary\n    results[result] += 1 \n\nprint(\"User Score: \", results[1])\nprint(\"Computer Score: \", results[2])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a rock-paper-scissor game which is played for 3 rounds.\n\n### Input:\n\n\n### Output:\nimport random \n\n# Dictionary with all possible choices\nchoices = {\"rock\": 0, \"paper\": 1, \"scissors\": 2}\n\n# A dictionary to store the results\nresults = {0:0, 1:0, 2:0}\n\n# Number of rounds to be performed\nrounds = 3\n\n# Main game loop\nfor i in range(rounds):\n    # Generate random player choices \n    user_choice = random.choice(list(choices.keys()))\n    computer_choice = random.choice(list(choices.keys()))\n    # Evaluate who won\n    user_choice_val = choices[user_choice]\n    computer_choice_val = choices[computer_choice]\n    if user_choice_val == computer_choice_val:\n        result = 0\n    elif user_choice_val > computer_choice_val or (user_choice_val == 2 and computer_choice_val == 0):\n        result = 1\n    else:\n        result = 2\n    # Update the results dictionary\n    results[result] += 1 \n\nprint(\"User Score: \", results[1])\nprint(\"Computer Score: \", results[2])"}
{"instruction": "Design a class in Python that calculates the mean, median, and mode of a group of numbers.", "input": "", "output": "class MeanMedianModeCalculator:\n    \n    # Function to calculate the mean  \n    def calculate_mean(self, numbers):\n        return sum(numbers) / len(numbers)\n    \n    # Function to calculate the median  \n    def calculate_median(self, numbers):\n        numbers.sort()\n        mid_point = int(len(numbers) / 2)\n        if len(numbers) % 2 == 0:\n            return (numbers[mid_point - 1] + numbers[mid_point]) / 2\n        else: \n            return numbers[mid_point]\n            \n    # Function to calculate the mode \n    def calculate_mode(self, numbers):\n        max_count = 0\n        max_num = 0\n        count_dictionary = {}\n        \n        for number in numbers:\n            if number in count_dictionary.keys():\n                count_dictionary[number] += 1\n            else:\n                count_dictionary[number] = 1\n                \n            if count_dictionary[number] > max_count:\n                max_count = count_dictionary[number]\n                max_num = number\n                \n        return max_num", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that calculates the mean, median, and mode of a group of numbers.\n\n### Input:\n\n\n### Output:\nclass MeanMedianModeCalculator:\n    \n    # Function to calculate the mean  \n    def calculate_mean(self, numbers):\n        return sum(numbers) / len(numbers)\n    \n    # Function to calculate the median  \n    def calculate_median(self, numbers):\n        numbers.sort()\n        mid_point = int(len(numbers) / 2)\n        if len(numbers) % 2 == 0:\n            return (numbers[mid_point - 1] + numbers[mid_point]) / 2\n        else: \n            return numbers[mid_point]\n            \n    # Function to calculate the mode \n    def calculate_mode(self, numbers):\n        max_count = 0\n        max_num = 0\n        count_dictionary = {}\n        \n        for number in numbers:\n            if number in count_dictionary.keys():\n                count_dictionary[number] += 1\n            else:\n                count_dictionary[number] = 1\n                \n            if count_dictionary[number] > max_count:\n                max_count = count_dictionary[number]\n                max_num = number\n                \n        return max_num"}
{"instruction": "Design an algorithm in Python to compute the shortest path between two nodes in a network.", "input": "", "output": "def shortest_path(graph, start, end):\n    # keep track of all visited nodes\n    explored = []\n    # keep track of nodes to be checked\n    queue = [[start]]\n \n    # return path if start is goal\n    if start == end:\n        return \"That was easy! Start = goal\"\n \n    # keeps looping until all possible paths have been checked\n    while queue:\n        # pop the first path from the queue\n        path = queue.pop(0)\n        # get the last node from the path\n        node = path[-1]\n        if node not in explored:\n            neighbours = graph[node]\n            # go through all neighbour nodes, construct a new path and\n            # push it into the queue\n            for neighbour in neighbours:\n                new_path = list(path)\n                new_path.append(neighbour)\n                queue.append(new_path)\n                # return path if neighbour is goal\n                if neighbour == end:\n                    return new_path\n \n            # mark node as explored\n            explored.append(node)\n \n    # in case there's no path between the two nodes\n    return \"So sorry, but a connecting path doesn't exist :(\"", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to compute the shortest path between two nodes in a network.\n\n### Input:\n\n\n### Output:\ndef shortest_path(graph, start, end):\n    # keep track of all visited nodes\n    explored = []\n    # keep track of nodes to be checked\n    queue = [[start]]\n \n    # return path if start is goal\n    if start == end:\n        return \"That was easy! Start = goal\"\n \n    # keeps looping until all possible paths have been checked\n    while queue:\n        # pop the first path from the queue\n        path = queue.pop(0)\n        # get the last node from the path\n        node = path[-1]\n        if node not in explored:\n            neighbours = graph[node]\n            # go through all neighbour nodes, construct a new path and\n            # push it into the queue\n            for neighbour in neighbours:\n                new_path = list(path)\n                new_path.append(neighbour)\n                queue.append(new_path)\n                # return path if neighbour is goal\n                if neighbour == end:\n                    return new_path\n \n            # mark node as explored\n            explored.append(node)\n \n    # in case there's no path between the two nodes\n    return \"So sorry, but a connecting path doesn't exist :(\""}
{"instruction": "Train a machine learning classifier in Python to detect whether an input document is spam.", "input": "", "output": "# Importing the libraries\nimport numpy as np\nimport pandas as pd\n\n# Import the dataset\ndataset = pd.read_csv ('spam.csv')\n   \n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, dataset.shape[0]):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\n    \n# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n#Fitting the model\n classifier.fit(X_train, y_train)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning classifier in Python to detect whether an input document is spam.\n\n### Input:\n\n\n### Output:\n# Importing the libraries\nimport numpy as np\nimport pandas as pd\n\n# Import the dataset\ndataset = pd.read_csv ('spam.csv')\n   \n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, dataset.shape[0]):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\n    \n# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n#Fitting the model\n classifier.fit(X_train, y_train)"}
{"instruction": "Write a Python program to simulate a chatbot that can answer simple questions about coding", "input": "", "output": "\"\"\"\nProgram to simulate a chatbot that can answer simple questions about coding\n\"\"\"\n\nimport random \n\ndef chatbot(): \n    # list of predefined responses for a given question \n    responses = { \n        \"what is coding\" : [\"Coding is the process of creating instructions using a programming language to tell a computer what to do.\", \n                            \"Coding is the process of writing a set of instructions that can be executed by a computer or a machine.\"], \n        \"what are the benefits of coding\" : [\"Coding helps develop problem-solving skills, promotes analytical thinking, encourages creativity, and develops various digital literacy skills.\", \n                                            \"Coding can help develop logic, develop math skills, and create a more well-rounded perspective in life.\"], \n        \"how long does it take to learn coding\": [\"The amount of time it takes to learn coding depends on the individual and their experience level. Generally speaking, it can take anywhere from a few weeks to several years to become a proficient coder.\"] \n    } \n\n    print(\"Hello, I am your coding chatbot. How can I help you?\") \n\n    while True: \n        user_input = input() \n\n        if user_input in responses: \n            response = random.choice(responses[user_input])\n            print(response) \n        else: \n            print(\"I'm sorry, I don't understand your question. Please try asking me in a different way.\") \n\nif __name__ == \"__main__\": \n    chatbot()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a chatbot that can answer simple questions about coding\n\n### Input:\n\n\n### Output:\n\"\"\"\nProgram to simulate a chatbot that can answer simple questions about coding\n\"\"\"\n\nimport random \n\ndef chatbot(): \n    # list of predefined responses for a given question \n    responses = { \n        \"what is coding\" : [\"Coding is the process of creating instructions using a programming language to tell a computer what to do.\", \n                            \"Coding is the process of writing a set of instructions that can be executed by a computer or a machine.\"], \n        \"what are the benefits of coding\" : [\"Coding helps develop problem-solving skills, promotes analytical thinking, encourages creativity, and develops various digital literacy skills.\", \n                                            \"Coding can help develop logic, develop math skills, and create a more well-rounded perspective in life.\"], \n        \"how long does it take to learn coding\": [\"The amount of time it takes to learn coding depends on the individual and their experience level. Generally speaking, it can take anywhere from a few weeks to several years to become a proficient coder.\"] \n    } \n\n    print(\"Hello, I am your coding chatbot. How can I help you?\") \n\n    while True: \n        user_input = input() \n\n        if user_input in responses: \n            response = random.choice(responses[user_input])\n            print(response) \n        else: \n            print(\"I'm sorry, I don't understand your question. Please try asking me in a different way.\") \n\nif __name__ == \"__main__\": \n    chatbot()"}
{"instruction": "Write a Python code to simulate a coin toss game and print the sequence of heads and tails.", "input": "", "output": "import random \n  \ndef heads_tails(): \n    heads = 0\n    tails = 0\n    res = [\"H\", \"T\"]\n    tosses = int(input(\"Number of tosses: \"))\n    sequence = \"\"\n    for i in range(tosses): \n        if random.choice(res) == \"H\": \n            heads += 1\n            sequence += \"H\"\n        else: \n            tails += 1\n            sequence += \"T\"\n    print(\"Heads: \", heads) \n    print(\"Tails: \", tails)\n    print(\"Sequence:\", sequence)\n\nheads_tails()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to simulate a coin toss game and print the sequence of heads and tails.\n\n### Input:\n\n\n### Output:\nimport random \n  \ndef heads_tails(): \n    heads = 0\n    tails = 0\n    res = [\"H\", \"T\"]\n    tosses = int(input(\"Number of tosses: \"))\n    sequence = \"\"\n    for i in range(tosses): \n        if random.choice(res) == \"H\": \n            heads += 1\n            sequence += \"H\"\n        else: \n            tails += 1\n            sequence += \"T\"\n    print(\"Heads: \", heads) \n    print(\"Tails: \", tails)\n    print(\"Sequence:\", sequence)\n\nheads_tails()"}
{"instruction": "What is the most memory efficient way to iterate through a large list of objects in Python?", "input": "", "output": "The most memory efficient way to iterate through a large list of objects in Python is to use an iterator. Iterators are more memory-efficient because they only store a single value at a time and can be used instead of the whole collection, which was held by the list. An iterator is accessed using the iter() function and is used in a for loop to loop through the items in the list.\n\nfor obj in iter(large_list_of_objects):\n    # Do something with the object", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the most memory efficient way to iterate through a large list of objects in Python?\n\n### Input:\n\n\n### Output:\nThe most memory efficient way to iterate through a large list of objects in Python is to use an iterator. Iterators are more memory-efficient because they only store a single value at a time and can be used instead of the whole collection, which was held by the list. An iterator is accessed using the iter() function and is used in a for loop to loop through the items in the list.\n\nfor obj in iter(large_list_of_objects):\n    # Do something with the object"}
{"instruction": "Design a neural network in Python that estimates the monthly electric bills of a household.", "input": "", "output": "import numpy as np\nimport tensorflow as tf\n\n# Input layer\ninputs = tf.keras.Input(shape=(3,))\n\n# Hidden layers\ndense_1 = tf.keras.layers.Dense(7, activation='relu')(inputs)\ndense_2 = tf.keras.layers.Dense(5, activation='relu')(dense_1)\n\n# Output layer\noutput = tf.keras.layers.Dense(1, activation='relu')(dense_2)\n\n# Create model\nmodel = tf.keras.Model(inputs=inputs, outputs=output)\n\n# Compile model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python that estimates the monthly electric bills of a household.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\n\n# Input layer\ninputs = tf.keras.Input(shape=(3,))\n\n# Hidden layers\ndense_1 = tf.keras.layers.Dense(7, activation='relu')(inputs)\ndense_2 = tf.keras.layers.Dense(5, activation='relu')(dense_1)\n\n# Output layer\noutput = tf.keras.layers.Dense(1, activation='relu')(dense_2)\n\n# Create model\nmodel = tf.keras.Model(inputs=inputs, outputs=output)\n\n# Compile model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])"}
{"instruction": "Implement a basic version control system in Python that keeps track of changes in the code.", "input": "", "output": "class VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic version control system in Python that keeps track of changes in the code.\n\n### Input:\n\n\n### Output:\nclass VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()"}
{"instruction": "Develop a web scraping algorithm in Python to extract product reviews from an online store.", "input": "", "output": "import requests\nimport json\nfrom bs4 import BeautifulSoup\n\n#make an HTTP request to the web page\nr = requests.get('https://www.example.com/products')\n\n#parse the response\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n#select relevant elements\nreview_elements = soup.select('.review .card-body')\n\n# extract the reviews\nreviews = [e.text for e in review_elements]\n\n#store reviews in JSON format\ndata = {\n'Product name': 'Example product',\n'reviews': reviews\n}\n\nwith open('reviews.json', 'w') as outfile:\n    json.dump(data, outfile)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraping algorithm in Python to extract product reviews from an online store.\n\n### Input:\n\n\n### Output:\nimport requests\nimport json\nfrom bs4 import BeautifulSoup\n\n#make an HTTP request to the web page\nr = requests.get('https://www.example.com/products')\n\n#parse the response\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n#select relevant elements\nreview_elements = soup.select('.review .card-body')\n\n# extract the reviews\nreviews = [e.text for e in review_elements]\n\n#store reviews in JSON format\ndata = {\n'Product name': 'Example product',\n'reviews': reviews\n}\n\nwith open('reviews.json', 'w') as outfile:\n    json.dump(data, outfile)"}
{"instruction": "Create a password validator program in Python to check if a given password is valid or not.", "input": "", "output": "def is_valid_password(pwd):\n    if len(pwd) < 6:\n        print(\"Password must be at least 6 characters long.\")\n        return False\n\n    if not any(char.isdigit() for char in pwd):\n        print(\"Password must have at least one number.\")\n        return False\n\n    if not any(char.isupper() for char in pwd):\n        print(\"Password must have at least one uppercase letter.\")\n        return False\n\n    if not any(char.islower() for char in pwd):\n        print(\"Password must have at least one lowercase letter.\")\n        return False\n\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a password validator program in Python to check if a given password is valid or not.\n\n### Input:\n\n\n### Output:\ndef is_valid_password(pwd):\n    if len(pwd) < 6:\n        print(\"Password must be at least 6 characters long.\")\n        return False\n\n    if not any(char.isdigit() for char in pwd):\n        print(\"Password must have at least one number.\")\n        return False\n\n    if not any(char.isupper() for char in pwd):\n        print(\"Password must have at least one uppercase letter.\")\n        return False\n\n    if not any(char.islower() for char in pwd):\n        print(\"Password must have at least one lowercase letter.\")\n        return False\n\n    return True"}
{"instruction": "Write a code to create a temperature conversion program using a switch statement in Python.", "input": "", "output": "def temperature_conversion(temperature, conversion):\n switch (conversion):\n  case 'FtoC':\n   return (temperature - 32) * (5 / 9)\n  case 'CtoF':\n   return (temperature * (9 / 5)) + 32\n  case 'FtoK':\n   return (temperature - 32) * (5 / 9) + 273.15\n  case 'KtoF':\n   return (temperature - 273.15) * (9 / 5) + 32\n  case 'CtoK':\n   return temperature + 273.15\n  case 'KtoC':\n   return temperature - 273.15\n\n# converting a temperature of 100F to Celsius\ntemperature_in_celsius = temperature_conversion(100, 'FtoC')\nprint(\"Temperature in Celsius:\", temperature_in_celsius)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to create a temperature conversion program using a switch statement in Python.\n\n### Input:\n\n\n### Output:\ndef temperature_conversion(temperature, conversion):\n switch (conversion):\n  case 'FtoC':\n   return (temperature - 32) * (5 / 9)\n  case 'CtoF':\n   return (temperature * (9 / 5)) + 32\n  case 'FtoK':\n   return (temperature - 32) * (5 / 9) + 273.15\n  case 'KtoF':\n   return (temperature - 273.15) * (9 / 5) + 32\n  case 'CtoK':\n   return temperature + 273.15\n  case 'KtoC':\n   return temperature - 273.15\n\n# converting a temperature of 100F to Celsius\ntemperature_in_celsius = temperature_conversion(100, 'FtoC')\nprint(\"Temperature in Celsius:\", temperature_in_celsius)"}
{"instruction": "Construct an algorithm in Python to calculate the Levenshtein distance between two strings.", "input": "", "output": "def levenshtein(s1, s2):\n    l1 = len(s1)\n    l2 = len(s2)\n  \n    matrix = [[0] * (l2 + 1) for _ in range(l1 + 1)]\n  \n    for i in range(l1 + 1):\n        matrix[i][0] = i\n    for j in range(l2 + 1):\n        matrix[0][j] = j\n  \n    for i in range(1, l1 + 1):\n        for j in range(1, l2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            matrix[i][j] = min(\n                matrix[i - 1][j] + 1,\n                matrix[i][j - 1] + 1,\n                matrix[i - 1][j - 1] + cost,\n            )\n  \n    return matrix[l1][l2]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to calculate the Levenshtein distance between two strings.\n\n### Input:\n\n\n### Output:\ndef levenshtein(s1, s2):\n    l1 = len(s1)\n    l2 = len(s2)\n  \n    matrix = [[0] * (l2 + 1) for _ in range(l1 + 1)]\n  \n    for i in range(l1 + 1):\n        matrix[i][0] = i\n    for j in range(l2 + 1):\n        matrix[0][j] = j\n  \n    for i in range(1, l1 + 1):\n        for j in range(1, l2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            matrix[i][j] = min(\n                matrix[i - 1][j] + 1,\n                matrix[i][j - 1] + 1,\n                matrix[i - 1][j - 1] + cost,\n            )\n  \n    return matrix[l1][l2]"}
{"instruction": "Develop a machine learning model in Python that can predict the house prices in California.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\n\n# Load and prepare the data\ndata = pd.read_csv('./housing.csv')\nX, y = data.drop('median_house_value', axis=1), data.median_house_value\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Preprocess the data\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Create and train the model\nmodel = RandomForestRegressor(n_estimators=100).fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\nprint(metrics.mean_absolute_error(y_test, y_pred))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python that can predict the house prices in California.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\n\n# Load and prepare the data\ndata = pd.read_csv('./housing.csv')\nX, y = data.drop('median_house_value', axis=1), data.median_house_value\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Preprocess the data\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Create and train the model\nmodel = RandomForestRegressor(n_estimators=100).fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\nprint(metrics.mean_absolute_error(y_test, y_pred))"}
{"instruction": "Create a program to classify movie genres using basic machine learning techniques in Python", "input": "", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load in the dataset \ndata = pd.read_csv('movie_dataset.csv')\n\n# Set the features and target to X and y respectively \nX = data.drop(columns=['genre'])\ny = data['genre']\n\n# Split into test and training sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Initialize the Random Forest Classifier  \nclf = RandomForestClassifier()\n\n# Fit the model \nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Calculate accuracy \naccuracy = accuracy_score(y_test, y_pred)\n\n# Print accuracy \nprint('Accuracy of model is: ', accuracy)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to classify movie genres using basic machine learning techniques in Python\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load in the dataset \ndata = pd.read_csv('movie_dataset.csv')\n\n# Set the features and target to X and y respectively \nX = data.drop(columns=['genre'])\ny = data['genre']\n\n# Split into test and training sets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Initialize the Random Forest Classifier  \nclf = RandomForestClassifier()\n\n# Fit the model \nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Calculate accuracy \naccuracy = accuracy_score(y_test, y_pred)\n\n# Print accuracy \nprint('Accuracy of model is: ', accuracy)"}
{"instruction": "Generate a program to generate a deck of cards using Object-oriented programming in Python.", "input": "", "output": "class Deck:\n    # list of cards in the deck\n    cards = []\n  \n    # constructor\n    def __init__(self):\n        suits = [\"Hearts\", \"Diamonds\",\"Spades\",\"Clubs\" ]\n        ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace']\n        self.cards = [ Card(suit,rank) for suit in suits for rank in ranks]\n\n        # shuffle the cards\n        random.shuffle(self.cards)\n  \n    def deal_one_card(self):\n        # return the next card from the shuffled deck\n        return self.cards.pop()\n  \nclass Card:\n    suit = \"\"\n    rank = \"\"\n\n    # constructor\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return \"{} of {}\".format(self.rank, self.suit)\n\ndeck = Deck()\ncard = deck.deal_one_card()\nprint(card) \n# --> 8 of Hearts", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to generate a deck of cards using Object-oriented programming in Python.\n\n### Input:\n\n\n### Output:\nclass Deck:\n    # list of cards in the deck\n    cards = []\n  \n    # constructor\n    def __init__(self):\n        suits = [\"Hearts\", \"Diamonds\",\"Spades\",\"Clubs\" ]\n        ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace']\n        self.cards = [ Card(suit,rank) for suit in suits for rank in ranks]\n\n        # shuffle the cards\n        random.shuffle(self.cards)\n  \n    def deal_one_card(self):\n        # return the next card from the shuffled deck\n        return self.cards.pop()\n  \nclass Card:\n    suit = \"\"\n    rank = \"\"\n\n    # constructor\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return \"{} of {}\".format(self.rank, self.suit)\n\ndeck = Deck()\ncard = deck.deal_one_card()\nprint(card) \n# --> 8 of Hearts"}
{"instruction": "Invent a Python library to facilitate working with big data such as Apache Spark or Hadoop.", "input": "", "output": "import os\nimport sys\n\n# Library to facilitate working with Apache Spark and Hadoop\nclass PySparkLib:\n    def __init__(self):\n        # initialize the Spark and Hadoop contexts\n        self._sc_context = None\n        self._hc_context = None\n\n    def create_spark_context(self, **kwargs):\n        # creates a Spark context\n        from pyspark import SparkContext\n        self._sc_context = SparkContext(master=kwargs['master'],\n            appName=kwargs['appName'])\n\n    def create_hadoop_context(self, **kwargs):\n        # creates a Hadoop context\n        from huwap import HadoopContext\n        self._hc_context = HadoopContext(**kwargs)\n\n    def read_data_from_hdfs(self, resources):\n        # reads data from an HDFS resource\n        hdfs_data = self._hc_context.read(resources[0])\n        return hdfs_data\n\n    def write_data_to_hdfs(self, resource, data):\n        # write data to an HDFS resource\n        self._hc_context.write(resource, data)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nInvent a Python library to facilitate working with big data such as Apache Spark or Hadoop.\n\n### Input:\n\n\n### Output:\nimport os\nimport sys\n\n# Library to facilitate working with Apache Spark and Hadoop\nclass PySparkLib:\n    def __init__(self):\n        # initialize the Spark and Hadoop contexts\n        self._sc_context = None\n        self._hc_context = None\n\n    def create_spark_context(self, **kwargs):\n        # creates a Spark context\n        from pyspark import SparkContext\n        self._sc_context = SparkContext(master=kwargs['master'],\n            appName=kwargs['appName'])\n\n    def create_hadoop_context(self, **kwargs):\n        # creates a Hadoop context\n        from huwap import HadoopContext\n        self._hc_context = HadoopContext(**kwargs)\n\n    def read_data_from_hdfs(self, resources):\n        # reads data from an HDFS resource\n        hdfs_data = self._hc_context.read(resources[0])\n        return hdfs_data\n\n    def write_data_to_hdfs(self, resource, data):\n        # write data to an HDFS resource\n        self._hc_context.write(resource, data)"}
{"instruction": "Design a GUI in Python to display data in tabular format and the ability to sort by column.", "input": "", "output": "import tkinter as tk\n \n# Set up the root window\nroot = tk.Tk()\n \n# Create the table\ntable = tk.Frame(root)\ntable.grid(row=0, column=0)\n \n# Set the row and column numbers\nrows = 5\ncolumns = 5\n \n# Create the label for column 0\nfor i in range(rows):\n    for j in range(1, columns):\n        b = tk.Entry(table, text=\"\") \n        b.grid(row=i, column=j, sticky=\"nsew\")\n \n# Sort by column\ndef sortByColumn(col):\n    list = table.grid_slaves()\n    sortlist = []\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            sortlist.append(l.get())\n    sortlist = sorted(sortlist)\n \n    i = 0\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            l.delete(0, \"end\")\n            l.insert(0, sortlist[i])\n            i += 1\n \n# Create the button to initiate the sort\nfor c in range(1, columns):\n    tk.Button(table, text=\"Sort\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c)\n \n# Diplay the root window \nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a GUI in Python to display data in tabular format and the ability to sort by column.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n \n# Set up the root window\nroot = tk.Tk()\n \n# Create the table\ntable = tk.Frame(root)\ntable.grid(row=0, column=0)\n \n# Set the row and column numbers\nrows = 5\ncolumns = 5\n \n# Create the label for column 0\nfor i in range(rows):\n    for j in range(1, columns):\n        b = tk.Entry(table, text=\"\") \n        b.grid(row=i, column=j, sticky=\"nsew\")\n \n# Sort by column\ndef sortByColumn(col):\n    list = table.grid_slaves()\n    sortlist = []\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            sortlist.append(l.get())\n    sortlist = sorted(sortlist)\n \n    i = 0\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            l.delete(0, \"end\")\n            l.insert(0, sortlist[i])\n            i += 1\n \n# Create the button to initiate the sort\nfor c in range(1, columns):\n    tk.Button(table, text=\"Sort\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c)\n \n# Diplay the root window \nroot.mainloop()"}
{"instruction": "Create an Artificial Neural Network in Python to classify flower colors from a given input.", "input": "", "output": "\"\"\"\nCreating an Artificial Neural Network in Python to classify flower colors from a given input \n\"\"\"\n\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\n# Create the input data and labels\nX_train = np.array([\n    [0],\n    [1],\n    [2],\n    [3],\n    [4],\n    [5],\n    [6]\n    ])\n\ny_train = np.array([\n    [0, 0, 0, 0, 1], # Blue\n    [0, 0, 0, 1, 0], # Green\n    [0, 0, 1, 0, 0], # Yellow\n    [1, 0, 0, 0, 0], # Red\n    [0, 1, 0, 0, 0], # Orange\n    [0, 0, 0, 0, 0], # Purple\n    [0, 0, 0, 1, 0]  # Green\n    ])\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='relu', input_shape=(1,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(5, activation='softmax'))\n\n# Compile and run the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=50, batch_size=1)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an Artificial Neural Network in Python to classify flower colors from a given input.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreating an Artificial Neural Network in Python to classify flower colors from a given input \n\"\"\"\n\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\n# Create the input data and labels\nX_train = np.array([\n    [0],\n    [1],\n    [2],\n    [3],\n    [4],\n    [5],\n    [6]\n    ])\n\ny_train = np.array([\n    [0, 0, 0, 0, 1], # Blue\n    [0, 0, 0, 1, 0], # Green\n    [0, 0, 1, 0, 0], # Yellow\n    [1, 0, 0, 0, 0], # Red\n    [0, 1, 0, 0, 0], # Orange\n    [0, 0, 0, 0, 0], # Purple\n    [0, 0, 0, 1, 0]  # Green\n    ])\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='relu', input_shape=(1,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(5, activation='softmax'))\n\n# Compile and run the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=50, batch_size=1)"}
{"instruction": "Create a Python program to classify a given email message as either unwanted or legitimate.", "input": "", "output": "import re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndef clean_text(text):\n     text = re.sub('[^A-Za-z0-9]+', ' ', text)\n     text = text.lower()\n     return text\n\ndef train_test_split(data):\n\ttotal_values = len(data)\n\ttest_percent = 0.2\n\ttrain_values = int(total_values - (test_percent * total_values))\n\treturn data[0: train_values], data[train_values+1: total_values]\n\ndef create_model(data):\n\t# data cleaning\n\tfor i in range(len(data)):\n\t\tdata[i][0] = clean_text(data[i][0])\n\tx_train, x_test =  train_test_split(data)\n\t# feature extraction and model training\n\tcv = CountVectorizer()\n\tx_train_vec = cv.fit_transform(x_train[:, 0])\n\tx_test_vec = cv.transform(x_test[:, 0])\n\tclf = MultinomialNB()\n\tclf.fit(x_train_vec, x_train[:, 1])\n\t# model testing\n\tscore = clf.score(x_test_vec, x_test[:, 1])\n\treturn clf, score\n\n# Driver Code \ndata = [['this is an unwanted message', 0],['this is a legitimate message', 1]]\nmodel, score = create_model(data)\nprint(\"Model Accuracy:\", score)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify a given email message as either unwanted or legitimate.\n\n### Input:\n\n\n### Output:\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndef clean_text(text):\n     text = re.sub('[^A-Za-z0-9]+', ' ', text)\n     text = text.lower()\n     return text\n\ndef train_test_split(data):\n\ttotal_values = len(data)\n\ttest_percent = 0.2\n\ttrain_values = int(total_values - (test_percent * total_values))\n\treturn data[0: train_values], data[train_values+1: total_values]\n\ndef create_model(data):\n\t# data cleaning\n\tfor i in range(len(data)):\n\t\tdata[i][0] = clean_text(data[i][0])\n\tx_train, x_test =  train_test_split(data)\n\t# feature extraction and model training\n\tcv = CountVectorizer()\n\tx_train_vec = cv.fit_transform(x_train[:, 0])\n\tx_test_vec = cv.transform(x_test[:, 0])\n\tclf = MultinomialNB()\n\tclf.fit(x_train_vec, x_train[:, 1])\n\t# model testing\n\tscore = clf.score(x_test_vec, x_test[:, 1])\n\treturn clf, score\n\n# Driver Code \ndata = [['this is an unwanted message', 0],['this is a legitimate message', 1]]\nmodel, score = create_model(data)\nprint(\"Model Accuracy:\", score)"}
{"instruction": "Build an AI-powered text summarizer in Python using natural language processing techniques.", "input": "", "output": "import nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem import PorterStemmer\n\n# create a function to preprocess the text\ndef preprocess(text):\n    # tokenize the given text\n    word_tokens = word_tokenize(text)\n    # remove stopwords\n    filtered_words = [w for w in word_tokens if not w in stopwords.words('english')]\n    # create a Porter Stemmer object\n    ps = PorterStemmer()\n    # stem the remaining words\n    stemmed_words = [ps.stem(w) for w in filtered_words]\n    # return preprocessed words\n    return stemmed_words\n\n# create a function to generate a summary\ndef summarize(text):\n    # preprocess the given text\n    words = preprocess(text)\n    # compute the frequency of each word\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    # find the most frequent words\n    most_freq_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:3]\n    # retrieve the sentences containing those words\n    sentences = sent_tokenize(text)\n    most_freq_words_sentences = []\n    for sentence in sentences:\n        for word, freq in most_freq_words:\n            if word in sentence.lower():\n                most_freq_words_sentences.append(sentence)\n    # create the summary\n    summary = ' '.join(most_freq_words_sentences)\n    # return the summary\n    return summary", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an AI-powered text summarizer in Python using natural language processing techniques.\n\n### Input:\n\n\n### Output:\nimport nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem import PorterStemmer\n\n# create a function to preprocess the text\ndef preprocess(text):\n    # tokenize the given text\n    word_tokens = word_tokenize(text)\n    # remove stopwords\n    filtered_words = [w for w in word_tokens if not w in stopwords.words('english')]\n    # create a Porter Stemmer object\n    ps = PorterStemmer()\n    # stem the remaining words\n    stemmed_words = [ps.stem(w) for w in filtered_words]\n    # return preprocessed words\n    return stemmed_words\n\n# create a function to generate a summary\ndef summarize(text):\n    # preprocess the given text\n    words = preprocess(text)\n    # compute the frequency of each word\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    # find the most frequent words\n    most_freq_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:3]\n    # retrieve the sentences containing those words\n    sentences = sent_tokenize(text)\n    most_freq_words_sentences = []\n    for sentence in sentences:\n        for word, freq in most_freq_words:\n            if word in sentence.lower():\n                most_freq_words_sentences.append(sentence)\n    # create the summary\n    summary = ' '.join(most_freq_words_sentences)\n    # return the summary\n    return summary"}
{"instruction": "Write a Python script to create a web server to handle two resources using the \"GET\" method.", "input": "", "output": "import http.server\n\nclass myHandler(http.server.BaseHTTPRequestHandler):\n\tdef do_GET(self):\n\t\tif self.path == '/page1':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 1\")\n\t\telif self.path == '/page2':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 2\")\n\t\telse:\n\t\t\tself.send_error(404)\n\nhttpd = http.server.HTTPServer(('0.0.0.0',8080), myHandler)\nhttpd.serve_forever()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to create a web server to handle two resources using the \"GET\" method.\n\n### Input:\n\n\n### Output:\nimport http.server\n\nclass myHandler(http.server.BaseHTTPRequestHandler):\n\tdef do_GET(self):\n\t\tif self.path == '/page1':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 1\")\n\t\telif self.path == '/page2':\n\t\t\tself.send_response(200)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(b\"This is page 2\")\n\t\telse:\n\t\t\tself.send_error(404)\n\nhttpd = http.server.HTTPServer(('0.0.0.0',8080), myHandler)\nhttpd.serve_forever()"}
{"instruction": "Write a Python program to find the shortest path between two nodes using Depth-First Search.", "input": "", "output": "def dfs(graph, start, end):\n  stack = [(start, [start])]\n  while stack:\n    (vertex, path) = stack.pop()\n    for next in graph[vertex] - set(path):\n      if next == end:\n        return path + [next]\n      else:\n        stack.append((next, path + [next]))\n\ngraph = {'A': set(['B', 'C']),\n         'B': set(['A', 'D', 'E']),\n         'C': set(['A', 'F']),\n         'D': set(['B']),\n         'E': set(['B', 'F']),\n         'F': set(['C', 'E'])}\n\nprint(dfs(graph, 'A', 'F'))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the shortest path between two nodes using Depth-First Search.\n\n### Input:\n\n\n### Output:\ndef dfs(graph, start, end):\n  stack = [(start, [start])]\n  while stack:\n    (vertex, path) = stack.pop()\n    for next in graph[vertex] - set(path):\n      if next == end:\n        return path + [next]\n      else:\n        stack.append((next, path + [next]))\n\ngraph = {'A': set(['B', 'C']),\n         'B': set(['A', 'D', 'E']),\n         'C': set(['A', 'F']),\n         'D': set(['B']),\n         'E': set(['B', 'F']),\n         'F': set(['C', 'E'])}\n\nprint(dfs(graph, 'A', 'F'))"}
{"instruction": "Write a machine learning algorithm in Python for predicting the stock prices of some company", "input": "", "output": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.model_selection import train_test_split \n\n# Read historical stock data\ndata = pd.read_csv(‘data.csv’)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(data.drop(‘target’, axis=1), \ndata[‘target’], test_size=0.2, random_state=2)\n\n# Create and fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Output the prediction \ny_pred = model.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a machine learning algorithm in Python for predicting the stock prices of some company\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.model_selection import train_test_split \n\n# Read historical stock data\ndata = pd.read_csv(‘data.csv’)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(data.drop(‘target’, axis=1), \ndata[‘target’], test_size=0.2, random_state=2)\n\n# Create and fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Output the prediction \ny_pred = model.predict(X_test)"}
{"instruction": "Create an algorithm in Python to find the closest pair of points out of given set of points.", "input": "", "output": "import math \n\ndef closest_pair(points):\n    # Initialize minimum distance \n    min_dist = float(\"inf\")\n\n    # Iterate over the points \n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n\n            # Calculate the euclidean distance\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            dist = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n            \n            # Update minimum distance if needed\n            if dist < min_dist:\n                min_dist = dist\n                closest_pair = (x1, y1), (x2, y2)\n\n    return closest_pair", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the closest pair of points out of given set of points.\n\n### Input:\n\n\n### Output:\nimport math \n\ndef closest_pair(points):\n    # Initialize minimum distance \n    min_dist = float(\"inf\")\n\n    # Iterate over the points \n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n\n            # Calculate the euclidean distance\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            dist = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n            \n            # Update minimum distance if needed\n            if dist < min_dist:\n                min_dist = dist\n                closest_pair = (x1, y1), (x2, y2)\n\n    return closest_pair"}
{"instruction": "Create a GUI in Python with two buttons and a label that displays the current time and date.", "input": "", "output": "import tkinter\nfrom tkinter import ttk\nfrom datetime import datetime\n\nroot = tkinter.Tk()\nroot.title = \"Time and Date\"\n\n# create a label\nlabel = ttk.Label(root, text=\"\")\nlabel.pack()\n\n# create two buttons\ndef click_me_1():\n    result = datetime.now()\n    label.config(text=f\"Current Time and Date: {result}\")\n\nbutton_1 = ttk.Button(root, text=\"Update Date and Time\", command=click_me_1)\nbutton_1.pack()\n\ndef click_me_2():\n    result = datetime.now().date()\n    label.config(text=f\"Today's Date: {result}\")\n\nbutton_2 = ttk.Button(root, text=\"Display Date Only\", command=click_me_2)\nbutton_2.pack()\n\nroot.mainloop()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI in Python with two buttons and a label that displays the current time and date.\n\n### Input:\n\n\n### Output:\nimport tkinter\nfrom tkinter import ttk\nfrom datetime import datetime\n\nroot = tkinter.Tk()\nroot.title = \"Time and Date\"\n\n# create a label\nlabel = ttk.Label(root, text=\"\")\nlabel.pack()\n\n# create two buttons\ndef click_me_1():\n    result = datetime.now()\n    label.config(text=f\"Current Time and Date: {result}\")\n\nbutton_1 = ttk.Button(root, text=\"Update Date and Time\", command=click_me_1)\nbutton_1.pack()\n\ndef click_me_2():\n    result = datetime.now().date()\n    label.config(text=f\"Today's Date: {result}\")\n\nbutton_2 = ttk.Button(root, text=\"Display Date Only\", command=click_me_2)\nbutton_2.pack()\n\nroot.mainloop()"}
{"instruction": "Write a function in Python to traverse an object and return a 2D list with all its children.", "input": "", "output": "def traverse_object(obj):\n    output = []\n    for key, value in obj.items():\n        if isinstance(value, dict):\n            output.append([key, traverse_object(value)])\n        elif isinstance(value, list):\n            output.append([key, traverse_list(value)])\n        else:\n            output.append([key, value])\n    return output\n\ndef traverse_list(lst):\n    output = []\n    for item in lst:\n        if isinstance(item, dict):\n            output.append(traverse_object(item))\n        elif isinstance(item, list):\n            output.append(traverse_list(item))\n        else:\n            output.append(item)\n    return output", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to traverse an object and return a 2D list with all its children.\n\n### Input:\n\n\n### Output:\ndef traverse_object(obj):\n    output = []\n    for key, value in obj.items():\n        if isinstance(value, dict):\n            output.append([key, traverse_object(value)])\n        elif isinstance(value, list):\n            output.append([key, traverse_list(value)])\n        else:\n            output.append([key, value])\n    return output\n\ndef traverse_list(lst):\n    output = []\n    for item in lst:\n        if isinstance(item, dict):\n            output.append(traverse_object(item))\n        elif isinstance(item, list):\n            output.append(traverse_list(item))\n        else:\n            output.append(item)\n    return output"}
{"instruction": "Design a neural network in Python to identify the characters in a given alphanumeric string.", "input": "", "output": "# Imports \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf\n\n# Data \ndata = pd.DataFrame(columns=['string'])\ndata = data.append({'string':'3aF5yD'}, ignore_index=True)\n\n# Neural Network Architecture \nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(input_dim=len(data.columns), output_dim=1, input_length=len(data.columns)),\n tf.keras.layers.LSTM(256, return_sequences=True),\n tf.keras.layers.Dense(32),\n tf.keras.layers.Dense(len(data), activation='softmax')\n])\n\n# Optimizer\nmodel.compile(optimizer='adam', loss='mse')\n\n# Train \nmodel.fit(data.values, epochs=10)\n\n# Prediction\npredictions = model.predict(data.values)\nprint(predictions)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to identify the characters in a given alphanumeric string.\n\n### Input:\n\n\n### Output:\n# Imports \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf\n\n# Data \ndata = pd.DataFrame(columns=['string'])\ndata = data.append({'string':'3aF5yD'}, ignore_index=True)\n\n# Neural Network Architecture \nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(input_dim=len(data.columns), output_dim=1, input_length=len(data.columns)),\n tf.keras.layers.LSTM(256, return_sequences=True),\n tf.keras.layers.Dense(32),\n tf.keras.layers.Dense(len(data), activation='softmax')\n])\n\n# Optimizer\nmodel.compile(optimizer='adam', loss='mse')\n\n# Train \nmodel.fit(data.values, epochs=10)\n\n# Prediction\npredictions = model.predict(data.values)\nprint(predictions)"}
{"instruction": "Create a program in Python to scrape all pages of a website and extract all URLs and titles.", "input": "", "output": "import requests\nimport re\nfrom bs4 import BeautifulSoup\n\ndef scrape_all_pages(url):\n    urls = []\n    titles = []\n    \n    while url:\n        response = requests.get(url)\n        html = response.text\n        soup = BeautifulSoup(html, 'html.parser')\n        for link in soup.find_all('a'):\n            if link.has_attr('href'):\n                absolute_url = link['href']\n                if re.match('^http', absolute_url):\n                    urls.append(absolute_url)\n                    titles.append(link.string)\n        url = soup.find('a', rel=\"next\")\n        if url:\n            url = url['href']\n    return urls, titles\n\nif __name__ == '__main__':\n    print(scrape_all_pages('https://www.example.com/'))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to scrape all pages of a website and extract all URLs and titles.\n\n### Input:\n\n\n### Output:\nimport requests\nimport re\nfrom bs4 import BeautifulSoup\n\ndef scrape_all_pages(url):\n    urls = []\n    titles = []\n    \n    while url:\n        response = requests.get(url)\n        html = response.text\n        soup = BeautifulSoup(html, 'html.parser')\n        for link in soup.find_all('a'):\n            if link.has_attr('href'):\n                absolute_url = link['href']\n                if re.match('^http', absolute_url):\n                    urls.append(absolute_url)\n                    titles.append(link.string)\n        url = soup.find('a', rel=\"next\")\n        if url:\n            url = url['href']\n    return urls, titles\n\nif __name__ == '__main__':\n    print(scrape_all_pages('https://www.example.com/'))"}
{"instruction": "Write a Python class to define a fraction and include methods to add and subtract fractions.", "input": "", "output": "class Fraction:\n\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def __add__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 + num2\n        return Fraction(numerator, denom)\n\n    def __sub__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 - num2\n        return Fraction(numerator, denom)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to define a fraction and include methods to add and subtract fractions.\n\n### Input:\n\n\n### Output:\nclass Fraction:\n\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def __add__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 + num2\n        return Fraction(numerator, denom)\n\n    def __sub__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 - num2\n        return Fraction(numerator, denom)"}
{"instruction": "Construct an efficient algorithm to find all prime numbers up to a given number N in Python.", "input": "", "output": "def sieve_of_eratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and initialize \n    #  all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    # Print all prime numbers \n    result = []\n    for p in range(2, n): \n        if prime[p]: \n            result.append(p) \n  \n    return result\n\nN = 100\nprint(\"All prime numbers up to\", N, \"are:\")\nprint(sieve_of_eratosthenes(N))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an efficient algorithm to find all prime numbers up to a given number N in Python.\n\n### Input:\n\n\n### Output:\ndef sieve_of_eratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and initialize \n    #  all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    # Print all prime numbers \n    result = []\n    for p in range(2, n): \n        if prime[p]: \n            result.append(p) \n  \n    return result\n\nN = 100\nprint(\"All prime numbers up to\", N, \"are:\")\nprint(sieve_of_eratosthenes(N))"}
{"instruction": "Write a Python code to find the number of unique paths from a given source to a destination.", "input": "", "output": "def num_unique_paths(m, n):\n    dp = [[0 for x in range(m)] for y in range(n)] \n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for j in range(m): \n        dp[0][j] = 1\n  \n    # Calculate count of paths for other \n    # cells in bottom-up manner using\n    # the recursive solution \n    for i in range(1, n): \n        for j in range(1, m): \n  \n            # By uncommenting the last\n            # part the code calculatest he total\n            # possible paths if the diagonal \n            # Movements are allowed \n            dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1]\n  \n    return dp[n-1][m-1]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the number of unique paths from a given source to a destination.\n\n### Input:\n\n\n### Output:\ndef num_unique_paths(m, n):\n    dp = [[0 for x in range(m)] for y in range(n)] \n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for j in range(m): \n        dp[0][j] = 1\n  \n    # Calculate count of paths for other \n    # cells in bottom-up manner using\n    # the recursive solution \n    for i in range(1, n): \n        for j in range(1, m): \n  \n            # By uncommenting the last\n            # part the code calculatest he total\n            # possible paths if the diagonal \n            # Movements are allowed \n            dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1]\n  \n    return dp[n-1][m-1]"}
{"instruction": "Develop a program using Python and TensorFlow to perform sentiment analysis of a given text.", "input": "", "output": "import tensorflow as tf \nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words=1000, oov_token=\"<OOV>\")\n\ntext = \"I am so excited to work on this project\"\n\ntokenizer.fit_on_texts([text])\n\nword_index = tokenizer.word_index \nsequences = tokenizer.texts_to_sequences([text])\n\npadded = pad_sequences(sequences, padding='post', maxlen=5)\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(len(word_index), 8, input_length=5),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid'),\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit([padded], [1], epochs=100)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program using Python and TensorFlow to perform sentiment analysis of a given text.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf \nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words=1000, oov_token=\"<OOV>\")\n\ntext = \"I am so excited to work on this project\"\n\ntokenizer.fit_on_texts([text])\n\nword_index = tokenizer.word_index \nsequences = tokenizer.texts_to_sequences([text])\n\npadded = pad_sequences(sequences, padding='post', maxlen=5)\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(len(word_index), 8, input_length=5),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid'),\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit([padded], [1], epochs=100)"}
{"instruction": "Develop a machine learning classifier in Python to identify whether an email is spam or not.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\n\n# Load the data\ndata = pd.read_csv('spam_data.csv')\n\n# Create features and target\nX = data['Text']\ny = data['Spam']\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2)\n\n# Vectorize the text using TF-IDF\nvectorizer = TfidfVectorizer()\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)\n\n# Create and train the model\nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# Print confusion matrix\nprint(confusion_matrix(y_test, y_pred))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning classifier in Python to identify whether an email is spam or not.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\n\n# Load the data\ndata = pd.read_csv('spam_data.csv')\n\n# Create features and target\nX = data['Text']\ny = data['Spam']\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2)\n\n# Vectorize the text using TF-IDF\nvectorizer = TfidfVectorizer()\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)\n\n# Create and train the model\nmodel = MultinomialNB()\nmodel.fit(X_train_tfidf, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test_tfidf)\n\n# Print confusion matrix\nprint(confusion_matrix(y_test, y_pred))"}
{"instruction": "Can you build a neural network model in Python that classifies a set of hand-written digits?", "input": "", "output": "# Import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist \nfrom keras.models import Sequential\nfrom keras.layers import Dense \n\n# Load the datasets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Reshape the input\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Build a fully-connected neural network \nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=784))\nmodel.add(Dense(units=10, activation='softmax'))\n\n# Compile the model \nmodel.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, batch_size=32, epochs=3, verbose=1)\n\n# Test the model by evaluating on the test data \nscore = model.evaluate(X_test, y_test, verbose=1)\n\n# Summary \nprint(\"Test accuracy: \", score[1])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you build a neural network model in Python that classifies a set of hand-written digits?\n\n### Input:\n\n\n### Output:\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist \nfrom keras.models import Sequential\nfrom keras.layers import Dense \n\n# Load the datasets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Reshape the input\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Build a fully-connected neural network \nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=784))\nmodel.add(Dense(units=10, activation='softmax'))\n\n# Compile the model \nmodel.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, batch_size=32, epochs=3, verbose=1)\n\n# Test the model by evaluating on the test data \nscore = model.evaluate(X_test, y_test, verbose=1)\n\n# Summary \nprint(\"Test accuracy: \", score[1])"}
{"instruction": "Can you develop an ML model to predict the next number in a Fibonacci sequence using Python?", "input": "", "output": "# import required packages\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define Fibonacci sequence\ndef fibonacci_sequence(length):\n    fibonacci_nums = [1,1]\n    for i in range(length-2):\n        fibonacci_nums.append(fibonacci_nums[i]+fibonacci_nums[i+1])\n    return np.array(fibonacci_nums)\n\n# define model\nmodel = Sequential()\nmodel.add(Dense(1, input_dim=len(fibonacci_sequence(8)), activation='linear'))\n\n# compile model\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n\n# fit model\nmodel.fit(fibonacci_sequence(8).reshape(7,1), fibonacci_sequence(9)[1:], epochs=500, batch_size=2, verbose=0)\n\n#predict next number\nnext_num = model.predict(fibonacci_sequence(10).reshape(9,1))\n\n# print the result\nprint('The next number from the Fibonacci sequence is: ', next_num[-1][0])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop an ML model to predict the next number in a Fibonacci sequence using Python?\n\n### Input:\n\n\n### Output:\n# import required packages\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define Fibonacci sequence\ndef fibonacci_sequence(length):\n    fibonacci_nums = [1,1]\n    for i in range(length-2):\n        fibonacci_nums.append(fibonacci_nums[i]+fibonacci_nums[i+1])\n    return np.array(fibonacci_nums)\n\n# define model\nmodel = Sequential()\nmodel.add(Dense(1, input_dim=len(fibonacci_sequence(8)), activation='linear'))\n\n# compile model\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n\n# fit model\nmodel.fit(fibonacci_sequence(8).reshape(7,1), fibonacci_sequence(9)[1:], epochs=500, batch_size=2, verbose=0)\n\n#predict next number\nnext_num = model.predict(fibonacci_sequence(10).reshape(9,1))\n\n# print the result\nprint('The next number from the Fibonacci sequence is: ', next_num[-1][0])"}
{"instruction": "Create a multiplayer online game in Python that allows 2 players to play against each other.", "input": "", "output": "\"\"\"\nCreating a Multiplayer Online Game in Python\n\"\"\"\n\nimport time\nimport random\n\n# Initializing the game\nplayers = []\n\n# Defining a function for playing the game\ndef play_game(player_1, player_2):\n    # Give both players 5 seconds to choose a number between 1 and 10\n    time.sleep(5)\n    player_1_num = random.randint(1, 10)\n    player_2_num = random.randint(1, 10)\n\n    # Check to see who won\n    if player_1_num > player_2_num:\n        print(\"Player 1 (\" + player_1 + \") wins!\")\n    elif player_2_num > player_1_num:\n        print(\"Player 2 (\" + player_2 + \") wins!\")\n    else:\n        print(\"It's a draw!\")\n\n# Defining a function to add two players\ndef add_player(player):\n    players.append(player)\n    if len(players) == 2:\n        play_game(players[0], players[1])\n\n# Start the game\nprint(\"Welcome to the game! Type 'add_player()' to add your name to the game.\")", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a multiplayer online game in Python that allows 2 players to play against each other.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreating a Multiplayer Online Game in Python\n\"\"\"\n\nimport time\nimport random\n\n# Initializing the game\nplayers = []\n\n# Defining a function for playing the game\ndef play_game(player_1, player_2):\n    # Give both players 5 seconds to choose a number between 1 and 10\n    time.sleep(5)\n    player_1_num = random.randint(1, 10)\n    player_2_num = random.randint(1, 10)\n\n    # Check to see who won\n    if player_1_num > player_2_num:\n        print(\"Player 1 (\" + player_1 + \") wins!\")\n    elif player_2_num > player_1_num:\n        print(\"Player 2 (\" + player_2 + \") wins!\")\n    else:\n        print(\"It's a draw!\")\n\n# Defining a function to add two players\ndef add_player(player):\n    players.append(player)\n    if len(players) == 2:\n        play_game(players[0], players[1])\n\n# Start the game\nprint(\"Welcome to the game! Type 'add_player()' to add your name to the game.\")"}
{"instruction": "Create a neural network in Python for handwritten digit recognition using the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# Load the MNIST dataset\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# Inputs and Outputs\nx = tf.placeholder(tf.float32, [None, 784])\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Neural Network Model\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax Output\ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cost Function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\nsess.run(init)\n\n# Train\nfor i in range(10000):\n  batch_xs, batch_ys = mnist.train.next_batch(100)\n  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python for handwritten digit recognition using the MNIST dataset.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# Load the MNIST dataset\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# Inputs and Outputs\nx = tf.placeholder(tf.float32, [None, 784])\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Neural Network Model\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax Output\ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cost Function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\nsess.run(init)\n\n# Train\nfor i in range(10000):\n  batch_xs, batch_ys = mnist.train.next_batch(100)\n  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))"}
{"instruction": "Formulate a heuristic search algorithm in python to find a solution in the 8-puzzle problem.", "input": "", "output": "def heuristicSearch(initialState, goalState):\n    # Initialize visited states set to empty set\n    visitedStates = set()\n    \n    # Initialize fringe (or open list) to the initial state\n    fringe = []\n    fringe.append(initialState)\n    \n    # Initialize cost to 0\n    cost = 0\n    \n    while len(fringe) > 0:\n        currentState = fringe.pop()\n        \n        # Check if goal state is reached\n        if currentState == goalState:\n            return cost\n        \n        # Add current node to visited set\n        visitedStates.add(currentState)\n        \n        # Generate all possible neighbors from the current node\n        neighbors = generateNeighbors(currentState)\n        \n        # Iterate through all neighbors\n        for neighbor in neighbors:\n            # Calculate heuristic (number of misplaced tiles)\n            heuristicValue = numberOfMisplacedTiles(neighbor, goalState)\n            \n            # Add the neighbor to fringe (open list) if it is not visited\n            if neighbor not in visitedStates:\n                fringe.append(neighbor)\n                cost += heuristicValue\n                \n    return None", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a heuristic search algorithm in python to find a solution in the 8-puzzle problem.\n\n### Input:\n\n\n### Output:\ndef heuristicSearch(initialState, goalState):\n    # Initialize visited states set to empty set\n    visitedStates = set()\n    \n    # Initialize fringe (or open list) to the initial state\n    fringe = []\n    fringe.append(initialState)\n    \n    # Initialize cost to 0\n    cost = 0\n    \n    while len(fringe) > 0:\n        currentState = fringe.pop()\n        \n        # Check if goal state is reached\n        if currentState == goalState:\n            return cost\n        \n        # Add current node to visited set\n        visitedStates.add(currentState)\n        \n        # Generate all possible neighbors from the current node\n        neighbors = generateNeighbors(currentState)\n        \n        # Iterate through all neighbors\n        for neighbor in neighbors:\n            # Calculate heuristic (number of misplaced tiles)\n            heuristicValue = numberOfMisplacedTiles(neighbor, goalState)\n            \n            # Add the neighbor to fringe (open list) if it is not visited\n            if neighbor not in visitedStates:\n                fringe.append(neighbor)\n                cost += heuristicValue\n                \n    return None"}
{"instruction": "Using Python, create a code to predict the next three days temperature from a given dataset.", "input": "", "output": "# Importing the essential libraries \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import PolynomialFeatures  \nimport numpy as np \nimport pandas as pd \n\n# Loading the dataset \ndf = pd.read_csv('dataset.csv') \n\n# Separating dependent and independent variables \nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\n# Splitting into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1) \n\n# Fitting a polynomial to the model \npolynomial_model = PolynomialFeatures(degree = 4)\nX_poly = polynomial_model.fit_transform(X_train)\npoly_reg = LinearRegression() \npoly_reg.fit(X_poly, y_train)\n\n# Predicting the next three days temperatures \nX_next_three_days = np.array([[+2.00], \n ] + [[+2.25], \n ] + [[+2.50]]).reshape(3,1)\nX_poly_next_three_days = polynomial_model.fit_transform(X_next_three_days )\n \npred_temp_next_three_days = poly_reg.predict(X_poly_next_three_days) \n \n# Printing the predictions\nprint(\"The predicted temperature for the next three days:\", pred_temp_next_three_days)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a code to predict the next three days temperature from a given dataset.\n\n### Input:\n\n\n### Output:\n# Importing the essential libraries \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import PolynomialFeatures  \nimport numpy as np \nimport pandas as pd \n\n# Loading the dataset \ndf = pd.read_csv('dataset.csv') \n\n# Separating dependent and independent variables \nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\n# Splitting into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1) \n\n# Fitting a polynomial to the model \npolynomial_model = PolynomialFeatures(degree = 4)\nX_poly = polynomial_model.fit_transform(X_train)\npoly_reg = LinearRegression() \npoly_reg.fit(X_poly, y_train)\n\n# Predicting the next three days temperatures \nX_next_three_days = np.array([[+2.00], \n ] + [[+2.25], \n ] + [[+2.50]]).reshape(3,1)\nX_poly_next_three_days = polynomial_model.fit_transform(X_next_three_days )\n \npred_temp_next_three_days = poly_reg.predict(X_poly_next_three_days) \n \n# Printing the predictions\nprint(\"The predicted temperature for the next three days:\", pred_temp_next_three_days)"}
{"instruction": "Create a machine learning model in Python that classifies the sentiment in a given sentence.", "input": "", "output": "# Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative')", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that classifies the sentiment in a given sentence.\n\n### Input:\n\n\n### Output:\n# Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative')"}
{"instruction": "Train a neural network model in Python to identify whether a given animal is a cat or a dog.", "input": "", "output": "import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, MaxPool2D, Conv2D, Flatten \nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Setting up the parameters\nimg_width, img_height = 150, 150 \nbatch_size = 32 \nepochs = 10 \n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3,3), activation='relu', input_shape=(img_width, img_height, 3)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(32, (3,3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"rmsprop\", metrics=['accuracy'])\n\n# Data preprocessing\ntrain_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\ntrain_generator = train_datagen.flow_from_directory('data/train', target_size=(150,150), batch_size=batch_size, class_mode='binary')\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntest_generator = test_datagen.flow_from_directory('data/test',  target_size=(150,150), batch_size=batch_size, class_mode='binary')\n\n# Training the model\nmodel.fit_generator(\n    train_generator,\n    steps_per_epoch=500,\n    epochs=epochs,\n    validation_data=test_generator,\n    validation_steps=100\n)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a neural network model in Python to identify whether a given animal is a cat or a dog.\n\n### Input:\n\n\n### Output:\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, MaxPool2D, Conv2D, Flatten \nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Setting up the parameters\nimg_width, img_height = 150, 150 \nbatch_size = 32 \nepochs = 10 \n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3,3), activation='relu', input_shape=(img_width, img_height, 3)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(32, (3,3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"rmsprop\", metrics=['accuracy'])\n\n# Data preprocessing\ntrain_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\ntrain_generator = train_datagen.flow_from_directory('data/train', target_size=(150,150), batch_size=batch_size, class_mode='binary')\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntest_generator = test_datagen.flow_from_directory('data/test',  target_size=(150,150), batch_size=batch_size, class_mode='binary')\n\n# Training the model\nmodel.fit_generator(\n    train_generator,\n    steps_per_epoch=500,\n    epochs=epochs,\n    validation_data=test_generator,\n    validation_steps=100\n)"}
{"instruction": "Develop an algorithm in Python to check if a given string is anagram of another given string.", "input": "", "output": "def is_anagram(str1, str2): \n    # Get length of both strings  \n    n1 = len(str1)  \n    n2 = len(str2) \n  \n    # If both strings have different length, then they  \n    # are not anagrams \n    if n1 != n2: \n        return 0\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return 0\n  \n    return 1", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to check if a given string is anagram of another given string.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2): \n    # Get length of both strings  \n    n1 = len(str1)  \n    n2 = len(str2) \n  \n    # If both strings have different length, then they  \n    # are not anagrams \n    if n1 != n2: \n        return 0\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return 0\n  \n    return 1"}
{"instruction": "Create a code snippet in Python that finds the longest common substring in two given strings.", "input": "", "output": "def longest_common_substring(s1, s2):\n  len1, len2 = len(s1), len(s2)\n  table = [[0 for _ in range(len2+1)] for _ in range(len1+1)] #2-D array\n  longest, x_longest = 0, 0\n\n  for x in range(1, len1+1):\n    for y in range(1, len2+1):\n      if s1[x-1] == s2[y-1]:\n        table[x][y] = table[x-1][y-1] + 1\n        if table[x][y] > longest:\n          longest = table[x][y]\n          x_longest = x\n      else:\n        table[x][y] = 0\n\n  return s1[x_longest - longest: x_longest]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code snippet in Python that finds the longest common substring in two given strings.\n\n### Input:\n\n\n### Output:\ndef longest_common_substring(s1, s2):\n  len1, len2 = len(s1), len(s2)\n  table = [[0 for _ in range(len2+1)] for _ in range(len1+1)] #2-D array\n  longest, x_longest = 0, 0\n\n  for x in range(1, len1+1):\n    for y in range(1, len2+1):\n      if s1[x-1] == s2[y-1]:\n        table[x][y] = table[x-1][y-1] + 1\n        if table[x][y] > longest:\n          longest = table[x][y]\n          x_longest = x\n      else:\n        table[x][y] = 0\n\n  return s1[x_longest - longest: x_longest]"}
{"instruction": "Develop a command line interface using Python for the user to interact with a given database.", "input": "", "output": "import sqlite3\n\ndef get_connection():\n    # connects to a database given the database name\n    conn = sqlite3.connect(\"my_database.db\")\n    return conn\n\ndef run_command():\n    # takes a command from the user and runs it in the SQL database\n    query = input(\"Enter your command: \")\n    conn = get_connection()\n    c = conn.cursor()\n    c.execute(query)\n    results = c.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    results = run_command()\n    print(results)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a command line interface using Python for the user to interact with a given database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\ndef get_connection():\n    # connects to a database given the database name\n    conn = sqlite3.connect(\"my_database.db\")\n    return conn\n\ndef run_command():\n    # takes a command from the user and runs it in the SQL database\n    query = input(\"Enter your command: \")\n    conn = get_connection()\n    c = conn.cursor()\n    c.execute(query)\n    results = c.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    results = run_command()\n    print(results)"}
{"instruction": "Create a Python class for a Rectangle that has two sides, and methods for area and perimeter.", "input": "", "output": "\"\"\"\nCreate a Python class for a Rectangle that has two sides, and methods for area and perimeter\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, side1, side2):\n        self.side1 = side1\n        self.side2 = side2\n        \n    def area(self):\n        return self.side1 * self.side2\n    \n    def perimeter(self):\n        return 2*self.side1 + 2*self.side2\n\nif __name__ == '__main__':\n    r = Rectangle(3, 4)\n    print(\"Area: {}\".format(r.area()))\n    print(\"Perimeter: {}\".format(r.perimeter()))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Rectangle that has two sides, and methods for area and perimeter.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python class for a Rectangle that has two sides, and methods for area and perimeter\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, side1, side2):\n        self.side1 = side1\n        self.side2 = side2\n        \n    def area(self):\n        return self.side1 * self.side2\n    \n    def perimeter(self):\n        return 2*self.side1 + 2*self.side2\n\nif __name__ == '__main__':\n    r = Rectangle(3, 4)\n    print(\"Area: {}\".format(r.area()))\n    print(\"Perimeter: {}\".format(r.perimeter()))"}
{"instruction": "Generate a function in Python to compare two strings and determine whether they are anagrams.", "input": "", "output": "def is_anagram(str1, str2): \n    # space complexity O(1) \n    count = [0] * 26\n        \n    # count occurances of character in first string \n    for i in range(len(str1)): \n            count[ord(str1[i]) - ord('a')] += 1\n                \n    # subtracting count for each character of second string \n    for i in range(len(str2)): \n            count[ord(str2[i]) - ord('a')] -= 1\n                \n    # If both strings are anagrams, all counts should be 0 \n    for i in range(26):             \n            if (count[i] != 0): \n                return False\n\n    return True", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to compare two strings and determine whether they are anagrams.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2): \n    # space complexity O(1) \n    count = [0] * 26\n        \n    # count occurances of character in first string \n    for i in range(len(str1)): \n            count[ord(str1[i]) - ord('a')] += 1\n                \n    # subtracting count for each character of second string \n    for i in range(len(str2)): \n            count[ord(str2[i]) - ord('a')] -= 1\n                \n    # If both strings are anagrams, all counts should be 0 \n    for i in range(26):             \n            if (count[i] != 0): \n                return False\n\n    return True"}
{"instruction": "Write a Python program that takes an input string as an argument and prints all its anagrams.", "input": "", "output": "def is_anagram(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False\n    for c in s1:\n        if c not in s2:\n            return False\n    for c in s2:\n        if c not in s1:\n            return False\n    return True\n\ndef get_anagrams(string):\n    anagrams = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if i == j:\n                continue\n            s1 = string[i:j+1]\n            s2 = string[:i] + string[j+1:]\n            if is_anagram(s1, s2):\n                anagrams.append(s2)\n    return anagrams", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes an input string as an argument and prints all its anagrams.\n\n### Input:\n\n\n### Output:\ndef is_anagram(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False\n    for c in s1:\n        if c not in s2:\n            return False\n    for c in s2:\n        if c not in s1:\n            return False\n    return True\n\ndef get_anagrams(string):\n    anagrams = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if i == j:\n                continue\n            s1 = string[i:j+1]\n            s2 = string[:i] + string[j+1:]\n            if is_anagram(s1, s2):\n                anagrams.append(s2)\n    return anagrams"}
{"instruction": "Write a python script that reads a text document and prints the 10 most frequently used words", "input": "", "output": "# Read the file\nwith open('text.txt') as f:\n    # Get all the words from the file\n    words = f.read().split()\n\n# Count the frequency of each word\nword_frequencies = {}\nfor word in words:\n    if word not in word_frequencies:\n        word_frequencies[word] = 1\n    else:\n        word_frequencies[word] += 1\n\n# Sort the words based on their frequencies\nsorted_words = sorted(word_frequencies.items(), key = lambda wf: wf[1], reverse=True)\n\n# Print the 10 most frequently used words\nprint('10 most frequent words: ', end = '')\nfor i in range(10):\n    print(sorted_words[i][0] + (\",\" if i != 9 else \".\"))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that reads a text document and prints the 10 most frequently used words\n\n### Input:\n\n\n### Output:\n# Read the file\nwith open('text.txt') as f:\n    # Get all the words from the file\n    words = f.read().split()\n\n# Count the frequency of each word\nword_frequencies = {}\nfor word in words:\n    if word not in word_frequencies:\n        word_frequencies[word] = 1\n    else:\n        word_frequencies[word] += 1\n\n# Sort the words based on their frequencies\nsorted_words = sorted(word_frequencies.items(), key = lambda wf: wf[1], reverse=True)\n\n# Print the 10 most frequently used words\nprint('10 most frequent words: ', end = '')\nfor i in range(10):\n    print(sorted_words[i][0] + (\",\" if i != 9 else \".\"))"}
{"instruction": "Create a Python script that sends an e-mail notification when the server is under heavy load.", "input": "", "output": "import smtplib\n\n# Functions for getting the server load\ndef get_load_average():\n    with open('/proc/loadavg', 'r') as f:\n        return float(f.readline().split()[0])\n\n# Variable to store the upper threshold for server loading\nMAX_LOAD = 0.8\n\n# Get the current load\ncurrent_load = get_load_average()\nif current_load > MAX_LOAD:\n    # Create SMTP object\n    server = smtplib.SMTP('smtp.example.com', 587)\n    server.starttls()\n    receiver = 'admin@example.com'\n    message = 'Server is under heavy load: ' + str(current_load)\n    server.sendmail('monitor@example.com', receiver, message)\n    server.quit()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that sends an e-mail notification when the server is under heavy load.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\n# Functions for getting the server load\ndef get_load_average():\n    with open('/proc/loadavg', 'r') as f:\n        return float(f.readline().split()[0])\n\n# Variable to store the upper threshold for server loading\nMAX_LOAD = 0.8\n\n# Get the current load\ncurrent_load = get_load_average()\nif current_load > MAX_LOAD:\n    # Create SMTP object\n    server = smtplib.SMTP('smtp.example.com', 587)\n    server.starttls()\n    receiver = 'admin@example.com'\n    message = 'Server is under heavy load: ' + str(current_load)\n    server.sendmail('monitor@example.com', receiver, message)\n    server.quit()"}
{"instruction": "Create a Python script to build a machine learning model to predict MPG from an auto dataset.", "input": "", "output": "# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n# Read in the auto dataset\ndf = pd.read_csv('auto.csv')\n\n# Get the features and labels\nX = df.drop(columns='mpg')\ny = df['mpg']\n\n# Split into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the linear regressor\nlr = LinearRegression()\n\n# Train the model\nlr.fit(X_train,y_train)\n\n# Get the predictions\npreds = lr.predict(X_test)\n\n# Calculate the R2 score\nr2 = r2_score(y_test, preds)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to build a machine learning model to predict MPG from an auto dataset.\n\n### Input:\n\n\n### Output:\n# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n# Read in the auto dataset\ndf = pd.read_csv('auto.csv')\n\n# Get the features and labels\nX = df.drop(columns='mpg')\ny = df['mpg']\n\n# Split into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the linear regressor\nlr = LinearRegression()\n\n# Train the model\nlr.fit(X_train,y_train)\n\n# Get the predictions\npreds = lr.predict(X_test)\n\n# Calculate the R2 score\nr2 = r2_score(y_test, preds)"}
{"instruction": "Develop a Python routine that can simulate the backend of a website that has a shopping cart.", "input": "", "output": "# Initalize a shopping cart dictionary\nshopping_cart = {}\n\n# Function to add an item to the shopping cart\ndef add_item_to_cart(item, quantity):\n    if item in shopping_cart:\n        shopping_cart[item] += quantity\n    else:\n        shopping_cart[item] = quantity\n\n# Function to remove an item from the shopping cart\ndef remove_item_from_cart(item):\n    if item in shopping_cart:\n        del shopping_cart[item]\n\n# Function to calculate the total price\ndef calculate_total():\n    total = 0\n    for item, quantity in shopping_cart.items():\n        total += item.price * quantity\n        \n    return total\n\n# Function to clear the shopping cart\ndef clear_cart():\n    shopping_cart.clear()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python routine that can simulate the backend of a website that has a shopping cart.\n\n### Input:\n\n\n### Output:\n# Initalize a shopping cart dictionary\nshopping_cart = {}\n\n# Function to add an item to the shopping cart\ndef add_item_to_cart(item, quantity):\n    if item in shopping_cart:\n        shopping_cart[item] += quantity\n    else:\n        shopping_cart[item] = quantity\n\n# Function to remove an item from the shopping cart\ndef remove_item_from_cart(item):\n    if item in shopping_cart:\n        del shopping_cart[item]\n\n# Function to calculate the total price\ndef calculate_total():\n    total = 0\n    for item, quantity in shopping_cart.items():\n        total += item.price * quantity\n        \n    return total\n\n# Function to clear the shopping cart\ndef clear_cart():\n    shopping_cart.clear()"}
{"instruction": "Can you develop a functioning website using Python with a database and a form for user input?", "input": "", "output": "# Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a functioning website using Python with a database and a form for user input?\n\n### Input:\n\n\n### Output:\n# Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True)"}
{"instruction": "Create a Python class for a Matrix with overloaded operators for addition and multiplication.", "input": "", "output": "class Matrix:\n def __init__(self, matrix):\n self.matrix = matrix\n\ndef __add__(self, other):\n if len(self.matrix) != len(other.matrix):\n raise ValueError(\"The matrixes must have the same size!\")\n result = [[0 for x in range(len(self.matrix[0]))] for y in range(len(self.matrix))]\n for i in range(len(self.matrix)):\n for j in range(len(self.matrix[i])):\n result[i][j] = self.matrix[i][j] + other.matrix[i][j]\n return result\n\ndef __mul__(self, other):\n if len(self.matrix[0]) != len(other.matrix):\n raise ValueError(\"The matrixes' columns of the first matrix must match the rows of the second matrix!\")\n result = [[0 for x in range(len(other.matrix[0]))] for y in range(len(self.matrix))]\n for i in range(len(self.matrix)):\n for j in range(len(other.matrix[0])):\n for k in range(len(other.matrix)):\n result[i][j] += self.matrix[i][k] * other.matrix[k][j]\n return result", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Matrix with overloaded operators for addition and multiplication.\n\n### Input:\n\n\n### Output:\nclass Matrix:\n def __init__(self, matrix):\n self.matrix = matrix\n\ndef __add__(self, other):\n if len(self.matrix) != len(other.matrix):\n raise ValueError(\"The matrixes must have the same size!\")\n result = [[0 for x in range(len(self.matrix[0]))] for y in range(len(self.matrix))]\n for i in range(len(self.matrix)):\n for j in range(len(self.matrix[i])):\n result[i][j] = self.matrix[i][j] + other.matrix[i][j]\n return result\n\ndef __mul__(self, other):\n if len(self.matrix[0]) != len(other.matrix):\n raise ValueError(\"The matrixes' columns of the first matrix must match the rows of the second matrix!\")\n result = [[0 for x in range(len(other.matrix[0]))] for y in range(len(self.matrix))]\n for i in range(len(self.matrix)):\n for j in range(len(other.matrix[0])):\n for k in range(len(other.matrix)):\n result[i][j] += self.matrix[i][k] * other.matrix[k][j]\n return result"}
{"instruction": "Generate a Python function to convert a given time in 24-hour format to 12-hour AM/PM format.", "input": "", "output": "def convert_time_format(time):\n    \"\"\"\n    Converts a given time in 24-hour format to 12-hour AM/PM format.\n    \n    Args:\n        time (str): The time in 24-hour format.\n    \n    Return:\n        str: The converted time in 12-hour AM/PM format.\n    \"\"\"\n\n    # Extract the hour and minutes\n    hour, minutes = int(time.split(':')[0]), int(time.split(':')[1])\n    \n    # Check for Edge Cases\n    if hour > 12:\n        hour -= 12\n        pm = True\n    elif hour == 0:\n        hour = 12\n        pm = False\n    elif hour == 12:\n        pm = True\n    else:\n        pm = False\n\n    # Format the time\n    if minutes < 10:\n        time_formatted = '{}:0{} '.format(hour, minutes)\n    else:\n        time_formatted = '{}:{} '.format(hour, minutes)\n\n    # Add the PM/AM marker\n    if pm:\n        time_formatted += 'PM'\n    else: \n        time_formatted += 'AM'\n    \n    return time_formatted", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to convert a given time in 24-hour format to 12-hour AM/PM format.\n\n### Input:\n\n\n### Output:\ndef convert_time_format(time):\n    \"\"\"\n    Converts a given time in 24-hour format to 12-hour AM/PM format.\n    \n    Args:\n        time (str): The time in 24-hour format.\n    \n    Return:\n        str: The converted time in 12-hour AM/PM format.\n    \"\"\"\n\n    # Extract the hour and minutes\n    hour, minutes = int(time.split(':')[0]), int(time.split(':')[1])\n    \n    # Check for Edge Cases\n    if hour > 12:\n        hour -= 12\n        pm = True\n    elif hour == 0:\n        hour = 12\n        pm = False\n    elif hour == 12:\n        pm = True\n    else:\n        pm = False\n\n    # Format the time\n    if minutes < 10:\n        time_formatted = '{}:0{} '.format(hour, minutes)\n    else:\n        time_formatted = '{}:{} '.format(hour, minutes)\n\n    # Add the PM/AM marker\n    if pm:\n        time_formatted += 'PM'\n    else: \n        time_formatted += 'AM'\n    \n    return time_formatted"}
{"instruction": "Design a Python class for an Employee, containing person's name, age, salary, and designation.", "input": "", "output": "class Employee: \n    def __init__(self, name, age, salary, designation): \n        self.name = name \n        self.age = age \n        self.salary = salary \n        self.designation = designation \n  \n    def get_details(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation \n  \n    def __str__(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for an Employee, containing person's name, age, salary, and designation.\n\n### Input:\n\n\n### Output:\nclass Employee: \n    def __init__(self, name, age, salary, designation): \n        self.name = name \n        self.age = age \n        self.salary = salary \n        self.designation = designation \n  \n    def get_details(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation \n  \n    def __str__(self): \n        return self.name + \" \" + str(self.age) + \" \" + str(self.salary) + \" \" + self.designation"}
{"instruction": "Enumerate several simple programming solutions to compute the factorial of a number in Python.", "input": "", "output": "\"\"\"\nEnumerate several simple programming solutions to compute the factorial of a number in Python\n\"\"\" \n\n# Solution 1: Using a loop \ndef factorial_1(n):\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact\n\n# Solution 2: Using recursion \ndef factorial_2(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_2(n-1)\n\n# Solution 3: Using math library\nimport math \ndef factorial_3(n):\n    return math.factorial(n)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEnumerate several simple programming solutions to compute the factorial of a number in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nEnumerate several simple programming solutions to compute the factorial of a number in Python\n\"\"\" \n\n# Solution 1: Using a loop \ndef factorial_1(n):\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact\n\n# Solution 2: Using recursion \ndef factorial_2(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_2(n-1)\n\n# Solution 3: Using math library\nimport math \ndef factorial_3(n):\n    return math.factorial(n)"}
{"instruction": "Create a data extraction program in Python code to extract information from an online database", "input": "", "output": "import requests\nimport pandas as pd\n\ndef extract_data(url,query_parameters):\n    '''Function to extract data from the given url with the given query parameters'''\n    # Execute the query\n    response = requests.get(url,params=query_parameters)\n \n    # Check the status code of the response\n    if(response.status_code==200):\n        # If the response is OK, Convert the response to pandas dataframe\n        df = pd.DataFrame(response.json())\n        return df", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data extraction program in Python code to extract information from an online database\n\n### Input:\n\n\n### Output:\nimport requests\nimport pandas as pd\n\ndef extract_data(url,query_parameters):\n    '''Function to extract data from the given url with the given query parameters'''\n    # Execute the query\n    response = requests.get(url,params=query_parameters)\n \n    # Check the status code of the response\n    if(response.status_code==200):\n        # If the response is OK, Convert the response to pandas dataframe\n        df = pd.DataFrame(response.json())\n        return df"}
{"instruction": "In Python, generate a 3 layer feed-forward neural network for a binary classification problem.", "input": "", "output": "# import necessary libraries\nimport numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# define model\nmodel = Sequential()\n# first layer\nmodel.add(Dense(16, activation='relu', input_dim=2))\n# second layer\nmodel.add(Dense(8, activation='relu'))\n# output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, generate a 3 layer feed-forward neural network for a binary classification problem.\n\n### Input:\n\n\n### Output:\n# import necessary libraries\nimport numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# define model\nmodel = Sequential()\n# first layer\nmodel.add(Dense(16, activation='relu', input_dim=2))\n# second layer\nmodel.add(Dense(8, activation='relu'))\n# output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])"}
{"instruction": "Write a Python function to calculate the sum of all the amicable numbers within a given range.", "input": "", "output": "def sum_amicable_numbers(start, end):\n amicable_sum = 0\n \n for num in range(start, end + 1):\n divisors = get_divisors(num)\n div_sum = sum(divisors)\n other_divisors = get_divisors(div_sum)\n other_div_sum = sum(other_divisors)\n \n if other_div_sum == num and num != div_sum:\n amicable_sum += num\n  \n return amicable_sum\n \n def get_divisors(num):\n divisors = []\n \n for i in range(1, int(num/2) + 1):\n if num % i == 0:\n divisors.append(i)\n \n return divisors\n\nsum_amicable_numbers(1, 10000)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the sum of all the amicable numbers within a given range.\n\n### Input:\n\n\n### Output:\ndef sum_amicable_numbers(start, end):\n amicable_sum = 0\n \n for num in range(start, end + 1):\n divisors = get_divisors(num)\n div_sum = sum(divisors)\n other_divisors = get_divisors(div_sum)\n other_div_sum = sum(other_divisors)\n \n if other_div_sum == num and num != div_sum:\n amicable_sum += num\n  \n return amicable_sum\n \n def get_divisors(num):\n divisors = []\n \n for i in range(1, int(num/2) + 1):\n if num % i == 0:\n divisors.append(i)\n \n return divisors\n\nsum_amicable_numbers(1, 10000)"}
{"instruction": "Create a Python class to represent a circle having radius, color and area as its data members.", "input": "", "output": "class Circle:\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n        self.area = 3.14 * (radius**2)\n\n    def get_radius(self):\n        return self.radius\n    \n    def get_color(self):\n        return self.color\n    \n    def get_area(self):\n        return self.area\n\nif __name__ == '__main__':\n    c = Circle(4, 'blue')\n    print(\"Radius of circle:\", c.get_radius())\n    print(\"Color of circle:\", c.get_color())\n    print(\"Area of circle:\", c.get_area())", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a circle having radius, color and area as its data members.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n        self.area = 3.14 * (radius**2)\n\n    def get_radius(self):\n        return self.radius\n    \n    def get_color(self):\n        return self.color\n    \n    def get_area(self):\n        return self.area\n\nif __name__ == '__main__':\n    c = Circle(4, 'blue')\n    print(\"Radius of circle:\", c.get_radius())\n    print(\"Color of circle:\", c.get_color())\n    print(\"Area of circle:\", c.get_area())"}
{"instruction": "Design a neural network in Python with two hidden layers to solve a given classification task.", "input": "", "output": "import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(units=200, input_dim=2, activation='relu'))\nmodel.add(Dense(units=200, activation='relu'))\nmodel.add(Dense(units=1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X, y, epochs=1500, batch_size=128)\n\n# evaluate the model\nscores = model.evaluate(X, y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python with two hidden layers to solve a given classification task.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(units=200, input_dim=2, activation='relu'))\nmodel.add(Dense(units=200, activation='relu'))\nmodel.add(Dense(units=1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X, y, epochs=1500, batch_size=128)\n\n# evaluate the model\nscores = model.evaluate(X, y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))"}
{"instruction": "Create a web application using Python and Flask that displays the temperature of a given city.", "input": "", "output": "from flask import Flask, render_template\nimport requests\n\n#initialise flask application\napp = Flask(__name__)\n\n@app.route('/weather')\ndef show_weather():\n   #get json weather data from api\n   url = 'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=YOUR_API_KEY'\n   response = requests.get(url)\n   data = response.json()\n   \n   #extract temperature from json data\n   temp = data['main']['temp']\n   #convert temperature from kelvin to Celsius\n   temp_celsius = temp - 273.15\n\n   #render template with temperature\n   return render_template('weather.html', temp=temp_celsius)\n\nif __name__ == '__main__':\n   app.run(debug=True, port=3000)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Python and Flask that displays the temperature of a given city.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, render_template\nimport requests\n\n#initialise flask application\napp = Flask(__name__)\n\n@app.route('/weather')\ndef show_weather():\n   #get json weather data from api\n   url = 'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=YOUR_API_KEY'\n   response = requests.get(url)\n   data = response.json()\n   \n   #extract temperature from json data\n   temp = data['main']['temp']\n   #convert temperature from kelvin to Celsius\n   temp_celsius = temp - 273.15\n\n   #render template with temperature\n   return render_template('weather.html', temp=temp_celsius)\n\nif __name__ == '__main__':\n   app.run(debug=True, port=3000)"}
{"instruction": "Create a Python script to classify a given text into positive and negative sentiment using ML.", "input": "", "output": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Data\ntexts = ['This is an amazing day!', 'I am feeling sad today.']\nlabels = [1, 0] # 1 = positive sentiment and 0 = negative sentiment\n\n# Vectorizing the texts\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(texts)\n\n# Splitting the data\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size = 0.25, random_state = 0)\n\n# Fitting the model\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n\n# Predicting\ny_pred = classifier.predict(X_test)\nprint(y_pred)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to classify a given text into positive and negative sentiment using ML.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Data\ntexts = ['This is an amazing day!', 'I am feeling sad today.']\nlabels = [1, 0] # 1 = positive sentiment and 0 = negative sentiment\n\n# Vectorizing the texts\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(texts)\n\n# Splitting the data\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size = 0.25, random_state = 0)\n\n# Fitting the model\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n\n# Predicting\ny_pred = classifier.predict(X_test)\nprint(y_pred)"}
{"instruction": "Train a machine learning model in Python to predict the COVID-19 fatalities in a given region.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split data into features and targets\nX = data.drop(['Fatalities'], axis=1).values\ny = data['Fatalities'].values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, \n                                                    random_state=42)\n\n# Normalize data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Train machine learning model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict fatalities in given region\npredictions = model.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning model in Python to predict the COVID-19 fatalities in a given region.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split data into features and targets\nX = data.drop(['Fatalities'], axis=1).values\ny = data['Fatalities'].values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, \n                                                    random_state=42)\n\n# Normalize data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Train machine learning model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict fatalities in given region\npredictions = model.predict(X_test)"}
{"instruction": "Generate a classification model to classify spam messages using logistic regression in python.", "input": "", "output": "\"\"\"\nGenerate a classification model to classify spam messages using logistic regression in python\n\"\"\"\n\n# Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the dataset\ndataset = pd.read_csv('spam.csv')\n\n# Split the dataset into features and labels\nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Create a Logistic Regression model and train it\nlog_reg = LogisticRegression() \nlog_reg.fit(X_train, y_train)\n\n# Calculate the accuracy score\naccuracy = log_reg.score(X_test, y_test)\n\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a classification model to classify spam messages using logistic regression in python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a classification model to classify spam messages using logistic regression in python\n\"\"\"\n\n# Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the dataset\ndataset = pd.read_csv('spam.csv')\n\n# Split the dataset into features and labels\nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Create a Logistic Regression model and train it\nlog_reg = LogisticRegression() \nlog_reg.fit(X_train, y_train)\n\n# Calculate the accuracy score\naccuracy = log_reg.score(X_test, y_test)\n\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy))"}
{"instruction": "Create a neural network model in Python that classifies movie reviews as positive or negative.", "input": "", "output": "import numpy as np\n\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Embedding\nfrom keras.layers import GlobalAveragePooling1D\n\nmax_words = 1000\n\n# load dataset \n(x_train, y_train), (x_test, y_test) = \n    keras.datasets.imdb.load_data(num_words=max_words)\n\n# convert to one-hot\nx_train = sequence.pad_sequences(x_train, maxlen=max_words)\nx_test = sequence.pad_sequences(x_test, maxlen=max_words)\n\n# define the model\nmodel = Sequential()\nmodel.add(Embedding(max_words, 32))\nmodel.add(GlobalAveragePooling1D())\nmodel.add(Dense(1, activation = 'sigmoid'))\n\n# compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# fit the model\nmodel.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=128)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network model in Python that classifies movie reviews as positive or negative.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Embedding\nfrom keras.layers import GlobalAveragePooling1D\n\nmax_words = 1000\n\n# load dataset \n(x_train, y_train), (x_test, y_test) = \n    keras.datasets.imdb.load_data(num_words=max_words)\n\n# convert to one-hot\nx_train = sequence.pad_sequences(x_train, maxlen=max_words)\nx_test = sequence.pad_sequences(x_test, maxlen=max_words)\n\n# define the model\nmodel = Sequential()\nmodel.add(Embedding(max_words, 32))\nmodel.add(GlobalAveragePooling1D())\nmodel.add(Dense(1, activation = 'sigmoid'))\n\n# compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# fit the model\nmodel.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=128)"}
{"instruction": "Write a code generator in Python that takes a code base as  input and transforms it as output.", "input": "", "output": "def code_generator(code_base):\n    updated_code = []\n    lines = code_base.splitlines()\n    for line in lines:\n        # Tokenize the line\n        tokens = line.split(' ')\n\n        # Find the tokens that need to be updated\n        modified_tokens = [token for token in tokens if token.startswith('[') and token.endswith(']')]\n\n        # Replace the tokens with new ones\n        for token in modified_tokens:\n            new_token = token.replace(\"[\", \"\")\n            new_token = new_token.replace(\"]\", \"\")\n            new_token = generate_new_token()\n            line = line.replace(token, new_token)\n\n        updated_code.append(line)\n    return '\\n'.join(updated_code)\n    \n\ndef generate_new_token():\n    return \"<generated-token>\"\n\ncode_base = '''\ndef foo(): \n    x = [test]\n    y = [test2]\n    \n    return x + y\n'''\n\nprint(code_generator(code_base))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code generator in Python that takes a code base as  input and transforms it as output.\n\n### Input:\n\n\n### Output:\ndef code_generator(code_base):\n    updated_code = []\n    lines = code_base.splitlines()\n    for line in lines:\n        # Tokenize the line\n        tokens = line.split(' ')\n\n        # Find the tokens that need to be updated\n        modified_tokens = [token for token in tokens if token.startswith('[') and token.endswith(']')]\n\n        # Replace the tokens with new ones\n        for token in modified_tokens:\n            new_token = token.replace(\"[\", \"\")\n            new_token = new_token.replace(\"]\", \"\")\n            new_token = generate_new_token()\n            line = line.replace(token, new_token)\n\n        updated_code.append(line)\n    return '\\n'.join(updated_code)\n    \n\ndef generate_new_token():\n    return \"<generated-token>\"\n\ncode_base = '''\ndef foo(): \n    x = [test]\n    y = [test2]\n    \n    return x + y\n'''\n\nprint(code_generator(code_base))"}
{"instruction": "Train a Python model to classify a given text string as either positive or negative sentiment.", "input": "", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n \ndef sentiment_model(text):\n    # Read in data\n    data = pd.DataFrame([text])\n \n    # Convert text data to bag of words\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(data[0])\n \n    # Split data into train and test sets\n    labels = np.array([1, 0])\n    X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(),\n                                                        labels,\n                                                        test_size=0.1, \n                                                        random_state=42)\n \n    # Fit Naive Bayes model\n    clf = MultinomialNB()\n    clf.fit(X_train, y_train)\n \n    # Make predictions\n    return clf.predict(X_test)\n\nif __name__ == '__main__':\n    text = \"<PUT INPUT HERE>\"\n    print(sentiment_model(text))", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a Python model to classify a given text string as either positive or negative sentiment.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n \ndef sentiment_model(text):\n    # Read in data\n    data = pd.DataFrame([text])\n \n    # Convert text data to bag of words\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(data[0])\n \n    # Split data into train and test sets\n    labels = np.array([1, 0])\n    X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(),\n                                                        labels,\n                                                        test_size=0.1, \n                                                        random_state=42)\n \n    # Fit Naive Bayes model\n    clf = MultinomialNB()\n    clf.fit(X_train, y_train)\n \n    # Make predictions\n    return clf.predict(X_test)\n\nif __name__ == '__main__':\n    text = \"<PUT INPUT HERE>\"\n    print(sentiment_model(text))"}
{"instruction": "Create a step by step tutorial for using a for loop to print the elements of a list in Python.", "input": "", "output": "This tutorial will teach you how to use a for-loop to print the elements of a given list in Python.\n\nStep 1: Initialize your loop\nStart by initializing a loop to loop through the elements of the list. This can be done by using the for-loop keyword in Python followed by the name of the variable you will use to represent the element of the list followed by the keyword in and the name of the list you want to loop through.\n\nFor example, if you want to loop through the elements of the list called ‘mylist’, you would write:\n\nfor element in mylist:\n\nStep 2: Print the element\nInside the loop, use the print() function to print the current element. The print() function takes as argument the element of the list, which you can refer to with the variable you defined in Step 1.\n\nFor example, if the name of the variable you defined in Step 1 was ‘element’, you would write:\n\nprint(element)\n\nStep 3: Terminate the loop\nAfter you’ve printed all the elements, you should terminate the loop. To do this, you can use the keyword break. By using break, you can tell the loop to stop looping once it has reached the last element of the list.\n\nFor example, you can write:\n\nbreak\n\nThat’s it! This is how you use a for-loop to print the elements of a given list in Python.", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a step by step tutorial for using a for loop to print the elements of a list in Python.\n\n### Input:\n\n\n### Output:\nThis tutorial will teach you how to use a for-loop to print the elements of a given list in Python.\n\nStep 1: Initialize your loop\nStart by initializing a loop to loop through the elements of the list. This can be done by using the for-loop keyword in Python followed by the name of the variable you will use to represent the element of the list followed by the keyword in and the name of the list you want to loop through.\n\nFor example, if you want to loop through the elements of the list called ‘mylist’, you would write:\n\nfor element in mylist:\n\nStep 2: Print the element\nInside the loop, use the print() function to print the current element. The print() function takes as argument the element of the list, which you can refer to with the variable you defined in Step 1.\n\nFor example, if the name of the variable you defined in Step 1 was ‘element’, you would write:\n\nprint(element)\n\nStep 3: Terminate the loop\nAfter you’ve printed all the elements, you should terminate the loop. To do this, you can use the keyword break. By using break, you can tell the loop to stop looping once it has reached the last element of the list.\n\nFor example, you can write:\n\nbreak\n\nThat’s it! This is how you use a for-loop to print the elements of a given list in Python."}
{"instruction": "Generate a Python code to optimize a deep learning model using the Adam optimization algorithm.", "input": "", "output": "# import libraries\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(10, input_dim=1, activation='relu'))\nmodel.add(Dense(12, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# fit the model\nmodel.fit(x, y, epochs=100, batch_size=32)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to optimize a deep learning model using the Adam optimization algorithm.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(10, input_dim=1, activation='relu'))\nmodel.add(Dense(12, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# fit the model\nmodel.fit(x, y, epochs=100, batch_size=32)"}
{"instruction": "Implement an algorithm in Python to find the longest palindromic substring from a given string.", "input": "", "output": "def longest_palindromic_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if is_palindrome(substr) and len(substr) > len(longest):\n                longest = substr\n    return longest\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Find the longest palindromic substring in \"cabbad\"\nlongest = longest_palindromic_substring(\"cabbad\")\nprint(longest)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to find the longest palindromic substring from a given string.\n\n### Input:\n\n\n### Output:\ndef longest_palindromic_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if is_palindrome(substr) and len(substr) > len(longest):\n                longest = substr\n    return longest\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Find the longest palindromic substring in \"cabbad\"\nlongest = longest_palindromic_substring(\"cabbad\")\nprint(longest)"}
{"instruction": "Read a given time-series dataset in Python and build a forecast model to predict future values.", "input": "", "output": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndf = pd.read_csv('data.csv')\n\n# Split data into train and test sets\nX_train = df.loc[:2000, ['time']].values\ny_train = df.loc[:2000, ['value']].values\nX_test = df.loc[2000:, ['time']].values\ny_test = df.loc[2000:, ['value']].values\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict values\npredictions = model.predict(X_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRead a given time-series dataset in Python and build a forecast model to predict future values.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndf = pd.read_csv('data.csv')\n\n# Split data into train and test sets\nX_train = df.loc[:2000, ['time']].values\ny_train = df.loc[:2000, ['value']].values\nX_test = df.loc[2000:, ['time']].values\ny_test = df.loc[2000:, ['value']].values\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict values\npredictions = model.predict(X_test)"}
{"instruction": "Create a Python class that can scrape a given website and return data as a list of dictionaries", "input": "", "output": "class WebsiteScraper(object):\n    def __init__(self, url):\n        self.url = url\n\n    def scrapedata(self):\n        response = requests.get(self.url)\n        soup = BeautifulSoup(response.text)\n        scraped_list = []\n        for item in soup.find_all('div'):\n            data = {\n                'name': item.get('title'),\n                'value': item.get_text()\n            }\n            scraped_list.append(data)\n        return scraped_list", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that can scrape a given website and return data as a list of dictionaries\n\n### Input:\n\n\n### Output:\nclass WebsiteScraper(object):\n    def __init__(self, url):\n        self.url = url\n\n    def scrapedata(self):\n        response = requests.get(self.url)\n        soup = BeautifulSoup(response.text)\n        scraped_list = []\n        for item in soup.find_all('div'):\n            data = {\n                'name': item.get('title'),\n                'value': item.get_text()\n            }\n            scraped_list.append(data)\n        return scraped_list"}
{"instruction": "Write a generic function in Python to sort a list of dictionaries based on multiple parameters.", "input": "", "output": "def multi_sort(lst, keys): \n    # lst is a list of dictionaries\n    # keys is a list containing the keys to sort on\n    split_list = [item[k] for k in keys] \n    lst.sort(key = lambda x:split_list) \n    return lst \n\n# Example:\nmy_list = [{\"name\": \"John\", \"age\": 24}, \n           {\"name\": \"Chris\", \"age\": 25},\n           {\"name\": \"John\", \"age\": 20}] \nkeys = [\"name\", \"age\"]\n  \nmulti_sort(my_list, keys)\n\n# Output:\n[{'name': 'Chris', 'age': 25}, \n {'name': 'John', 'age': 20}, \n {'name': 'John', 'age': 24}]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a generic function in Python to sort a list of dictionaries based on multiple parameters.\n\n### Input:\n\n\n### Output:\ndef multi_sort(lst, keys): \n    # lst is a list of dictionaries\n    # keys is a list containing the keys to sort on\n    split_list = [item[k] for k in keys] \n    lst.sort(key = lambda x:split_list) \n    return lst \n\n# Example:\nmy_list = [{\"name\": \"John\", \"age\": 24}, \n           {\"name\": \"Chris\", \"age\": 25},\n           {\"name\": \"John\", \"age\": 20}] \nkeys = [\"name\", \"age\"]\n  \nmulti_sort(my_list, keys)\n\n# Output:\n[{'name': 'Chris', 'age': 25}, \n {'name': 'John', 'age': 20}, \n {'name': 'John', 'age': 24}]"}
{"instruction": "Develop an HTTP API in Python to retrieve the top 10 latest news articles from a given website.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\ndef get_latest_articles(url):\n    r = requests.get(url)\n    html = r.text\n    soup = BeautifulSoup(html, \"html.parser\")\n    articles = soup.find_all('article')\n    latest_articles = []\n    for article in articles:\n        pub_date = article.find('time')['datetime']\n        if (datetime.now() - datetime.fromisoformat(pub_date)).total_seconds() < 1814400:\n            latest_articles.append(article.text)\n    return latest_articles[: 10]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an HTTP API in Python to retrieve the top 10 latest news articles from a given website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\ndef get_latest_articles(url):\n    r = requests.get(url)\n    html = r.text\n    soup = BeautifulSoup(html, \"html.parser\")\n    articles = soup.find_all('article')\n    latest_articles = []\n    for article in articles:\n        pub_date = article.find('time')['datetime']\n        if (datetime.now() - datetime.fromisoformat(pub_date)).total_seconds() < 1814400:\n            latest_articles.append(article.text)\n    return latest_articles[: 10]"}
{"instruction": "Create an algorithm in Python to optimize an objective function subject to various constraints.", "input": "", "output": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    return np.sum(np.power(x,2))\n\ndef constraint1(x):\n    return x[0] * x[1] * x[2] * x[3] - 25.0\n\ndef constraint2(x):\n    sum_sq = 40\n    for i in range(4):\n        sum_sq = sum_sq - np.power(x[i],2)\n    return sum_sq\n\nx0=[1,4,3,1]\nb = (1.0,5.0)\nbnds = (b, b, b, b)\n\ncon1 = {'type': 'ineq', 'fun': constraint1} \ncon2 = {'type': 'eq', 'fun': constraint2}\n\ncons = [con1,con2]\n\nsolution = minimize(objective,x0,method='SLSQP',bounds=bnds,constraints=cons)\nprint(solution)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to optimize an objective function subject to various constraints.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    return np.sum(np.power(x,2))\n\ndef constraint1(x):\n    return x[0] * x[1] * x[2] * x[3] - 25.0\n\ndef constraint2(x):\n    sum_sq = 40\n    for i in range(4):\n        sum_sq = sum_sq - np.power(x[i],2)\n    return sum_sq\n\nx0=[1,4,3,1]\nb = (1.0,5.0)\nbnds = (b, b, b, b)\n\ncon1 = {'type': 'ineq', 'fun': constraint1} \ncon2 = {'type': 'eq', 'fun': constraint2}\n\ncons = [con1,con2]\n\nsolution = minimize(objective,x0,method='SLSQP',bounds=bnds,constraints=cons)\nprint(solution)"}
{"instruction": "Create a python program to ask the user to enter three numbers and add the two smallest of them", "input": "", "output": "# Take three numbers from the user \nNum1 = int(input(\"Enter first number: \"))\nNum2 = int(input(\"Enter second number: \"))\nNum3 = int(input(\"Enter third number: \"))\n\n# Find the two smallest numbers \ndef two_smallest_nums(Num1, Num2, Num3):\n  smallest_num = min(Num1, Num2, Num3)\n  mid_num = max( min( Num1, Num2 ), min( Num2, Num3 ) )\n  largest_num = max(Num1, Num2, Num3)\n  \n  # Add the two smallest numbers\n  result = smallest_num + mid_num\n  return result\n\nsum_result = two_smallest_nums(Num1, Num2, Num3)\nprint(\"sum of two smallest numbers = \", sum_result)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to ask the user to enter three numbers and add the two smallest of them\n\n### Input:\n\n\n### Output:\n# Take three numbers from the user \nNum1 = int(input(\"Enter first number: \"))\nNum2 = int(input(\"Enter second number: \"))\nNum3 = int(input(\"Enter third number: \"))\n\n# Find the two smallest numbers \ndef two_smallest_nums(Num1, Num2, Num3):\n  smallest_num = min(Num1, Num2, Num3)\n  mid_num = max( min( Num1, Num2 ), min( Num2, Num3 ) )\n  largest_num = max(Num1, Num2, Num3)\n  \n  # Add the two smallest numbers\n  result = smallest_num + mid_num\n  return result\n\nsum_result = two_smallest_nums(Num1, Num2, Num3)\nprint(\"sum of two smallest numbers = \", sum_result)"}
{"instruction": "Generate a Python program that performs an edit distance calculation using dynamic programming.", "input": "", "output": "def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    edit_table = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                edit_table[i][j] = j\n            elif j == 0: \n                edit_table[i][j] = i\n            elif str1[i-1] == str2[j-1]: \n                edit_table[i][j] = edit_table[i-1][j-1] \n            else: \n                edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) \n  \n    return edit_table[m][n]", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that performs an edit distance calculation using dynamic programming.\n\n### Input:\n\n\n### Output:\ndef edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    edit_table = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                edit_table[i][j] = j\n            elif j == 0: \n                edit_table[i][j] = i\n            elif str1[i-1] == str2[j-1]: \n                edit_table[i][j] = edit_table[i-1][j-1] \n            else: \n                edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) \n  \n    return edit_table[m][n]"}
{"instruction": "Create a Python program to translate a text from English to Spanish using Google Translate API.", "input": "", "output": "import requests\nimport json\n \n# API key\nAPI_KEY = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n \n# API URL\nurl = 'https://translation.googleapis.com/language/translate/v2?key=' + API_KEY\n \n# Text\ntext = \"Good morning!\"\n \n# Language pair (English to Spanish)\nlangpair = 'en|es'\n \n# Form data\ndata = {'q': text, 'target': langpair}\n \n# Make HTTP request\nresponse = requests.post(url, data)\n \n# Parse JSON and get the translated text\nresponse_json = response.json()\ntranslation = response_json['data']['translations'][0]['translatedText']\n \n# Print translation\nprint(translation)\n# Morning!", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to translate a text from English to Spanish using Google Translate API.\n\n### Input:\n\n\n### Output:\nimport requests\nimport json\n \n# API key\nAPI_KEY = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n \n# API URL\nurl = 'https://translation.googleapis.com/language/translate/v2?key=' + API_KEY\n \n# Text\ntext = \"Good morning!\"\n \n# Language pair (English to Spanish)\nlangpair = 'en|es'\n \n# Form data\ndata = {'q': text, 'target': langpair}\n \n# Make HTTP request\nresponse = requests.post(url, data)\n \n# Parse JSON and get the translated text\nresponse_json = response.json()\ntranslation = response_json['data']['translations'][0]['translatedText']\n \n# Print translation\nprint(translation)\n# Morning!"}
{"instruction": "Design a Python script to automatically fetch and store new tweets from a given Twitter handle.", "input": "", "output": "import tweepy\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initializing the API\napi = tweepy.API(auth)\n \n#Fetching tweets from the given Twitter handle\ntweets = api.user_timeline(screen_name='<Twitter handle>', count=200, include_rts=False, tweet_mode=\"extended\")\n \n# Storing the tweets in a list\ntweet_list = []\nfor tweet in tweets:\n tweet_list.append(tweet.full_text)\n\n# Saving the tweet list as a file\nwith open('data.txt', 'w') as f:\n for item in tweet_list:\n f.write(\"%s\\n\" % item)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to automatically fetch and store new tweets from a given Twitter handle.\n\n### Input:\n\n\n### Output:\nimport tweepy\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initializing the API\napi = tweepy.API(auth)\n \n#Fetching tweets from the given Twitter handle\ntweets = api.user_timeline(screen_name='<Twitter handle>', count=200, include_rts=False, tweet_mode=\"extended\")\n \n# Storing the tweets in a list\ntweet_list = []\nfor tweet in tweets:\n tweet_list.append(tweet.full_text)\n\n# Saving the tweet list as a file\nwith open('data.txt', 'w') as f:\n for item in tweet_list:\n f.write(\"%s\\n\" % item)"}
{"instruction": "Write a Python student management system to allow teachers to  add, update and delete students.", "input": "", "output": "class Student:\n    def __init__(self, name, age, gender, course, contact_details):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.course = course\n        self.contact_details = contact_details\n        self.email, self.phone = self.contact_details.split(\"-\")\n\n    def add_student(self):\n        # add the student details to database\n        pass\n    \n    def update_student(self):\n        # update the student details in database\n        pass\n    \n    def delete_student(self):\n        # delete the student entry from database\n        pass", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python student management system to allow teachers to  add, update and delete students.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age, gender, course, contact_details):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.course = course\n        self.contact_details = contact_details\n        self.email, self.phone = self.contact_details.split(\"-\")\n\n    def add_student(self):\n        # add the student details to database\n        pass\n    \n    def update_student(self):\n        # update the student details in database\n        pass\n    \n    def delete_student(self):\n        # delete the student entry from database\n        pass"}
{"instruction": "Generate a web service in Python Flask to provide the weather data for a given date and region.", "input": "", "output": "# Import packages\nfrom flask import Flask, jsonify, request \nimport requests\n\n# Create Flask app \napp = Flask(__name__) \n\n# Make a GET request to fetch weather data for a given date and region \n@app.route('/weather', methods=['GET'])\n\ndef get_weather_data(): \n    region = request.args.get('region') \n    date = request.args.get('date') \n    url = 'http://api.openweathermap.org/data/2.5/forecast?q='+region+'&appid= YOUR_API_KEY'+'&date='+date \n    data = requests.get(url).json()\n\n    return jsonify(data)\n\nif __name__ == '__main__': \n app.run(host='0.0.0.0', port=8000, debug = True)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a web service in Python Flask to provide the weather data for a given date and region.\n\n### Input:\n\n\n### Output:\n# Import packages\nfrom flask import Flask, jsonify, request \nimport requests\n\n# Create Flask app \napp = Flask(__name__) \n\n# Make a GET request to fetch weather data for a given date and region \n@app.route('/weather', methods=['GET'])\n\ndef get_weather_data(): \n    region = request.args.get('region') \n    date = request.args.get('date') \n    url = 'http://api.openweathermap.org/data/2.5/forecast?q='+region+'&appid= YOUR_API_KEY'+'&date='+date \n    data = requests.get(url).json()\n\n    return jsonify(data)\n\nif __name__ == '__main__': \n app.run(host='0.0.0.0', port=8000, debug = True)"}
{"instruction": "Develop a machine learning model in Python to detect the presence of pneumonia in chest X-rays.", "input": "", "output": "from tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(2, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop',metrics=['accuracy'])\nmodel.fit(...)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to detect the presence of pneumonia in chest X-rays.\n\n### Input:\n\n\n### Output:\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(2, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop',metrics=['accuracy'])\nmodel.fit(...)"}
{"instruction": "Design a program that takes two strings and determines the number of common characters in them.", "input": "", "output": "# Python Program to find common characters between two Strings \ndef commonCharacters(s1, s2): \n    # make hashmap for both string \n    hmap_s1 = [0] * NO_OF_CHARS \n    hmap_s2 = [0] * NO_OF_CHARS \n  \n    # count frequency of each character \n    # in first string \n    for i in s1: \n        hmap_s1[ord(i)] += 1\n  \n    # count frequency of each character \n    # in second string \n    for i in s2: \n        hmap_s2[ord(i)] += 1\n  \n    # traverse hashmap and count common \n    # characters \n    count = 0\n    for i in range(NO_OF_CHARS): \n        count += (min(hmap_s1[i], hmap_s2[i])) \n  \n    return count", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that takes two strings and determines the number of common characters in them.\n\n### Input:\n\n\n### Output:\n# Python Program to find common characters between two Strings \ndef commonCharacters(s1, s2): \n    # make hashmap for both string \n    hmap_s1 = [0] * NO_OF_CHARS \n    hmap_s2 = [0] * NO_OF_CHARS \n  \n    # count frequency of each character \n    # in first string \n    for i in s1: \n        hmap_s1[ord(i)] += 1\n  \n    # count frequency of each character \n    # in second string \n    for i in s2: \n        hmap_s2[ord(i)] += 1\n  \n    # traverse hashmap and count common \n    # characters \n    count = 0\n    for i in range(NO_OF_CHARS): \n        count += (min(hmap_s1[i], hmap_s2[i])) \n  \n    return count"}
{"instruction": "Construct a Python program to classify a given text using a Multinomial Naive Bayes classifier.", "input": "", "output": "import json\nimport pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# load the training data\nwith open(\"training_data.json\") as f:\n    training_data = json.load(f)\n    \n# create a dataframe from the training data\ndf = pd.DataFrame(training_data)\n\n# create count vectorizer \nvec = CountVectorizer()\nX = vec.fit_transform(df[\"text\"])\ny = df[\"class\"]\n\n# train the model\nclf = MultinomialNB()\nclf.fit(X, y)\n\n# predict the class of the text\ntext = \"this is a sample text\"\nx = vec.transform([text]) # transform the text into counts\nclf.predict(x)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to classify a given text using a Multinomial Naive Bayes classifier.\n\n### Input:\n\n\n### Output:\nimport json\nimport pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# load the training data\nwith open(\"training_data.json\") as f:\n    training_data = json.load(f)\n    \n# create a dataframe from the training data\ndf = pd.DataFrame(training_data)\n\n# create count vectorizer \nvec = CountVectorizer()\nX = vec.fit_transform(df[\"text\"])\ny = df[\"class\"]\n\n# train the model\nclf = MultinomialNB()\nclf.fit(X, y)\n\n# predict the class of the text\ntext = \"this is a sample text\"\nx = vec.transform([text]) # transform the text into counts\nclf.predict(x)"}
{"instruction": "Develop a Python script that connects to a MySQL database to retrieve certain data information.", "input": "", "output": "\"\"\"\nDevelop a Python script that connects to a MySQL database to retrieve certain data information\n\n\"\"\"\nimport pymysql \n\n# Establish a connection to a MySQL database\nconn = pymysql.connect(\n    host='localhost', \n    user='username', \n    password='password', \n    db='dbname',\n    charset='utf8mb4',\n    cursorclass=pymysql.cursors.DictCursor\n)\n\n# Create and execute a MySQL query \nsql = 'SELECT * FROM table WHERE condition=value'\ncur = conn.cursor()\ncur.execute(sql)\n\n# Retrieve results from the query\nresult = cur.fetchall()\n\n# Close the cursor and connection before exiting the script\ncur.close()\nconn.close()", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script that connects to a MySQL database to retrieve certain data information.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDevelop a Python script that connects to a MySQL database to retrieve certain data information\n\n\"\"\"\nimport pymysql \n\n# Establish a connection to a MySQL database\nconn = pymysql.connect(\n    host='localhost', \n    user='username', \n    password='password', \n    db='dbname',\n    charset='utf8mb4',\n    cursorclass=pymysql.cursors.DictCursor\n)\n\n# Create and execute a MySQL query \nsql = 'SELECT * FROM table WHERE condition=value'\ncur = conn.cursor()\ncur.execute(sql)\n\n# Retrieve results from the query\nresult = cur.fetchall()\n\n# Close the cursor and connection before exiting the script\ncur.close()\nconn.close()"}
{"instruction": "Generate a Python program to find the longest increasing subsequence in a given list of numbers", "input": "", "output": "def find_longest_increasing_subsequence(array):\n    n = len(array)\n    Length = [1] * n\n    SequenceArray = [None] * n\n    for index1 in range(n):\n        for index2 in range(index1):\n            if array[index2] < array[index1] and Length[index2] >= Length[index1]:\n                Length[index1] = Length[index2] + 1\n                SequenceArray[index1] = index2\n\n    maxIndex = Length.index(max(Length))\n    SubsequenceArray = [array[maxIndex]]\n    while SequenceArray[maxIndex] is not None:\n        maxIndex = SequenceArray[maxIndex]\n        SubsequenceArray.append(array[maxIndex])\n    SubsequenceArray.reverse()\n    return SubsequenceArray", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find the longest increasing subsequence in a given list of numbers\n\n### Input:\n\n\n### Output:\ndef find_longest_increasing_subsequence(array):\n    n = len(array)\n    Length = [1] * n\n    SequenceArray = [None] * n\n    for index1 in range(n):\n        for index2 in range(index1):\n            if array[index2] < array[index1] and Length[index2] >= Length[index1]:\n                Length[index1] = Length[index2] + 1\n                SequenceArray[index1] = index2\n\n    maxIndex = Length.index(max(Length))\n    SubsequenceArray = [array[maxIndex]]\n    while SequenceArray[maxIndex] is not None:\n        maxIndex = SequenceArray[maxIndex]\n        SubsequenceArray.append(array[maxIndex])\n    SubsequenceArray.reverse()\n    return SubsequenceArray"}
{"instruction": "Design a python program to find the longest substring in a string with no repeating characters.", "input": "", "output": "def longest_substring(string):\n    # Keep track of the longest substring\n    longest_substring = \"\"\n    start_index = 0\n  \n    # Iterate over each letter in the string\n    for current_index in range(len(string)):\n        # Check if the current letter has occurred before in the substring\n        if string[current_index] in string[start_index:current_index]:\n            # If so, the previous substring is no longer valid\n            start_index = current_index\n        # Check if the current substring is longer than the longest\n        longest_substring = max(longest_substring, string[start_index:current_index+1], key=len)\n  \n    return longest_substring", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to find the longest substring in a string with no repeating characters.\n\n### Input:\n\n\n### Output:\ndef longest_substring(string):\n    # Keep track of the longest substring\n    longest_substring = \"\"\n    start_index = 0\n  \n    # Iterate over each letter in the string\n    for current_index in range(len(string)):\n        # Check if the current letter has occurred before in the substring\n        if string[current_index] in string[start_index:current_index]:\n            # If so, the previous substring is no longer valid\n            start_index = current_index\n        # Check if the current substring is longer than the longest\n        longest_substring = max(longest_substring, string[start_index:current_index+1], key=len)\n  \n    return longest_substring"}
{"instruction": "Create a machine learning model in Python to classify emails into spam and non-spam categories.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Read the dataset\ndata = pd.read_csv('YOUR_DATASET.csv')\n\n#Split dataset into train & test sets\ntrain_data, test_data = train_test_split(data,test_size=0.2)\n\n#Vectorizing the words in the dataset for training and testing\nvectorizer = CountVectorizer(stop_words = 'english',lowercase = True)\n\n# Creating a document-term matrix\nx_train = vectorizer.fit_transform(train_data['TEXT'])\nx_test = vectorizer.transform(test_data['TEXT'])\n\n#Creating the model\nnb_model = MultinomialNB()\n \n# Training the model\nnb_model.fit(x_train, train_data['Spam/Non-Spam'])\n \n# Predicting the outcomes of the test data\npredictions = nb_model.predict(x_test)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to classify emails into spam and non-spam categories.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Read the dataset\ndata = pd.read_csv('YOUR_DATASET.csv')\n\n#Split dataset into train & test sets\ntrain_data, test_data = train_test_split(data,test_size=0.2)\n\n#Vectorizing the words in the dataset for training and testing\nvectorizer = CountVectorizer(stop_words = 'english',lowercase = True)\n\n# Creating a document-term matrix\nx_train = vectorizer.fit_transform(train_data['TEXT'])\nx_test = vectorizer.transform(test_data['TEXT'])\n\n#Creating the model\nnb_model = MultinomialNB()\n \n# Training the model\nnb_model.fit(x_train, train_data['Spam/Non-Spam'])\n \n# Predicting the outcomes of the test data\npredictions = nb_model.predict(x_test)"}
{"instruction": "Optimize a Python script to find all prime numbers between 1 to 100 using Sieve of Eratosthenes.", "input": "", "output": "def sieve(n):\n    prime = [True] * (n + 1) \n    p = 2\n    while (p * p <= n): \n  \n        if prime[p] == True:  \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    for p in range(2, n + 1): \n        if prime[p]: \n            print(p, end=' ') \n  \n# Driver Code \nif __name__ == \"__main__\": \n    n = 100\n    print(\"Following are the primes smaller than or equal to\", n) \n    sieve(n)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python script to find all prime numbers between 1 to 100 using Sieve of Eratosthenes.\n\n### Input:\n\n\n### Output:\ndef sieve(n):\n    prime = [True] * (n + 1) \n    p = 2\n    while (p * p <= n): \n  \n        if prime[p] == True:  \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n  \n    for p in range(2, n + 1): \n        if prime[p]: \n            print(p, end=' ') \n  \n# Driver Code \nif __name__ == \"__main__\": \n    n = 100\n    print(\"Following are the primes smaller than or equal to\", n) \n    sieve(n)"}
{"instruction": "Design a program in Python that will determine the closeness of a given color to a target color.", "input": "", "output": "import colorsys\n\ndef get_closeness_to_target(source_rgb, target_rgb):\n    \"\"\"\n    Compute the closeness of a given color to a target color\n    \"\"\"\n    source_hls = colorsys.rgb_to_hls(*source_rgb)\n    target_hls = colorsys.rgb_to_hls(*target_rgb)\n\n    # Compute Euclidean distance between the two color's attributes\n    h_dist = (source_hls[0] - target_hls[0])**2\n    l_dist = (source_hls[1] - target_hls[1])**2\n    s_dist = (source_hls[2] - target_hls[2])**2\n\n    closeness = (h_dist + l_dist + s_dist)**0.5\n    return closeness", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that will determine the closeness of a given color to a target color.\n\n### Input:\n\n\n### Output:\nimport colorsys\n\ndef get_closeness_to_target(source_rgb, target_rgb):\n    \"\"\"\n    Compute the closeness of a given color to a target color\n    \"\"\"\n    source_hls = colorsys.rgb_to_hls(*source_rgb)\n    target_hls = colorsys.rgb_to_hls(*target_rgb)\n\n    # Compute Euclidean distance between the two color's attributes\n    h_dist = (source_hls[0] - target_hls[0])**2\n    l_dist = (source_hls[1] - target_hls[1])**2\n    s_dist = (source_hls[2] - target_hls[2])**2\n\n    closeness = (h_dist + l_dist + s_dist)**0.5\n    return closeness"}
{"instruction": "Create a neural network model in Python to classify a large data set with five distinct classes.", "input": "", "output": "# import libraries\nimport tensorflow as tf\nfrom tensorflow.keras import models\nfrom tensorflow.keras import layers\n\n# define the model\nmodel = models.Sequential()\nmodel.add(layers.Dense(units=64, activation='relu', input_dim=5)) \nmodel.add(layers.Dense(units=32, activation='relu'))\nmodel.add(layers.Dense(units=16, activation='relu')) \nmodel.add(layers.Dense(units=5, activation='softmax'))\n\n# compile and fit the model\nmodel.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=50, batch_size=32)", "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network model in Python to classify a large data set with five distinct classes.\n\n### Input:\n\n\n### Output:\n# import libraries\nimport tensorflow as tf\nfrom tensorflow.keras import models\nfrom tensorflow.keras import layers\n\n# define the model\nmodel = models.Sequential()\nmodel.add(layers.Dense(units=64, activation='relu', input_dim=5)) \nmodel.add(layers.Dense(units=32, activation='relu'))\nmodel.add(layers.Dense(units=16, activation='relu')) \nmodel.add(layers.Dense(units=5, activation='softmax'))\n\n# compile and fit the model\nmodel.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=50, batch_size=32)"}
{"instruction": "Write a function to find the longest chain which can be formed from the given set of pairs.", "input": "", "output": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"}
{"instruction": "Write a python function to find the first repeated character in a given string.", "input": "", "output": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""}
{"instruction": "Write a function to get a lucid number smaller than or equal to n.", "input": "", "output": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"}
{"instruction": "Write a function to reverse words in a given string.", "input": "", "output": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"}
{"instruction": "Write a function to check if the given integer is a prime number.", "input": "", "output": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"}
{"instruction": "Write a function to convert degrees to radians.", "input": "", "output": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"}
{"instruction": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "input": "", "output": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"}
{"instruction": "Write a python function to find nth bell number.", "input": "", "output": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "}
{"instruction": "Write a python function to find minimum possible value for the given periodic function.", "input": "", "output": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"}
{"instruction": "Write a python function to remove the k'th element from a given list.", "input": "", "output": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"}
{"instruction": "Write a function to find the maximum of nth column from the given tuple list.", "input": "", "output": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "}
{"instruction": "Write a python function to merge the first and last elements separately in a list of lists.", "input": "", "output": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "}
{"instruction": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "input": "", "output": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "}
{"instruction": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "input": "", "output": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"}
{"instruction": "Write a function to find average value of the numbers in a given tuple of tuples.", "input": "", "output": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"}
{"instruction": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "input": "", "output": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "}
{"instruction": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "input": "", "output": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"}
{"instruction": "Write a function to divide two lists using map and lambda function.", "input": "", "output": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"}
{"instruction": "Write a function to move all the numbers in it to the given string.", "input": "", "output": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "}
{"instruction": "Write a function to find the largest subset where each pair is divisible.", "input": "", "output": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"}
{"instruction": "Write a function to increment the numeric values in the given strings by k.", "input": "", "output": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "}
{"instruction": "Write a function to find the median of two sorted arrays of same size.", "input": "", "output": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"}
{"instruction": "Write a function to find the n-th power of individual elements in a list using lambda function.", "input": "", "output": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"}
{"instruction": "Write a python function to convert the given string to upper case.", "input": "", "output": "def is_upper(string):\r\n  return (string.upper())"}
{"instruction": "Write a python function to interchange first and last elements in a given list.", "input": "", "output": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "}
{"instruction": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "input": "", "output": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "}
{"instruction": "Write a python function to find the smallest missing number from the given array.", "input": "", "output": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "}
{"instruction": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "input": "", "output": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"}
{"instruction": "Write a python function to find even numbers from a mixed list.", "input": "", "output": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"}
{"instruction": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "input": "", "output": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "}
{"instruction": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "input": "", "output": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"}
{"instruction": "Write a python function to move all zeroes to the end of the given list.", "input": "", "output": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"}
{"instruction": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "input": "", "output": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "}
{"instruction": "Write a python function to find the sum of fourth power of first n even natural numbers.", "input": "", "output": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "}
{"instruction": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "input": "", "output": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"}
{"instruction": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "input": "", "output": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "}
{"instruction": "Write a function to check whether the given amount has no profit and no loss", "input": "", "output": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Write a function to calculate wind chill index.", "input": "", "output": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"}
{"instruction": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "input": "", "output": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"}
{"instruction": "Write a function to remove the parenthesis area in a string.", "input": "", "output": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"}
{"instruction": "Write a function to find the nth nonagonal number.", "input": "", "output": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "}
{"instruction": "Write a function to remove similar rows from the given tuple matrix.", "input": "", "output": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "}
{"instruction": "Write a function that matches a word containing 'z', not at the start or end of the word.", "input": "", "output": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Write a python function to reverse an array upto a given position.", "input": "", "output": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "}
{"instruction": "Write a function to find the product of it’s kth index in the given tuples.", "input": "", "output": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "}
{"instruction": "Write a python function to count number of cubes of size k in a cube of size n.", "input": "", "output": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"}
{"instruction": "Write a function to split a string at uppercase letters.", "input": "", "output": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"}
{"instruction": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "input": "", "output": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"}
{"instruction": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "input": "", "output": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "}
{"instruction": "Write a python function to check whether the given two arrays are equal or not.", "input": "", "output": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"}
{"instruction": "Write a function to check if one tuple is a subset of another tuple.", "input": "", "output": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "}
{"instruction": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "input": "", "output": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"}
{"instruction": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "input": "", "output": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"}
{"instruction": "Write a function to find the perimeter of a rectangle.", "input": "", "output": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"}
{"instruction": "Write a python function to find the sum of fifth power of n natural numbers.", "input": "", "output": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "}
{"instruction": "Write a python function to find the minimum sum of absolute differences of two arrays.", "input": "", "output": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"}
{"instruction": "Write a python function to find the first digit in factorial of a given number.", "input": "", "output": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "}
{"instruction": "Write a function to find the item with maximum occurrences in a given list.", "input": "", "output": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"instruction": "Write a python function to print duplicants from a list of integers.", "input": "", "output": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "}
{"instruction": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "input": "", "output": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"}
{"instruction": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "input": "", "output": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"}
{"instruction": "Write a function to sort a list in a dictionary.", "input": "", "output": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"}
{"instruction": "Write a function to find the largest possible value of k such that k modulo x is y.", "input": "", "output": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "}
{"instruction": "Write a python function to find the average of even numbers till a given even number.", "input": "", "output": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "}
{"instruction": "Write a python function to shift first element to the end of given list.", "input": "", "output": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"}
{"instruction": "Write a function to count occurrence of a character in a string.", "input": "", "output": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"}
{"instruction": "Write a python function to count number of vowels in the string.", "input": "", "output": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"}
{"instruction": "Write a python function to replace multiple occurence of character by single.", "input": "", "output": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "}
{"instruction": "Write a function to check whether the given ip address is valid or not using regex.", "input": "", "output": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "}
{"instruction": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "input": "", "output": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Write a python function to set the right most unset bit.", "input": "", "output": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "}
{"instruction": "Write a function to find maximum of three numbers.", "input": "", "output": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"}
{"instruction": "Write a python function to convert a list of multiple integers into a single integer.", "input": "", "output": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "}
{"instruction": "Write a function to remove duplicate words from a given string using collections module.", "input": "", "output": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"}
{"instruction": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "input": "", "output": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"}
{"instruction": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "input": "", "output": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"}
{"instruction": "Write a function to check if the triangle is valid or not.", "input": "", "output": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"}
{"instruction": "Write a python function to remove spaces from a given string.", "input": "", "output": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"}
{"instruction": "Write a function to access dictionary key’s element by index.", "input": "", "output": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"}
{"instruction": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "input": "", "output": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Write a python function to find the smallest prime divisor of a number.", "input": "", "output": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "}
{"instruction": "Write a function to multiply two lists using map and lambda function.", "input": "", "output": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"}
{"instruction": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "input": "", "output": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"}
{"instruction": "Write a python function to count occurences of a character in a repeated string.", "input": "", "output": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "}
{"instruction": "Write a python function to find sum of prime numbers between 1 to n.", "input": "", "output": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"}
{"instruction": "Write a function to find the frequency of each element in the given list.", "input": "", "output": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "}
{"instruction": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "input": "", "output": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"}
{"instruction": "Write a function to get the length of a complex number.", "input": "", "output": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"}
{"instruction": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "input": "", "output": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"}
{"instruction": "Write a function to multiply consecutive numbers of a given list.", "input": "", "output": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"instruction": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "input": "", "output": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"}
{"instruction": "Write a python function to find the last two digits in factorial of a given number.", "input": "", "output": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "}
{"instruction": "Write a function to remove multiple spaces in a string by using regex.", "input": "", "output": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"}
{"instruction": "Write a function to extract unique values from the given dictionary values.", "input": "", "output": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"}
{"instruction": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "input": "", "output": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"instruction": "Write a function to zip two given lists of lists.", "input": "", "output": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"}
{"instruction": "Write a function to find number of even elements in the given list using lambda function.", "input": "", "output": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"}
{"instruction": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "input": "", "output": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"}
{"instruction": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "input": "", "output": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "}
{"instruction": "Write a function to count the number of elements in a list which are within a specific range.", "input": "", "output": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"}
{"instruction": "Write a function to find the equilibrium index of the given array.", "input": "", "output": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"}
{"instruction": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "input": "", "output": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"}
{"instruction": "Write a function to check whether the given key is present in the dictionary or not.", "input": "", "output": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"}
{"instruction": "Write a function to calculate the harmonic sum of n-1.", "input": "", "output": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"}
{"instruction": "Write a function to sort a list of lists by length and value.", "input": "", "output": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"}
{"instruction": "Write a function to find whether an array is subset of another array.", "input": "", "output": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"}
{"instruction": "Write a python function to count the total set bits from 1 to n.", "input": "", "output": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "}
{"instruction": "Write a python function to convert a string to a list.", "input": "", "output": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "}
{"instruction": "Write a function to count unique keys for each value present in the tuple.", "input": "", "output": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "}
{"instruction": "Write a function to access the initial and last data of the given tuple record.", "input": "", "output": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "}
{"instruction": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "input": "", "output": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"}
{"instruction": "Write a function to remove duplicates from a list of lists.", "input": "", "output": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"}
{"instruction": "Write a function to check if the given tuple contains all valid values or not.", "input": "", "output": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "}
{"instruction": "Write a python function to count the number of distinct power of prime factor of given number.", "input": "", "output": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "}
{"instruction": "Write a function to convert the given string of integers into a tuple.", "input": "", "output": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "}
{"instruction": "Write a function to find the perimeter of a rombus.", "input": "", "output": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"}
{"instruction": "Write a function to calculate the standard deviation.", "input": "", "output": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"}
{"instruction": "Write a function to create a list taking alternate elements from another given list.", "input": "", "output": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "}
{"instruction": "Write a function that matches a string that has an a followed by zero or more b's.", "input": "", "output": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Write a function to add a dictionary to the tuple.", "input": "", "output": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "}
{"instruction": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "input": "", "output": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"}
{"instruction": "Write a function to filter the height and width of students which are stored in a dictionary.", "input": "", "output": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "}
{"instruction": "Write a function to count the same pair in two given lists using map function.", "input": "", "output": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"}
{"instruction": "Write a function to calculate the sum of all digits of the base to the specified power.", "input": "", "output": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"}
{"instruction": "Write a function to extract values between quotation marks of the given string by using regex.", "input": "", "output": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"}
{"instruction": "Write a function to multiply the adjacent elements of the given tuple.", "input": "", "output": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "}
{"instruction": "Write a function to remove all characters except letters and numbers using regex", "input": "", "output": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"}
{"instruction": "Write a function to sum elements in two lists.", "input": "", "output": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"}
{"instruction": "Write a function to add two lists using map and lambda function.", "input": "", "output": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"}
{"instruction": "Write a function to remove consecutive duplicates of a given list.", "input": "", "output": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "}
{"instruction": "Write a function to find the lateral surface area of a cone.", "input": "", "output": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"}
{"instruction": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "input": "", "output": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"}
{"instruction": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "input": "", "output": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}
{"instruction": "Write a python function to find sum of products of all possible subarrays.", "input": "", "output": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"}
{"instruction": "Write a python function to toggle bits of the number except the first and the last bit.", "input": "", "output": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "}
{"instruction": "Write a function to locate the left insertion point for a specified value in sorted order.", "input": "", "output": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"}
{"instruction": "Write a function to check whether the given string is starting with a vowel or not using regex.", "input": "", "output": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "}
{"instruction": "Write a function to calculate the geometric sum of n-1.", "input": "", "output": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"}
{"instruction": "Write a python function to find the index of smallest triangular number with n digits.", "input": "", "output": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "}
{"instruction": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "input": "", "output": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "}
{"instruction": "Write a python function to check whether all the characters are same or not.", "input": "", "output": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"}
{"instruction": "Write a function to caluclate the area of a tetrahedron.", "input": "", "output": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"}
{"instruction": "Write a function to rotate a given list by specified number of items to the right direction.", "input": "", "output": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"}
{"instruction": "Write a function to check if the given tuple has any none value or not.", "input": "", "output": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "}
{"instruction": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "input": "", "output": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"}
{"instruction": "Write a function to find area of a sector.", "input": "", "output": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"}
{"instruction": "Write a function to find the longest common subsequence for the given three string sequence.", "input": "", "output": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"}
{"instruction": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "input": "", "output": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"}
{"instruction": "Write a function to sort a given list of strings of numbers numerically.", "input": "", "output": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"}
{"instruction": "Write a function to add the given tuple to the given list.", "input": "", "output": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "}
{"instruction": "Write a function to check if the given array represents min heap or not.", "input": "", "output": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"}
{"instruction": "Write a function to find the nth jacobsthal number.", "input": "", "output": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"}
{"instruction": "Write a function to find minimum k records from tuple list.", "input": "", "output": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "}
{"instruction": "Write a function to find common index elements from three lists.", "input": "", "output": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"}
{"instruction": "Write a function to find the second smallest number in a list.", "input": "", "output": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "}
{"instruction": "Write a function that matches a string that has an a followed by zero or one 'b'.", "input": "", "output": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Write a function to count the pairs of reverse strings in the given string list.", "input": "", "output": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"}
{"instruction": "Write a function to count number of unique lists within a list.", "input": "", "output": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"instruction": "Write a function to check a decimal with a precision of 2.", "input": "", "output": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"}
{"instruction": "Write a python function to check whether an array contains only one distinct element or not.", "input": "", "output": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"}
{"instruction": "Write a function to caluclate arc length of an angle.", "input": "", "output": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"}
{"instruction": "Write a function to check whether the given month number contains 30 days or not.", "input": "", "output": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Write a python function to find the minimum difference between any two elements in a given array.", "input": "", "output": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "}
{"instruction": "Write a python function to count numeric values in a given string.", "input": "", "output": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"}
{"instruction": "Write a function to find nth polite number.", "input": "", "output": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "}
{"instruction": "Write a function to iterate over all pairs of consecutive items in a given list.", "input": "", "output": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"}
{"instruction": "Write a python function to count the number of pairs whose sum is equal to ‘sum’.", "input": "", "output": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}
{"instruction": "Write a python function to check for odd parity of a given number.", "input": "", "output": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"}
{"instruction": "Write a python function to get the difference between two lists.", "input": "", "output": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "}
{"instruction": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "input": "", "output": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "}
{"instruction": "Write a function to check if the given expression is balanced or not.", "input": "", "output": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"}
{"instruction": "Write a function to remove all the words with k length in the given string.", "input": "", "output": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "}
{"instruction": "Write a function to find the occurrence and position of the substrings within a string.", "input": "", "output": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"}
{"instruction": "Write a function to check if the string is a valid email address or not using regex.", "input": "", "output": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "}
{"instruction": "Write a python function to check whether every odd index contains odd numbers of a given list.", "input": "", "output": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"instruction": "Write a function to count those characters which have vowels as their neighbors in the given string.", "input": "", "output": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "}
{"instruction": "Write a python function to find the sum of non-repeated elements in a given array.", "input": "", "output": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"}
{"instruction": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "input": "", "output": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"}
{"instruction": "Write a function to count the number of unique lists within a list.", "input": "", "output": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"instruction": "Write a function to find the combinations of sums with tuples in the given tuple list.", "input": "", "output": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "}
{"instruction": "Write a python function to check whether the count of divisors is even or odd.", "input": "", "output": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "}
{"instruction": "Write a python function to find the sum of all odd length subarrays.", "input": "", "output": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"}
{"instruction": "Write a function to convert rgb color to hsv color.", "input": "", "output": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"}
{"instruction": "Write a function to find the product of first even and odd number of a given list.", "input": "", "output": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"}
{"instruction": "Write a function to convert tuple string to integer tuple.", "input": "", "output": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "}
{"instruction": "Write a function to locate the right insertion point for a specified value in sorted order.", "input": "", "output": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"}
{"instruction": "Write a function that matches a string that has an a followed by three 'b'.", "input": "", "output": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Write a function to create a new tuple from the given string and list.", "input": "", "output": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "}
{"instruction": "Write a function to calculate the perimeter of a regular polygon.", "input": "", "output": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"}
{"instruction": "Write a python function to check whether every even index contains even numbers of a given list.", "input": "", "output": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"instruction": "Write a function to remove the nested record from the given tuple.", "input": "", "output": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "}
{"instruction": "Write a python function to count the number of lists in a given number of lists.", "input": "", "output": "def count_list(input_list): \r\n    return len(input_list)"}
{"instruction": "Write a python function to find the last position of an element in a sorted array.", "input": "", "output": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"}
{"instruction": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "input": "", "output": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"instruction": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "input": "", "output": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"}
{"instruction": "Write function to find the sum of all items in the given dictionary.", "input": "", "output": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"}
{"instruction": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "input": "", "output": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"}
{"instruction": "Write a python function to find the sum of an array.", "input": "", "output": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "}
{"instruction": "Write a python function to left rotate the bits of a given number.", "input": "", "output": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "}
{"instruction": "Write a function to remove all whitespaces from a string.", "input": "", "output": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"}
{"instruction": "Write a python function to count the number of equal numbers from three given integers.", "input": "", "output": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"}
{"instruction": "Write a python function to count the number of rotations required to generate a sorted array.", "input": "", "output": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"}
{"instruction": "Write a python function to check whether the given number is a perfect square or not.", "input": "", "output": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"}
{"instruction": "Write a python function to check whether the product of numbers is even or not.", "input": "", "output": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"}
{"instruction": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "input": "", "output": "def max_sum_list(lists):\r\n return max(lists, key=sum)"}
{"instruction": "Write a function to find maximum run of uppercase characters in the given string.", "input": "", "output": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"}
{"instruction": "Write a python function to find the first odd number in a given list of numbers.", "input": "", "output": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"}
{"instruction": "Write a function to check if the given tuples contain the k or not.", "input": "", "output": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "}
{"instruction": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "input": "", "output": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"instruction": "Write a function to iterate over elements repeating each as many times as its count.", "input": "", "output": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"}
{"instruction": "Write a function to check if two lists of tuples are identical or not.", "input": "", "output": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "}
{"instruction": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "input": "", "output": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"}
{"instruction": "Write a function to find length of the string.", "input": "", "output": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"}
{"instruction": "Write a function to find the area of a rombus.", "input": "", "output": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"}
{"instruction": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "input": "", "output": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"}
{"instruction": "Write a function to clear the values of the given tuples.", "input": "", "output": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "}
{"instruction": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "input": "", "output": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"}
{"instruction": "Write a python function to count lower case letters in a given string.", "input": "", "output": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"}
{"instruction": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "input": "", "output": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"}
{"instruction": "Write a function to check whether the given month number contains 28 days or not.", "input": "", "output": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Write a function to merge two dictionaries into a single expression.", "input": "", "output": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"}
{"instruction": "Write a function to return true if the password is valid.", "input": "", "output": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"}
{"instruction": "Write a function to check if the given string starts with a substring using regex.", "input": "", "output": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"}
{"instruction": "Write a python function to remove even numbers from a given list.", "input": "", "output": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"}
{"instruction": "Write a python function to access multiple elements of specified index from a given list.", "input": "", "output": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"}
{"instruction": "Write a python function to find the type of triangle from the given sides.", "input": "", "output": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "}
{"instruction": "Write a function to sum a specific column of a list in a given list of lists.", "input": "", "output": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"}
{"instruction": "Write a function to count alphabets,digits and special charactes in a given string.", "input": "", "output": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "}
{"instruction": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "input": "", "output": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "}
{"instruction": "Write a function to round up a number to specific digits.", "input": "", "output": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"}
{"instruction": "Write a python function to count equal element pairs from the given array.", "input": "", "output": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "}
{"instruction": "Write a function to extract the maximum numeric value from a string by using regex.", "input": "", "output": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"}
{"instruction": "Write a function to get dictionary keys as a list.", "input": "", "output": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"}
{"instruction": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "input": "", "output": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"}
{"instruction": "Write a python function to find the slope of a line.", "input": "", "output": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "}
{"instruction": "Write a function to find length of the subarray having maximum sum.", "input": "", "output": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"}
{"instruction": "Write a python function to find the cube sum of first n odd natural numbers.", "input": "", "output": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"}
{"instruction": "Write a python function to find minimum number swaps required to make two binary strings equal.", "input": "", "output": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "}
{"instruction": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "input": "", "output": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"}
{"instruction": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "input": "", "output": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "}
{"instruction": "Write a function to count the number of inversions in the given array.", "input": "", "output": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "}
{"instruction": "Write a function to find the number which occurs for odd number of times in the given array.", "input": "", "output": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"}
{"instruction": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "input": "", "output": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"}
{"instruction": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "input": "", "output": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "}
{"instruction": "Write a python function to count the number of digits in factorial of a given number.", "input": "", "output": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "}
{"instruction": "Write a function to find the minimum number of platforms required for a railway/bus station.", "input": "", "output": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"}
{"instruction": "Write a python function to copy a list from a singleton tuple.", "input": "", "output": "def lcopy(xs):\n  return xs[:]\n"}
{"instruction": "Write a function to find the area of a trapezium.", "input": "", "output": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"}
{"instruction": "Write a python function to find sum of all prime divisors of a given number.", "input": "", "output": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "}
{"instruction": "Write a function to check if a triangle of positive area is possible with the given angles.", "input": "", "output": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"}
{"instruction": "Write a python function to find sum of inverse of divisors.", "input": "", "output": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "}
{"instruction": "Write a python function to remove negative numbers from a list.", "input": "", "output": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"}
{"instruction": "Write a python function to find sum of odd factors of a number.", "input": "", "output": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "}
{"instruction": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "input": "", "output": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"}
{"instruction": "Write a python function to check for even parity of a given number.", "input": "", "output": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"}
{"instruction": "Write a python function to find minimum adjacent swaps required to sort binary array.", "input": "", "output": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "}
{"instruction": "Write a function to list out the list of given strings individually using map function.", "input": "", "output": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "}
{"instruction": "Write a function to count number of lists in a given list of lists and square the count.", "input": "", "output": "def count_list(input_list): \r\n    return (len(input_list))**2"}
{"instruction": "Write a function to generate all sublists of a given list.", "input": "", "output": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"}
{"instruction": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "input": "", "output": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "}
{"instruction": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "input": "", "output": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"}
{"instruction": "Write a function to find the occurrences of n most common words in a given text.", "input": "", "output": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"}
{"instruction": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "input": "", "output": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "}
{"instruction": "Write a function to find palindromes in a given list of strings using lambda function.", "input": "", "output": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"}
{"instruction": "Write a function to print n-times a list using map function.", "input": "", "output": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"}
{"instruction": "Write a function to check whether the given month name contains 31 days or not.", "input": "", "output": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"}
{"instruction": "Write a python function to add a minimum number such that the sum of array becomes even.", "input": "", "output": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"}
{"instruction": "Write a python function to find the length of the last word in a given string.", "input": "", "output": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "}
{"instruction": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "input": "", "output": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"}
{"instruction": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "input": "", "output": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"}
{"instruction": "Write a python function to check whether the given strings are rotations of each other or not.", "input": "", "output": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"}
{"instruction": "Write a function to check if a nested list is a subset of another nested list.", "input": "", "output": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "}
{"instruction": "Write a function to solve the fibonacci sequence using recursion.", "input": "", "output": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"}
{"instruction": "Write a python function to check if the string is a concatenation of another string.", "input": "", "output": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"}
{"instruction": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "input": "", "output": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "}
{"instruction": "Write a python function to find lcm of two positive integers.", "input": "", "output": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"}
{"instruction": "Write a python function to sort the given string.", "input": "", "output": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "}
{"instruction": "Write a function to check if the given tuple contains only k elements.", "input": "", "output": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "}
{"instruction": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "input": "", "output": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"instruction": "Write a python function to find number of solutions in quadratic equation.", "input": "", "output": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "}
{"instruction": "Write a function to find the sum of first even and odd number of a given list.", "input": "", "output": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"}
{"instruction": "Write a function to caluclate perimeter of a parallelogram.", "input": "", "output": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"}
{"instruction": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "input": "", "output": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"}
{"instruction": "Write a python function to check whether all the bits are within a given range or not.", "input": "", "output": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"}
{"instruction": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "input": "", "output": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Write a function to add all the numbers in a list and divide it with the length of the list.", "input": "", "output": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "}
{"instruction": "Write a python function to check whether the given number is odd or not using bitwise operator.", "input": "", "output": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "}
{"instruction": "Write a function to substract the elements of the given nested tuples.", "input": "", "output": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "}
{"instruction": "Write a function to reverse each list in a given list of lists.", "input": "", "output": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "}
{"instruction": "Write a python function to find the index of an extra element present in one sorted array.", "input": "", "output": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "}
{"instruction": "Write a python function to check whether the given two numbers have same number of digits or not.", "input": "", "output": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "}
{"instruction": "Write a function to remove multiple spaces in a string.", "input": "", "output": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"}
{"instruction": "Write a python function to get the last element of each sublist.", "input": "", "output": "def Extract(lst): \r\n    return [item[-1] for item in lst] "}
{"instruction": "Write a function to convert the given string of float type into tuple.", "input": "", "output": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "}
{"instruction": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "input": "", "output": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"}
{"instruction": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "input": "", "output": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"}
{"instruction": "Write a python function to check whether the word is present in a given sentence or not.", "input": "", "output": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"}
{"instruction": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "input": "", "output": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"}
{"instruction": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "input": "", "output": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"}
{"instruction": "Write a function where a string will start with a specific number.", "input": "", "output": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Write a function to find the smallest multiple of the first n numbers.", "input": "", "output": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"}
{"instruction": "Write a function to combine two dictionaries by adding values for common keys.", "input": "", "output": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"}
{"instruction": "Write a python function to count the total unset bits from 1 to n.", "input": "", "output": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "}
{"instruction": "Write a function to return true if the given number is even else return false.", "input": "", "output": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"}
{"instruction": "Write a python function to find the sum of squares of binomial co-efficients.", "input": "", "output": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "}
{"instruction": "Write a function to extract year, month and date from a url by using regex.", "input": "", "output": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"}
{"instruction": "Write a function to print the first n lucky numbers.", "input": "", "output": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"}
{"instruction": "Write a function to find the fixed point in the given array.", "input": "", "output": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"}
{"instruction": "Write a function to find the previous palindrome of a specified number.", "input": "", "output": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"}
{"instruction": "Write a function to validate a gregorian date.", "input": "", "output": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"}
{"instruction": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "input": "", "output": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"}
{"instruction": "Write a function to find ln, m lobb number.", "input": "", "output": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"}
{"instruction": "Write a function to check for a number at the end of a string.", "input": "", "output": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"instruction": "Write a python function to check whether the given string is made up of two alternating characters or not.", "input": "", "output": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"}
{"instruction": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "input": "", "output": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "}
{"instruction": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "input": "", "output": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"}
{"instruction": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "input": "", "output": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"}
{"instruction": "Write a function to count coin change.", "input": "", "output": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "}
{"instruction": "Write a python function to multiply all items in the list.", "input": "", "output": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"}
{"instruction": "Write a function to remove all tuples with all none values in the given tuple list.", "input": "", "output": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "}
{"instruction": "Write a function to perform chunking of tuples each of size n.", "input": "", "output": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "}
{"instruction": "Write a function to find a pair with the highest product from a given array of integers.", "input": "", "output": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "}
{"instruction": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "input": "", "output": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"}
{"instruction": "Write a function to find maximum of two numbers.", "input": "", "output": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"}
{"instruction": "Write a python function to calculate the product of all the numbers of a given tuple.", "input": "", "output": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"}
{"instruction": "Write a function to find n-th rencontres number.", "input": "", "output": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"}
{"instruction": "Write a function to calculate the height of the given binary tree.", "input": "", "output": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"}
{"instruction": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "input": "", "output": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"}
{"instruction": "Write a function to count repeated items of a tuple.", "input": "", "output": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"}
{"instruction": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "input": "", "output": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"}
{"instruction": "Write a function to calculate the sum of series 1³+2³+3³+….+n³.", "input": "", "output": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"}
{"instruction": "Write a function to remove duplicate words from a given list of strings.", "input": "", "output": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"}
{"instruction": "Write a function to convert camel case string to snake case string by using regex.", "input": "", "output": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"instruction": "Write a function to find the nth delannoy number.", "input": "", "output": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"}
{"instruction": "Write a function to calculate the sum of series 1²+2²+3²+….+n².", "input": "", "output": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"}
{"instruction": "Write a function to re-arrange the given tuples based on the given ordered list.", "input": "", "output": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "}
{"instruction": "Write a function to count the most common character in a given string.", "input": "", "output": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"}
{"instruction": "Write a function to find three closest elements from three sorted arrays.", "input": "", "output": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"}
{"instruction": "Write a function to sort a list of dictionaries using lambda function.", "input": "", "output": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"}
{"instruction": "Write a function to sort the given array by using heap sort.", "input": "", "output": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"}
{"instruction": "Write a function to count the elements in a list until an element is a tuple.", "input": "", "output": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"}
{"instruction": "Write a function to check if any list element is present in the given list.", "input": "", "output": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "}
{"instruction": "Write a function to combine two given sorted lists using heapq module.", "input": "", "output": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"}
{"instruction": "Write a function to separate and print the numbers and their position of a given string.", "input": "", "output": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"}
{"instruction": "Write a function to convert the given tuples into set.", "input": "", "output": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "}
{"instruction": "Write a function to find the most common elements and their counts of a specified text.", "input": "", "output": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"}
{"instruction": "Write a python function to find the length of the shortest word.", "input": "", "output": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"}
{"instruction": "Write a function to get an item of a tuple.", "input": "", "output": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"}
{"instruction": "Write a function to sort the given tuple list basis the total digits in tuple.", "input": "", "output": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"}
{"instruction": "Write a function to display sign of the chinese zodiac for given year.", "input": "", "output": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"}
{"instruction": "Write a function to find the maximum of similar indices in two lists of tuples.", "input": "", "output": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "}
{"instruction": "Write a function to compute the value of ncr mod p.", "input": "", "output": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "}
{"instruction": "Write a python function to find the minimun number of subsets with distinct elements.", "input": "", "output": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "}
{"instruction": "Write a function that gives profit amount if the given amount has profit else return none.", "input": "", "output": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"}
{"instruction": "Write a function to find out, if the given number is abundant.", "input": "", "output": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"}
{"instruction": "Write a function to split the given string at uppercase letters by using regex.", "input": "", "output": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"}
{"instruction": "Write a python function to get the position of rightmost set bit.", "input": "", "output": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"}
{"instruction": "Write a function to convert an integer into a roman numeral.", "input": "", "output": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"}
{"instruction": "Write a python function to find the average of a list.", "input": "", "output": "def Average(lst): \r\n    return sum(lst) / len(lst) "}
{"instruction": "Write a function to solve tiling problem.", "input": "", "output": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"}
{"instruction": "Write a function to convert a roman numeral to an integer.", "input": "", "output": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"}
{"instruction": "Write a python function to find the sum of all even natural numbers within the range l and r.", "input": "", "output": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "}
{"instruction": "Write a function to calculate the discriminant value.", "input": "", "output": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"}
{"instruction": "Write a python function to check whether the length of the word is even or not.", "input": "", "output": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"}
{"instruction": "Write a function to convert camel case string to snake case string.", "input": "", "output": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"instruction": "Write a function to remove an empty tuple from a list of tuples.", "input": "", "output": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"}
{"instruction": "Write a python function to accept the strings which contains all vowels.", "input": "", "output": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "}
{"instruction": "Write a python function to find maximum possible value for the given periodic function.", "input": "", "output": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"}
{"instruction": "Write a function to join the tuples if they have similar initial elements.", "input": "", "output": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "}
{"instruction": "Write a function to find minimum of two numbers.", "input": "", "output": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"}
{"instruction": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "input": "", "output": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"}
{"instruction": "Write a function to concatenate the given two tuples to a nested tuple.", "input": "", "output": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "}
{"instruction": "Write a python function to left rotate the string.", "input": "", "output": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "}
{"instruction": "Write a function to find the minimum total path sum in the given triangle.", "input": "", "output": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"}
